/*!
 * jodit - Jodit is awesome and usefully wysiwyg editor with filebrowser
 * Author: Chupurnov <chupurnov@gmail.com> (https://xdsoft.net/)
 * Version: v3.20.4
 * Url: https://xdsoft.net/jodit/
 * License(s): MIT
 */
	
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 11399:
/***/ (function(module) {

module.exports["default"] = ["Type something","About Jodit","Jodit Editor","Jodit User's Guide","contains detailed help for using","For information about the license, please go to our website:","Buy full version","Copyright Â© XDSoft.net - Chupurnov Valeriy. All rights reserved.","Anchor","Open in new tab","Open in fullsize","Clear Formatting","Fill color or set the text color","Redo","Undo","Bold","Italic","Insert Unordered List","Insert Ordered List","Align Center","Align Justify","Align Left","Align Right","Insert Horizontal Line","Insert Image","Insert file","Insert youtube/vimeo video","Insert link","Font size","Font family","Insert format block","Normal","Heading 1","Heading 2","Heading 3","Heading 4","Quote","Code","Insert","Insert table","Decrease Indent","Increase Indent","Select Special Character","Insert Special Character","Paint format","Change mode","Margins","top","right","bottom","left","Styles","Classes","Align","Right","Center","Left","--Not Set--","Src","Title","Alternative","Link","Open link in new tab","Image","file","Advanced","Image properties","Cancel","Ok","File Browser","Error on load list","Error on load folders","Are you sure?","Enter Directory name","Create directory","type name","Drop image","Drop file","or click","Alternative text","Upload","Browse","Background","Text","Top","Middle","Bottom","Insert column before","Insert column after","Insert row above","Insert row below","Delete table","Delete row","Delete column","Empty cell","Chars: %d","Words: %d","Strike through","Underline","superscript","subscript","Cut selection","Select all","Break","Search for","Replace with","Replace","Paste","Choose Content to Paste","source","bold","italic","brush","link","undo","redo","table","image","eraser","paragraph","fontsize","video","font","about","print","underline","strikethrough","indent","outdent","fullsize","shrink","hr","ul","ol","cut","selectall","Embed code","Open link","Edit link","No follow","Unlink","Update","pencil","Eye"," URL","Edit","Horizontal align","Filter","Sort by changed","Sort by name","Sort by size","Add folder","Reset","Save","Save as ...","Resize","Crop","Width","Height","Keep Aspect Ratio","Yes","No","Remove","Select","Select %s","Vertical align","Split","Merge","Add column","Add row","License: %s","Delete","Split vertical","Split horizontal","Border","Your code is similar to HTML. Keep as HTML?","Paste as HTML","Keep","Insert as Text","Insert only Text","You can only edit your own images. Download this image on the host?","The image has been successfully uploaded to the host!","palette","There are no files","Rename","Enter new name","preview","download","Paste from clipboard","Your browser doesn't support direct access to the clipboard.","Copy selection","copy","Border radius","Show all","Apply","Please fill out this field","Please enter a web address","Default","Circle","Dot","Quadrate","Find","Find Previous","Find Next","The pasted content is coming from a Microsoft Word/Excel document. Do you want to keep the format or clean it up?","Word Paste Detected","Clean","Insert className","Press Alt for custom resizing"]

/***/ }),

/***/ 3610:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M621 1280h595v-595zm-45-45l595-595h-595v595zm1152 77v192q0 14-9 23t-23 9h-224v224q0 14-9 23t-23 9h-192q-14 0-23-9t-9-23v-224h-864q-14 0-23-9t-9-23v-864h-224q-14 0-23-9t-9-23v-192q0-14 9-23t23-9h224v-224q0-14 9-23t23-9h192q14 0 23 9t9 23v224h851l246-247q10-9 23-9t23 9q9 10 9 23t-9 23l-247 246v851h224q14 0 23 9t9 23z\"/> </svg>"

/***/ }),

/***/ 56170:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 24 24\"> <g transform=\"translate(-251.000000, -443.000000)\"> <g transform=\"translate(215.000000, 119.000000)\"/> <path d=\"M252,448 L256,448 L256,444 L252,444 L252,448 Z M257,448 L269,448 L269,446 L257,446 L257,448 Z M257,464 L269,464 L269,462 L257,462 L257,464 Z M270,444 L270,448 L274,448 L274,444 L270,444 Z M252,462 L252,466 L256,466 L256,462 L252,462 Z M270,462 L270,466 L274,466 L274,462 L270,462 Z M254,461 L256,461 L256,449 L254,449 L254,461 Z M270,461 L272,461 L272,449 L270,449 L270,461 Z\"/> </g> </svg>"

/***/ }),

/***/ 95331:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' x=\"0px\" y=\"0px\" viewBox=\"0 0 459 459\"> <g> <path d=\"M229.5,0C102,0,0,102,0,229.5S102,459,229.5,459c20.4,0,38.25-17.85,38.25-38.25c0-10.2-2.55-17.85-10.2-25.5 c-5.1-7.65-10.2-15.3-10.2-25.5c0-20.4,17.851-38.25,38.25-38.25h45.9c71.4,0,127.5-56.1,127.5-127.5C459,91.8,357,0,229.5,0z M89.25,229.5c-20.4,0-38.25-17.85-38.25-38.25S68.85,153,89.25,153s38.25,17.85,38.25,38.25S109.65,229.5,89.25,229.5z M165.75,127.5c-20.4,0-38.25-17.85-38.25-38.25S145.35,51,165.75,51S204,68.85,204,89.25S186.15,127.5,165.75,127.5z M293.25,127.5c-20.4,0-38.25-17.85-38.25-38.25S272.85,51,293.25,51s38.25,17.85,38.25,38.25S313.65,127.5,293.25,127.5z M369.75,229.5c-20.4,0-38.25-17.85-38.25-38.25S349.35,153,369.75,153S408,170.85,408,191.25S390.15,229.5,369.75,229.5z\" /> </g> </svg>"

/***/ }),

/***/ 84279:
/***/ (function(module) {

module.exports = "<svg viewBox=\"0 0 1792 1792\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M1088 1256v240q0 16-12 28t-28 12h-240q-16 0-28-12t-12-28v-240q0-16 12-28t28-12h240q16 0 28 12t12 28zm316-600q0 54-15.5 101t-35 76.5-55 59.5-57.5 43.5-61 35.5q-41 23-68.5 65t-27.5 67q0 17-12 32.5t-28 15.5h-240q-15 0-25.5-18.5t-10.5-37.5v-45q0-83 65-156.5t143-108.5q59-27 84-56t25-76q0-42-46.5-74t-107.5-32q-65 0-108 29-35 25-107 115-13 16-31 16-12 0-25-8l-164-125q-13-10-15.5-25t5.5-28q160-266 464-266 80 0 161 31t146 83 106 127.5 41 158.5z\"/> </svg>"

/***/ }),

/***/ 11257:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 128 128\" xml:space=\"preserve\"> <polygon points=\"112.4560547,23.3203125 112.4560547,75.8154297 31.4853516,75.8154297 31.4853516,61.953125 16.0131836,72.6357422 0.5410156,83.3164063 16.0131836,93.9990234 31.4853516,104.6796875 31.4853516,90.8183594 112.4560547,90.8183594 112.4560547,90.8339844 127.4589844,90.8339844 127.4589844,23.3203125\"/> </svg>"

/***/ }),

/***/ 25141:
/***/ (function(module) {

module.exports = "<svg width=\"1792\" height=\"1792\" viewBox=\"0 0 1792 1792\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M964.469 373.333H560C550.099 373.333 540.603 377.267 533.601 384.268C526.6 391.269 522.667 400.765 522.667 410.667V1406.27C522.667 1416.17 526.6 1425.67 533.601 1432.67C540.603 1439.67 550.099 1443.61 560 1443.61H1026.67C1092.75 1443.62 1157.19 1423 1210.99 1384.62C1264.79 1346.25 1305.26 1292.04 1326.77 1229.55C1348.28 1167.07 1349.74 1099.43 1330.96 1036.07C1312.18 972.716 1274.08 916.804 1221.99 876.139C1256.14 828.739 1276.53 772.834 1280.94 714.584C1285.34 656.334 1273.58 597.999 1246.95 546.006C1220.32 494.013 1179.85 450.379 1130.01 419.912C1080.17 389.445 1022.89 373.327 964.469 373.333ZM1009.72 799.938C995.371 805.88 979.996 808.939 964.469 808.939L721.803 808.864V572.469H964.469C979.996 572.469 995.371 575.527 1009.72 581.469C1024.06 587.411 1037.09 596.12 1048.07 607.099C1059.05 618.078 1067.76 631.113 1073.7 645.457C1079.65 659.802 1082.7 675.177 1082.7 690.704C1082.7 706.231 1079.65 721.605 1073.7 735.95C1067.76 750.295 1059.05 763.329 1048.07 774.308C1037.09 785.288 1024.06 793.997 1009.72 799.938ZM1110.27 1209.84C1088.1 1232.01 1058.02 1244.47 1026.67 1244.47H721.803V1008H1026.67C1058.02 1008 1088.1 1020.46 1110.27 1042.63C1132.44 1064.8 1144.9 1094.88 1144.9 1126.23C1144.9 1157.59 1132.44 1187.67 1110.27 1209.84Z\" fill=\"black\"/> </svg>"

/***/ }),

/***/ 24557:
/***/ (function(module) {

module.exports = "<svg width=\"1792\" height=\"1792\" viewBox=\"0 0 1792 1792\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M1082.67 1393.73H584.864V1269.33H766.976L898.613 522.667H709.333V398.197H1207.14V522.667H1024.95L893.312 1269.33H1082.67V1393.73Z\" fill=\"black\"/> </svg>"

/***/ }),

/***/ 10859:
/***/ (function(module) {

module.exports = "<svg width=\"1792\" height=\"1792\" viewBox=\"0 0 1792 1792\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M958.197 709.333H833.803V522.667H460.469V398.197H1331.53V522.667H958.197V709.333ZM958.197 1082.67V1393.8H833.803V1082.67H958.197ZM336 833.728H1456V958.197H336V833.728Z\" fill=\"black\"/> </svg>"

/***/ }),

/***/ 9813:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1025 1369v167h-248l-159-252-24-42q-8-9-11-21h-3l-9 21q-10 20-25 44l-155 250h-258v-167h128l197-291-185-272h-137v-168h276l139 228q2 4 23 42 8 9 11 21h3q3-9 11-21l25-42 140-228h257v168h-125l-184 267 204 296h109zm639 217v206h-514l-4-27q-3-45-3-46 0-64 26-117t65-86.5 84-65 84-54.5 65-54 26-64q0-38-29.5-62.5t-70.5-24.5q-51 0-97 39-14 11-36 38l-105-92q26-37 63-66 80-65 188-65 110 0 178 59.5t68 158.5q0 66-34.5 118.5t-84 86-99.5 62.5-87 63-41 73h232v-80h126z\"/> </svg>"

/***/ }),

/***/ 93395:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1025 1369v167h-248l-159-252-24-42q-8-9-11-21h-3l-9 21q-10 20-25 44l-155 250h-258v-167h128l197-291-185-272h-137v-168h276l139 228q2 4 23 42 8 9 11 21h3q3-9 11-21l25-42 140-228h257v168h-125l-184 267 204 296h109zm637-679v206h-514l-3-27q-4-28-4-46 0-64 26-117t65-86.5 84-65 84-54.5 65-54 26-64q0-38-29.5-62.5t-70.5-24.5q-51 0-97 39-14 11-36 38l-105-92q26-37 63-66 83-65 188-65 110 0 178 59.5t68 158.5q0 56-24.5 103t-62 76.5-81.5 58.5-82 50.5-65.5 51.5-30.5 63h232v-80h126z\"/> </svg>"

/***/ }),

/***/ 98213:
/***/ (function(module) {

module.exports = "<svg width=\"1792\" height=\"1792\" viewBox=\"0 0 1792 1792\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M647.061 336V896C647.061 962.013 673.285 1025.32 719.963 1072C766.641 1118.68 829.95 1144.9 895.963 1144.9C961.975 1144.9 1025.28 1118.68 1071.96 1072C1118.64 1025.32 1144.86 962.013 1144.86 896V336H1269.33V896C1269.33 995.014 1230 1089.97 1159.99 1159.99C1089.97 1230 995.014 1269.33 896 1269.33C796.986 1269.33 702.027 1230 632.013 1159.99C562 1089.97 522.667 995.014 522.667 896V336H647.061ZM398.197 1393.8H1393.73V1518.27H398.197V1393.8Z\" fill=\"black\"/> </svg>"

/***/ }),

/***/ 20026:
/***/ (function(module) {

module.exports = "<svg viewBox=\"0 0 48 48\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M36 4h-24c-2.21 0-4 1.79-4 4v32c0 2.21 1.79 4 4 4h24c2.21 0 4-1.79 4-4v-32c0-2.21-1.79-4-4-4zm-24 4h10v16l-5-3-5 3v-16z\"/> </svg>"

/***/ }),

/***/ 66911:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M832 1408l336-384h-768l-336 384h768zm1013-1077q15 34 9.5 71.5t-30.5 65.5l-896 1024q-38 44-96 44h-768q-38 0-69.5-20.5t-47.5-54.5q-15-34-9.5-71.5t30.5-65.5l896-1024q38-44 96-44h768q38 0 69.5 20.5t47.5 54.5z\"/> </svg>"

/***/ }),

/***/ 50018:
/***/ (function(module) {

module.exports = "<svg viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M24.89,6.61H22.31V4.47A2.47,2.47,0,0,0,19.84,2H6.78A2.47,2.47,0,0,0,4.31,4.47V22.92a2.47,2.47,0,0,0,2.47,2.47H9.69V27.2a2.8,2.8,0,0,0,2.8,2.8h12.4a2.8,2.8,0,0,0,2.8-2.8V9.41A2.8,2.8,0,0,0,24.89,6.61ZM6.78,23.52a.61.61,0,0,1-.61-.6V4.47a.61.61,0,0,1,.61-.6H19.84a.61.61,0,0,1,.61.6V6.61h-8a2.8,2.8,0,0,0-2.8,2.8V23.52Zm19,3.68a.94.94,0,0,1-.94.93H12.49a.94.94,0,0,1-.94-.93V9.41a.94.94,0,0,1,.94-.93h12.4a.94.94,0,0,1,.94.93Z\"/> <path d=\"M23.49,13.53h-9.6a.94.94,0,1,0,0,1.87h9.6a.94.94,0,1,0,0-1.87Z\"/> <path d=\"M23.49,17.37h-9.6a.94.94,0,1,0,0,1.87h9.6a.94.94,0,1,0,0-1.87Z\"/> <path d=\"M23.49,21.22h-9.6a.93.93,0,1,0,0,1.86h9.6a.93.93,0,1,0,0-1.86Z\"/> </svg>"

/***/ }),

/***/ 99738:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M960 896q26 0 45 19t19 45-19 45-45 19-45-19-19-45 19-45 45-19zm300 64l507 398q28 20 25 56-5 35-35 51l-128 64q-13 7-29 7-17 0-31-8l-690-387-110 66q-8 4-12 5 14 49 10 97-7 77-56 147.5t-132 123.5q-132 84-277 84-136 0-222-78-90-84-79-207 7-76 56-147t131-124q132-84 278-84 83 0 151 31 9-13 22-22l122-73-122-73q-13-9-22-22-68 31-151 31-146 0-278-84-82-53-131-124t-56-147q-5-59 15.5-113t63.5-93q85-79 222-79 145 0 277 84 83 52 132 123t56 148q4 48-10 97 4 1 12 5l110 66 690-387q14-8 31-8 16 0 29 7l128 64q30 16 35 51 3 36-25 56zm-681-260q46-42 21-108t-106-117q-92-59-192-59-74 0-113 36-46 42-21 108t106 117q92 59 192 59 74 0 113-36zm-85 745q81-51 106-117t-21-108q-39-36-113-36-100 0-192 59-81 51-106 117t21 108q39 36 113 36 100 0 192-59zm178-613l96 58v-11q0-36 33-56l14-8-79-47-26 26q-3 3-10 11t-12 12q-2 2-4 3.5t-3 2.5zm224 224l96 32 736-576-128-64-768 431v113l-160 96 9 8q2 2 7 6 4 4 11 12t11 12l26 26zm704 416l128-64-520-408-177 138q-2 3-13 7z\"/> </svg>"

/***/ }),

/***/ 9185:
/***/ (function(module) {

module.exports = "<svg viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"> <path stroke-width=\"0\" d=\"M10.5 20H2a2 2 0 0 1-2-2V6c0-1.1.9-2 2-2h1V3l2.03-.4a3 3 0 0 1 5.94 0L13 3v1h1a2 2 0 0 1 2 2v1h-2V6h-1v1H3V6H2v12h5v2h3.5zM8 4a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm2 4h8a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-8a2 2 0 0 1-2-2v-8c0-1.1.9-2 2-2zm0 2v8h8v-8h-8z\"/> </svg>"

/***/ }),

/***/ 8619:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 18 18\"> <g fill-rule=\"evenodd\" stroke=\"none\" stroke-width=\"1\"> <g transform=\"translate(-381.000000, -381.000000)\"> <g transform=\"translate(381.000000, 381.000000)\"> <path d=\"M0,2 L2,2 L2,0 C0.9,0 0,0.9 0,2 L0,2 Z M0,10 L2,10 L2,8 L0,8 L0,10 L0,10 Z M4,18 L6,18 L6,16 L4,16 L4,18 L4,18 Z M0,6 L2,6 L2,4 L0,4 L0,6 L0,6 Z M10,0 L8,0 L8,2 L10,2 L10,0 L10,0 Z M16,0 L16,2 L18,2 C18,0.9 17.1,0 16,0 L16,0 Z M2,18 L2,16 L0,16 C0,17.1 0.9,18 2,18 L2,18 Z M0,14 L2,14 L2,12 L0,12 L0,14 L0,14 Z M6,0 L4,0 L4,2 L6,2 L6,0 L6,0 Z M8,18 L10,18 L10,16 L8,16 L8,18 L8,18 Z M16,10 L18,10 L18,8 L16,8 L16,10 L16,10 Z M16,18 C17.1,18 18,17.1 18,16 L16,16 L16,18 L16,18 Z M16,6 L18,6 L18,4 L16,4 L16,6 L16,6 Z M16,14 L18,14 L18,12 L16,12 L16,14 L16,14 Z M12,18 L14,18 L14,16 L12,16 L12,18 L12,18 Z M12,2 L14,2 L14,0 L12,0 L12,2 L12,2 Z M4,14 L14,14 L14,4 L4,4 L4,14 L4,14 Z M6,6 L12,6 L12,12 L6,12 L6,6 L6,6 Z\"/> </g> </g> </g> </svg>"

/***/ }),

/***/ 73894:
/***/ (function(module) {

module.exports = "<svg width=\"1792\" height=\"1792\" viewBox=\"0 0 1792 1792\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M895.565 1163.83C895.565 1145.57 890.493 1128.07 880.348 1111.33C879.841 1110.82 875.909 1105.11 868.554 1094.21C861.199 1083.3 854.732 1073.66 849.152 1065.29C843.572 1056.92 837.232 1045.76 830.13 1031.82C823.029 1017.87 817.703 1005.06 814.152 993.391C812.123 985.275 806.797 981.217 798.174 981.217C789.551 981.217 784.225 985.275 782.196 993.391C778.645 1005.06 773.319 1017.87 766.217 1031.82C759.116 1045.76 752.775 1056.92 747.196 1065.29C741.616 1073.66 735.149 1083.3 727.793 1094.21C720.438 1105.11 716.507 1110.82 716 1111.33C705.855 1128.07 700.783 1145.57 700.783 1163.83C700.783 1190.71 710.293 1213.66 729.315 1232.68C748.337 1251.71 771.29 1261.22 798.174 1261.22C825.058 1261.22 848.011 1251.71 867.033 1232.68C886.054 1213.66 895.565 1190.71 895.565 1163.83ZM1285.13 1066.43C1285.13 1173.97 1247.09 1265.78 1171 1341.87C1094.91 1417.96 1003.1 1456 895.565 1456C788.029 1456 696.217 1417.96 620.13 1341.87C544.043 1265.78 506 1173.97 506 1066.43C506 992.884 526.543 923.138 567.63 857.196C570.674 852.63 586.525 829.678 615.185 788.337C643.844 746.996 669.46 708.699 692.033 673.446C714.605 638.192 739.841 593.047 767.739 538.011C795.638 482.975 816.688 431.87 830.891 384.696C835.457 369.478 844.08 357.558 856.761 348.935C869.442 340.312 882.377 336 895.565 336C908.754 336 921.815 340.312 934.75 348.935C947.685 357.558 956.181 369.478 960.239 384.696C974.442 431.87 995.493 482.975 1023.39 538.011C1051.29 593.047 1076.53 638.192 1099.1 673.446C1121.67 708.699 1147.29 746.996 1175.95 788.337C1204.61 829.678 1220.46 852.63 1223.5 857.196C1264.59 921.616 1285.13 991.362 1285.13 1066.43Z\"/> </svg>"

/***/ }),

/***/ 83301:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 16 16\"> <path stroke-width=\"0\" d=\"M16 9v-6h-3v-1c0-0.55-0.45-1-1-1h-11c-0.55 0-1 0.45-1 1v3c0 0.55 0.45 1 1 1h11c0.55 0 1-0.45 1-1v-1h2v4h-9v2h-0.5c-0.276 0-0.5 0.224-0.5 0.5v5c0 0.276 0.224 0.5 0.5 0.5h2c0.276 0 0.5-0.224 0.5-0.5v-5c0-0.276-0.224-0.5-0.5-0.5h-0.5v-1h9zM12 3h-11v-1h11v1z\"/> </svg>"

/***/ }),

/***/ 25410:
/***/ (function(module) {

module.exports = "<svg width=\"1792\" height=\"1792\" viewBox=\"0 0 1792 1792\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M896 1456C785.242 1456 676.972 1423.16 584.881 1361.62C492.789 1300.09 421.013 1212.63 378.627 1110.3C336.242 1007.98 325.153 895.379 346.76 786.749C368.368 678.12 421.703 578.338 500.02 500.02C578.338 421.703 678.12 368.368 786.749 346.76C895.379 325.153 1007.98 336.242 1110.3 378.627C1212.63 421.013 1300.09 492.789 1361.62 584.881C1423.16 676.972 1456 785.242 1456 896C1456 1044.52 1397 1186.96 1291.98 1291.98C1186.96 1397 1044.52 1456 896 1456V1456ZM896 1344C984.606 1344 1071.22 1317.73 1144.9 1268.5C1218.57 1219.27 1275.99 1149.3 1309.9 1067.44C1343.81 985.581 1352.68 895.503 1335.39 808.6C1318.11 721.696 1275.44 641.87 1212.78 579.216C1150.13 516.562 1070.3 473.894 983.4 456.608C896.497 439.322 806.419 448.194 724.558 482.102C642.697 516.01 572.729 573.431 523.502 647.105C474.275 720.778 448 807.394 448 896C448 1014.82 495.2 1128.77 579.216 1212.78C663.232 1296.8 777.183 1344 896 1344ZM616 952H728C728 996.556 745.7 1039.29 777.206 1070.79C808.712 1102.3 851.444 1120 896 1120C940.556 1120 983.288 1102.3 1014.79 1070.79C1046.3 1039.29 1064 996.556 1064 952H1176C1176 1026.26 1146.5 1097.48 1093.99 1149.99C1041.48 1202.5 970.261 1232 896 1232C821.739 1232 750.52 1202.5 698.01 1149.99C645.5 1097.48 616 1026.26 616 952V952ZM672 840C655.386 840 639.146 835.074 625.332 825.843C611.518 816.613 600.752 803.494 594.394 788.145C588.036 772.796 586.373 755.907 589.614 739.612C592.855 723.318 600.855 708.351 612.603 696.603C624.351 684.855 639.318 676.855 655.612 673.614C671.907 670.373 688.796 672.036 704.145 678.394C719.494 684.752 732.613 695.518 741.843 709.332C751.074 723.146 756 739.386 756 756C756 778.278 747.15 799.644 731.397 815.397C715.644 831.15 694.278 840 672 840ZM1120 840C1103.39 840 1087.15 835.074 1073.33 825.843C1059.52 816.613 1048.75 803.494 1042.39 788.145C1036.04 772.796 1034.37 755.907 1037.61 739.612C1040.86 723.318 1048.86 708.351 1060.6 696.603C1072.35 684.855 1087.32 676.855 1103.61 673.614C1119.91 670.373 1136.8 672.036 1152.15 678.394C1167.49 684.752 1180.61 695.518 1189.84 709.332C1199.07 723.146 1204 739.386 1204 756C1204 778.278 1195.15 799.644 1179.4 815.397C1163.64 831.15 1142.28 840 1120 840Z\" fill=\"#242A3C\"/> </svg>"

/***/ }),

/***/ 84142:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M789 559l-170 450q33 0 136.5 2t160.5 2q19 0 57-2-87-253-184-452zm-725 1105l2-79q23-7 56-12.5t57-10.5 49.5-14.5 44.5-29 31-50.5l237-616 280-724h128q8 14 11 21l205 480q33 78 106 257.5t114 274.5q15 34 58 144.5t72 168.5q20 45 35 57 19 15 88 29.5t84 20.5q6 38 6 57 0 4-.5 13t-.5 13q-63 0-190-8t-191-8q-76 0-215 7t-178 8q0-43 4-78l131-28q1 0 12.5-2.5t15.5-3.5 14.5-4.5 15-6.5 11-8 9-11 2.5-14q0-16-31-96.5t-72-177.5-42-100l-450-2q-26 58-76.5 195.5t-50.5 162.5q0 22 14 37.5t43.5 24.5 48.5 13.5 57 8.5 41 4q1 19 1 58 0 9-2 27-58 0-174.5-10t-174.5-10q-8 0-26.5 4t-21.5 4q-80 14-188 14z\"/> </svg>"

/***/ }),

/***/ 57292:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1744 1408q33 0 42 18.5t-11 44.5l-126 162q-20 26-49 26t-49-26l-126-162q-20-26-11-44.5t42-18.5h80v-1024h-80q-33 0-42-18.5t11-44.5l126-162q20-26 49-26t49 26l126 162q20 26 11 44.5t-42 18.5h-80v1024h80zm-1663-1279l54 27q12 5 211 5 44 0 132-2t132-2q36 0 107.5.5t107.5.5h293q6 0 21 .5t20.5 0 16-3 17.5-9 15-17.5l42-1q4 0 14 .5t14 .5q2 112 2 336 0 80-5 109-39 14-68 18-25-44-54-128-3-9-11-48t-14.5-73.5-7.5-35.5q-6-8-12-12.5t-15.5-6-13-2.5-18-.5-16.5.5q-17 0-66.5-.5t-74.5-.5-64 2-71 6q-9 81-8 136 0 94 2 388t2 455q0 16-2.5 71.5t0 91.5 12.5 69q40 21 124 42.5t120 37.5q5 40 5 50 0 14-3 29l-34 1q-76 2-218-8t-207-10q-50 0-151 9t-152 9q-3-51-3-52v-9q17-27 61.5-43t98.5-29 78-27q19-42 19-383 0-101-3-303t-3-303v-117q0-2 .5-15.5t.5-25-1-25.5-3-24-5-14q-11-12-162-12-33 0-93 12t-80 26q-19 13-34 72.5t-31.5 111-42.5 53.5q-42-26-56-44v-383z\"/> </svg>"

/***/ }),

/***/ 18019:
/***/ (function(module) {

module.exports = "<svg width=\"1792\" height=\"1792\" viewBox=\"0 0 1792 1792\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M1353.37 380.479V433.708C1353.37 447.806 1348.88 462.632 1339.89 478.188C1330.89 493.743 1320.56 501.521 1308.9 501.521C1284.59 501.521 1271.47 501.764 1269.52 502.25C1256.88 505.167 1249.1 512.701 1246.19 524.854C1244.73 530.201 1244 545.757 1244 571.521V1411.52C1244 1423.67 1239.62 1434.13 1230.87 1442.88C1222.12 1451.63 1211.67 1456 1199.52 1456H1120.77C1108.62 1456 1098.17 1451.63 1089.42 1442.88C1080.67 1434.13 1076.29 1423.67 1076.29 1411.52V523.396H972.021V1411.52C972.021 1423.67 967.767 1434.13 959.26 1442.88C950.753 1451.63 940.181 1456 927.542 1456H848.792C836.153 1456 825.58 1451.63 817.073 1442.88C808.566 1434.13 804.312 1423.67 804.312 1411.52V1049.85C732.854 1044.02 673.306 1029.68 625.667 1006.83C564.417 978.639 517.75 935.132 485.667 876.313C454.556 819.438 439 756.486 439 687.458C439 606.764 460.389 537.25 503.167 478.917C545.944 421.556 596.743 382.91 655.562 362.979C709.521 344.993 810.875 336 959.625 336H1308.9C1321.05 336 1331.5 340.375 1340.25 349.125C1349 357.875 1353.37 368.326 1353.37 380.479Z\" fill=\"black\"/> </svg>"

/***/ }),

/***/ 45146:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 24 24\"> <path stroke-width=\"0\" d=\"M22,20.6L3.4,2H8V0H0v8h2V3.4L20.6,22H16v2h8v-8h-2V20.6z M16,0v2h4.7l-6.3,6.3l1.4,1.4L22,3.5V8h2V0H16z M8.3,14.3L2,20.6V16H0v8h8v-2H3.5l6.3-6.3L8.3,14.3z\"/> </svg>"

/***/ }),

/***/ 53576:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M896 960v448q0 26-19 45t-45 19-45-19l-144-144-332 332q-10 10-23 10t-23-10l-114-114q-10-10-10-23t10-23l332-332-144-144q-19-19-19-45t19-45 45-19h448q26 0 45 19t19 45zm755-672q0 13-10 23l-332 332 144 144q19 19 19 45t-19 45-45 19h-448q-26 0-45-19t-19-45v-448q0-26 19-45t45-19 45 19l144 144 332-332q10-10 23-10t23 10l114 114q10 10 10 23z\"/> </svg>"

/***/ }),

/***/ 93368:
/***/ (function(module) {

module.exports = "<svg width=\"1792\" height=\"1792\" viewBox=\"0 0 1792 1792\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M1344 1008C1253.47 1007.87 1164.6 1032.23 1086.79 1078.5C1153.81 1156.83 1205.83 1246.83 1240.23 1344H1344V1008ZM1120 1344C1064.72 1211.33 971.408 1097.99 851.822 1018.27C732.235 938.543 591.725 896 448 896V1344H1120ZM448 784C654.028 783.766 852.902 859.535 1006.54 996.8C1106.75 930.922 1224.08 895.876 1344 896V448H1400.45C1415.19 448.015 1429.32 453.88 1439.73 464.307C1450.15 474.734 1456 488.87 1456 503.608V1400.39C1455.9 1415.1 1450.01 1429.17 1439.62 1439.58C1429.22 1449.98 1415.15 1455.88 1400.45 1456H391.552C376.814 1455.99 362.684 1450.12 352.267 1439.69C341.851 1429.27 336 1415.13 336 1400.39V503.608C336.102 488.901 341.986 474.825 352.381 464.42C362.775 454.015 376.845 448.117 391.552 448H560V336H672V560H448V784ZM1232 336V560H784V448H1120V336H1232ZM1148 840C1131.39 840 1115.15 835.074 1101.33 825.843C1087.52 816.613 1076.75 803.494 1070.39 788.145C1064.04 772.796 1062.37 755.907 1065.61 739.612C1068.86 723.318 1076.86 708.351 1088.6 696.603C1100.35 684.855 1115.32 676.855 1131.61 673.614C1147.91 670.373 1164.8 672.036 1180.15 678.394C1195.49 684.752 1208.61 695.518 1217.84 709.332C1227.07 723.146 1232 739.386 1232 756C1232 778.278 1223.15 799.644 1207.4 815.397C1191.64 831.15 1170.28 840 1148 840Z\" fill=\"black\"/> </svg>"

/***/ }),

/***/ 14655:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1600 736v192q0 40-28 68t-68 28h-1216q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h1216q40 0 68 28t28 68z\"/> </svg>"

/***/ }),

/***/ 53477:
/***/ (function(module) {

module.exports = "<svg width=\"1792\" height=\"1792\" viewBox=\"0 0 1792 1792\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M494.368 1400L493.248 1401.12L492.072 1400H391.272C376.582 1399.91 362.524 1394.01 352.168 1383.59C341.812 1373.18 336 1359.08 336 1344.39V447.608C336.102 432.901 341.986 418.825 352.381 408.42C362.775 398.015 376.845 392.117 391.552 392H1400.45C1415.19 392.015 1429.32 397.88 1439.73 408.307C1450.15 418.734 1456 432.87 1456 447.608V1344.39C1455.9 1359.1 1450.01 1373.17 1439.62 1383.58C1429.22 1393.98 1415.15 1399.88 1400.45 1400H494.368ZM1344 1064V504H448V1288L1008 728L1344 1064ZM1344 1222.37L1008 886.368L606.368 1288H1344V1222.37ZM672 840C649.848 840 628.194 833.431 609.776 821.125C591.358 808.818 577.002 791.326 568.525 770.861C560.048 750.395 557.83 727.876 562.152 706.15C566.474 684.424 577.141 664.468 592.804 648.804C608.468 633.141 628.424 622.474 650.15 618.152C671.876 613.83 694.395 616.048 714.861 624.525C735.326 633.002 752.818 647.358 765.125 665.776C777.431 684.194 784 705.848 784 728C784 757.704 772.2 786.192 751.196 807.196C730.192 828.2 701.704 840 672 840Z\" fill=\"black\"/> </svg>"

/***/ }),

/***/ 90053:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M352 832q0 14-9 23l-288 288q-9 9-23 9-13 0-22.5-9.5t-9.5-22.5v-576q0-13 9.5-22.5t22.5-9.5q14 0 23 9l288 288q9 9 9 23zm1440 480v192q0 13-9.5 22.5t-22.5 9.5h-1728q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1728q13 0 22.5 9.5t9.5 22.5zm0-384v192q0 13-9.5 22.5t-22.5 9.5h-1088q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1088q13 0 22.5 9.5t9.5 22.5zm0-384v192q0 13-9.5 22.5t-22.5 9.5h-1088q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1088q13 0 22.5 9.5t9.5 22.5zm0-384v192q0 13-9.5 22.5t-22.5 9.5h-1728q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1728q13 0 22.5 9.5t9.5 22.5z\"/> </svg>"

/***/ }),

/***/ 72230:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M384 544v576q0 13-9.5 22.5t-22.5 9.5q-14 0-23-9l-288-288q-9-9-9-23t9-23l288-288q9-9 23-9 13 0 22.5 9.5t9.5 22.5zm1408 768v192q0 13-9.5 22.5t-22.5 9.5h-1728q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1728q13 0 22.5 9.5t9.5 22.5zm0-384v192q0 13-9.5 22.5t-22.5 9.5h-1088q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1088q13 0 22.5 9.5t9.5 22.5zm0-384v192q0 13-9.5 22.5t-22.5 9.5h-1088q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1088q13 0 22.5 9.5t9.5 22.5zm0-384v192q0 13-9.5 22.5t-22.5 9.5h-1728q-13 0-22.5-9.5t-9.5-22.5v-192q0-13 9.5-22.5t22.5-9.5h1728q13 0 22.5 9.5t9.5 22.5z\"/> </svg>"

/***/ }),

/***/ 78321:
/***/ (function(module) {

module.exports = "<svg viewBox=\"0 0 18.151 18.151\" xmlns=\"http://www.w3.org/2000/svg\"> <g> <path stroke-width=\"0\" d=\"M6.237,16.546H3.649V1.604h5.916v5.728c0.474-0.122,0.968-0.194,1.479-0.194 c0.042,0,0.083,0.006,0.125,0.006V0H2.044v18.15h5.934C7.295,17.736,6.704,17.19,6.237,16.546z\"/> <path stroke-width=\"0\" d=\"M11.169,8.275c-2.723,0-4.938,2.215-4.938,4.938s2.215,4.938,4.938,4.938s4.938-2.215,4.938-4.938 S13.892,8.275,11.169,8.275z M11.169,16.81c-1.983,0-3.598-1.612-3.598-3.598c0-1.983,1.614-3.597,3.598-3.597 s3.597,1.613,3.597,3.597C14.766,15.198,13.153,16.81,11.169,16.81z\"/> <polygon stroke-width=\"0\" points=\"11.792,11.073 10.502,11.073 10.502,12.578 9.03,12.578 9.03,13.868 10.502,13.868 10.502,15.352 11.792,15.352 11.792,13.868 13.309,13.868 13.309,12.578 11.792,12.578 \"/> </g> </svg>"

/***/ }),

/***/ 77654:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 432 432\"> <g> <polygon points=\"203.688,96 0,96 0,144 155.688,144 \"/> <polygon points=\"155.719,288 0,288 0,336 203.719,336 \"/> <path d=\"M97.844,230.125c-3.701-3.703-5.856-8.906-5.856-14.141s2.154-10.438,5.856-14.141l9.844-9.844H0v48h107.719 L97.844,230.125z\"/> <polygon points=\"232,176 232,96 112,216 232,336 232,256 432,256 432,176\"/> </g> </svg>"

/***/ }),

/***/ 43371:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 312 312\"> <g transform=\"translate(0.000000,312.000000) scale(0.100000,-0.100000)\" stroke=\"none\"> <path d=\"M50 3109 c0 -7 -11 -22 -25 -35 l-25 -23 0 -961 0 -961 32 -29 32 -30 501 -2 500 -3 3 -502 2 -502 31 -30 31 -31 958 0 958 0 23 25 c13 13 30 25 37 25 9 0 12 199 12 960 0 686 -3 960 -11 960 -6 0 -24 12 -40 28 l-29 27 -503 5 -502 5 -5 502 -5 503 -28 29 c-15 16 -27 34 -27 40 0 8 -274 11 -960 11 -710 0 -960 -3 -960 -11z m1738 -698 l2 -453 -40 -40 c-22 -22 -40 -43 -40 -47 0 -4 36 -42 79 -85 88 -87 82 -87 141 -23 l26 27 455 -2 454 -3 0 -775 0 -775 -775 0 -775 0 -3 450 -2 449 47 48 47 48 -82 80 c-44 44 -84 80 -87 80 -3 0 -25 -18 -48 -40 l-41 -40 -456 2 -455 3 -3 765 c-1 421 0 771 3 778 3 10 164 12 777 10 l773 -3 3 -454z\"/> <path d=\"M607 2492 c-42 -42 -77 -82 -77 -87 0 -6 86 -96 190 -200 105 -104 190 -197 190 -205 0 -8 -41 -56 -92 -107 -65 -65 -87 -94 -77 -98 8 -3 138 -4 289 -3 l275 3 3 275 c1 151 0 281 -3 289 -4 10 -35 -14 -103 -82 -54 -53 -103 -97 -109 -97 -7 0 -99 88 -206 195 -107 107 -196 195 -198 195 -3 0 -39 -35 -82 -78z\"/> <path d=\"M1470 1639 c-47 -49 -87 -91 -89 -94 -5 -6 149 -165 160 -165 9 0 189 179 189 188 0 12 -154 162 -165 161 -6 0 -48 -41 -95 -90z\"/> <path d=\"M1797 1303 c-9 -8 -9 -568 0 -576 4 -4 50 36 103 88 54 52 101 95 106 95 5 0 95 -85 199 -190 104 -104 194 -190 200 -190 6 0 46 36 90 80 l79 79 -197 196 c-108 108 -197 199 -197 203 0 4 45 52 99 106 55 55 98 103 95 108 -6 10 -568 11 -577 1z\"/> </g> </svg>"

/***/ }),

/***/ 44563:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 48 48\"> <path d=\"M6 42h4v-4h-4v4zm4-28h-4v4h4v-4zm-4 20h4v-4h-4v4zm8 8h4v-4h-4v4zm-4-36h-4v4h4v-4zm8 0h-4v4h4v-4zm16 0h-4v4h4v-4zm-8 8h-4v4h4v-4zm0-8h-4v4h4v-4zm12 28h4v-4h-4v4zm-16 8h4v-4h-4v4zm-16-16h36v-4h-36v4zm32-20v4h4v-4h-4zm0 12h4v-4h-4v4zm-16 16h4v-4h-4v4zm8 8h4v-4h-4v4zm8 0h4v-4h-4v4z\"/> <path d=\"M0 0h48v48h-48z\" fill=\"none\"/> </svg>"

/***/ }),

/***/ 53183:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 48 48\"> <path d=\"M6 18h4v-4h-4v4zm0-8h4v-4h-4v4zm8 32h4v-4h-4v4zm0-16h4v-4h-4v4zm-8 0h4v-4h-4v4zm0 16h4v-4h-4v4zm0-8h4v-4h-4v4zm8-24h4v-4h-4v4zm24 24h4v-4h-4v4zm-16 8h4v-36h-4v36zm16 0h4v-4h-4v4zm0-16h4v-4h-4v4zm0-20v4h4v-4h-4zm0 12h4v-4h-4v4zm-8-8h4v-4h-4v4zm0 32h4v-4h-4v4zm0-16h4v-4h-4v4z\"/> <path d=\"M0 0h48v48h-48z\" fill=\"none\"/> </svg>"

/***/ }),

/***/ 6102:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M512 1248v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm0-512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm1280 512v192q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h960q40 0 68 28t28 68zm-1280-1024v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm1280 512v192q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h960q40 0 68 28t28 68zm0-512v192q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h960q40 0 68 28t28 68z\"/> </svg>"

/***/ }),

/***/ 52242:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M512 1248v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm0-512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm640 512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm-640-1024v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm640 512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm640 512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm-640-1024v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm640 512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm0-512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68z\"/> </svg>"

/***/ }),

/***/ 87498:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1792 1344v128q0 26-19 45t-45 19h-1664q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1664q26 0 45 19t19 45zm0-384v128q0 26-19 45t-45 19h-1664q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1664q26 0 45 19t19 45zm0-384v128q0 26-19 45t-45 19h-1664q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1664q26 0 45 19t19 45zm0-384v128q0 26-19 45t-45 19h-1664q-26 0-45-19t-19-45v-128q0-26 19-45t45-19h1664q26 0 45 19t19 45z\"/> </svg>"

/***/ }),

/***/ 7986:
/***/ (function(module) {

module.exports = "<svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M5.09668 6.99707H7.17358L4.17358 3.99707L1.17358 6.99707H3.09668V17.0031H1.15881L4.15881 20.0031L7.15881 17.0031H5.09668V6.99707Z\"/> <path d=\"M22.8412 7H8.84119V5H22.8412V7Z\"/> <path d=\"M22.8412 11H8.84119V9H22.8412V11Z\"/> <path d=\"M8.84119 15H22.8412V13H8.84119V15Z\"/> <path d=\"M22.8412 19H8.84119V17H22.8412V19Z\"/> </svg>"

/***/ }),

/***/ 23075:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1520 1216q0-40-28-68l-208-208q-28-28-68-28-42 0-72 32 3 3 19 18.5t21.5 21.5 15 19 13 25.5 3.5 27.5q0 40-28 68t-68 28q-15 0-27.5-3.5t-25.5-13-19-15-21.5-21.5-18.5-19q-33 31-33 73 0 40 28 68l206 207q27 27 68 27 40 0 68-26l147-146q28-28 28-67zm-703-705q0-40-28-68l-206-207q-28-28-68-28-39 0-68 27l-147 146q-28 28-28 67 0 40 28 68l208 208q27 27 68 27 42 0 72-31-3-3-19-18.5t-21.5-21.5-15-19-13-25.5-3.5-27.5q0-40 28-68t68-28q15 0 27.5 3.5t25.5 13 19 15 21.5 21.5 18.5 19q33-31 33-73zm895 705q0 120-85 203l-147 146q-83 83-203 83-121 0-204-85l-206-207q-83-83-83-203 0-123 88-209l-88-88q-86 88-208 88-120 0-204-84l-208-208q-84-84-84-204t85-203l147-146q83-83 203-83 121 0 204 85l206 207q83 83 83 203 0 123-88 209l88 88q86-88 208-88 120 0 204 84l208 208q84 84 84 204z\"/> </svg>"

/***/ }),

/***/ 10655:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M503 1271l-256 256q-10 9-23 9-12 0-23-9-9-10-9-23t9-23l256-256q10-9 23-9t23 9q9 10 9 23t-9 23zm169 41v320q0 14-9 23t-23 9-23-9-9-23v-320q0-14 9-23t23-9 23 9 9 23zm-224-224q0 14-9 23t-23 9h-320q-14 0-23-9t-9-23 9-23 23-9h320q14 0 23 9t9 23zm1264 128q0 120-85 203l-147 146q-83 83-203 83-121 0-204-85l-334-335q-21-21-42-56l239-18 273 274q27 27 68 27.5t68-26.5l147-146q28-28 28-67 0-40-28-68l-274-275 18-239q35 21 56 42l336 336q84 86 84 204zm-617-724l-239 18-273-274q-28-28-68-28-39 0-68 27l-147 146q-28 28-28 67 0 40 28 68l274 274-18 240q-35-21-56-42l-336-336q-84-86-84-204 0-120 85-203l147-146q83-83 203-83 121 0 204 85l334 335q21 21 42 56zm633 84q0 14-9 23t-23 9h-320q-14 0-23-9t-9-23 9-23 23-9h320q14 0 23 9t9 23zm-544-544v320q0 14-9 23t-23 9-23-9-9-23v-320q0-14 9-23t23-9 23 9 9 23zm407 151l-256 256q-11 9-23 9t-23-9q-9-10-9-23t9-23l256-256q10-9 23-9t23 9q9 10 9 23t-9 23z\"/> </svg>"

/***/ }),

/***/ 15476:
/***/ (function(module) {

module.exports = "<svg width=\"1792\" height=\"1792\" viewBox=\"0 0 1792 1792\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M647.136 398.197H1456V522.667H647.136V398.197ZM460.469 336V522.667H522.667V584.864H336V522.667H398.197V398.197H336V336H460.469ZM336 1020.47V864.864H460.469V833.803H336V771.531H522.667V927.061H398.197V958.197H522.667V1020.39L336 1020.47ZM460.469 1362.67H336V1300.47H460.469V1269.33H336V1207.14H522.667V1456H336V1393.8H460.469V1362.67ZM647.136 833.803H1456V958.272H647.136V833.803ZM647.136 1269.33H1456V1393.8H647.136V1269.33Z\" fill=\"black\"/> </svg>"

/***/ }),

/***/ 59403:
/***/ (function(module) {

module.exports = "<svg width=\"1792\" height=\"1792\" viewBox=\"0 0 1792 1792\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M647.136 398.272H1456V522.667H647.136V398.272ZM647.136 833.803H1456V958.272H647.136V833.803ZM647.136 1269.33H1456V1393.8H647.136V1269.33Z\" fill=\"black\"/> <path d=\"M429.334 322.336C456.654 322.336 483.36 330.437 506.076 345.616C528.792 360.794 546.497 382.367 556.952 407.608C567.407 432.848 570.143 460.622 564.813 487.418C559.483 514.213 546.327 538.826 527.009 558.144C507.69 577.463 483.077 590.618 456.282 595.948C429.487 601.278 401.713 598.543 376.472 588.088C351.232 577.633 329.658 559.928 314.48 537.212C299.302 514.496 291.2 487.789 291.2 460.469C291.24 423.846 305.806 388.734 331.702 362.838C357.599 336.941 392.71 322.375 429.334 322.336V322.336ZM429.334 509.003C438.933 509.003 448.316 506.156 456.297 500.823C464.278 495.49 470.499 487.91 474.172 479.042C477.846 470.174 478.807 460.415 476.934 451.001C475.062 441.586 470.439 432.939 463.652 426.151C456.864 419.363 448.216 414.741 438.802 412.868C429.387 410.996 419.629 411.957 410.761 415.63C401.892 419.304 394.312 425.524 388.98 433.506C383.647 441.487 380.8 450.87 380.8 460.469C380.82 473.335 385.94 485.668 395.037 494.766C404.135 503.863 416.468 508.983 429.334 509.003ZM429.334 757.867C456.654 757.867 483.36 765.968 506.076 781.146C528.792 796.325 546.497 817.898 556.952 843.139C567.407 868.379 570.143 896.153 564.813 922.948C559.483 949.744 546.327 974.357 527.009 993.675C507.69 1012.99 483.077 1026.15 456.282 1031.48C429.487 1036.81 401.713 1034.07 376.472 1023.62C351.232 1013.16 329.658 995.459 314.48 972.743C299.302 950.027 291.2 923.32 291.2 896C291.24 859.377 305.806 824.265 331.702 798.369C357.599 772.472 392.71 757.906 429.334 757.867ZM429.334 944.533C438.933 944.533 448.316 941.687 456.297 936.354C464.278 931.021 470.499 923.441 474.172 914.573C477.846 905.705 478.807 895.946 476.934 886.532C475.062 877.117 470.439 868.469 463.652 861.682C456.864 854.894 448.216 850.272 438.802 848.399C429.387 846.526 419.629 847.488 410.761 851.161C401.892 854.834 394.312 861.055 388.98 869.036C383.647 877.017 380.8 886.401 380.8 896C380.82 908.866 385.94 921.199 395.037 930.296C404.135 939.394 416.468 944.514 429.334 944.533V944.533ZM429.334 1187.2C456.654 1187.2 483.36 1195.3 506.076 1210.48C528.792 1225.66 546.497 1247.23 556.952 1272.47C567.407 1297.71 570.143 1325.49 564.813 1352.28C559.483 1379.08 546.327 1403.69 527.009 1423.01C507.69 1442.33 483.077 1455.48 456.282 1460.81C429.487 1466.14 401.713 1463.41 376.472 1452.95C351.232 1442.5 329.658 1424.79 314.48 1402.08C299.302 1379.36 291.2 1352.65 291.2 1325.33C291.24 1288.71 305.806 1253.6 331.702 1227.7C357.599 1201.81 392.71 1187.24 429.334 1187.2V1187.2ZM429.334 1373.87C440.561 1373.85 451.437 1369.95 460.108 1362.82C468.779 1355.68 474.709 1345.76 476.888 1334.75C479.066 1323.74 477.358 1312.31 472.055 1302.41C466.752 1292.51 458.182 1284.76 447.805 1280.48C437.427 1276.19 425.885 1275.63 415.144 1278.9C404.403 1282.17 395.127 1289.07 388.898 1298.41C382.669 1307.75 379.871 1318.96 380.981 1330.13C382.091 1341.31 387.041 1351.75 394.987 1359.68C399.489 1364.2 404.844 1367.78 410.739 1370.21C416.635 1372.65 422.955 1373.89 429.334 1373.87V1373.87Z\" fill=\"black\"/> </svg>"

/***/ }),

/***/ 22860:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M448 1536h896v-256h-896v256zm0-640h896v-384h-160q-40 0-68-28t-28-68v-160h-640v640zm1152 64q0-26-19-45t-45-19-45 19-19 45 19 45 45 19 45-19 19-45zm128 0v416q0 13-9.5 22.5t-22.5 9.5h-224v160q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-160h-224q-13 0-22.5-9.5t-9.5-22.5v-416q0-79 56.5-135.5t135.5-56.5h64v-544q0-40 28-68t68-28h672q40 0 88 20t76 48l152 152q28 28 48 76t20 88v256h64q79 0 135.5 56.5t56.5 135.5z\"/> </svg>"

/***/ }),

/***/ 95600:
/***/ (function(module) {

module.exports = "<svg width=\"1792\" height=\"1792\" viewBox=\"0 0 1792 1792\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M746.641 1418.68C731.876 1418.68 717.427 1414.27 705.151 1406.06C692.875 1397.86 683.312 1386.2 677.662 1372.56C672.012 1358.92 670.553 1343.91 673.433 1329.43C676.312 1314.95 683.41 1301.66 693.849 1291.22L1089.06 896.012L693.849 500.804C680.248 486.722 672.752 467.845 672.922 448.268C673.092 428.69 680.953 409.976 694.797 396.132C708.641 382.288 727.355 374.427 746.933 374.257C766.51 374.087 785.35 381.62 799.433 395.221L1247.43 843.221C1261.43 857.223 1269.31 876.213 1269.31 896.012C1269.31 915.811 1261.43 934.802 1247.43 948.804L799.433 1396.8C785.433 1410.81 766.442 1418.67 746.641 1418.68Z\" fill=\"black\"/> </svg>"

/***/ }),

/***/ 76214:
/***/ (function(module) {

module.exports = "<svg width=\"1792\" height=\"1792\" viewBox=\"0 0 1792 1792\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M1045.33 1418.68C1025.53 1418.67 1006.54 1410.81 992.537 1396.8L544.537 948.804C530.539 934.802 522.662 915.811 522.662 896.012C522.662 876.213 530.539 857.223 544.537 843.221L992.537 395.221C1006.62 381.62 1025.46 374.087 1045.04 374.257C1064.61 374.427 1083.4 382.288 1097.25 396.132C1111.09 409.976 1118.88 428.69 1119.05 448.268C1119.22 467.845 1111.72 486.722 1098.12 500.804L702.912 896.012L1098.12 1291.22C1108.56 1301.66 1115.66 1314.95 1118.54 1329.43C1121.42 1343.91 1119.96 1358.92 1114.31 1372.56C1108.66 1386.2 1099.09 1397.86 1086.82 1406.06C1074.54 1414.27 1060.09 1418.68 1045.33 1418.68Z\" fill=\"black\"/> </svg>"

/***/ }),

/***/ 41197:
/***/ (function(module) {

module.exports = "<svg width=\"1792\" height=\"1792\" viewBox=\"0 0 1792 1792\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M801.605 336.115C889.489 336.118 975.547 361.2 1049.67 408.416C1123.79 455.631 1182.9 523.019 1220.06 602.663C1257.21 682.307 1270.86 770.9 1259.41 858.035C1247.96 945.17 1211.88 1027.23 1155.42 1094.57L1435.63 1359.11C1445.62 1370.14 1450.98 1384.6 1450.61 1399.48C1450.24 1414.36 1444.15 1428.53 1433.62 1439.05C1423.08 1449.57 1408.91 1455.63 1394.03 1455.98C1379.14 1456.34 1364.69 1450.95 1353.67 1440.94L1071.73 1172.37C993.553 1229.15 899.378 1259.66 802.758 1259.52C742.119 1259.52 682.074 1247.57 626.051 1224.37C570.028 1201.16 519.124 1167.15 476.246 1124.27C433.368 1081.39 399.355 1030.49 376.149 974.465C352.944 918.442 341 858.396 341 797.758C341 737.119 352.944 677.074 376.149 621.051C399.355 565.028 433.368 514.124 476.246 471.246C519.124 428.368 570.028 394.355 626.051 371.149C682.074 347.944 742.119 336 802.758 336L801.605 336.115ZM801.605 1144.19C870.1 1144.19 937.057 1123.88 994.009 1085.83C1050.96 1047.77 1095.35 993.684 1121.56 930.403C1147.77 867.122 1154.63 797.489 1141.27 730.31C1127.91 663.13 1094.92 601.422 1046.49 552.989C998.055 504.555 936.347 471.572 869.168 458.209C801.989 444.846 732.356 451.705 669.075 477.917C605.793 504.129 551.706 548.517 513.652 605.469C475.598 662.421 455.287 729.378 455.287 797.873C455.287 889.722 491.774 977.809 556.721 1042.76C621.668 1107.7 709.756 1144.19 801.605 1144.19V1144.19Z\"/> </svg>"

/***/ }),

/***/ 9342:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M553 1399l-50 50q-10 10-23 10t-23-10l-466-466q-10-10-10-23t10-23l466-466q10-10 23-10t23 10l50 50q10 10 10 23t-10 23l-393 393 393 393q10 10 10 23t-10 23zm591-1067l-373 1291q-4 13-15.5 19.5t-23.5 2.5l-62-17q-13-4-19.5-15.5t-2.5-24.5l373-1291q4-13 15.5-19.5t23.5-2.5l62 17q13 4 19.5 15.5t2.5 24.5zm657 651l-466 466q-10 10-23 10t-23-10l-50-50q-10-10-10-23t10-23l393-393-393-393q-10-10-10-23t10-23l50-50q10-10 23-10t23 10l466 466q10 10 10 23t-10 23z\"/> </svg>"

/***/ }),

/***/ 69546:
/***/ (function(module) {

module.exports = "<svg viewBox=\"0 0 48 48\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M24.89 32h4.18L18.86 6h-3.71L4.93 32h4.18l2.25-6h11.29l2.24 6zM12.86 22L17 10.95 21.14 22h-8.28zm30.31 1.17L27 39.34 19.66 32l-2.83 2.83L27 45l19-19-2.83-2.83z\"/> </svg>"

/***/ }),

/***/ 43158:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 270 270\"> <path d=\"m240.443652,220.45085l-47.410809,0l0,-10.342138c13.89973,-8.43655 25.752896,-19.844464 34.686646,-33.469923c11.445525,-17.455846 17.496072,-37.709239 17.496072,-58.570077c0,-59.589197 -49.208516,-108.068714 -109.693558,-108.068714s-109.69263,48.479517 -109.69263,108.069628c0,20.860839 6.050547,41.113316 17.497001,58.570077c8.93375,13.625459 20.787845,25.032458 34.686646,33.469008l0,10.342138l-47.412666,0c-10.256959,0 -18.571354,8.191376 -18.571354,18.296574c0,10.105198 8.314395,18.296574 18.571354,18.296574l65.98402,0c10.256959,0 18.571354,-8.191376 18.571354,-18.296574l0,-39.496814c0,-7.073455 -4.137698,-13.51202 -10.626529,-16.537358c-25.24497,-11.772016 -41.557118,-37.145704 -41.557118,-64.643625c0,-39.411735 32.545369,-71.476481 72.549922,-71.476481c40.004553,0 72.550851,32.064746 72.550851,71.476481c0,27.497006 -16.312149,52.87161 -41.557118,64.643625c-6.487902,3.026253 -10.6256,9.464818 -10.6256,16.537358l0,39.496814c0,10.105198 8.314395,18.296574 18.571354,18.296574l65.982163,0c10.256959,0 18.571354,-8.191376 18.571354,-18.296574c0,-10.105198 -8.314395,-18.296574 -18.571354,-18.296574z\"/> </svg>"

/***/ }),

/***/ 51716:
/***/ (function(module) {

module.exports = "<svg width=\"1792\" height=\"1792\" viewBox=\"0 0 1792 1792\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M958.197 771.531V1020.39H1331.53V771.531H958.197ZM833.728 771.531H460.395V1020.39H833.728V771.531ZM958.197 1331.53H1331.53V1144.86H958.197V1331.53ZM833.728 1331.53V1144.86H460.395V1331.53H833.728ZM958.197 460.469V647.136H1331.53V460.469H958.197ZM833.728 460.469H460.395V647.136H833.728V460.469ZM398.197 336H1393.8C1410.3 336 1426.12 342.553 1437.78 354.217C1449.45 365.881 1456 381.702 1456 398.197V1393.8C1456 1410.3 1449.45 1426.12 1437.78 1437.78C1426.12 1449.45 1410.3 1456 1393.8 1456H398.197C381.702 1456 365.881 1449.45 354.217 1437.78C342.553 1426.12 336 1410.3 336 1393.8V398.197C336 381.702 342.553 365.881 354.217 354.217C365.881 342.553 381.702 336 398.197 336V336Z\" fill=\"black\"/> </svg>"

/***/ }),

/***/ 49222:
/***/ (function(module) {

module.exports = "<svg width=\"1792\" height=\"1792\" viewBox=\"0 0 1792 1792\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M896 1456C785.243 1456 676.972 1423.16 584.881 1361.62C492.789 1300.09 421.013 1212.63 378.628 1110.3C336.243 1007.98 325.153 895.379 346.76 786.749C368.368 678.12 421.703 578.338 500.02 500.02C578.338 421.703 678.12 368.368 786.75 346.76C895.379 325.153 1007.98 336.242 1110.3 378.627C1212.63 421.013 1300.09 492.789 1361.62 584.881C1423.16 676.972 1456 785.242 1456 896C1456 1044.52 1397 1186.96 1291.98 1291.98C1186.96 1397 1044.52 1456 896 1456V1456ZM896 1344C984.606 1344 1071.22 1317.73 1144.9 1268.5C1218.57 1219.27 1275.99 1149.3 1309.9 1067.44C1343.81 985.581 1352.68 895.503 1335.39 808.6C1318.11 721.696 1275.44 641.87 1212.78 579.216C1150.13 516.562 1070.3 473.894 983.401 456.608C896.497 439.322 806.419 448.194 724.558 482.102C642.697 516.01 572.729 573.431 523.502 647.105C474.275 720.778 448 807.394 448 896C448 1014.82 495.2 1128.77 579.216 1212.78C663.233 1296.8 777.183 1344 896 1344ZM818.832 695.24L1092 877.352C1095.07 879.397 1097.59 882.169 1099.34 885.422C1101.08 888.676 1101.99 892.309 1101.99 896C1101.99 899.691 1101.08 903.324 1099.34 906.578C1097.59 909.831 1095.07 912.603 1092 914.648L818.72 1096.76C815.351 1098.98 811.446 1100.25 807.416 1100.43C803.386 1100.61 799.382 1099.7 795.826 1097.8C792.27 1095.9 789.294 1093.07 787.212 1089.61C785.131 1086.16 784.021 1082.2 784 1078.17V713.832C784.008 709.78 785.114 705.807 787.201 702.334C789.288 698.862 792.278 696.02 795.852 694.112C799.427 692.204 803.452 691.302 807.498 691.5C811.545 691.699 815.462 692.991 818.832 695.24V695.24Z\" fill=\"black\"/> </svg>"

/***/ }),

/***/ 1755:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1395 736q0 13-10 23l-466 466q-10 10-23 10t-23-10l-466-466q-10-10-10-23t10-23l50-50q10-10 23-10t23 10l393 393 393-393q10-10 23-10t23 10l50 50q10 10 10 23z\"/> </svg>"

/***/ }),

/***/ 74911:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1203 544q0 13-10 23l-393 393 393 393q10 10 10 23t-10 23l-50 50q-10 10-23 10t-23-10l-466-466q-10-10-10-23t10-23l466-466q10-10 23-10t23 10l50 50q10 10 10 23z\"/> </svg>"

/***/ }),

/***/ 8805:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1171 960q0 13-10 23l-466 466q-10 10-23 10t-23-10l-50-50q-10-10-10-23t10-23l393-393-393-393q-10-10-10-23t10-23l50-50q10-10 23-10t23 10l466 466q10 10 10 23z\"/> </svg>"

/***/ }),

/***/ 16547:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1395 1184q0 13-10 23l-50 50q-10 10-23 10t-23-10l-393-393-393 393q-10 10-23 10t-23-10l-50-50q-10-10-10-23t10-23l466-466q10-10 23-10t23 10l466 466q10 10 10 23z\"/> </svg>"

/***/ }),

/***/ 10856:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M704 1376v-704q0-14-9-23t-23-9h-64q-14 0-23 9t-9 23v704q0 14 9 23t23 9h64q14 0 23-9t9-23zm256 0v-704q0-14-9-23t-23-9h-64q-14 0-23 9t-9 23v704q0 14 9 23t23 9h64q14 0 23-9t9-23zm256 0v-704q0-14-9-23t-23-9h-64q-14 0-23 9t-9 23v704q0 14 9 23t23 9h64q14 0 23-9t9-23zm-544-992h448l-48-117q-7-9-17-11h-317q-10 2-17 11zm928 32v64q0 14-9 23t-23 9h-96v948q0 83-47 143.5t-113 60.5h-832q-66 0-113-58.5t-47-141.5v-952h-96q-14 0-23-9t-9-23v-64q0-14 9-23t23-9h309l70-167q15-37 54-63t79-26h320q40 0 79 26t54 63l70 167h309q14 0 23 9t9 23z\"/> </svg>"

/***/ }),

/***/ 98441:
/***/ (function(module) {

module.exports = "<svg viewBox=\"0 0 14 14\" xmlns=\"http://www.w3.org/2000/svg\"> <g stroke=\"none\" stroke-width=\"1\"> <path d=\"M14,1.4 L12.6,0 L7,5.6 L1.4,0 L0,1.4 L5.6,7 L0,12.6 L1.4,14 L7,8.4 L12.6,14 L14,12.6 L8.4,7 L14,1.4 Z\"/> </g> </svg>"

/***/ }),

/***/ 52488:
/***/ (function(module) {

module.exports = "<svg width=\"1792\" height=\"1792\" viewBox=\"0 0 1792 1792\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M448 447.925H1396.71V553.355H448V447.925ZM553.429 1238.5H1291.29V1343.93H553.429V1238.5ZM448 974.997H1396.71V1080.43H448V974.997ZM553.429 711.424H1291.29V816.853H553.429V711.424Z\" fill=\"black\"/> </svg>"

/***/ }),

/***/ 9370:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1472 930v318q0 119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119 84.5-203.5t203.5-84.5h832q63 0 117 25 15 7 18 23 3 17-9 29l-49 49q-10 10-23 10-3 0-9-2-23-6-45-6h-832q-66 0-113 47t-47 113v832q0 66 47 113t113 47h832q66 0 113-47t47-113v-254q0-13 9-22l64-64q10-10 23-10 6 0 12 3 20 8 20 29zm231-489l-814 814q-24 24-57 24t-57-24l-430-430q-24-24-24-57t24-57l110-110q24-24 57-24t57 24l263 263 647-647q24-24 57-24t57 24l110 110q24 24 24 57t-24 57z\"/> </svg>"

/***/ }),

/***/ 66543:
/***/ (function(module) {

module.exports = "<svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <g clip-path=\"url(#clip0_17_11)\"> <path d=\"M6.41666 8.37602C6.371 8.4445 6.30914 8.50065 6.23657 8.53948C6.164 8.57831 6.08297 8.59863 6.00066 8.59863C5.91836 8.59863 5.83732 8.57831 5.76476 8.53948C5.69219 8.50065 5.63033 8.4445 5.58466 8.37602L2.51866 3.77602C2.46883 3.70074 2.4403 3.61337 2.43612 3.52318C2.43194 3.43299 2.45226 3.34335 2.49491 3.26378C2.53757 3.18421 2.60098 3.11767 2.6784 3.07124C2.75583 3.0248 2.84438 3.00019 2.93466 3.00002L9.06666 3.00002C9.15711 3.00007 9.24584 3.02464 9.32342 3.07113C9.401 3.11762 9.46452 3.18429 9.50721 3.26402C9.54989 3.34375 9.57016 3.43357 9.56584 3.52391C9.56151 3.61425 9.53277 3.70173 9.48266 3.77702L6.41666 8.37602Z\" fill=\"#000000\"/> </g> <defs> <clipPath id=\"clip0_17_11\"> <rect width=\"12\" height=\"12\" fill=\"white\"/> </clipPath> </defs> </svg>"

/***/ }),

/***/ 608:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 24 24\" > <circle cx=\"12\" cy=\"12\" r=\"2.2\"/> <circle cx=\"12\" cy=\"5\" r=\"2.2\"/> <circle cx=\"12\" cy=\"19\" r=\"2.2\"/> </svg>"

/***/ }),

/***/ 42840:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1664 960q-152-236-381-353 61 104 61 225 0 185-131.5 316.5t-316.5 131.5-316.5-131.5-131.5-316.5q0-121 61-225-229 117-381 353 133 205 333.5 326.5t434.5 121.5 434.5-121.5 333.5-326.5zm-720-384q0-20-14-34t-34-14q-125 0-214.5 89.5t-89.5 214.5q0 20 14 34t34 14 34-14 14-34q0-86 61-147t147-61q20 0 34-14t14-34zm848 384q0 34-20 69-140 230-376.5 368.5t-499.5 138.5-499.5-139-376.5-368q-20-35-20-69t20-69q140-229 376.5-368t499.5-139 499.5 139 376.5 368q20 35 20 69z\"/> </svg>"

/***/ }),

/***/ 79096:
/***/ (function(module) {

module.exports = "<svg width=\"1792\" height=\"1792\" viewBox=\"0 0 1792 1792\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M1054.37 658.392L737.632 975.184C732.283 980.35 728.017 986.529 725.082 993.361C722.147 1000.19 720.603 1007.54 720.538 1014.98C720.473 1022.41 721.89 1029.79 724.706 1036.67C727.522 1043.55 731.68 1049.8 736.938 1055.06C742.196 1060.32 748.448 1064.48 755.331 1067.29C762.213 1070.11 769.587 1071.53 777.022 1071.46C784.458 1071.4 791.806 1069.85 798.639 1066.92C805.471 1063.98 811.65 1059.72 816.816 1054.37L1133.61 737.632C1165.12 706.123 1182.82 663.388 1182.82 618.828C1182.82 574.268 1165.12 531.533 1133.61 500.024C1102.1 468.515 1059.36 450.814 1014.8 450.814C970.244 450.814 927.509 468.515 896 500.024L579.208 816.816C552.668 842.695 531.531 873.587 517.023 907.698C502.515 941.81 494.925 978.463 494.693 1015.53C494.46 1052.6 501.591 1089.34 515.67 1123.63C529.75 1157.93 550.498 1189.08 576.711 1215.29C602.925 1241.5 634.081 1262.24 668.374 1276.32C702.667 1290.39 739.413 1297.52 776.481 1297.28C813.549 1297.04 850.201 1289.45 884.311 1274.93C918.42 1260.42 949.309 1239.28 975.184 1212.74L1291.98 896L1371.16 975.184L1054.37 1291.98C980.85 1365.49 881.138 1406.8 777.168 1406.8C673.198 1406.8 573.486 1365.49 499.968 1291.98C426.45 1218.46 385.148 1118.75 385.148 1014.78C385.148 910.806 426.45 811.094 499.968 737.576L816.816 420.84C842.775 394.653 873.651 373.851 907.671 359.628C941.691 345.405 978.185 338.042 1015.06 337.962C1051.93 337.881 1088.46 345.084 1122.54 359.158C1156.62 373.231 1187.59 393.898 1213.66 419.971C1239.73 446.044 1260.4 477.011 1274.47 511.093C1288.55 545.175 1295.75 581.701 1295.67 618.574C1295.59 655.447 1288.23 691.941 1274 725.961C1259.78 759.981 1238.98 790.857 1212.79 816.816L896 1133.66C864.484 1165.17 821.742 1182.87 777.176 1182.87C732.611 1182.86 689.873 1165.15 658.364 1133.64C626.855 1102.12 609.157 1059.38 609.162 1014.81C609.167 970.247 626.876 927.509 658.392 896L975.184 579.208L1054.37 658.392Z\" fill=\"black\"/> </svg>"

/***/ }),

/***/ 33014:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1728 608v704q0 92-66 158t-158 66h-1216q-92 0-158-66t-66-158v-960q0-92 66-158t158-66h320q92 0 158 66t66 158v32h672q92 0 158 66t66 158z\"/> </svg>"

/***/ }),

/***/ 91677:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1152 1376v-160q0-14-9-23t-23-9h-96v-512q0-14-9-23t-23-9h-320q-14 0-23 9t-9 23v160q0 14 9 23t23 9h96v320h-96q-14 0-23 9t-9 23v160q0 14 9 23t23 9h448q14 0 23-9t9-23zm-128-896v-160q0-14-9-23t-23-9h-192q-14 0-23 9t-9 23v160q0 14 9 23t23 9h192q14 0 23-9t9-23zm640 416q0 209-103 385.5t-279.5 279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5 385.5-103 385.5 103 279.5 279.5 103 385.5z\"/> </svg>"

/***/ }),

/***/ 8259:
/***/ (function(module) {

module.exports = "<svg width=\"1792\" height=\"1792\" viewBox=\"0 0 1792 1792\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M448 448H1396.71V553.429H448V448ZM448 1238.57H1185.86V1344H448V1238.57ZM448 975.072H1396.71V1080.5H448V975.072ZM448 711.499H1185.86V816.928H448V711.499Z\" fill=\"black\"/> </svg>"

/***/ }),

/***/ 64467:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M640 768h512v-192q0-106-75-181t-181-75-181 75-75 181v192zm832 96v576q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-576q0-40 28-68t68-28h32v-192q0-184 132-316t316-132 316 132 132 316v192h32q40 0 68 28t28 68z\"/></svg>"

/***/ }),

/***/ 86934:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 32 32\"> <path d=\"M27 4l-15 15-7-7-5 5 12 12 20-20z\"/> </svg>"

/***/ }),

/***/ 76133:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z\"/></svg>"

/***/ }),

/***/ 45519:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"><path d=\"M1600 736v192q0 40-28 68t-68 28h-416v416q0 40-28 68t-68 28h-192q-40 0-68-28t-28-68v-416h-416q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h416v-416q0-40 28-68t68-28h192q40 0 68 28t28 68v416h416q40 0 68 28t28 68z\"/></svg>"

/***/ }),

/***/ 90265:
/***/ (function(module) {

module.exports = "<svg viewBox=\"0 0 13 13\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M5.9814 11.8049C5.59087 11.4144 5.59087 10.7812 5.9814 10.3907L10.224 6.14806C10.6146 5.75754 11.2477 5.75754 11.6383 6.14806C12.0288 6.53859 12.0288 7.17175 11.6383 7.56228L7.39561 11.8049C7.00509 12.1954 6.37192 12.1954 5.9814 11.8049Z\"/> <path d=\"M0.707107 12.0208C0.316582 11.6303 0.316582 10.9971 0.707107 10.6066L10.6066 0.707121C10.9971 0.316597 11.6303 0.316596 12.0208 0.707121C12.4113 1.09764 12.4113 1.73081 12.0208 2.12133L2.12132 12.0208C1.7308 12.4114 1.09763 12.4114 0.707107 12.0208Z\"/> </svg>"

/***/ }),

/***/ 81279:
/***/ (function(module) {

module.exports = "<svg width=\"1792\" height=\"1792\" viewBox=\"0 0 1792 1792\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M448 448H1396.71V553.429H448V448ZM658.859 1238.57H1396.71V1344H658.859V1238.57ZM448 975.072H1396.71V1080.5H448V975.072ZM658.859 711.499H1396.71V816.928H658.859V711.499Z\" fill=\"black\"/> </svg>"

/***/ }),

/***/ 68899:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M512 1536h768v-384h-768v384zm896 0h128v-896q0-14-10-38.5t-20-34.5l-281-281q-10-10-34-20t-39-10v416q0 40-28 68t-68 28h-576q-40 0-68-28t-28-68v-416h-128v1280h128v-416q0-40 28-68t68-28h832q40 0 68 28t28 68v416zm-384-928v-320q0-13-9.5-22.5t-22.5-9.5h-192q-13 0-22.5 9.5t-9.5 22.5v320q0 13 9.5 22.5t22.5 9.5h192q13 0 22.5-9.5t9.5-22.5zm640 32v928q0 40-28 68t-68 28h-1344q-40 0-68-28t-28-68v-1344q0-40 28-68t68-28h928q40 0 88 20t76 48l280 280q28 28 48 76t20 88z\"/> </svg>"

/***/ }),

/***/ 70744:
/***/ (function(module) {

module.exports = "<svg viewBox=\"0 0 48 48\" xmlns=\"http://www.w3.org/2000/svg\"> <path stroke=\"null\" d=\"m42.276011,26.302547c0.098397,-0.76605 0.172194,-1.54407 0.172194,-2.33406s-0.073797,-1.56801 -0.172194,-2.33406l5.202718,-3.961917c0.467384,-0.359086 0.602679,-1.005441 0.29519,-1.532101l-4.919828,-8.29489c-0.307489,-0.51469 -0.947067,-0.730142 -1.500548,-0.51469l-6.125186,2.405877c-1.266856,-0.945594 -2.656707,-1.747553 -4.157255,-2.357999l-0.922468,-6.343855c-0.110696,-0.562568 -0.614979,-1.005441 -1.229957,-1.005441l-9.839656,0c-0.614979,0 -1.119261,0.442873 -1.217657,1.005441l-0.922468,6.343855c-1.500548,0.610446 -2.890399,1.400436 -4.157255,2.357999l-6.125186,-2.405877c-0.553481,-0.203482 -1.193058,0 -1.500548,0.51469l-4.919828,8.29489c-0.307489,0.51469 -0.172194,1.161045 0.29519,1.532101l5.190419,3.961917c-0.098397,0.76605 -0.172194,1.54407 -0.172194,2.33406s0.073797,1.56801 0.172194,2.33406l-5.190419,3.961917c-0.467384,0.359086 -0.602679,1.005441 -0.29519,1.532101l4.919828,8.29489c0.307489,0.51469 0.947067,0.730142 1.500548,0.51469l6.125186,-2.405877c1.266856,0.945594 2.656707,1.747553 4.157255,2.357999l0.922468,6.343855c0.098397,0.562568 0.602679,1.005441 1.217657,1.005441l9.839656,0c0.614979,0 1.119261,-0.442873 1.217657,-1.005441l0.922468,-6.343855c1.500548,-0.610446 2.890399,-1.400436 4.157255,-2.357999l6.125186,2.405877c0.553481,0.203482 1.193058,0 1.500548,-0.51469l4.919828,-8.29489c0.307489,-0.51469 0.172194,-1.161045 -0.29519,-1.532101l-5.190419,-3.961917zm-18.277162,6.044617c-4.759934,0 -8.609699,-3.746465 -8.609699,-8.378677s3.849766,-8.378677 8.609699,-8.378677s8.609699,3.746465 8.609699,8.378677s-3.849766,8.378677 -8.609699,8.378677z\"/> </svg>"

/***/ }),

/***/ 19201:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1728 576v256q0 26-19 45t-45 19h-64q-26 0-45-19t-19-45v-256q0-106-75-181t-181-75-181 75-75 181v192h96q40 0 68 28t28 68v576q0 40-28 68t-68 28h-960q-40 0-68-28t-28-68v-576q0-40 28-68t68-28h672v-192q0-185 131.5-316.5t316.5-131.5 316.5 131.5 131.5 316.5z\"/> </svg>"

/***/ }),

/***/ 84930:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1639 1056q0 5-1 7-64 268-268 434.5t-478 166.5q-146 0-282.5-55t-243.5-157l-129 129q-19 19-45 19t-45-19-19-45v-448q0-26 19-45t45-19h448q26 0 45 19t19 45-19 45l-137 137q71 66 161 102t187 36q134 0 250-65t186-179q11-17 53-117 8-23 30-23h192q13 0 22.5 9.5t9.5 22.5zm25-800v448q0 26-19 45t-45 19h-448q-26 0-45-19t-19-45 19-45l138-138q-148-137-349-137-134 0-250 65t-186 179q-11 17-53 117-8 23-30 23h-199q-13 0-22.5-9.5t-9.5-22.5v-7q65-268 270-434.5t480-166.5q146 0 284 55.5t245 156.5l130-129q19-19 45-19t45 19 19 45z\"/> </svg>"

/***/ }),

/***/ 99704:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1344 1472q0-26-19-45t-45-19-45 19-19 45 19 45 45 19 45-19 19-45zm256 0q0-26-19-45t-45-19-45 19-19 45 19 45 45 19 45-19 19-45zm128-224v320q0 40-28 68t-68 28h-1472q-40 0-68-28t-28-68v-320q0-40 28-68t68-28h427q21 56 70.5 92t110.5 36h256q61 0 110.5-36t70.5-92h427q40 0 68 28t28 68zm-325-648q-17 40-59 40h-256v448q0 26-19 45t-45 19h-256q-26 0-45-19t-19-45v-448h-256q-42 0-59-40-17-39 14-69l448-448q18-19 45-19t45 19l448 448q31 30 14 69z\"/> </svg>"

/***/ }),

/***/ 2304:
/***/ (function(module) {

module.exports = "<svg xmlns='http://www.w3.org/2000/svg' viewBox=\"0 0 1792 1792\"> <path d=\"M1216 320q0 26-19 45t-45 19h-128v1024h128q26 0 45 19t19 45-19 45l-256 256q-19 19-45 19t-45-19l-256-256q-19-19-19-45t19-45 45-19h128v-1024h-128q-26 0-45-19t-19-45 19-45l256-256q19-19 45-19t45 19l256 256q19 19 19 45z\"/> </svg>"

/***/ }),

/***/ 70631:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ZP": function() { return /* binding */ autobind; }
/* harmony export */ });
/* unused harmony exports boundMethod, boundClass */
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) { return typeof obj; };
}
else {
    _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
} return _typeof(obj); }
function boundMethod(target, key, descriptor) {
    var fn = descriptor.value;
    if (typeof fn !== 'function') {
        throw new TypeError("@boundMethod decorator can only be applied to methods not: ".concat(_typeof(fn)));
    }
    var definingProperty = false;
    return {
        configurable: true,
        get: function get() {
            if (definingProperty || this === target.prototype || this.hasOwnProperty(key) || typeof fn !== 'function') {
                return fn;
            }
            var boundFn = fn.bind(this);
            definingProperty = true;
            Object.defineProperty(this, key, {
                configurable: true,
                get: function get() {
                    return boundFn;
                },
                set: function set(value) {
                    fn = value;
                    delete this[key];
                }
            });
            definingProperty = false;
            return boundFn;
        },
        set: function set(value) {
            fn = value;
        }
    };
}
function boundClass(target) {
    var keys;
    if (typeof Reflect !== 'undefined' && typeof Reflect.ownKeys === 'function') {
        keys = Reflect.ownKeys(target.prototype);
    }
    else {
        keys = Object.getOwnPropertyNames(target.prototype);
        if (typeof Object.getOwnPropertySymbols === 'function') {
            keys = keys.concat(Object.getOwnPropertySymbols(target.prototype));
        }
    }
    keys.forEach(function (key) {
        if (key === 'constructor') {
            return;
        }
        var descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);
        if (typeof descriptor.value === 'function') {
            Object.defineProperty(target.prototype, key, boundMethod(target, key, descriptor));
        }
    });
    return target;
}
function autobind() {
    if (arguments.length === 1) {
        return boundClass.apply(void 0, arguments);
    }
    return boundMethod.apply(void 0, arguments);
}


/***/ }),

/***/ 20255:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "gn": function() { return /* binding */ __decorate; }
/* harmony export */ });
/* unused harmony exports __extends, __assign, __rest, __param, __metadata, __awaiter, __generator, __createBinding, __exportStar, __values, __read, __spread, __spreadArrays, __spreadArray, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault, __classPrivateFieldGet, __classPrivateFieldSet, __classPrivateFieldIn */
var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b)
            if (Object.prototype.hasOwnProperty.call(b, p))
                d[p] = b[p]; };
    return extendStatics(d, b);
};
function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function () {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
    else
        for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try {
            step(generator.next(value));
        }
        catch (e) {
            reject(e);
        } }
        function rejected(value) { try {
            step(generator["throw"](value));
        }
        catch (e) {
            reject(e);
        } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = { label: 0, sent: function () { if (t[0] & 1)
            throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f)
            throw new TypeError("Generator is already executing.");
        while (_)
            try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                    return t;
                if (y = 0, t)
                    op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0:
                    case 1:
                        t = op;
                        break;
                    case 4:
                        _.label++;
                        return { value: op[1], done: false };
                    case 5:
                        _.label++;
                        y = op[1];
                        op = [0];
                        continue;
                    case 7:
                        op = _.ops.pop();
                        _.trys.pop();
                        continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                            _ = 0;
                            continue;
                        }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                            _.label = op[1];
                            break;
                        }
                        if (op[0] === 6 && _.label < t[1]) {
                            _.label = t[1];
                            t = op;
                            break;
                        }
                        if (t && _.label < t[2]) {
                            _.label = t[2];
                            _.ops.push(op);
                            break;
                        }
                        if (t[2])
                            _.ops.pop();
                        _.trys.pop();
                        continue;
                }
                op = body.call(thisArg, _);
            }
            catch (e) {
                op = [6, e];
                y = 0;
            }
            finally {
                f = t = 0;
            }
        if (op[0] & 5)
            throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
    }
}
var __createBinding = Object.create ? (function (o, m, k, k2) {
    if (k2 === undefined)
        k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function () { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function (o, m, k, k2) {
    if (k2 === undefined)
        k2 = k;
    o[k2] = m[k];
});
function __exportStar(m, o) {
    for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m)
        return m.call(o);
    if (o && typeof o.length === "number")
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m)
        return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
    }
    catch (error) {
        e = { error: error };
    }
    finally {
        try {
            if (r && !r.done && (m = i["return"]))
                m.call(i);
        }
        finally {
            if (e)
                throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}
function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar)
                    ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n])
        i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try {
        step(g[n](v));
    }
    catch (e) {
        settle(q[0][3], e);
    } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length)
        resume(q[0][0], q[0][1]); }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", { value: raw });
    }
    else {
        cooked.raw = raw;
    }
    return cooked;
}
;
var __setModuleDefault = Object.create ? (function (o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function (o, v) {
    o["default"] = v;
};
function __importStar(mod) {
    if (mod && mod.__esModule)
        return mod;
    var result = {};
    if (mod != null)
        for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
}
function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m")
        throw new TypeError("Private method is not writable");
    if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}
function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function"))
        throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}


/***/ }),

/***/ 27537:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "D": function() { return /* binding */ Config; }
/* harmony export */ });
/* harmony import */ var _core_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10063);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


const buttons = [
    'emoji',
    'image',
    'gif',
    'video',
    'file',
    '\n',
    'undo',
    'redo',
    '|',
    'paragraph',
    'brush',
    'bold',
    'italic',
    'underline',
    'strikethrough',
    '|',
    'left',
    'center',
    'right',
    '|',
    'ul',
    'ol',
    '|',
    'table'
];
class Config {
    constructor() {
        this.defaultTimeout = 100;
        this.namespace = '';
        this.safeMode = false;
        this.width = '100%';
        this.height = '100%';
        this.safePluginsList = ['about', 'enter', 'backspace'];
        this.license = '';
        this.preset = 'custom';
        this.presets = {
            inline: {
                inline: true,
                toolbar: false,
                toolbarInline: true,
                toolbarInlineForSelection: true,
                showXPathInStatusbar: false,
                showCharsCounter: false,
                showWordsCounter: false,
                showPlaceholder: false
            }
        };
        this.ownerDocument = (typeof document !== 'undefined'
            ? document
            : null);
        this.ownerWindow = (typeof window !== 'undefined'
            ? window
            : null);
        this.shadowRoot = null;
        this.styleValues = {};
        this.zIndex = 1;
        this.readonly = false;
        this.disabled = false;
        this.activeButtonsInReadOnly = [
            'source',
            'fullsize',
            'print',
            'about',
            'dots',
            'selectall'
        ];
        this.allowCommandsInReadOnly = ['selectall', 'preview', 'print'];
        this.toolbarButtonSize = 'middle';
        this.toolbarTopButtonSizeUp = true;
        this.allowTabNavigation = false;
        this.inline = false;
        this.theme = 'default';
        this.saveModeInStorage = false;
        this.editorCssClass = false;
        this.style = {
            font: '16px Poppins'
        };
        this.triggerChangeEvent = true;
        this.direction = '';
        this.language = navigator.language && navigator.language.substr(0, 2);
        this.debugLanguage = false;
        this.i18n = {
            ko: {
                'Insert Emoji': 'ì´ëª¨ì§ ì¶ê°',
                'Search emoji': 'ì´ëª¨ì§ ê²ì',
                'Smileys & Emotion': 'Smileys & Emotion',
                'People & Body': 'People & Body',
                'Animals & Nature': 'Animals & Nature',
                'Food & Drink': 'Food & Drink',
                'Travel & Places': 'Travel & Places',
                Activities: 'Activities',
                Objects: 'Objects',
                Flags: 'Flags',
                'Click to tune': 'ì¡°ì íë ¤ë©´ í´ë¦­',
                'Heading 5': 'ì ëª© 5',
                'Heading 6': 'ì ëª© 6'
            }
        };
        this.tabIndex = -1;
        this.toolbar = true;
        this.statusbar = true;
        this.showTooltip = true;
        this.showTooltipDelay = 1000;
        this.useNativeTooltip = false;
        this.defaultActionOnPaste = _core_constants__WEBPACK_IMPORTED_MODULE_0__.INSERT_AS_HTML;
        this.enter = _core_constants__WEBPACK_IMPORTED_MODULE_0__.PARAGRAPH;
        this.iframe = false;
        this.editHTMLDocumentMode = false;
        this.enterBlock = this.enter !== 'br' ? this.enter : _core_constants__WEBPACK_IMPORTED_MODULE_0__.PARAGRAPH;
        this.defaultMode = _core_constants__WEBPACK_IMPORTED_MODULE_0__.MODE_WYSIWYG;
        this.useSplitMode = false;
        this.colors = {
            greyscale: [
                '#000000',
                '#434343',
                '#666666',
                '#999999',
                '#B7B7B7',
                '#CCCCCC',
                '#D9D9D9',
                '#EFEFEF',
                '#F3F3F3',
                '#FFFFFF'
            ],
            full: [
                '#DD7E6B',
                '#EA9999',
                '#F9CB9C',
                '#FFE599',
                '#B6D7A8',
                '#A2C4C9',
                '#A4C2F4',
                '#9FC5E8',
                '#B4A7D6',
                '#D5A6BD',
                '#CC4125',
                '#E06666',
                '#F6B26B',
                '#FFD966',
                '#93C47D',
                '#76A5AF',
                '#6D9EEB',
                '#6FA8DC',
                '#8E7CC3',
                '#C27BA0',
                '#A61C00',
                '#CC0000',
                '#E69138',
                '#F1C232',
                '#6AA84F',
                '#45818E',
                '#3C78D8',
                '#3D85C6',
                '#674EA7',
                '#A64D79',
                '#85200C',
                '#990000',
                '#B45F06',
                '#BF9000',
                '#38761D',
                '#134F5C',
                '#1155CC',
                '#0B5394',
                '#351C75',
                '#733554',
                '#5B0F00',
                '#660000',
                '#783F04',
                '#7F6000',
                '#274E13',
                '#0C343D',
                '#1C4587',
                '#073763',
                '#20124D',
                '#4C1130'
            ]
        };
        this.colorPickerDefaultTab = 'color';
        this.imageDefaultWidth = 500;
        this.removeButtons = [];
        this.disablePlugins = [];
        this.extraPlugins = [
            'autocomplete',
            'backup',
            'change-case',
            'color-picker',
            'emoji',
            'finder',
            'google-search',
            'paste-code',
            'keyboard',
            'show-blocks',
            'button-generator',
            'highlight-signature',
            'google-maps',
            'page-break',
            'export-docs',
            'iframe-editor',
            'paste-from-word-pro'
        ];
        this.extraButtons = [];
        this.extraIcons = {};
        this.createAttributes = {
            table: {
                style: 'border-collapse:collapse; width: 100%; border: 1px solid #bdbdbd;'
            },
            tbody: {
                style: 'display: table; width: 100%; height: 100%;'
            },
            th: {
                style: 'border: 1px solid #bdbdbd;'
            },
            td: {
                style: 'border: 1px solid #bdbdbd;'
            }
        };
        this.sizeLG = 900;
        this.sizeMD = 700;
        this.sizeSM = 400;
        this.buttons = buttons;
        this.buttonsMD = buttons;
        this.buttonsSM = buttons;
        this.buttonsXS = [
            'emoji',
            'image',
            'gif',
            'video',
            '\n',
            'paragraph',
            'brush',
            'bold',
            'italic',
            '|',
            'ul',
            'ol',
        ];
        this.textIcons = false;
        this.hidePoweredByJodit = true;
        this.showBrowserColorPicker = false;
    }
    static get defaultOptions() {
        if (!Config.__defaultOptions) {
            Config.__defaultOptions = new Config();
        }
        return Config.__defaultOptions;
    }
}
Config.prototype.controls = {
    font: {
        list: {
            'andale mono,monospace': 'Andale Mono',
            'arial,helvetica,sans-serif': 'Arial',
            'arial black,sans-serif': 'Arial Black',
            'book antiqua,palatino,serif': 'Book Antiqua',
            'comic sans ms,sans-serif': 'Comic Sans MS',
            'courier new,courier,monospace': 'Courier New',
            'georgia,palatino,serif': 'Georgia',
            'helvetica,arial,sans-serif': 'Helvetica',
            'impact,sans-serif': 'Impact',
            'symbol,sans-serif': 'Symbol',
            'tahoma,arial,helvetica,sans-serif': 'Tahoma',
            'terminal,monaco,monospace': 'Terminal',
            'times new roman,times,serif': 'Times New Roman',
            'trebuchet ms,geneva,sans-serif': 'Trebuchet MS',
            'verdana,geneva,sans-serif': 'Verdana',
            webdings: 'Webdings',
            'wingdings,zapf dingbats': 'Wingdings'
        }
    }
};


/***/ }),

/***/ 57389:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "e": function() { return /* reexport */ Async; }
});

// EXTERNAL MODULE: ./src/core/helpers/async/set-timeout.ts
var set_timeout = __webpack_require__(60232);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-function.ts
var is_function = __webpack_require__(84121);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-plain-object.ts
var is_plain_object = __webpack_require__(77184);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-promise.ts
var is_promise = __webpack_require__(30317);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-string.ts
var is_string = __webpack_require__(40607);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-number.ts
var is_number = __webpack_require__(93860);
// EXTERNAL MODULE: ./src/core/helpers/utils/assert.ts
var assert = __webpack_require__(39665);
;// CONCATENATED MODULE: ./src/core/async/async.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







class Async {
    constructor() {
        var _a, _b, _c, _d;
        this.timers = new Map();
        this.__callbacks = new Map();
        this.promisesRejections = new Set();
        this.requestsIdle = new Set();
        this.requestsRaf = new Set();
        this.requestIdleCallbackNative = (_b = (_a = window['requestIdleCallback']) === null || _a === void 0 ? void 0 : _a.bind(window)) !== null && _b !== void 0 ? _b : ((callback, options) => {
            var _a;
            const start = Date.now();
            return this.setTimeout(() => {
                callback({
                    didTimeout: false,
                    timeRemaining: () => Math.max(0, 50 - (Date.now() - start))
                });
            }, (_a = options === null || options === void 0 ? void 0 : options.timeout) !== null && _a !== void 0 ? _a : 1);
        });
        this.cancelIdleCallbackNative = (_d = (_c = window['cancelIdleCallback']) === null || _c === void 0 ? void 0 : _c.bind(window)) !== null && _d !== void 0 ? _d : ((request) => {
            this.clearTimeout(request);
        });
        this.isDestructed = false;
    }
    delay(timeout) {
        return this.promise(resolve => this.setTimeout(resolve, timeout));
    }
    setTimeout(callback, timeout, ...args) {
        if (this.isDestructed) {
            return 0;
        }
        let options = {};
        if (!(0,is_number/* isNumber */.h)(timeout)) {
            options = timeout;
            timeout = options.timeout || 0;
        }
        if (options.label) {
            this.clearLabel(options.label);
        }
        const timer = (0,set_timeout/* setTimeout */.i)(callback, timeout, ...args), key = options.label || timer;
        this.timers.set(key, timer);
        this.__callbacks.set(key, callback);
        return timer;
    }
    updateTimeout(label, timeout) {
        (0,assert/* assert */.h)(label && this.timers.has(label), 'Label does not exist');
        if (!label || !this.timers.has(label)) {
            return null;
        }
        const callback = this.__callbacks.get(label);
        (0,assert/* assert */.h)((0,is_function/* isFunction */.m)(callback), 'Callback is not a function');
        return this.setTimeout(callback, { label, timeout });
    }
    clearLabel(label) {
        if (label && this.timers.has(label)) {
            (0,set_timeout/* clearTimeout */.g)(this.timers.get(label));
            this.timers.delete(label);
            this.__callbacks.delete(label);
        }
    }
    clearTimeout(timerOrLabel) {
        if ((0,is_string/* isString */.H)(timerOrLabel)) {
            return this.clearLabel(timerOrLabel);
        }
        (0,set_timeout/* clearTimeout */.g)(timerOrLabel);
        this.timers.delete(timerOrLabel);
        this.__callbacks.delete(timerOrLabel);
    }
    debounce(fn, timeout, firstCallImmediately = false) {
        let timer = 0, fired = false;
        const promises = [];
        const callFn = (...args) => {
            if (!fired) {
                timer = 0;
                const res = fn(...args);
                fired = true;
                if (promises.length) {
                    const runPromises = () => {
                        promises.forEach(res => res());
                        promises.length = 0;
                    };
                    (0,is_promise/* isPromise */.t)(res) ? res.finally(runPromises) : runPromises();
                }
            }
        };
        const onFire = (...args) => {
            fired = false;
            if (!timeout) {
                callFn(...args);
            }
            else {
                if (!timer && firstCallImmediately) {
                    callFn(...args);
                }
                (0,set_timeout/* clearTimeout */.g)(timer);
                timer = this.setTimeout(() => callFn(...args), (0,is_function/* isFunction */.m)(timeout) ? timeout() : timeout);
                this.timers.set(fn, timer);
            }
        };
        return (0,is_plain_object/* isPlainObject */.P)(timeout) && timeout.promisify
            ? (...args) => {
                const promise = this.promise(res => {
                    promises.push(res);
                });
                onFire(...args);
                return promise;
            }
            : onFire;
    }
    throttle(fn, timeout, ignore = false) {
        let timer = null, needInvoke, callee, lastArgs;
        return (...args) => {
            needInvoke = true;
            lastArgs = args;
            if (!timeout) {
                fn(...lastArgs);
                return;
            }
            if (!timer) {
                callee = () => {
                    if (needInvoke) {
                        fn(...lastArgs);
                        needInvoke = false;
                        timer = this.setTimeout(callee, (0,is_function/* isFunction */.m)(timeout) ? timeout() : timeout);
                        this.timers.set(callee, timer);
                    }
                    else {
                        timer = null;
                    }
                };
                callee();
            }
        };
    }
    promise(executor) {
        let rejectCallback = () => { };
        const promise = new Promise((resolve, reject) => {
            this.promisesRejections.add(reject);
            rejectCallback = reject;
            return executor(resolve, reject);
        });
        if (!promise.finally && "es2018" !== 'es2018') {}
        promise
            .finally(() => {
            this.promisesRejections.delete(rejectCallback);
        })
            .catch(() => null);
        promise.rejectCallback = rejectCallback;
        return promise;
    }
    promiseState(p) {
        if (p.status) {
            return p.status;
        }
        if (!Promise.race) {
            return new Promise(resolve => {
                p.then(v => {
                    resolve('fulfilled');
                    return v;
                }, e => {
                    resolve('rejected');
                    throw e;
                });
                this.setTimeout(() => {
                    resolve('pending');
                }, 100);
            });
        }
        const t = {};
        return Promise.race([p, t]).then(v => (v === t ? 'pending' : 'fulfilled'), () => 'rejected');
    }
    requestIdleCallback(callback, options) {
        const request = this.requestIdleCallbackNative(callback, options);
        this.requestsIdle.add(request);
        return request;
    }
    requestIdlePromise(options) {
        return this.promise(res => {
            const request = this.requestIdleCallback(() => res(request), options);
        });
    }
    cancelIdleCallback(request) {
        this.requestsIdle.delete(request);
        return this.cancelIdleCallbackNative(request);
    }
    requestAnimationFrame(callback) {
        const request = requestAnimationFrame(callback);
        this.requestsRaf.add(request);
        return request;
    }
    cancelAnimationFrame(request) {
        this.requestsRaf.delete(request);
        cancelAnimationFrame(request);
    }
    clear() {
        this.requestsIdle.forEach(key => this.cancelIdleCallback(key));
        this.requestsRaf.forEach(key => this.cancelAnimationFrame(key));
        this.timers.forEach(key => (0,set_timeout/* clearTimeout */.g)(this.timers.get(key)));
        this.timers.clear();
        this.promisesRejections.forEach(reject => reject());
        this.promisesRejections.clear();
    }
    destruct() {
        this.clear();
        this.isDestructed = true;
    }
}

;// CONCATENATED MODULE: ./src/core/async/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



/***/ }),

/***/ 12614:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "w": function() { return /* binding */ Component; }
/* harmony export */ });
/* harmony import */ var jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52607);
/* harmony import */ var jodit_core_global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(58299);
/* harmony import */ var jodit_core_component_statuses__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(10799);
/* harmony import */ var jodit_core_async__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(57389);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




const StatusListHandlers = new Map();
class Component {
    constructor() {
        this.async = new jodit_core_async__WEBPACK_IMPORTED_MODULE_3__/* .Async */ .e();
        this.ownerWindow = window;
        this.__componentStatus = jodit_core_component_statuses__WEBPACK_IMPORTED_MODULE_2__/* .STATUSES.beforeInit */ .n.beforeInit;
        this.uid = 'jodit-uid-' + (0,jodit_core_global__WEBPACK_IMPORTED_MODULE_1__/* .uniqueUid */ .fe)();
    }
    get componentName() {
        if (!this.__componentName) {
            this.__componentName =
                'jodit-' +
                    (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.kebabCase)(((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.isFunction)(this.className) ? this.className() : '') ||
                        (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.getClassName)(this));
        }
        return this.__componentName;
    }
    getFullElName(elementName, mod, modValue) {
        const result = [this.componentName];
        if (elementName) {
            elementName = elementName.replace(/[^a-z0-9-]/gi, '-');
            result.push(`__${elementName}`);
        }
        if (mod) {
            result.push('_', mod);
            result.push('_', (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.isVoid)(modValue) ? 'true' : modValue.toString());
        }
        return result.join('');
    }
    get ownerDocument() {
        return this.ow.document;
    }
    get od() {
        return this.ownerDocument;
    }
    get ow() {
        return this.ownerWindow;
    }
    get(chain, obj) {
        return (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.get)(chain, obj || this);
    }
    get isReady() {
        return this.componentStatus === jodit_core_component_statuses__WEBPACK_IMPORTED_MODULE_2__/* .STATUSES.ready */ .n.ready;
    }
    get isDestructed() {
        return this.componentStatus === jodit_core_component_statuses__WEBPACK_IMPORTED_MODULE_2__/* .STATUSES.destructed */ .n.destructed;
    }
    get isInDestruct() {
        return (jodit_core_component_statuses__WEBPACK_IMPORTED_MODULE_2__/* .STATUSES.beforeDestruct */ .n.beforeDestruct === this.componentStatus ||
            jodit_core_component_statuses__WEBPACK_IMPORTED_MODULE_2__/* .STATUSES.destructed */ .n.destructed === this.componentStatus);
    }
    bindDestruct(component) {
        component.hookStatus(jodit_core_component_statuses__WEBPACK_IMPORTED_MODULE_2__/* .STATUSES.beforeDestruct */ .n.beforeDestruct, () => !this.isInDestruct && this.destruct());
        return this;
    }
    destruct() {
        this.setStatus(jodit_core_component_statuses__WEBPACK_IMPORTED_MODULE_2__/* .STATUSES.destructed */ .n.destructed);
        this.async.destruct();
        if (StatusListHandlers.get(this)) {
            StatusListHandlers.delete(this);
        }
    }
    get componentStatus() {
        return this.__componentStatus;
    }
    set componentStatus(componentStatus) {
        this.setStatus(componentStatus);
    }
    setStatus(componentStatus) {
        return this.setStatusComponent(componentStatus, this);
    }
    setStatusComponent(componentStatus, component) {
        if (componentStatus === this.__componentStatus) {
            return;
        }
        if (component === this) {
            this.__componentStatus = componentStatus;
        }
        const proto = Object.getPrototypeOf(this);
        if (proto && (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.isFunction)(proto.setStatusComponent)) {
            proto.setStatusComponent(componentStatus, component);
        }
        const statuses = StatusListHandlers.get(this), list = statuses === null || statuses === void 0 ? void 0 : statuses[componentStatus];
        if (list && list.length) {
            list.forEach(cb => cb(component));
        }
    }
    hookStatus(status, callback) {
        let list = StatusListHandlers.get(this);
        if (!list) {
            list = {};
            StatusListHandlers.set(this, list);
        }
        if (!list[status]) {
            list[status] = [];
        }
        list[status].push(callback);
    }
    static isInstanceOf(c, constructorFunc) {
        return c instanceof constructorFunc;
    }
}
Component.STATUSES = jodit_core_component_statuses__WEBPACK_IMPORTED_MODULE_2__/* .STATUSES */ .n;


/***/ }),

/***/ 26655:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "wA": function() { return /* reexport */ component/* Component */.w; },
  "n$": function() { return /* reexport */ statuses/* STATUSES */.n; },
  "Hr": function() { return /* reexport */ ViewComponent; }
});

// EXTERNAL MODULE: ./src/core/component/statuses.ts
var statuses = __webpack_require__(10799);
// EXTERNAL MODULE: ./src/core/component/component.ts
var component = __webpack_require__(12614);
;// CONCATENATED MODULE: ./src/core/component/view-component.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

class ViewComponent extends component/* Component */.w {
    constructor(jodit) {
        super();
        this.setParentView(jodit);
    }
    get j() {
        return this.jodit;
    }
    get defaultTimeout() {
        return this.j.defaultTimeout;
    }
    i18n(text, ...params) {
        return this.j.i18n(text, ...params);
    }
    setParentView(jodit) {
        this.jodit = jodit;
        jodit.components.add(this);
        return this;
    }
    destruct() {
        this.j.components.delete(this);
        return super.destruct();
    }
}

;// CONCATENATED MODULE: ./src/core/component/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





/***/ }),

/***/ 10799:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "n": function() { return /* binding */ STATUSES; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const STATUSES = {
    beforeInit: 'beforeInit',
    ready: 'ready',
    beforeDestruct: 'beforeDestruct',
    destructed: 'destructed'
};


/***/ }),

/***/ 10063:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ACCURACY": function() { return /* binding */ ACCURACY; },
/* harmony export */   "BASE_PATH": function() { return /* binding */ BASE_PATH; },
/* harmony export */   "BR": function() { return /* binding */ BR; },
/* harmony export */   "CLIPBOARD_ID": function() { return /* binding */ CLIPBOARD_ID; },
/* harmony export */   "COMMAND_KEYS": function() { return /* binding */ COMMAND_KEYS; },
/* harmony export */   "EMULATE_DBLCLICK_TIMEOUT": function() { return /* binding */ EMULATE_DBLCLICK_TIMEOUT; },
/* harmony export */   "INSEPARABLE_TAGS": function() { return /* binding */ INSEPARABLE_TAGS; },
/* harmony export */   "INSERT_AS_HTML": function() { return /* binding */ INSERT_AS_HTML; },
/* harmony export */   "INSERT_AS_TEXT": function() { return /* binding */ INSERT_AS_TEXT; },
/* harmony export */   "INSERT_CLEAR_HTML": function() { return /* binding */ INSERT_CLEAR_HTML; },
/* harmony export */   "INSERT_ONLY_TEXT": function() { return /* binding */ INSERT_ONLY_TEXT; },
/* harmony export */   "INVISIBLE_SPACE": function() { return /* binding */ INVISIBLE_SPACE; },
/* harmony export */   "INVISIBLE_SPACE_REG_EXP": function() { return /* binding */ INVISIBLE_SPACE_REG_EXP; },
/* harmony export */   "INVISIBLE_SPACE_REG_EXP_END": function() { return /* binding */ INVISIBLE_SPACE_REG_EXP_END; },
/* harmony export */   "INVISIBLE_SPACE_REG_EXP_START": function() { return /* binding */ INVISIBLE_SPACE_REG_EXP_START; },
/* harmony export */   "IS_BLOCK": function() { return /* binding */ IS_BLOCK; },
/* harmony export */   "IS_IE": function() { return /* binding */ IS_IE; },
/* harmony export */   "IS_INLINE": function() { return /* binding */ IS_INLINE; },
/* harmony export */   "IS_MAC": function() { return /* binding */ IS_MAC; },
/* harmony export */   "KEY_ALIASES": function() { return /* binding */ KEY_ALIASES; },
/* harmony export */   "KEY_ALT": function() { return /* binding */ KEY_ALT; },
/* harmony export */   "KEY_BACKSPACE": function() { return /* binding */ KEY_BACKSPACE; },
/* harmony export */   "KEY_DELETE": function() { return /* binding */ KEY_DELETE; },
/* harmony export */   "KEY_DOWN": function() { return /* binding */ KEY_DOWN; },
/* harmony export */   "KEY_ENTER": function() { return /* binding */ KEY_ENTER; },
/* harmony export */   "KEY_ESC": function() { return /* binding */ KEY_ESC; },
/* harmony export */   "KEY_F3": function() { return /* binding */ KEY_F3; },
/* harmony export */   "KEY_LEFT": function() { return /* binding */ KEY_LEFT; },
/* harmony export */   "KEY_RIGHT": function() { return /* binding */ KEY_RIGHT; },
/* harmony export */   "KEY_SPACE": function() { return /* binding */ KEY_SPACE; },
/* harmony export */   "KEY_TAB": function() { return /* binding */ KEY_TAB; },
/* harmony export */   "KEY_UP": function() { return /* binding */ KEY_UP; },
/* harmony export */   "MARKER_CLASS": function() { return /* binding */ MARKER_CLASS; },
/* harmony export */   "MAY_BE_REMOVED_WITH_KEY": function() { return /* binding */ MAY_BE_REMOVED_WITH_KEY; },
/* harmony export */   "MODE_SOURCE": function() { return /* binding */ MODE_SOURCE; },
/* harmony export */   "MODE_SPLIT": function() { return /* binding */ MODE_SPLIT; },
/* harmony export */   "MODE_WYSIWYG": function() { return /* binding */ MODE_WYSIWYG; },
/* harmony export */   "NBSP_SPACE": function() { return /* binding */ NBSP_SPACE; },
/* harmony export */   "NEARBY": function() { return /* binding */ NEARBY; },
/* harmony export */   "PARAGRAPH": function() { return /* binding */ PARAGRAPH; },
/* harmony export */   "SAFE_COUNT_CHANGE_CALL": function() { return /* binding */ SAFE_COUNT_CHANGE_CALL; },
/* harmony export */   "SOURCE_CONSUMER": function() { return /* binding */ SOURCE_CONSUMER; },
/* harmony export */   "SPACE_REG_EXP": function() { return /* binding */ SPACE_REG_EXP; },
/* harmony export */   "SPACE_REG_EXP_END": function() { return /* binding */ SPACE_REG_EXP_END; },
/* harmony export */   "SPACE_REG_EXP_START": function() { return /* binding */ SPACE_REG_EXP_START; },
/* harmony export */   "TEMP_ATTR": function() { return /* binding */ TEMP_ATTR; },
/* harmony export */   "TEXT_HTML": function() { return /* binding */ TEXT_HTML; },
/* harmony export */   "TEXT_PLAIN": function() { return /* binding */ TEXT_PLAIN; },
/* harmony export */   "TEXT_RTF": function() { return /* binding */ TEXT_RTF; },
/* harmony export */   "lang": function() { return /* binding */ lang; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const INVISIBLE_SPACE = '\uFEFF';
const NBSP_SPACE = '\u00A0';
const INVISIBLE_SPACE_REG_EXP = () => /[\uFEFF]/g;
const INVISIBLE_SPACE_REG_EXP_END = () => /[\uFEFF]+$/g;
const INVISIBLE_SPACE_REG_EXP_START = () => /^[\uFEFF]+/g;
const SPACE_REG_EXP = () => /[\s\n\t\r\uFEFF\u200b]+/g;
const SPACE_REG_EXP_START = () => /^[\s\n\t\r\uFEFF\u200b]+/g;
const SPACE_REG_EXP_END = () => /[\s\n\t\r\uFEFF\u200b]+$/g;
const IS_BLOCK = /^(ADDRESS|ARTICLE|ASIDE|BLOCKQUOTE|CANVAS|DD|DFN|DIV|DL|DT|FIELDSET|FIGCAPTION|FIGURE|FOOTER|FORM|H[1-6]|HEADER|HGROUP|HR|LI|MAIN|NAV|NOSCRIPT|OUTPUT|P|PRE|RUBY|SCRIPT|STYLE|OBJECT|OL|SECTION|IFRAME|JODIT|JODIT-MEDIA|UL|TR|TD|TH|TBODY|THEAD|TFOOT|TABLE|BODY|HTML|VIDEO)$/i;
const IS_INLINE = /^(STRONG|SPAN|I|EM|B|SUP|SUB|A|U)$/i;
const INSEPARABLE_TAGS = [
    'img',
    'br',
    'video',
    'iframe',
    'script',
    'input',
    'textarea',
    'hr',
    'link',
    'jodit',
    'jodit-media'
];
const MAY_BE_REMOVED_WITH_KEY = RegExp(`^${INSEPARABLE_TAGS.join('|')}$`, 'i');
const KEY_BACKSPACE = 'Backspace';
const KEY_TAB = 'Tab';
const KEY_ENTER = 'Enter';
const KEY_ESC = 'Escape';
const KEY_ALT = 'Alt';
const KEY_LEFT = 'ArrowLeft';
const KEY_UP = 'ArrowUp';
const KEY_RIGHT = 'ArrowRight';
const KEY_DOWN = 'ArrowDown';
const KEY_SPACE = 'Space';
const KEY_DELETE = 'Delete';
const KEY_F3 = 'F3';
const NEARBY = 5;
const ACCURACY = 10;
const COMMAND_KEYS = [
    KEY_BACKSPACE,
    KEY_DELETE,
    KEY_UP,
    KEY_DOWN,
    KEY_RIGHT,
    KEY_LEFT,
    KEY_ENTER,
    KEY_ESC,
    KEY_F3,
    KEY_TAB
];
const BR = 'br';
const PARAGRAPH = 'p';
const MODE_WYSIWYG = 1;
const MODE_SOURCE = 2;
const MODE_SPLIT = 3;
const IS_IE = typeof navigator !== 'undefined' &&
    (navigator.userAgent.indexOf('MSIE') !== -1 ||
        /rv:11.0/i.test(navigator.userAgent));
const TEXT_PLAIN = IS_IE ? 'text' : 'text/plain';
const TEXT_HTML = IS_IE ? 'html' : 'text/html';
const TEXT_RTF = IS_IE ? 'rtf' : 'text/rtf';
const MARKER_CLASS = 'jodit-selection_marker';
const EMULATE_DBLCLICK_TIMEOUT = 300;
const INSERT_AS_HTML = 'insert_as_html';
const INSERT_CLEAR_HTML = 'insert_clear_html';
const INSERT_AS_TEXT = 'insert_as_text';
const INSERT_ONLY_TEXT = 'insert_only_text';
const SAFE_COUNT_CHANGE_CALL = 10;
const IS_MAC = typeof window !== 'undefined' &&
    /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
const KEY_ALIASES = {
    add: '+',
    break: 'pause',
    cmd: 'meta',
    command: 'meta',
    ctl: 'control',
    ctrl: 'control',
    del: 'delete',
    down: 'arrowdown',
    esc: 'escape',
    ins: 'insert',
    left: 'arrowleft',
    mod: IS_MAC ? 'meta' : 'control',
    opt: 'alt',
    option: 'alt',
    return: 'enter',
    right: 'arrowright',
    space: ' ',
    spacebar: ' ',
    up: 'arrowup',
    win: 'meta',
    windows: 'meta'
};
const BASE_PATH = (() => {
    if (typeof document === 'undefined') {
        return '';
    }
    const script = document.currentScript, removeScriptName = (s) => {
        const parts = s.split('/');
        if (/\.js/.test(parts[parts.length - 1])) {
            return parts.slice(0, parts.length - 1).join('/') + '/';
        }
        return s;
    };
    if (script) {
        return removeScriptName(script.src);
    }
    const scripts = document.querySelectorAll('script[src]');
    if (scripts && scripts.length) {
        return removeScriptName(scripts[scripts.length - 1].src);
    }
    return window.location.href;
})();
const TEMP_ATTR = 'data-jodit-temp';
const lang = {};
const CLIPBOARD_ID = 'clipboard';
const SOURCE_CONSUMER = 'source-consumer';


/***/ }),

/***/ 99205:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "w": function() { return /* binding */ component; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function component(constructorFunction) {
    class newConstructorFunction extends constructorFunction {
        constructor(...args) {
            super(...args);
            const isRootConstructor = this.constructor === newConstructorFunction;
            if (isRootConstructor) {
                if (!(this instanceof newConstructorFunction)) {
                    Object.setPrototypeOf(this, newConstructorFunction.prototype);
                }
                this.setStatus('ready');
            }
        }
    }
    return newConstructorFunction;
}


/***/ }),

/***/ 1509:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "D": function() { return /* binding */ debounce; },
/* harmony export */   "P": function() { return /* binding */ throttle; }
/* harmony export */ });
/* harmony import */ var jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99160);
/* harmony import */ var jodit_core_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(26655);
/* harmony import */ var jodit_core_helpers_utils_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(59058);
/* harmony import */ var jodit_core_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(52607);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




function debounce(timeout, firstCallImmediately = false, method = 'debounce') {
    return (target, propertyKey) => {
        const fn = target[propertyKey];
        if (!(0,jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .mf)(fn)) {
            throw (0,jodit_core_helpers_utils_error__WEBPACK_IMPORTED_MODULE_2__/* .error */ .vU)('Handler must be a Function');
        }
        target.hookStatus(jodit_core_component__WEBPACK_IMPORTED_MODULE_1__/* .STATUSES.ready */ .n$.ready, (component) => {
            const { async } = component;
            (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_3__.assert)(async != null, `Component ${component.componentName || component.constructor.name} should have "async:IAsync" field`);
            const realTimeout = (0,jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .mf)(timeout)
                ? timeout(component)
                : timeout;
            Object.defineProperty(component, propertyKey, {
                configurable: true,
                value: async[method](component[propertyKey].bind(component), (0,jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__/* .isNumber */ .hj)(realTimeout) || (0,jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__/* .isPlainObject */ .PO)(realTimeout)
                    ? realTimeout
                    : component.defaultTimeout, firstCallImmediately)
            });
        });
        return {
            configurable: true,
            get() {
                return fn.bind(this);
            }
        };
    };
}
function throttle(timeout, firstCallImmediately = false) {
    return debounce(timeout, firstCallImmediately, 'throttle');
}


/***/ }),

/***/ 11169:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "autobind": function() { return /* reexport */ esm/* default */.ZP; },
  "cache": function() { return /* reexport */ cache; },
  "component": function() { return /* reexport */ component/* component */.w; },
  "debounce": function() { return /* reexport */ debounce/* debounce */.D; },
  "derive": function() { return /* reexport */ derive; },
  "getPropertyDescriptor": function() { return /* reexport */ watch/* getPropertyDescriptor */.w7; },
  "hook": function() { return /* reexport */ hook; },
  "idle": function() { return /* reexport */ idle; },
  "nonenumerable": function() { return /* reexport */ nonenumerable; },
  "persistent": function() { return /* reexport */ persistent; },
  "throttle": function() { return /* reexport */ debounce/* throttle */.P; },
  "wait": function() { return /* reexport */ wait; },
  "watch": function() { return /* reexport */ watch/* watch */.YP; }
});

// EXTERNAL MODULE: ./src/core/helpers/index.ts + 14 modules
var helpers = __webpack_require__(52607);
;// CONCATENATED MODULE: ./src/core/decorators/cache/cache.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function cache(target, name, descriptor) {
    const getter = descriptor.get;
    if (!getter) {
        throw (0,helpers.error)('Getter property descriptor expected');
    }
    descriptor.get = function () {
        const value = getter.call(this);
        if (value && value.noCache === true) {
            return value;
        }
        Object.defineProperty(this, name, {
            configurable: descriptor.configurable,
            enumerable: descriptor.enumerable,
            writable: false,
            value
        });
        return value;
    };
}

// EXTERNAL MODULE: ./src/core/decorators/component/component.ts
var component = __webpack_require__(99205);
// EXTERNAL MODULE: ./src/core/decorators/debounce/debounce.ts
var debounce = __webpack_require__(1509);
// EXTERNAL MODULE: ./src/core/component/index.ts + 1 modules
var core_component = __webpack_require__(26655);
;// CONCATENATED MODULE: ./src/core/decorators/idle/idle.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function idle() {
    return (target, propertyKey) => {
        if (!(0,helpers.isFunction)(target[propertyKey])) {
            throw (0,helpers.error)('Handler must be a Function');
        }
        target.hookStatus(core_component/* STATUSES.ready */.n$.ready, (component) => {
            const { async } = component;
            const originalMethod = component[propertyKey];
            component[propertyKey] = (...args) => async.requestIdleCallback(originalMethod.bind(component, ...args));
        });
    };
}

// EXTERNAL MODULE: ./src/core/helpers/checker/index.ts + 7 modules
var checker = __webpack_require__(99160);
// EXTERNAL MODULE: ./src/core/helpers/utils/error/index.ts + 5 modules
var error = __webpack_require__(59058);
;// CONCATENATED MODULE: ./src/core/decorators/hook/hook.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function hook(status) {
    return (target, propertyKey) => {
        if (!(0,checker/* isFunction */.mf)(target[propertyKey])) {
            throw (0,error/* error */.vU)('Handler must be a Function');
        }
        target.hookStatus(status, (component) => {
            component[propertyKey].call(component);
        });
    };
}

;// CONCATENATED MODULE: ./src/core/decorators/nonenumerable/nonenumerable.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const nonenumerable = (target, propertyKey) => {
    const descriptor = Object.getOwnPropertyDescriptor(target, propertyKey) || {};
    if (descriptor.enumerable !== false) {
        Object.defineProperty(target, propertyKey, {
            enumerable: false,
            set(value) {
                Object.defineProperty(this, propertyKey, {
                    enumerable: false,
                    writable: true,
                    value
                });
            }
        });
    }
};

// EXTERNAL MODULE: ./src/core/helpers/checker/is-view-object.ts
var is_view_object = __webpack_require__(51813);
;// CONCATENATED MODULE: ./src/core/decorators/persistent/persistent.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function persistent(target, propertyKey) {
    target.hookStatus(core_component/* STATUSES.ready */.n$.ready, (component) => {
        const jodit = (0,is_view_object/* isViewObject */.f)(component)
            ? component
            : component.jodit, storageKey = `${jodit.options.namespace}${component.componentName}_prop_${propertyKey}`, initialValue = component[propertyKey];
        Object.defineProperty(component, propertyKey, {
            get() {
                var _a;
                return (_a = jodit.storage.get(storageKey)) !== null && _a !== void 0 ? _a : initialValue;
            },
            set(value) {
                jodit.storage.set(storageKey, value);
            }
        });
    });
}

;// CONCATENATED MODULE: ./src/core/decorators/wait/wait.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function wait(condition) {
    return (target, propertyKey) => {
        const fn = target[propertyKey];
        if (!(0,helpers.isFunction)(fn)) {
            throw (0,helpers.error)('Handler must be a Function');
        }
        target.hookStatus(core_component/* STATUSES.ready */.n$.ready, (component) => {
            const { async } = component;
            const realMethod = component[propertyKey];
            let timeout = 0;
            Object.defineProperty(component, propertyKey, {
                configurable: true,
                value: function callProxy(...args) {
                    async.clearTimeout(timeout);
                    if (condition(component)) {
                        realMethod.apply(component, args);
                    }
                    else {
                        timeout = async.setTimeout(() => callProxy(...args), 10);
                    }
                }
            });
        });
    };
}

// EXTERNAL MODULE: ./src/core/decorators/watch/watch.ts
var watch = __webpack_require__(44101);
;// CONCATENATED MODULE: ./src/core/decorators/derive/derive.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function derive(...traits) {
    return (target) => {
        const origin = target.prototype;
        for (let i = 0; i < traits.length; i++) {
            const trait = traits[i];
            const keys = Object.getOwnPropertyNames(trait.prototype);
            for (let j = 0; j < keys.length; j++) {
                const key = keys[j], method = Object.getOwnPropertyDescriptor(trait.prototype, key);
                const canDerive = method != null &&
                    (0,checker/* isFunction */.mf)(method.value) &&
                    !(0,checker/* isFunction */.mf)(origin[key]);
                if (canDerive) {
                    Object.defineProperty(origin, key, {
                        enumerable: true,
                        configurable: true,
                        writable: true,
                        value: function (...args) {
                            return method.value.call(this, ...args);
                        }
                    });
                }
            }
        }
    };
}

// EXTERNAL MODULE: ./node_modules/autobind-decorator/lib/esm/index.js
var esm = __webpack_require__(70631);
;// CONCATENATED MODULE: ./src/core/decorators/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */













/***/ }),

/***/ 44101:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "YP": function() { return /* binding */ watch; },
/* harmony export */   "w7": function() { return /* binding */ getPropertyDescriptor; }
/* harmony export */ });
/* harmony import */ var jodit_core_helpers_checker_is_function__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(84121);
/* harmony import */ var jodit_core_helpers_checker_is_plain_object__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(77184);
/* harmony import */ var jodit_core_helpers_checker_is_view_object__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(51813);
/* harmony import */ var jodit_core_event_emitter_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(80475);
/* harmony import */ var jodit_core_component_statuses__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10799);
/* harmony import */ var jodit_core_helpers_array_split_array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(62541);
/* harmony import */ var jodit_core_helpers_utils_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(59058);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







function getPropertyDescriptor(obj, prop) {
    let desc;
    do {
        desc = Object.getOwnPropertyDescriptor(obj, prop);
        obj = Object.getPrototypeOf(obj);
    } while (!desc && obj);
    return desc;
}
function watch(observeFields, context) {
    return (target, propertyKey) => {
        if (!(0,jodit_core_helpers_checker_is_function__WEBPACK_IMPORTED_MODULE_3__/* .isFunction */ .m)(target[propertyKey])) {
            throw (0,jodit_core_helpers_utils_error__WEBPACK_IMPORTED_MODULE_2__/* .error */ .vU)('Handler must be a Function');
        }
        const process = (component) => {
            const callback = (key, ...args) => {
                if (!component.isInDestruct) {
                    return component[propertyKey](key, ...args);
                }
            };
            (0,jodit_core_helpers_array_split_array__WEBPACK_IMPORTED_MODULE_4__/* .splitArray */ .C)(observeFields).forEach(field => {
                if (/:/.test(field)) {
                    const [objectPath, eventName] = field.split(':');
                    let ctx = context;
                    const view = (0,jodit_core_helpers_checker_is_view_object__WEBPACK_IMPORTED_MODULE_5__/* .isViewObject */ .f)(component)
                        ? component
                        : component.jodit;
                    if (objectPath.length) {
                        ctx = component.get(objectPath);
                    }
                    if ((0,jodit_core_helpers_checker_is_function__WEBPACK_IMPORTED_MODULE_3__/* .isFunction */ .m)(ctx)) {
                        ctx = ctx(component);
                    }
                    view.events.on(ctx || component, eventName, callback);
                    if (!ctx) {
                        view.events.on(eventName, callback);
                    }
                    component.hookStatus('beforeDestruct', () => {
                        view.events
                            .off(ctx || component, eventName, callback)
                            .off(eventName, callback);
                    });
                    return;
                }
                const parts = field.split('.'), [key] = parts, teil = parts.slice(1);
                let value = component[key];
                if ((0,jodit_core_helpers_checker_is_plain_object__WEBPACK_IMPORTED_MODULE_6__/* .isPlainObject */ .P)(value)) {
                    const observableValue = (0,jodit_core_event_emitter_observable__WEBPACK_IMPORTED_MODULE_0__/* .observable */ .L)(value);
                    observableValue.on(`change.${teil.join('.')}`, callback);
                }
                const descriptor = getPropertyDescriptor(target, key);
                Object.defineProperty(component, key, {
                    configurable: true,
                    set(v) {
                        const oldValue = value;
                        if (oldValue === v) {
                            return;
                        }
                        value = v;
                        if (descriptor && descriptor.set) {
                            descriptor.set.call(component, v);
                        }
                        if ((0,jodit_core_helpers_checker_is_plain_object__WEBPACK_IMPORTED_MODULE_6__/* .isPlainObject */ .P)(value)) {
                            value = (0,jodit_core_event_emitter_observable__WEBPACK_IMPORTED_MODULE_0__/* .observable */ .L)(value);
                            value.on(`change.${teil.join('.')}`, callback);
                        }
                        callback(key, oldValue, value);
                    },
                    get() {
                        if (descriptor && descriptor.get) {
                            return descriptor.get.call(component);
                        }
                        return value;
                    }
                });
            });
        };
        if ((0,jodit_core_helpers_checker_is_function__WEBPACK_IMPORTED_MODULE_3__/* .isFunction */ .m)(target.hookStatus)) {
            target.hookStatus(jodit_core_component_statuses__WEBPACK_IMPORTED_MODULE_1__/* .STATUSES.ready */ .n.ready, process);
        }
        else {
            process(target);
        }
    };
}
/* unused harmony default export */ var __WEBPACK_DEFAULT_EXPORT__ = ((/* unused pure expression or super */ null && (watch)));


/***/ }),

/***/ 43887:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "i": function() { return /* binding */ Dom; }
/* harmony export */ });
/* harmony import */ var jodit_core_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10063);
/* harmony import */ var jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52607);
/* harmony import */ var jodit_core_selection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(96811);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




class Dom {
    static detach(node) {
        while (node.firstChild) {
            node.removeChild(node.firstChild);
        }
    }
    static wrapInline(current, tag, editor) {
        let tmp, first = current, last = current;
        editor.s.save();
        let needFindNext = false;
        do {
            needFindNext = false;
            tmp = first.previousSibling;
            if (tmp && !Dom.isBlock(tmp)) {
                needFindNext = true;
                first = tmp;
            }
        } while (needFindNext);
        do {
            needFindNext = false;
            tmp = last.nextSibling;
            if (tmp && !Dom.isBlock(tmp)) {
                needFindNext = true;
                last = tmp;
            }
        } while (needFindNext);
        const wrapper = (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.isString)(tag) ? editor.createInside.element(tag) : tag;
        if (first.parentNode) {
            first.parentNode.insertBefore(wrapper, first);
        }
        let next = first;
        while (next) {
            next = first.nextSibling;
            wrapper.appendChild(first);
            if (first === last || !next) {
                break;
            }
            first = next;
        }
        editor.s.restore();
        return wrapper;
    }
    static wrap(current, tag, create) {
        const wrapper = (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.isString)(tag) ? create.element(tag) : tag;
        if (Dom.isNode(current)) {
            if (!current.parentNode) {
                throw (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.error)('Element should be in DOM');
            }
            current.parentNode.insertBefore(wrapper, current);
            wrapper.appendChild(current);
        }
        else {
            const fragment = current.extractContents();
            current.insertNode(wrapper);
            wrapper.appendChild(fragment);
        }
        return wrapper;
    }
    static unwrap(node) {
        const parent = node.parentNode;
        if (parent) {
            while (node.firstChild) {
                parent.insertBefore(node.firstChild, node);
            }
            Dom.safeRemove(node);
        }
    }
    static between(start, end, callback) {
        let next = start;
        while (next && next !== end) {
            if (start !== next && callback(next)) {
                break;
            }
            let step = next.firstChild || next.nextSibling;
            if (!step) {
                while (next && !next.nextSibling) {
                    next = next.parentNode;
                }
                step = next === null || next === void 0 ? void 0 : next.nextSibling;
            }
            next = step;
        }
    }
    static replace(elm, newTagName, create, withAttributes = false, notMoveContent = false) {
        if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.isHTML)(newTagName)) {
            newTagName = create.fromHTML(newTagName);
        }
        const tag = (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.isString)(newTagName)
            ? create.element(newTagName)
            : newTagName;
        if (!notMoveContent) {
            while (elm.firstChild) {
                tag.appendChild(elm.firstChild);
            }
        }
        if (withAttributes && Dom.isElement(elm) && Dom.isElement(tag)) {
            (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.toArray)(elm.attributes).forEach(attr => {
                tag.setAttribute(attr.name, attr.value);
            });
        }
        if (elm.parentNode) {
            elm.parentNode.replaceChild(tag, elm);
        }
        return tag;
    }
    static isEmptyTextNode(node) {
        return (Dom.isText(node) &&
            (!node.nodeValue ||
                node.nodeValue
                    .replace(jodit_core_constants__WEBPACK_IMPORTED_MODULE_0__.INVISIBLE_SPACE_REG_EXP(), '')
                    .trim().length === 0));
    }
    static isEmptyContent(node) {
        return Dom.each(node, (elm) => Dom.isEmptyTextNode(elm));
    }
    static isContentEditable(node, root) {
        return (Dom.isNode(node) &&
            !Dom.closest(node, elm => Dom.isElement(elm) &&
                elm.getAttribute('contenteditable') === 'false', root));
    }
    static isEmpty(node, condNoEmptyElement = /^(img|svg|canvas|input|textarea|form)$/) {
        if (!node) {
            return true;
        }
        if (Dom.isText(node)) {
            return node.nodeValue == null || (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.trim)(node.nodeValue).length === 0;
        }
        return (!condNoEmptyElement.test(node.nodeName.toLowerCase()) &&
            Dom.each(node, (elm) => {
                if ((Dom.isText(elm) &&
                    elm.nodeValue != null &&
                    (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.trim)(elm.nodeValue).length !== 0) ||
                    (Dom.isElement(elm) &&
                        condNoEmptyElement.test(elm.nodeName.toLowerCase()))) {
                    return false;
                }
            }));
    }
    static isNode(object) {
        return Boolean(object &&
            (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.isString)(object.nodeName) &&
            typeof object.nodeType === 'number' &&
            object.childNodes &&
            (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.isFunction)(object.appendChild));
    }
    static isCell(elm) {
        return Dom.isNode(elm) && /^(td|th)$/i.test(elm.nodeName);
    }
    static isImage(elm) {
        return (Dom.isNode(elm) && /^(img|svg|picture|canvas)$/i.test(elm.nodeName));
    }
    static isBlock(node) {
        return (!(0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.isVoid)(node) &&
            typeof node === 'object' &&
            Dom.isNode(node) &&
            jodit_core_constants__WEBPACK_IMPORTED_MODULE_0__.IS_BLOCK.test(node.nodeName));
    }
    static isText(node) {
        return Boolean(node && node.nodeType === Node.TEXT_NODE);
    }
    static isElement(node) {
        var _a;
        if (!Dom.isNode(node)) {
            return false;
        }
        const win = (_a = node.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView;
        return Boolean(win && node.nodeType === Node.ELEMENT_NODE);
    }
    static isFragment(node) {
        var _a;
        if (!Dom.isNode(node)) {
            return false;
        }
        const win = (_a = node.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView;
        return Boolean(win && node.nodeType === Node.DOCUMENT_FRAGMENT_NODE);
    }
    static isHTMLElement(node) {
        var _a;
        if (!Dom.isNode(node)) {
            return false;
        }
        const win = (_a = node.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView;
        return Boolean(win && node instanceof win.HTMLElement);
    }
    static isInlineBlock(node) {
        return (Dom.isElement(node) &&
            !/^(BR|HR)$/i.test(node.tagName) &&
            ['inline', 'inline-block'].indexOf((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.css)(node, 'display').toString()) !== -1);
    }
    static canSplitBlock(node) {
        return (!(0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.isVoid)(node) &&
            Dom.isHTMLElement(node) &&
            Dom.isBlock(node) &&
            !/^(TD|TH|CAPTION|FORM)$/.test(node.nodeName) &&
            node.style !== undefined &&
            !/^(fixed|absolute)/i.test(node.style.position));
    }
    static last(root, condition) {
        let last = root === null || root === void 0 ? void 0 : root.lastChild;
        if (!last) {
            return null;
        }
        do {
            if (condition(last)) {
                return last;
            }
            let next = last.lastChild;
            if (!next) {
                next = last.previousSibling;
            }
            if (!next && last.parentNode !== root) {
                do {
                    last = last.parentNode;
                } while (last &&
                    !(last === null || last === void 0 ? void 0 : last.previousSibling) &&
                    last.parentNode !== root);
                next = last === null || last === void 0 ? void 0 : last.previousSibling;
            }
            last = next;
        } while (last);
        return null;
    }
    static prev(node, condition, root, withChild = true) {
        return Dom.find(node, condition, root, false, withChild);
    }
    static next(node, condition, root, withChild = true) {
        return Dom.find(node, condition, root, true, withChild);
    }
    static prevWithClass(node, className) {
        return Dom.prev(node, node => {
            return (Dom.isElement(node) && node.classList.contains(className));
        }, node.parentNode);
    }
    static nextWithClass(node, className) {
        return Dom.next(node, elm => Dom.isElement(elm) && elm.classList.contains(className), node.parentNode);
    }
    static find(node, condition, root, leftToRight = true, withChild = true) {
        const gen = this.nextGen(node, root, leftToRight, withChild);
        let item = gen.next();
        while (!item.done) {
            if (condition(item.value)) {
                return item.value;
            }
            item = gen.next();
        }
        return null;
    }
    static *nextGen(start, root, leftToRight = true, withChild = true) {
        const stack = [];
        let currentNode = start;
        do {
            let next = leftToRight
                ? currentNode.nextSibling
                : currentNode.previousSibling;
            while (next) {
                stack.unshift(next);
                next = leftToRight ? next.nextSibling : next.previousSibling;
            }
            yield* this.runInStack(start, stack, leftToRight, withChild);
            currentNode = currentNode.parentNode;
        } while (currentNode && currentNode !== root);
        return null;
    }
    static each(elm, callback, leftToRight = true) {
        const gen = this.eachGen(elm, leftToRight);
        let item = gen.next();
        while (!item.done) {
            if (callback(item.value) === false) {
                return false;
            }
            item = gen.next();
        }
        return true;
    }
    static eachGen(root, leftToRight = true) {
        return this.runInStack(root, [root], leftToRight);
    }
    static *runInStack(start, stack, leftToRight, withChild = true) {
        while (stack.length) {
            const item = stack.pop();
            if (withChild) {
                let child = leftToRight ? item.lastChild : item.firstChild;
                while (child) {
                    stack.push(child);
                    child = leftToRight
                        ? child.previousSibling
                        : child.nextSibling;
                }
            }
            if (start !== item) {
                yield item;
            }
        }
    }
    static findWithCurrent(node, condition, root, sibling = 'nextSibling', child = 'firstChild') {
        let next = node;
        do {
            if (condition(next)) {
                return next || null;
            }
            if (child && next && next[child]) {
                const nextOne = Dom.findWithCurrent(next[child], condition, next, sibling, child);
                if (nextOne) {
                    return nextOne;
                }
            }
            while (next && !next[sibling] && next !== root) {
                next = next.parentNode;
            }
            if (next && next[sibling] && next !== root) {
                next = next[sibling];
            }
        } while (next && next !== root);
        return null;
    }
    static findSibling(node, left = true, cond = (n) => !Dom.isEmptyTextNode(n)) {
        let sibling = Dom.sibling(node, left);
        while (sibling && !cond(sibling)) {
            sibling = Dom.sibling(sibling, left);
        }
        return sibling && cond(sibling) ? sibling : null;
    }
    static findNotEmptySibling(node, left) {
        return Dom.findSibling(node, left, n => {
            var _a;
            return (!Dom.isEmptyTextNode(n) &&
                Boolean(!Dom.isText(n) || (((_a = n.nodeValue) === null || _a === void 0 ? void 0 : _a.length) && (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.trim)(n.nodeValue))));
        });
    }
    static findNotEmptyNeighbor(node, left, root) {
        return (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.call)(left ? Dom.prev : Dom.next, node, n => Boolean(n && (!Dom.isText(n) || (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.trim)((n === null || n === void 0 ? void 0 : n.nodeValue) || '').length)), root);
    }
    static sibling(node, left) {
        return left ? node.previousSibling : node.nextSibling;
    }
    static up(node, condition, root, checkRoot = false) {
        let start = node;
        if (!start) {
            return null;
        }
        do {
            if (condition(start)) {
                return start;
            }
            if (start === root || !start.parentNode) {
                break;
            }
            start = start.parentNode;
        } while (start && start !== root);
        if (start === root && checkRoot && condition(start)) {
            return start;
        }
        return null;
    }
    static closest(node, tagsOrCondition, root) {
        let condition;
        if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.isFunction)(tagsOrCondition)) {
            condition = tagsOrCondition;
        }
        else if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.isArray)(tagsOrCondition)) {
            condition = (tag) => Boolean(tag &&
                tagsOrCondition.includes(tag.nodeName.toLowerCase()));
        }
        else {
            condition = (tag) => Boolean(tag && tagsOrCondition === tag.nodeName.toLowerCase());
        }
        return Dom.up(node, condition, root);
    }
    static furthest(node, condition, root) {
        let matchedParent = null, current = node === null || node === void 0 ? void 0 : node.parentElement;
        while (current && current !== root) {
            if (condition(current)) {
                matchedParent = current;
            }
            current = current === null || current === void 0 ? void 0 : current.parentElement;
        }
        return matchedParent;
    }
    static appendChildFirst(root, newElement) {
        const child = root.firstChild;
        if (child) {
            if (child !== newElement) {
                root.insertBefore(newElement, child);
            }
        }
        else {
            root.appendChild(newElement);
        }
    }
    static after(elm, newElement) {
        const { parentNode } = elm;
        if (!parentNode) {
            return;
        }
        if (parentNode.lastChild === elm) {
            parentNode.appendChild(newElement);
        }
        else {
            parentNode.insertBefore(newElement, elm.nextSibling);
        }
    }
    static before(elm, newElement) {
        const { parentNode } = elm;
        if (!parentNode) {
            return;
        }
        parentNode.insertBefore(newElement, elm);
    }
    static prepend(root, newElement) {
        root.insertBefore(newElement, root.firstChild);
    }
    static append(root, newElement) {
        if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.isArray)(newElement)) {
            newElement.forEach(node => {
                this.append(root, node);
            });
        }
        else {
            root.appendChild(newElement);
        }
    }
    static moveContent(from, to, inStart = false) {
        const fragment = (from.ownerDocument || document).createDocumentFragment();
        (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.toArray)(from.childNodes).forEach((node) => {
            fragment.appendChild(node);
        });
        if (!inStart || !to.firstChild) {
            to.appendChild(fragment);
        }
        else {
            to.insertBefore(fragment, to.firstChild);
        }
    }
    static isOrContains(root, child, onlyContains = false) {
        if (root === child) {
            return !onlyContains;
        }
        return Boolean(child && root && this.up(child, nd => nd === root, root, true));
    }
    static safeRemove(...nodes) {
        nodes.forEach(node => Dom.isNode(node) &&
            node.parentNode &&
            node.parentNode.removeChild(node));
    }
    static safeInsertNode(range, node) {
        range.collapsed || range.deleteContents();
        range.insertNode(node);
        [node.nextSibling, node.previousSibling].forEach(n => Dom.isText(n) && !n.nodeValue && Dom.safeRemove(n));
    }
    static hide(node) {
        if (!node) {
            return;
        }
        (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.dataBind)(node, '__old_display', node.style.display);
        node.style.display = 'none';
    }
    static show(node) {
        if (!node) {
            return;
        }
        const display = (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.dataBind)(node, '__old_display');
        if (node.style.display === 'none') {
            node.style.display = display || '';
        }
    }
    static isTag(node, tagNames) {
        const tags = (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.asArray)(tagNames).map(String);
        for (let i = 0; i < tags.length; i += 1) {
            if (this.isElement(node) &&
                node.tagName.toLowerCase() === tags[i].toLowerCase()) {
                return true;
            }
        }
        return false;
    }
    static markTemporary(element, attributes) {
        attributes && (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.attr)(element, attributes);
        (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.attr)(element, jodit_core_constants__WEBPACK_IMPORTED_MODULE_0__.TEMP_ATTR, true);
        return element;
    }
    static isTemporary(element) {
        if (!Dom.isElement(element)) {
            return false;
        }
        return jodit_core_selection__WEBPACK_IMPORTED_MODULE_2__/* .Select.isMarker */ .Ph.isMarker(element) || (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.attr)(element, jodit_core_constants__WEBPACK_IMPORTED_MODULE_0__.TEMP_ATTR) === 'true';
    }
    static replaceTemporaryFromString(value) {
        return value.replace(/<([a-z]+)[^>]+data-jodit-temp[^>]+>(.+?)<\/\1>/gi, '$2');
    }
    static temporaryList(root) {
        return (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.$$)(`[${jodit_core_constants__WEBPACK_IMPORTED_MODULE_0__.TEMP_ATTR}]`, root);
    }
}


/***/ }),

/***/ 94522:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "b": function() { return /* reexport safe */ _lazy_walker__WEBPACK_IMPORTED_MODULE_1__.b; },
/* harmony export */   "i": function() { return /* reexport safe */ _dom__WEBPACK_IMPORTED_MODULE_0__.i; }
/* harmony export */ });
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43887);
/* harmony import */ var _lazy_walker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(74601);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




/***/ }),

/***/ 74601:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "b": function() { return /* binding */ LazyWalker; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(20255);
/* harmony import */ var jodit_core_event_emitter_eventify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(99437);
/* harmony import */ var jodit_core_decorators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11169);
/* harmony import */ var jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43887);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




class LazyWalker extends jodit_core_event_emitter_eventify__WEBPACK_IMPORTED_MODULE_2__/* .Eventify */ .a {
    constructor(async, options = {}) {
        super();
        this.async = async;
        this.options = options;
        this.workNodes = null;
        this.hadAffect = false;
        this.isWorked = false;
        this.isFinished = false;
        this.idleId = 0;
    }
    setWork(root) {
        if (this.isWorked) {
            this.break();
        }
        this.workNodes = jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.eachGen */ .i.eachGen(root, !this.options.reverse);
        this.isFinished = false;
        this.startIdleRequest();
        return this;
    }
    startIdleRequest() {
        var _a;
        this.idleId = this.async.requestIdleCallback(this.workPerform, {
            timeout: (_a = this.options.timeout) !== null && _a !== void 0 ? _a : 10
        });
    }
    break(reason) {
        if (this.isWorked) {
            this.stop();
            this.emit('break', reason);
        }
    }
    end() {
        if (this.isWorked) {
            this.stop();
            this.emit('end', this.hadAffect);
            this.hadAffect = false;
        }
    }
    stop() {
        this.isWorked = false;
        this.isFinished = true;
        this.workNodes = null;
        this.async.cancelIdleCallback(this.idleId);
    }
    destruct() {
        super.destruct();
        this.stop();
    }
    workPerform(deadline) {
        var _a;
        if (this.workNodes) {
            this.isWorked = true;
            let count = 0;
            const chunkSize = (_a = this.options.timeoutChunkSize) !== null && _a !== void 0 ? _a : 50;
            while (!this.isFinished &&
                (deadline.timeRemaining() > 0 ||
                    (deadline.didTimeout && count <= chunkSize))) {
                const item = this.workNodes.next();
                count += 1;
                if (this.visitNode(item.value)) {
                    this.hadAffect = true;
                }
                if (item.done) {
                    this.end();
                    return;
                }
            }
        }
        else {
            this.end();
        }
        if (!this.isFinished) {
            this.startIdleRequest();
        }
    }
    visitNode(nodeElm) {
        var _a;
        if (!nodeElm ||
            (this.options.whatToShow !== undefined &&
                nodeElm.nodeType !== this.options.whatToShow)) {
            return false;
        }
        return (_a = this.emit('visit', nodeElm)) !== null && _a !== void 0 ? _a : false;
    }
}
(0,tslib__WEBPACK_IMPORTED_MODULE_3__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_0__.autobind
], LazyWalker.prototype, "workPerform", null);


/***/ }),

/***/ 99437:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": function() { return /* binding */ Eventify; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
class Eventify {
    constructor() {
        this.__map = new Map();
    }
    on(name, func) {
        var _a;
        if (!this.__map.has(name)) {
            this.__map.set(name, new Set());
        }
        (_a = this.__map.get(name)) === null || _a === void 0 ? void 0 : _a.add(func);
        return this;
    }
    off(name, func) {
        var _a;
        if (this.__map.has(name)) {
            (_a = this.__map.get(name)) === null || _a === void 0 ? void 0 : _a.delete(func);
        }
        return this;
    }
    destruct() {
        this.__map.clear();
    }
    emit(name, ...args) {
        var _a;
        let result;
        if (this.__map.has(name)) {
            (_a = this.__map.get(name)) === null || _a === void 0 ? void 0 : _a.forEach(cb => {
                result = cb(...args);
            });
        }
        return result;
    }
}


/***/ }),

/***/ 39266:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "vp": function() { return /* reexport */ EventEmitter; },
  "DG": function() { return /* reexport */ EventHandlersStore; },
  "aN": function() { return /* reexport */ eventify/* Eventify */.a; },
  "rO": function() { return /* reexport */ defaultNameSpace; },
  "LO": function() { return /* reexport */ observable/* observable */.L; }
});

// EXTERNAL MODULE: ./src/core/helpers/utils/assert.ts
var assert = __webpack_require__(39665);
// EXTERNAL MODULE: ./src/core/helpers/array/to-array.ts
var to_array = __webpack_require__(42464);
;// CONCATENATED MODULE: ./src/core/event-emitter/store.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


const defaultNameSpace = 'JoditEventDefaultNamespace';
class EventHandlersStore {
    constructor() {
        this.__store = new Map();
    }
    get(event, namespace) {
        if (this.__store.has(namespace)) {
            const ns = this.__store.get(namespace);
            (0,assert/* assert */.h)(ns, '-');
            return ns[event];
        }
    }
    indexOf(event, namespace, originalCallback) {
        const blocks = this.get(event, namespace);
        if (blocks) {
            for (let i = 0; i < blocks.length; i += 1) {
                if (blocks[i].originalCallback === originalCallback) {
                    return i;
                }
            }
        }
        return false;
    }
    namespaces(withoutDefault = false) {
        const nss = (0,to_array/* toArray */.q)(this.__store.keys());
        return withoutDefault ? nss.filter(ns => ns !== defaultNameSpace) : nss;
    }
    events(namespace) {
        const ns = this.__store.get(namespace);
        return ns ? Object.keys(ns) : [];
    }
    set(event, namespace, data, onTop = false) {
        let ns = this.__store.get(namespace);
        if (!ns) {
            ns = {};
            this.__store.set(namespace, ns);
        }
        if (ns[event] === undefined) {
            ns[event] = [];
        }
        if (!onTop) {
            ns[event].push(data);
        }
        else {
            ns[event].unshift(data);
        }
    }
    clear() {
        this.__store.clear();
    }
    clearEvents(namespace, event) {
        const ns = this.__store.get(namespace);
        if (ns && ns[event]) {
            delete ns[event];
            if (!Object.keys(ns).length) {
                this.__store.delete(namespace);
            }
        }
    }
    isEmpty() {
        return this.__store.size === 0;
    }
}

// EXTERNAL MODULE: ./src/core/helpers/checker/is-string.ts
var is_string = __webpack_require__(40607);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-function.ts
var is_function = __webpack_require__(84121);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-array.ts
var is_array = __webpack_require__(2555);
// EXTERNAL MODULE: ./src/core/helpers/utils/error/index.ts + 5 modules
var error = __webpack_require__(59058);
// EXTERNAL MODULE: ./src/core/helpers/array/split-array.ts
var split_array = __webpack_require__(62541);
;// CONCATENATED MODULE: ./src/core/event-emitter/event-emitter.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






class EventEmitter {
    constructor(doc) {
        this.__mutedEvents = new Set();
        this.__key = '__JoditEventEmitterNamespaces';
        this.__doc = document;
        this.__prepareEvent = (e) => {
            if (e.cancelBubble) {
                return;
            }
            if (e.composed && (0,is_function/* isFunction */.m)(e.composedPath) && e.composedPath()[0]) {
                Object.defineProperty(e, 'target', {
                    value: e.composedPath()[0],
                    configurable: true,
                    enumerable: true
                });
            }
            if (e.type.match(/^touch/) &&
                e.changedTouches &&
                e.changedTouches.length) {
                ['clientX', 'clientY', 'pageX', 'pageY'].forEach((key) => {
                    Object.defineProperty(e, key, {
                        value: e.changedTouches[0][key],
                        configurable: true,
                        enumerable: true
                    });
                });
            }
            if (!e.originalEvent) {
                e.originalEvent = e;
            }
            if (e.type === 'paste' &&
                e.clipboardData === undefined &&
                this.__doc.defaultView.clipboardData) {
                Object.defineProperty(e, 'clipboardData', {
                    get: () => {
                        return this.__doc.defaultView.clipboardData;
                    },
                    configurable: true,
                    enumerable: true
                });
            }
        };
        this.currents = [];
        this.__stopped = [];
        this.__isDestructed = false;
        if (doc) {
            this.__doc = doc;
        }
        this.__key += new Date().getTime();
    }
    mute(event) {
        this.__mutedEvents.add(event !== null && event !== void 0 ? event : '*');
        return this;
    }
    isMuted(event) {
        if (event && this.__mutedEvents.has(event)) {
            return true;
        }
        return this.__mutedEvents.has('*');
    }
    unmute(event) {
        this.__mutedEvents.delete(event !== null && event !== void 0 ? event : '*');
        return this;
    }
    __eachEvent(events, callback) {
        const eventParts = (0,split_array/* splitArray */.C)(events).map(e => e.trim());
        eventParts.forEach(eventNameSpace => {
            const eventAndNameSpace = eventNameSpace.split('.');
            const namespace = eventAndNameSpace[1] || defaultNameSpace;
            callback.call(this, eventAndNameSpace[0], namespace);
        });
    }
    __getStore(subject) {
        if (!subject) {
            throw (0,error/* error */.vU)('Need subject');
        }
        if (subject[this.__key] === undefined) {
            const store = new EventHandlersStore();
            Object.defineProperty(subject, this.__key, {
                enumerable: false,
                configurable: true,
                writable: true,
                value: store
            });
        }
        return subject[this.__key];
    }
    __removeStoreFromSubject(subject) {
        if (subject[this.__key] !== undefined) {
            Object.defineProperty(subject, this.__key, {
                enumerable: false,
                configurable: true,
                writable: true,
                value: undefined
            });
        }
    }
    __triggerNativeEvent(element, event) {
        const evt = this.__doc.createEvent('HTMLEvents');
        if ((0,is_string/* isString */.H)(event)) {
            evt.initEvent(event, true, true);
        }
        else {
            evt.initEvent(event.type, event.bubbles, event.cancelable);
            [
                'screenX',
                'screenY',
                'clientX',
                'clientY',
                'target',
                'srcElement',
                'currentTarget',
                'timeStamp',
                'which',
                'keyCode'
            ].forEach(property => {
                Object.defineProperty(evt, property, {
                    value: event[property],
                    enumerable: true
                });
            });
            Object.defineProperty(evt, 'originalEvent', {
                value: event,
                enumerable: true
            });
        }
        element.dispatchEvent(evt);
    }
    get current() {
        return this.currents[this.currents.length - 1];
    }
    on(eventsOrSubjects, callbackOrEvents, optionsOrCallback, opts) {
        let subjects;
        let events;
        let callback;
        let options;
        if ((0,is_string/* isString */.H)(eventsOrSubjects) || (0,is_string/* isStringArray */.G)(eventsOrSubjects)) {
            subjects = this;
            events = eventsOrSubjects;
            callback = callbackOrEvents;
            options = optionsOrCallback;
        }
        else {
            subjects = eventsOrSubjects;
            events = callbackOrEvents;
            callback = optionsOrCallback;
            options = opts;
        }
        if (!((0,is_string/* isString */.H)(events) || (0,is_string/* isStringArray */.G)(events)) ||
            events.length === 0) {
            throw (0,error/* error */.vU)('Need events names');
        }
        if (!(0,is_function/* isFunction */.m)(callback)) {
            throw (0,error/* error */.vU)('Need event handler');
        }
        if ((0,is_array/* isArray */.k)(subjects)) {
            subjects.forEach(subj => {
                this.on(subj, events, callback, options);
            });
            return this;
        }
        const subject = subjects;
        const store = this.__getStore(subject);
        const isDOMElement = (0,is_function/* isFunction */.m)(subject.addEventListener), self = this;
        let syntheticCallback = function (event, ...args) {
            if (self.isMuted(event)) {
                return;
            }
            return callback && callback.call(this, ...args);
        };
        if (isDOMElement) {
            syntheticCallback = function (event) {
                if (self.isMuted(event.type)) {
                    return;
                }
                self.__prepareEvent(event);
                if (callback && callback.call(this, event) === false) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                    return false;
                }
                return;
            };
        }
        this.__eachEvent(events, (event, namespace) => {
            if (event.length === 0) {
                throw (0,error/* error */.vU)('Need event name');
            }
            if (store.indexOf(event, namespace, callback) === false) {
                const block = {
                    event,
                    originalCallback: callback,
                    syntheticCallback
                };
                store.set(event, namespace, block, options === null || options === void 0 ? void 0 : options.top);
                if (isDOMElement) {
                    const options = [
                        'touchstart',
                        'touchend',
                        'scroll',
                        'mousewheel',
                        'mousemove',
                        'touchmove'
                    ].includes(event)
                        ? {
                            passive: true
                        }
                        : false;
                    subject.addEventListener(event, syntheticCallback, options);
                }
            }
        });
        return this;
    }
    one(eventsOrSubjects, callbackOrEvents, optionsOrCallback, opts) {
        let subjects;
        let events;
        let callback;
        let options;
        if ((0,is_string/* isString */.H)(eventsOrSubjects) || (0,is_string/* isStringArray */.G)(eventsOrSubjects)) {
            subjects = this;
            events = eventsOrSubjects;
            callback = callbackOrEvents;
            options = optionsOrCallback;
        }
        else {
            subjects = eventsOrSubjects;
            events = callbackOrEvents;
            callback = optionsOrCallback;
            options = opts;
        }
        const newCallback = (...args) => {
            this.off(subjects, events, newCallback);
            return callback(...args);
        };
        this.on(subjects, events, newCallback, options);
        return this;
    }
    off(eventsOrSubjects, callbackOrEvents, handler) {
        let subjects;
        let events;
        let callback;
        if ((0,is_string/* isString */.H)(eventsOrSubjects) || (0,is_string/* isStringArray */.G)(eventsOrSubjects)) {
            subjects = this;
            events = eventsOrSubjects;
            callback = callbackOrEvents;
        }
        else {
            subjects = eventsOrSubjects;
            events = callbackOrEvents;
            callback = handler;
        }
        if ((0,is_array/* isArray */.k)(subjects)) {
            subjects.forEach(subj => {
                this.off(subj, events, callback);
            });
            return this;
        }
        const subject = subjects;
        const store = this.__getStore(subject);
        if (!((0,is_string/* isString */.H)(events) || (0,is_string/* isStringArray */.G)(events)) ||
            events.length === 0) {
            store.namespaces().forEach((namespace) => {
                this.off(subject, '.' + namespace);
            });
            this.__removeStoreFromSubject(subject);
            return this;
        }
        const isDOMElement = (0,is_function/* isFunction */.m)(subject.removeEventListener), removeEventListener = (block) => {
            if (isDOMElement) {
                subject.removeEventListener(block.event, block.syntheticCallback, false);
            }
        }, removeCallbackFromNameSpace = (event, namespace) => {
            if (event === '') {
                store.events(namespace).forEach((eventName) => {
                    if (eventName !== '') {
                        removeCallbackFromNameSpace(eventName, namespace);
                    }
                });
                return;
            }
            const blocks = store.get(event, namespace);
            if (!blocks || !blocks.length) {
                return;
            }
            if (!(0,is_function/* isFunction */.m)(callback)) {
                blocks.forEach(removeEventListener);
                blocks.length = 0;
                store.clearEvents(namespace, event);
            }
            else {
                const index = store.indexOf(event, namespace, callback);
                if (index !== false) {
                    removeEventListener(blocks[index]);
                    blocks.splice(index, 1);
                    if (!blocks.length) {
                        store.clearEvents(namespace, event);
                    }
                }
            }
        };
        this.__eachEvent(events, (event, namespace) => {
            if (namespace === defaultNameSpace) {
                store.namespaces().forEach(namespace => {
                    removeCallbackFromNameSpace(event, namespace);
                });
            }
            else {
                removeCallbackFromNameSpace(event, namespace);
            }
        });
        if (store.isEmpty()) {
            this.__removeStoreFromSubject(subject);
        }
        return this;
    }
    stopPropagation(subjectOrEvents, eventsList) {
        const subject = (0,is_string/* isString */.H)(subjectOrEvents)
            ? this
            : subjectOrEvents;
        const events = (0,is_string/* isString */.H)(subjectOrEvents)
            ? subjectOrEvents
            : eventsList;
        if (typeof events !== 'string') {
            throw (0,error/* error */.vU)('Need event names');
        }
        const store = this.__getStore(subject);
        this.__eachEvent(events, (event, namespace) => {
            const blocks = store.get(event, namespace);
            if (blocks) {
                this.__stopped.push(blocks);
            }
            if (namespace === defaultNameSpace) {
                store
                    .namespaces(true)
                    .forEach(ns => this.stopPropagation(subject, event + '.' + ns));
            }
        });
    }
    __removeStop(currentBlocks) {
        if (currentBlocks) {
            const index = this.__stopped.indexOf(currentBlocks);
            index !== -1 && this.__stopped.splice(0, index + 1);
        }
    }
    __isStopped(currentBlocks) {
        return (currentBlocks !== undefined &&
            this.__stopped.indexOf(currentBlocks) !== -1);
    }
    fire(subjectOrEvents, eventsList, ...args) {
        let result, result_value;
        const subject = (0,is_string/* isString */.H)(subjectOrEvents)
            ? this
            : subjectOrEvents;
        const events = (0,is_string/* isString */.H)(subjectOrEvents)
            ? subjectOrEvents
            : eventsList;
        const argumentsList = (0,is_string/* isString */.H)(subjectOrEvents)
            ? [eventsList, ...args]
            : args;
        const isDOMElement = (0,is_function/* isFunction */.m)(subject.dispatchEvent);
        if (!isDOMElement && !(0,is_string/* isString */.H)(events)) {
            throw (0,error/* error */.vU)('Need events names');
        }
        const store = this.__getStore(subject);
        if (!(0,is_string/* isString */.H)(events) && isDOMElement) {
            this.__triggerNativeEvent(subject, eventsList);
        }
        else {
            this.__eachEvent(events, (event, namespace) => {
                if (isDOMElement) {
                    this.__triggerNativeEvent(subject, event);
                }
                else {
                    const blocks = store.get(event, namespace);
                    if (blocks) {
                        try {
                            [...blocks].every((block) => {
                                if (this.__isStopped(blocks)) {
                                    return false;
                                }
                                this.currents.push(event);
                                result_value =
                                    block.syntheticCallback.call(subject, event, ...argumentsList);
                                this.currents.pop();
                                if (result_value !== undefined) {
                                    result = result_value;
                                }
                                return true;
                            });
                        }
                        finally {
                            this.__removeStop(blocks);
                        }
                    }
                    if (namespace === defaultNameSpace && !isDOMElement) {
                        store
                            .namespaces()
                            .filter(ns => ns !== namespace)
                            .forEach((ns) => {
                            const result_second = this.fire.apply(this, [
                                subject,
                                event + '.' + ns,
                                ...argumentsList
                            ]);
                            if (result_second !== undefined) {
                                result = result_second;
                            }
                        });
                    }
                }
            });
        }
        return result;
    }
    destruct() {
        if (!this.__isDestructed) {
            return;
        }
        this.__isDestructed = true;
        this.off(this);
        this.__getStore(this).clear();
        this.__removeStoreFromSubject(this);
    }
}

// EXTERNAL MODULE: ./src/core/event-emitter/eventify.ts
var eventify = __webpack_require__(99437);
// EXTERNAL MODULE: ./src/core/event-emitter/observable.ts
var observable = __webpack_require__(80475);
;// CONCATENATED MODULE: ./src/core/event-emitter/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






/***/ }),

/***/ 80475:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "L": function() { return /* binding */ observable; }
/* harmony export */ });
/* harmony import */ var jodit_core_helpers_checker_is_array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2555);
/* harmony import */ var jodit_core_helpers_checker_is_equal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(16716);
/* harmony import */ var jodit_core_helpers_checker_is_plain_object__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(77184);
/* harmony import */ var jodit_core_decorators_watch_watch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(44101);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




const OBSERVABLE_OBJECT = Symbol('observable-object');
function isObservableObject(obj) {
    return obj[OBSERVABLE_OBJECT] !== undefined;
}
function observable(obj) {
    if (isObservableObject(obj)) {
        return obj;
    }
    const __lockEvent = {};
    const __onEvents = {};
    const on = (event, callback) => {
        if ((0,jodit_core_helpers_checker_is_array__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .k)(event)) {
            event.map(e => on(e, callback));
            return obj;
        }
        if (!__onEvents[event]) {
            __onEvents[event] = [];
        }
        __onEvents[event].push(callback);
        return obj;
    };
    const fire = (event, ...attr) => {
        if ((0,jodit_core_helpers_checker_is_array__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .k)(event)) {
            event.map(e => fire(e, ...attr));
            return;
        }
        try {
            if (!__lockEvent[event] && __onEvents[event]) {
                __lockEvent[event] = true;
                __onEvents[event].forEach(clb => clb.call(obj, ...attr));
            }
        }
        finally {
            __lockEvent[event] = false;
        }
    };
    const initAccessors = (dict, prefixes = []) => {
        const store = {};
        if (isObservableObject(dict)) {
            return;
        }
        Object.defineProperty(dict, OBSERVABLE_OBJECT, {
            enumerable: false,
            value: true
        });
        Object.keys(dict).forEach(_key => {
            const key = _key;
            const prefix = prefixes.concat(key).filter(a => a.length);
            store[key] = dict[key];
            const descriptor = (0,jodit_core_decorators_watch_watch__WEBPACK_IMPORTED_MODULE_0__/* .getPropertyDescriptor */ .w7)(dict, key);
            Object.defineProperty(dict, key, {
                set: (value) => {
                    const oldValue = store[key];
                    if (!(0,jodit_core_helpers_checker_is_equal__WEBPACK_IMPORTED_MODULE_2__/* .isFastEqual */ .L)(store[key], value)) {
                        fire([
                            'beforeChange',
                            `beforeChange.${prefix.join('.')}`
                        ], key, value);
                        if ((0,jodit_core_helpers_checker_is_plain_object__WEBPACK_IMPORTED_MODULE_3__/* .isPlainObject */ .P)(value)) {
                            initAccessors(value, prefix);
                        }
                        if (descriptor && descriptor.set) {
                            descriptor.set.call(obj, value);
                        }
                        else {
                            store[key] = value;
                        }
                        const sum = [];
                        fire([
                            'change',
                            ...prefix.reduce((rs, p) => {
                                sum.push(p);
                                rs.push(`change.${sum.join('.')}`);
                                return rs;
                            }, [])
                        ], prefix.join('.'), oldValue, (value === null || value === void 0 ? void 0 : value.valueOf)
                            ? value.valueOf()
                            : value);
                    }
                },
                get: () => {
                    if (descriptor && descriptor.get) {
                        return descriptor.get.call(obj);
                    }
                    return store[key];
                },
                enumerable: true,
                configurable: true
            });
            if ((0,jodit_core_helpers_checker_is_plain_object__WEBPACK_IMPORTED_MODULE_3__/* .isPlainObject */ .P)(store[key])) {
                initAccessors(store[key], prefix);
            }
        });
        Object.defineProperty(obj, 'on', {
            value: on
        });
    };
    initAccessors(obj);
    return obj;
}


/***/ }),

/***/ 58299:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TB": function() { return /* binding */ eventEmitter; },
/* harmony export */   "ZO": function() { return /* binding */ getContainer; },
/* harmony export */   "as": function() { return /* binding */ instances; },
/* harmony export */   "fe": function() { return /* binding */ uniqueUid; },
/* harmony export */   "pw": function() { return /* binding */ pluginSystem; },
/* harmony export */   "qz": function() { return /* binding */ modules; },
/* harmony export */   "xl": function() { return /* binding */ extendLang; }
/* harmony export */ });
/* harmony import */ var _plugin_plugin_system__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(58153);
/* harmony import */ var _dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(94522);
/* harmony import */ var _event_emitter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(39266);
/* harmony import */ var _helpers_checker_is_jodit_object__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(47442);
/* harmony import */ var _helpers_checker_is_view_object__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(51813);
/* harmony import */ var _helpers_utils_get_class_name__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(28693);
/* harmony import */ var _helpers_string_kebab_case__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(90237);
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10063);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */








const instances = {};
let counter = 1;
const uuids = new Set();
function uniqueUid() {
    function gen() {
        counter += 10 * (Math.random() + 1);
        return Math.round(counter).toString(16);
    }
    let uid = gen();
    while (uuids.has(uid)) {
        uid = gen();
    }
    uuids.add(uid);
    return uid;
}
const pluginSystem = new _plugin_plugin_system__WEBPACK_IMPORTED_MODULE_0__/* .PluginSystem */ .h();
const modules = {};
const extendLang = (langs) => {
    Object.keys(langs).forEach(key => {
        if (_constants__WEBPACK_IMPORTED_MODULE_4__.lang[key]) {
            Object.assign(_constants__WEBPACK_IMPORTED_MODULE_4__.lang[key], langs[key]);
        }
        else {
            _constants__WEBPACK_IMPORTED_MODULE_4__.lang[key] = langs[key];
        }
    });
};
const boxes = new WeakMap();
function getContainer(jodit, classFunc, tag = 'div', createInsideEditor = false) {
    const name = classFunc ? (0,_helpers_utils_get_class_name__WEBPACK_IMPORTED_MODULE_3__/* .getClassName */ .g)(classFunc.prototype) : 'jodit-utils';
    const data = boxes.get(jodit) || {}, key = name + tag;
    const view = (0,_helpers_checker_is_view_object__WEBPACK_IMPORTED_MODULE_5__/* .isViewObject */ .f)(jodit) ? jodit : jodit.j;
    if (!data[key]) {
        let c = view.c, body = (0,_helpers_checker_is_jodit_object__WEBPACK_IMPORTED_MODULE_6__/* .isJoditObject */ .Z)(jodit) && jodit.o.shadowRoot
            ? jodit.o.shadowRoot
            : jodit.od.body;
        if (createInsideEditor &&
            (0,_helpers_checker_is_jodit_object__WEBPACK_IMPORTED_MODULE_6__/* .isJoditObject */ .Z)(jodit) &&
            jodit.od !== jodit.ed) {
            c = jodit.createInside;
            const place = tag === 'style' ? jodit.ed.head : jodit.ed.body;
            body =
                (0,_helpers_checker_is_jodit_object__WEBPACK_IMPORTED_MODULE_6__/* .isJoditObject */ .Z)(jodit) && jodit.o.shadowRoot
                    ? jodit.o.shadowRoot
                    : place;
        }
        const box = c.element(tag, {
            className: `jodit jodit-${(0,_helpers_string_kebab_case__WEBPACK_IMPORTED_MODULE_7__/* .kebabCase */ .G)(name)}-container jodit-box`
        });
        box.classList.add(`jodit_theme_${view.o.theme || 'default'}`);
        body.appendChild(box);
        data[key] = box;
        jodit.hookStatus('beforeDestruct', () => {
            _dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.safeRemove */ .i.safeRemove(box);
            delete data[key];
            if (Object.keys(data).length) {
                boxes.delete(jodit);
            }
        });
        boxes.set(jodit, data);
    }
    data[key].classList.remove('jodit_theme_default', 'jodit_theme_dark');
    data[key].classList.add(`jodit_theme_${view.o.theme || 'default'}`);
    return data[key];
}
const eventEmitter = new _event_emitter__WEBPACK_IMPORTED_MODULE_2__/* .EventEmitter */ .vp();


/***/ }),

/***/ 22789:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "_2": function() { return /* reexport */ asArray; },
  "C1": function() { return /* reexport */ split_array/* splitArray */.C; },
  "qo": function() { return /* reexport */ to_array/* toArray */.q; }
});

// EXTERNAL MODULE: ./src/core/helpers/checker/is-array.ts
var is_array = __webpack_require__(2555);
;// CONCATENATED MODULE: ./src/core/helpers/array/as-array.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

const asArray = (a) => ((0,is_array/* isArray */.k)(a) ? a : [a]);

// EXTERNAL MODULE: ./src/core/helpers/array/split-array.ts
var split_array = __webpack_require__(62541);
// EXTERNAL MODULE: ./src/core/helpers/array/to-array.ts
var to_array = __webpack_require__(42464);
;// CONCATENATED MODULE: ./src/core/helpers/array/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





/***/ }),

/***/ 62541:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "C": function() { return /* binding */ splitArray; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function splitArray(a) {
    return Array.isArray(a) ? a : a.split(/[,\s]+/);
}


/***/ }),

/***/ 42464:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "q": function() { return /* binding */ toArray; }
/* harmony export */ });
/* harmony import */ var _utils_reset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(33872);
/* harmony import */ var _checker_is_native_function__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(76994);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


const toArray = function toArray(...args) {
    var _a;
    const func = (0,_checker_is_native_function__WEBPACK_IMPORTED_MODULE_1__/* .isNativeFunction */ .Q)(Array.from)
        ? Array.from
        : (_a = (0,_utils_reset__WEBPACK_IMPORTED_MODULE_0__/* .reset */ .m)('Array.from')) !== null && _a !== void 0 ? _a : Array.from;
    return func.apply(Array, args);
};


/***/ }),

/***/ 60232:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "g": function() { return /* binding */ clearTimeout; },
/* harmony export */   "i": function() { return /* binding */ setTimeout; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function setTimeout(callback, timeout, ...args) {
    if (!timeout) {
        callback.call(null, ...args);
    }
    else {
        return window.setTimeout(callback, timeout, ...args);
    }
    return 0;
}
function clearTimeout(timer) {
    window.clearTimeout(timer);
}


/***/ }),

/***/ 99160:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "EO": function() { return /* reexport */ hasBrowserColorPicker; },
  "Zt": function() { return /* reexport */ hasContainer; },
  "kJ": function() { return /* reexport */ is_array/* isArray */.k; },
  "jn": function() { return /* reexport */ is_boolean/* isBoolean */.j; },
  "Z$": function() { return /* reexport */ isDestructable; },
  "Xy": function() { return /* reexport */ is_equal/* isEqual */.X; },
  "LP": function() { return /* reexport */ is_equal/* isFastEqual */.L; },
  "mf": function() { return /* reexport */ is_function/* isFunction */.m; },
  "FP": function() { return /* reexport */ isHTML; },
  "I4": function() { return /* reexport */ isHtmlFromWord; },
  "Gu": function() { return /* reexport */ isInitable; },
  "GN": function() { return /* reexport */ isInt; },
  "Zu": function() { return /* reexport */ is_jodit_object/* isJoditObject */.Z; },
  "A1": function() { return /* reexport */ isLicense; },
  "QC": function() { return /* reexport */ is_native_function/* isNativeFunction */.Q; },
  "hj": function() { return /* reexport */ is_number/* isNumber */.h; },
  "kE": function() { return /* reexport */ is_numeric/* isNumeric */.k; },
  "PO": function() { return /* reexport */ is_plain_object/* isPlainObject */.P; },
  "tI": function() { return /* reexport */ is_promise/* isPromise */.t; },
  "HD": function() { return /* reexport */ is_string/* isString */.H; },
  "GI": function() { return /* reexport */ is_string/* isStringArray */.G; },
  "PX": function() { return /* reexport */ is_url/* isURL */.P; },
  "r1": function() { return /* reexport */ isValidName; },
  "f2": function() { return /* reexport */ is_view_object/* isViewObject */.f; },
  "nj": function() { return /* reexport */ is_void/* isVoid */.n; },
  "FJ": function() { return /* reexport */ is_window/* isWindow */.F; }
});

;// CONCATENATED MODULE: ./src/core/helpers/checker/has-browser-color-picker.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function hasBrowserColorPicker() {
    let supportsColor = true;
    try {
        const a = document.createElement('input');
        a.type = 'color';
        supportsColor =
            a.type === 'color' && typeof a.selectionStart !== 'number';
    }
    catch (e) {
        supportsColor = false;
    }
    return supportsColor;
}

// EXTERNAL MODULE: ./src/core/helpers/checker/is-array.ts
var is_array = __webpack_require__(2555);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-boolean.ts
var is_boolean = __webpack_require__(65131);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-equal.ts
var is_equal = __webpack_require__(16716);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-function.ts
var is_function = __webpack_require__(84121);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-string.ts
var is_string = __webpack_require__(40607);
;// CONCATENATED MODULE: ./src/core/helpers/checker/is-html.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

const isHTML = (str) => (0,is_string/* isString */.H)(str) &&
    /<([A-Za-z][A-Za-z0-9]*)\b[^>]*>(.*?)<\/\1>/m.test(str.replace(/[\r\n]/g, ''));

;// CONCATENATED MODULE: ./src/core/helpers/checker/is-html-from-word.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function isHtmlFromWord(data) {
    return (data.search(/<meta.*?Microsoft Excel\s[\d].*?>/) !== -1 ||
        data.search(/<meta.*?Microsoft Word\s[\d].*?>/) !== -1 ||
        (data.search(/style="[^"]*mso-/) !== -1 && data.search(/<font/) !== -1));
}

// EXTERNAL MODULE: ./src/core/dom/dom.ts
var dom = __webpack_require__(43887);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-void.ts
var is_void = __webpack_require__(13859);
;// CONCATENATED MODULE: ./src/core/helpers/checker/is-imp-interface.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



function isInitable(value) {
    return !(0,is_void/* isVoid */.n)(value) && (0,is_function/* isFunction */.m)(value.init);
}
function isDestructable(value) {
    return !(0,is_void/* isVoid */.n)(value) && (0,is_function/* isFunction */.m)(value.destruct);
}
function hasContainer(value) {
    return !(0,is_void/* isVoid */.n)(value) && dom/* Dom.isElement */.i.isElement(value.container);
}

// EXTERNAL MODULE: ./src/core/helpers/checker/is-numeric.ts
var is_numeric = __webpack_require__(57587);
;// CONCATENATED MODULE: ./src/core/helpers/checker/is-int.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function isInt(value) {
    if ((0,is_string/* isString */.H)(value) && (0,is_numeric/* isNumeric */.k)(value)) {
        value = parseFloat(value);
    }
    return typeof value === 'number' && Number.isFinite(value) && !(value % 1);
}

// EXTERNAL MODULE: ./src/core/helpers/checker/is-jodit-object.ts
var is_jodit_object = __webpack_require__(47442);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-view-object.ts
var is_view_object = __webpack_require__(51813);
;// CONCATENATED MODULE: ./src/core/helpers/checker/is-license.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

const isLicense = (license) => (0,is_string/* isString */.H)(license) &&
    license.length === 23 &&
    /^[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{5}$/i.test(license);

// EXTERNAL MODULE: ./src/core/helpers/checker/is-native-function.ts
var is_native_function = __webpack_require__(76994);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-number.ts
var is_number = __webpack_require__(93860);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-plain-object.ts
var is_plain_object = __webpack_require__(77184);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-promise.ts
var is_promise = __webpack_require__(30317);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-url.ts
var is_url = __webpack_require__(56521);
;// CONCATENATED MODULE: ./src/core/helpers/checker/is-valid-name.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function isValidName(name) {
    if (!name.length) {
        return false;
    }
    return !/[^0-9A-Za-zÐ°-ÑÐ-Ð¯ÐÑ\w\-_.]/.test(name);
}

// EXTERNAL MODULE: ./src/core/helpers/checker/is-window.ts
var is_window = __webpack_require__(99562);
;// CONCATENATED MODULE: ./src/core/helpers/checker/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
























/***/ }),

/***/ 2555:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "k": function() { return /* binding */ isArray; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function isArray(elm) {
    return Array.isArray(elm);
}


/***/ }),

/***/ 65131:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "j": function() { return /* binding */ isBoolean; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function isBoolean(elm) {
    return typeof elm === 'boolean';
}


/***/ }),

/***/ 16716:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "L": function() { return /* binding */ isFastEqual; },
/* harmony export */   "X": function() { return /* binding */ isEqual; }
/* harmony export */ });
/* harmony import */ var jodit_core_helpers_string_stringify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(27561);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function isEqual(a, b) {
    return a === b || (0,jodit_core_helpers_string_stringify__WEBPACK_IMPORTED_MODULE_0__/* .stringify */ .P)(a) === (0,jodit_core_helpers_string_stringify__WEBPACK_IMPORTED_MODULE_0__/* .stringify */ .P)(b);
}
function isFastEqual(a, b) {
    return a === b;
}


/***/ }),

/***/ 84121:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "m": function() { return /* binding */ isFunction; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function isFunction(value) {
    return typeof value === 'function';
}


/***/ }),

/***/ 47442:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": function() { return /* binding */ isJoditObject; }
/* harmony export */ });
/* harmony import */ var _is_function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84121);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function isJoditObject(jodit) {
    return Boolean(jodit &&
        jodit instanceof Object &&
        (0,_is_function__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(jodit.constructor) &&
        ((typeof Jodit !== 'undefined' && jodit instanceof Jodit) ||
            jodit.isJodit));
}


/***/ }),

/***/ 76994:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Q": function() { return /* binding */ isNativeFunction; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function isNativeFunction(f) {
    return (Boolean(f) &&
        (typeof f).toLowerCase() === 'function' &&
        (f === Function.prototype ||
            /^\s*function\s*(\b[a-z$_][a-z0-9$_]*\b)*\s*\((|([a-z$_][a-z0-9$_]*)(\s*,[a-z$_][a-z0-9$_]*)*)\)\s*{\s*\[native code]\s*}\s*$/i.test(String(f))));
}


/***/ }),

/***/ 93860:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "h": function() { return /* binding */ isNumber; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function isNumber(value) {
    return typeof value === 'number' && !isNaN(value) && isFinite(value);
}


/***/ }),

/***/ 57587:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "k": function() { return /* binding */ isNumeric; }
/* harmony export */ });
/* harmony import */ var _is_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(40607);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function isNumeric(value) {
    if ((0,_is_string__WEBPACK_IMPORTED_MODULE_0__/* .isString */ .H)(value)) {
        if (!value.match(/^([+-])?[0-9]+(\.?)([0-9]+)?(e[0-9]+)?$/)) {
            return false;
        }
        value = parseFloat(value);
    }
    return typeof value === 'number' && !isNaN(value) && isFinite(value);
}


/***/ }),

/***/ 77184:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "P": function() { return /* binding */ isPlainObject; }
/* harmony export */ });
/* harmony import */ var _is_window__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99562);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function isPlainObject(obj) {
    if (!obj || typeof obj !== 'object' || obj.nodeType || (0,_is_window__WEBPACK_IMPORTED_MODULE_0__/* .isWindow */ .F)(obj)) {
        return false;
    }
    return !(obj.constructor &&
        !{}.hasOwnProperty.call(obj.constructor.prototype, 'isPrototypeOf'));
}


/***/ }),

/***/ 30317:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "t": function() { return /* binding */ isPromise; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function isPromise(val) {
    return val && typeof val.then === 'function';
}


/***/ }),

/***/ 40607:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "G": function() { return /* binding */ isStringArray; },
/* harmony export */   "H": function() { return /* binding */ isString; }
/* harmony export */ });
/* harmony import */ var jodit_core_helpers_checker_is_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2555);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function isString(value) {
    return typeof value === 'string';
}
function isStringArray(value) {
    return (0,jodit_core_helpers_checker_is_array__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .k)(value) && isString(value[0]);
}


/***/ }),

/***/ 56521:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "P": function() { return /* binding */ isURL; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function isURL(str) {
    if (str.includes(' ')) {
        return false;
    }
    if (typeof URL !== 'undefined') {
        try {
            const url = new URL(str);
            return ['https:', 'http:', 'ftp:', 'file:', 'rtmp:'].includes(url.protocol);
        }
        catch (e) {
            return false;
        }
    }
    const a = document.createElement('a');
    a.href = str;
    return Boolean(a.hostname);
}


/***/ }),

/***/ 51813:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "f": function() { return /* binding */ isViewObject; }
/* harmony export */ });
/* harmony import */ var _is_function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84121);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function isViewObject(jodit) {
    return Boolean(jodit &&
        jodit instanceof Object &&
        (0,_is_function__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(jodit.constructor) &&
        jodit.isView);
}


/***/ }),

/***/ 13859:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "n": function() { return /* binding */ isVoid; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function isVoid(value) {
    return value === undefined || value === null;
}


/***/ }),

/***/ 99562:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "F": function() { return /* binding */ isWindow; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function isWindow(obj) {
    return obj != null && obj === obj.window;
}


/***/ }),

/***/ 76588:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "h": function() { return /* binding */ colorToHex; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const colorToHex = (color) => {
    if (color === 'rgba(0, 0, 0, 0)' || color === '') {
        return false;
    }
    if (!color) {
        return '#000000';
    }
    if (color.substr(0, 1) === '#') {
        return color;
    }
    const digits = /([\s\n\t\r]*?)rgb\((\d+), (\d+), (\d+)\)/.exec(color) ||
        /([\s\n\t\r]*?)rgba\((\d+), (\d+), (\d+), ([\d.]+)\)/.exec(color);
    if (!digits) {
        return '#000000';
    }
    const red = parseInt(digits[2], 10), green = parseInt(digits[3], 10), blue = parseInt(digits[4], 10), rgb = blue | (green << 8) | (red << 16);
    let hex = rgb.toString(16).toUpperCase();
    while (hex.length < 6) {
        hex = '0' + hex;
    }
    return digits[1] + '#' + hex;
};


/***/ }),

/***/ 64829:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "e": function() { return /* binding */ safeHTML; },
/* harmony export */   "n": function() { return /* binding */ sanitizeHTMLElement; }
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11358);
/* harmony import */ var jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43887);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function safeHTML(box, options) {
    if (!jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.isElement */ .i.isElement(box) && !jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.isFragment */ .i.isFragment(box)) {
        return;
    }
    if (options.removeOnError) {
        sanitizeHTMLElement(box);
        (0,_utils__WEBPACK_IMPORTED_MODULE_0__.$$)('[onerror]', box).forEach(elm => sanitizeHTMLElement(elm, options));
    }
    if (options.safeJavaScriptLink) {
        sanitizeHTMLElement(box);
        (0,_utils__WEBPACK_IMPORTED_MODULE_0__.$$)('a[href^="javascript"]', box).forEach(elm => sanitizeHTMLElement(elm, options));
    }
}
function sanitizeHTMLElement(elm, { safeJavaScriptLink, removeOnError } = {
    safeJavaScriptLink: true,
    removeOnError: true
}) {
    if (!jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.isElement */ .i.isElement(elm)) {
        return false;
    }
    let effected = false;
    if (removeOnError && elm.hasAttribute('onerror')) {
        (0,_utils__WEBPACK_IMPORTED_MODULE_0__/* .attr */ .Lj)(elm, 'onerror', null);
        effected = true;
    }
    const href = elm.getAttribute('href');
    if (safeJavaScriptLink && href && href.trim().indexOf('javascript') === 0) {
        (0,_utils__WEBPACK_IMPORTED_MODULE_0__/* .attr */ .Lj)(elm, 'href', location.protocol + '//' + href);
        effected = true;
    }
    return effected;
}


/***/ }),

/***/ 52607:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "$$": function() { return /* reexport */ utils.$$; },
  "AbortError": function() { return /* reexport */ utils/* AbortError */._L; },
  "CamelCaseToKebabCase": function() { return /* reexport */ string/* CamelCaseToKebabCase */.gP; },
  "ConfigFlatten": function() { return /* reexport */ utils/* ConfigFlatten */.tp; },
  "ConfigProto": function() { return /* reexport */ utils/* ConfigProto */.II; },
  "ConnectionError": function() { return /* reexport */ utils/* ConnectionError */.hY; },
  "LimitedStack": function() { return /* reexport */ utils/* LimitedStack */.lI; },
  "OptionsError": function() { return /* reexport */ utils/* OptionsError */.tW; },
  "abort": function() { return /* reexport */ utils/* abort */.JG; },
  "alignElement": function() { return /* reexport */ utils/* alignElement */.E3; },
  "appendScript": function() { return /* reexport */ utils/* appendScript */.uR; },
  "appendScriptAsync": function() { return /* reexport */ utils/* appendScriptAsync */.JL; },
  "appendStyleAsync": function() { return /* reexport */ utils/* appendStyleAsync */.Nf; },
  "applyStyles": function() { return /* reexport */ applyStyles; },
  "asArray": function() { return /* reexport */ array/* asArray */._2; },
  "assert": function() { return /* reexport */ utils/* assert */.hu; },
  "attr": function() { return /* reexport */ utils/* attr */.Lj; },
  "browser": function() { return /* reexport */ utils/* browser */.Xh; },
  "buildQuery": function() { return /* reexport */ utils/* buildQuery */.XP; },
  "call": function() { return /* reexport */ utils/* call */.RE; },
  "callPromise": function() { return /* reexport */ utils/* callPromise */.C6; },
  "camelCase": function() { return /* reexport */ string/* camelCase */.eV; },
  "cleanFromWord": function() { return /* reexport */ cleanFromWord; },
  "clearAlign": function() { return /* reexport */ utils/* clearAlign */.wL; },
  "clearCenterAlign": function() { return /* reexport */ utils/* clearCenterAlign */.bI; },
  "clearTimeout": function() { return /* reexport */ set_timeout/* clearTimeout */.g; },
  "cns": function() { return /* reexport */ utils/* cns */.H5; },
  "colorToHex": function() { return /* reexport */ color_to_hex/* colorToHex */.h; },
  "completeUrl": function() { return /* reexport */ utils/* completeUrl */.WO; },
  "connection": function() { return /* reexport */ utils/* connection */.ZI; },
  "convertMediaUrlToVideoEmbed": function() { return /* reexport */ utils/* convertMediaUrlToVideoEmbed */.UU; },
  "css": function() { return /* reexport */ utils/* css */.iv; },
  "cssPath": function() { return /* reexport */ utils/* cssPath */.iN; },
  "ctrlKey": function() { return /* reexport */ utils/* ctrlKey */.kT; },
  "dataBind": function() { return /* reexport */ utils/* dataBind */.qI; },
  "defaultLanguage": function() { return /* reexport */ utils/* defaultLanguage */.X9; },
  "error": function() { return /* reexport */ utils/* error */.vU; },
  "fastClone": function() { return /* reexport */ utils/* fastClone */.V8; },
  "fuzzySearchIndex": function() { return /* reexport */ string/* fuzzySearchIndex */.Qy; },
  "get": function() { return /* reexport */ utils/* get */.U2; },
  "getClassName": function() { return /* reexport */ utils/* getClassName */.gj; },
  "getContentWidth": function() { return /* reexport */ getContentWidth; },
  "getDataTransfer": function() { return /* reexport */ utils/* getDataTransfer */.qu; },
  "getScrollParent": function() { return /* reexport */ getScrollParent; },
  "getXPathByElement": function() { return /* reexport */ utils/* getXPathByElement */.BR; },
  "hAlignElement": function() { return /* reexport */ utils/* hAlignElement */.zC; },
  "hasBrowserColorPicker": function() { return /* reexport */ checker/* hasBrowserColorPicker */.EO; },
  "hasContainer": function() { return /* reexport */ checker/* hasContainer */.Zt; },
  "htmlspecialchars": function() { return /* reexport */ htmlspecialchars; },
  "humanSizeToBytes": function() { return /* reexport */ utils/* humanSizeToBytes */.wx; },
  "i18n": function() { return /* reexport */ string/* i18n */.ag; },
  "inView": function() { return /* reexport */ utils/* inView */.jF; },
  "innerWidth": function() { return /* reexport */ inner_width_innerWidth; },
  "isAbort": function() { return /* reexport */ utils/* isAbort */.PQ; },
  "isArray": function() { return /* reexport */ checker/* isArray */.kJ; },
  "isAtom": function() { return /* reexport */ utils/* isAtom */.J8; },
  "isBoolean": function() { return /* reexport */ checker/* isBoolean */.jn; },
  "isDestructable": function() { return /* reexport */ checker/* isDestructable */.Z$; },
  "isEqual": function() { return /* reexport */ checker/* isEqual */.Xy; },
  "isFastEqual": function() { return /* reexport */ checker/* isFastEqual */.LP; },
  "isFunction": function() { return /* reexport */ checker/* isFunction */.mf; },
  "isHTML": function() { return /* reexport */ checker/* isHTML */.FP; },
  "isHtmlFromWord": function() { return /* reexport */ checker/* isHtmlFromWord */.I4; },
  "isInitable": function() { return /* reexport */ checker/* isInitable */.Gu; },
  "isInt": function() { return /* reexport */ checker/* isInt */.GN; },
  "isJoditObject": function() { return /* reexport */ checker/* isJoditObject */.Zu; },
  "isLicense": function() { return /* reexport */ checker/* isLicense */.A1; },
  "isNativeFunction": function() { return /* reexport */ checker/* isNativeFunction */.QC; },
  "isNumber": function() { return /* reexport */ checker/* isNumber */.hj; },
  "isNumeric": function() { return /* reexport */ checker/* isNumeric */.kE; },
  "isPlainObject": function() { return /* reexport */ checker/* isPlainObject */.PO; },
  "isPromise": function() { return /* reexport */ checker/* isPromise */.tI; },
  "isString": function() { return /* reexport */ checker/* isString */.HD; },
  "isStringArray": function() { return /* reexport */ checker/* isStringArray */.GI; },
  "isURL": function() { return /* reexport */ checker/* isURL */.PX; },
  "isValidName": function() { return /* reexport */ checker/* isValidName */.r1; },
  "isViewObject": function() { return /* reexport */ checker/* isViewObject */.f2; },
  "isVoid": function() { return /* reexport */ checker/* isVoid */.nj; },
  "isWindow": function() { return /* reexport */ checker/* isWindow */.FJ; },
  "kebabCase": function() { return /* reexport */ string/* kebabCase */.GL; },
  "keepNames": function() { return /* reexport */ utils/* keepNames */.kc; },
  "keys": function() { return /* reexport */ utils/* keys */.am; },
  "loadImage": function() { return /* reexport */ utils/* loadImage */.po; },
  "loadNext": function() { return /* reexport */ utils/* loadNext */.wY; },
  "loadNextStyle": function() { return /* reexport */ utils/* loadNextStyle */.GX; },
  "markAsAtomic": function() { return /* reexport */ utils/* markAsAtomic */.XT; },
  "markDeprecated": function() { return /* reexport */ utils/* markDeprecated */.Q8; },
  "markOwner": function() { return /* reexport */ utils/* markOwner */.MN; },
  "memorizeExec": function() { return /* reexport */ utils/* memorizeExec */.u3; },
  "nl2br": function() { return /* reexport */ nl2br; },
  "normalizeColor": function() { return /* reexport */ normalize/* normalizeColor */.ut; },
  "normalizeCssValue": function() { return /* reexport */ normalize/* normalizeCssValue */.Zh; },
  "normalizeKeyAliases": function() { return /* reexport */ normalize/* normalizeKeyAliases */.T2; },
  "normalizeLicense": function() { return /* reexport */ normalize/* normalizeLicense */.Pd; },
  "normalizeNode": function() { return /* reexport */ normalize/* normalizeNode */.Tz; },
  "normalizePath": function() { return /* reexport */ normalize/* normalizePath */.AH; },
  "normalizeRelativePath": function() { return /* reexport */ normalize/* normalizeRelativePath */.Jf; },
  "normalizeSize": function() { return /* reexport */ normalize/* normalizeSize */.aC; },
  "normalizeUrl": function() { return /* reexport */ normalize/* normalizeUrl */.D5; },
  "offset": function() { return /* reexport */ offset; },
  "options": function() { return /* reexport */ utils/* options */.YM; },
  "parseQuery": function() { return /* reexport */ utils/* parseQuery */.mB; },
  "position": function() { return /* reexport */ position; },
  "previewBox": function() { return /* reexport */ utils/* previewBox */.$l; },
  "refs": function() { return /* reexport */ utils/* refs */.xL; },
  "reset": function() { return /* reexport */ utils/* reset */.mc; },
  "resolveElement": function() { return /* reexport */ utils/* resolveElement */.W2; },
  "safeHTML": function() { return /* reexport */ safe_html/* safeHTML */.e; },
  "sanitizeHTMLElement": function() { return /* reexport */ safe_html/* sanitizeHTMLElement */.n; },
  "scrollIntoViewIfNeeded": function() { return /* reexport */ utils/* scrollIntoViewIfNeeded */.n5; },
  "set": function() { return /* reexport */ utils/* set */.t8; },
  "setTimeout": function() { return /* reexport */ set_timeout/* setTimeout */.i; },
  "size": function() { return /* reexport */ object_size/* size */.d; },
  "splitArray": function() { return /* reexport */ array/* splitArray */.C1; },
  "sprintf": function() { return /* reexport */ string/* sprintf */.gB; },
  "stringify": function() { return /* reexport */ string/* stringify */.Pz; },
  "stripTags": function() { return /* reexport */ stripTags; },
  "toArray": function() { return /* reexport */ array/* toArray */.qo; },
  "trim": function() { return /* reexport */ string/* trim */.fy; },
  "trimInv": function() { return /* reexport */ string/* trimInv */.as; },
  "ucfirst": function() { return /* reexport */ string/* ucfirst */.Ps; },
  "val": function() { return /* reexport */ utils/* val */.P0; }
});

// EXTERNAL MODULE: ./src/core/helpers/utils/index.ts + 11 modules
var utils = __webpack_require__(11358);
// EXTERNAL MODULE: ./src/core/helpers/array/index.ts + 1 modules
var array = __webpack_require__(22789);
// EXTERNAL MODULE: ./src/core/helpers/async/set-timeout.ts
var set_timeout = __webpack_require__(60232);
;// CONCATENATED MODULE: ./src/core/helpers/async/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


// EXTERNAL MODULE: ./src/core/helpers/checker/index.ts + 7 modules
var checker = __webpack_require__(99160);
// EXTERNAL MODULE: ./src/core/helpers/color/color-to-hex.ts
var color_to_hex = __webpack_require__(76588);
;// CONCATENATED MODULE: ./src/core/helpers/color/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


// EXTERNAL MODULE: ./src/core/dom/dom.ts
var dom = __webpack_require__(43887);
// EXTERNAL MODULE: ./src/core/helpers/string/trim.ts
var trim = __webpack_require__(50106);
;// CONCATENATED MODULE: ./src/core/helpers/html/apply-styles.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



function normalizeCSS(s) {
    return s
        .replace(/mso-[a-z-]+:[\s]*[^;]+;/gi, '')
        .replace(/mso-[a-z-]+:[\s]*[^";']+$/gi, '')
        .replace(/border[a-z-]*:[\s]*[^;]+;/gi, '')
        .replace(/([0-9.]+)(pt|cm)/gi, (match, units, metrics) => {
        switch (metrics.toLowerCase()) {
            case 'pt':
                return (parseFloat(units) * 1.328).toFixed(0) + 'px';
            case 'cm':
                return (parseFloat(units) * 0.02645833).toFixed(0) + 'px';
        }
        return match;
    });
}
function applyStyles(html) {
    if (html.indexOf('<html ') === -1) {
        return html;
    }
    html = html.substring(html.indexOf('<html '), html.length);
    html = html.substring(0, html.lastIndexOf('</html>') + '</html>'.length);
    const iframe = document.createElement('iframe');
    iframe.style.display = 'none';
    document.body.appendChild(iframe);
    let convertedString = '', collection = [];
    try {
        const iframeDoc = iframe.contentDocument ||
            (iframe.contentWindow ? iframe.contentWindow.document : null);
        if (iframeDoc) {
            iframeDoc.open();
            iframeDoc.write(html);
            iframeDoc.close();
            try {
                for (let i = 0; i < iframeDoc.styleSheets.length; i += 1) {
                    const rules = iframeDoc.styleSheets[i].cssRules;
                    for (let idx = 0; idx < rules.length; idx += 1) {
                        if (rules[idx].selectorText === '') {
                            continue;
                        }
                        collection = (0,utils.$$)(rules[idx].selectorText, iframeDoc.body);
                        collection.forEach((elm) => {
                            elm.style.cssText = normalizeCSS(rules[idx].style.cssText +
                                ';' +
                                elm.style.cssText);
                        });
                    }
                }
            }
            catch (e) {
                if (false) {}
            }
            dom/* Dom.each */.i.each(iframeDoc.body, node => {
                if (dom/* Dom.isElement */.i.isElement(node)) {
                    const elm = node;
                    const css = elm.getAttribute('style');
                    if (css) {
                        elm.style.cssText = normalizeCSS(css);
                    }
                    if (elm.hasAttribute('style') &&
                        !elm.getAttribute('style')) {
                        elm.removeAttribute('style');
                    }
                }
            });
            convertedString = iframeDoc.firstChild
                ? (0,trim/* trim */.f)(iframeDoc.body.innerHTML)
                : '';
        }
    }
    catch (_a) {
    }
    finally {
        dom/* Dom.safeRemove */.i.safeRemove(iframe);
    }
    if (convertedString) {
        html = convertedString;
    }
    return (0,trim/* trim */.f)(html
        .replace(/<(\/)?(html|colgroup|col|o:p)[^>]*>/g, '')
        .replace(/<!--[^>]*>/g, ''));
}

// EXTERNAL MODULE: ./src/core/helpers/array/to-array.ts
var to_array = __webpack_require__(42464);
;// CONCATENATED MODULE: ./src/core/helpers/html/clean-from-word.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



function cleanFromWord(html) {
    if (html.indexOf('<html ') !== -1) {
        html = html.substring(html.indexOf('<html '), html.length);
        html = html.substring(0, html.lastIndexOf('</html>') + '</html>'.length);
    }
    let convertedString = '';
    try {
        const div = document.createElement('div');
        div.innerHTML = html;
        const marks = [];
        if (div.firstChild) {
            dom/* Dom.each */.i.each(div, node => {
                if (!node) {
                    return;
                }
                switch (node.nodeType) {
                    case Node.ELEMENT_NODE:
                        switch (node.nodeName) {
                            case 'STYLE':
                            case 'LINK':
                            case 'META':
                                marks.push(node);
                                break;
                            case 'W:SDT':
                            case 'W:SDTPR':
                            case 'FONT':
                                dom/* Dom.unwrap */.i.unwrap(node);
                                break;
                            default:
                                (0,to_array/* toArray */.q)(node.attributes).forEach((attr) => {
                                    if ([
                                        'src',
                                        'href',
                                        'rel',
                                        'content'
                                    ].indexOf(attr.name.toLowerCase()) === -1) {
                                        node.removeAttribute(attr.name);
                                    }
                                });
                        }
                        break;
                    case Node.TEXT_NODE:
                        break;
                    default:
                        marks.push(node);
                }
            });
        }
        dom/* Dom.safeRemove.apply */.i.safeRemove.apply(null, marks);
        convertedString = div.innerHTML;
    }
    catch (e) { }
    if (convertedString) {
        html = convertedString;
    }
    html = html.split(/(\n)/).filter(trim/* trim */.f).join('\n');
    return html
        .replace(/<(\/)?(html|colgroup|col|o:p)[^>]*>/g, '')
        .replace(/<!--[^>]*>/g, '');
}

;// CONCATENATED MODULE: ./src/core/helpers/html/htmlspecialchars.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function htmlspecialchars(html) {
    const tmp = document.createElement('div');
    tmp.textContent = html;
    return tmp.innerHTML;
}

// EXTERNAL MODULE: ./src/core/helpers/checker/is-string.ts
var is_string = __webpack_require__(40607);
;// CONCATENATED MODULE: ./src/core/helpers/html/strip-tags.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




function stripTags(html, doc = document) {
    const tmp = doc.createElement('div');
    if ((0,is_string/* isString */.H)(html)) {
        tmp.innerHTML = html;
    }
    else {
        tmp.appendChild(html);
    }
    (0,utils.$$)('DIV, P, BR, H1, H2, H3, H4, H5, H6, HR', tmp).forEach(p => {
        const pr = p.parentNode;
        if (!pr) {
            return;
        }
        const nx = p.nextSibling;
        if (dom/* Dom.isText */.i.isText(nx) && /^\s/.test(nx.nodeValue || '')) {
            return;
        }
        if (nx) {
            pr.insertBefore(doc.createTextNode(' '), nx);
        }
    });
    return (0,trim/* trim */.f)(tmp.innerText) || '';
}

// EXTERNAL MODULE: ./src/core/helpers/html/safe-html.ts
var safe_html = __webpack_require__(64829);
;// CONCATENATED MODULE: ./src/core/helpers/html/nl2br.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function nl2br(html) {
    return html.replace(/\r\n|\r|\n/g, '<br/>');
}

;// CONCATENATED MODULE: ./src/core/helpers/html/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







// EXTERNAL MODULE: ./src/core/helpers/normalize/index.ts + 8 modules
var normalize = __webpack_require__(7460);
;// CONCATENATED MODULE: ./src/core/helpers/size/get-content-width.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const getContentWidth = (element, win) => {
    const pi = (value) => parseInt(value, 10), style = win.getComputedStyle(element), width = element.offsetWidth, paddingLeft = pi(style.getPropertyValue('padding-left') || '0'), paddingRight = pi(style.getPropertyValue('padding-right') || '0');
    return width - paddingLeft - paddingRight;
};

;// CONCATENATED MODULE: ./src/core/helpers/size/get-scroll-parent.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function getScrollParent(node) {
    if (!node) {
        return null;
    }
    const isElement = dom/* Dom.isHTMLElement */.i.isHTMLElement(node);
    const overflowY = isElement && (0,utils/* css */.iv)(node, 'overflowY');
    const isScrollable = isElement && overflowY !== 'visible' && overflowY !== 'hidden';
    if (isScrollable && node.scrollHeight >= node.clientHeight) {
        return node;
    }
    return (getScrollParent(node.parentNode) ||
        document.scrollingElement ||
        document.body);
}

;// CONCATENATED MODULE: ./src/core/helpers/size/inner-width.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const inner_width_innerWidth = (element, win) => {
    const computedStyle = win.getComputedStyle(element);
    let elementWidth = element.clientWidth;
    elementWidth -=
        parseFloat(computedStyle.paddingLeft || '0') +
            parseFloat(computedStyle.paddingRight || '0');
    return elementWidth;
};

;// CONCATENATED MODULE: ./src/core/helpers/size/offset.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const offset = (elm, jodit, doc, recurse = false) => {
    let rect;
    try {
        rect = elm.getBoundingClientRect();
    }
    catch (e) {
        rect = {
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            width: 0,
            height: 0
        };
    }
    const body = doc.body, docElem = doc.documentElement || {
        clientTop: 0,
        clientLeft: 0,
        scrollTop: 0,
        scrollLeft: 0
    }, win = doc.defaultView || doc.parentWindow, scrollTop = win.pageYOffset || docElem.scrollTop || body.scrollTop, scrollLeft = win.pageXOffset || docElem.scrollLeft || body.scrollLeft, clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0;
    let topValue, leftValue;
    const iframe = jodit.iframe;
    if (!recurse && jodit && jodit.options && jodit.o.iframe && iframe) {
        const { top, left } = offset(iframe, jodit, jodit.od, true);
        topValue = rect.top + top;
        leftValue = rect.left + left;
    }
    else {
        topValue = rect.top + scrollTop - clientTop;
        leftValue = rect.left + scrollLeft - clientLeft;
    }
    return {
        top: Math.round(topValue),
        left: Math.round(leftValue),
        width: rect.width,
        height: rect.height
    };
};

// EXTERNAL MODULE: ./src/core/helpers/checker/is-jodit-object.ts
var is_jodit_object = __webpack_require__(47442);
;// CONCATENATED MODULE: ./src/core/helpers/size/position.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function position(elm, jodit, recurse = false) {
    const rect = elm.getBoundingClientRect();
    let xPos = rect.left, yPos = rect.top;
    if ((0,is_jodit_object/* isJoditObject */.Z)(jodit) && jodit.iframe && !recurse) {
        const { left, top } = position(jodit.iframe, jodit, true);
        xPos += left;
        yPos += top;
    }
    return {
        left: Math.round(xPos),
        top: Math.round(yPos),
        width: Math.round(elm.offsetWidth),
        height: Math.round(elm.offsetHeight)
    };
}

// EXTERNAL MODULE: ./src/core/helpers/size/object-size.ts
var object_size = __webpack_require__(2636);
;// CONCATENATED MODULE: ./src/core/helpers/size/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







// EXTERNAL MODULE: ./src/core/helpers/string/index.ts + 2 modules
var string = __webpack_require__(26132);
;// CONCATENATED MODULE: ./src/core/helpers/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */











/***/ }),

/***/ 7460:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "ut": function() { return /* reexport */ normalizeColor; },
  "Zh": function() { return /* reexport */ normalize_css_value/* normalizeCssValue */.Z; },
  "T2": function() { return /* reexport */ normalizeKeyAliases; },
  "Pd": function() { return /* reexport */ normalizeLicense; },
  "Tz": function() { return /* reexport */ normalizeNode; },
  "AH": function() { return /* reexport */ normalizePath; },
  "Jf": function() { return /* reexport */ normalizeRelativePath; },
  "aC": function() { return /* reexport */ normalizeSize; },
  "D5": function() { return /* reexport */ normalizeUrl; }
});

// EXTERNAL MODULE: ./src/core/helpers/string/trim.ts
var trim = __webpack_require__(50106);
// EXTERNAL MODULE: ./src/core/constants.ts
var constants = __webpack_require__(10063);
;// CONCATENATED MODULE: ./src/core/helpers/normalize/normalize-key-aliases.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function normalizeKeyAliases(keys) {
    const memory = {};
    return keys
        .replace(/\+\+/g, '+add')
        .split(/[\s]*\+[\s]*/)
        .map(key => (0,trim/* trim */.f)(key.toLowerCase()))
        .map(key => constants.KEY_ALIASES[key] || key)
        .sort()
        .filter(key => !memory[key] && key !== '' && (memory[key] = true))
        .join('+');
}

;// CONCATENATED MODULE: ./src/core/helpers/normalize/normalize-license.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const normalizeLicense = (license, count = 8) => {
    const parts = [];
    while (license.length) {
        parts.push(license.substr(0, count));
        license = license.substr(count);
    }
    parts[1] = parts[1].replace(/./g, '*');
    parts[2] = parts[2].replace(/./g, '*');
    return parts.join('-');
};

// EXTERNAL MODULE: ./src/core/dom/dom.ts
var dom = __webpack_require__(43887);
;// CONCATENATED MODULE: ./src/core/helpers/normalize/normalize-node.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


const normalizeNode = (node) => {
    if (!node) {
        return;
    }
    if (dom/* Dom.isText */.i.isText(node) && node.nodeValue != null && node.parentNode) {
        while (dom/* Dom.isText */.i.isText(node.nextSibling)) {
            if (node.nextSibling.nodeValue != null) {
                node.nodeValue += node.nextSibling.nodeValue;
            }
            node.nodeValue = node.nodeValue.replace((0,constants.INVISIBLE_SPACE_REG_EXP)(), '');
            dom/* Dom.safeRemove */.i.safeRemove(node.nextSibling);
        }
    }
    else {
        normalizeNode(node.firstChild);
    }
    normalizeNode(node.nextSibling);
};

// EXTERNAL MODULE: ./src/core/helpers/string/index.ts + 2 modules
var string = __webpack_require__(26132);
;// CONCATENATED MODULE: ./src/core/helpers/normalize/normalize-path.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

const normalizePath = (...path) => {
    return path
        .filter(part => (0,string/* trim */.fy)(part).length)
        .map((part, index) => {
        part = part.replace(/([^:])[\\/]+/g, '$1/');
        if (index) {
            part = part.replace(/^\//, '');
        }
        if (index !== path.length - 1) {
            part = part.replace(/\/$/, '');
        }
        return part;
    })
        .join('/');
};

;// CONCATENATED MODULE: ./src/core/helpers/normalize/normalize-relative-path.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const normalizeRelativePath = (path) => {
    const sections = path.split('/'), builder = sections.reduce((builder, section) => {
        switch (section) {
            case '': {
                break;
            }
            case '.': {
                break;
            }
            case '..': {
                builder.pop();
                break;
            }
            default: {
                builder.push(section);
                break;
            }
        }
        return builder;
    }, []);
    return builder.join('/') + (path.endsWith('/') ? '/' : '');
};

;// CONCATENATED MODULE: ./src/core/helpers/normalize/normalize-size.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const normalizeSize = (value) => {
    if (/^[0-9]+$/.test(value.toString())) {
        return value + 'px';
    }
    return value.toString();
};

;// CONCATENATED MODULE: ./src/core/helpers/normalize/normalize-url.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const normalizeUrl = (...urls) => {
    return urls
        .filter(url => url.length)
        .map(url => url.replace(/\/$/, ''))
        .join('/')
        .replace(/([^:])[\\/]+/g, '$1/');
};

// EXTERNAL MODULE: ./src/core/helpers/normalize/normalize-css-value.ts
var normalize_css_value = __webpack_require__(99916);
// EXTERNAL MODULE: ./src/core/helpers/color/color-to-hex.ts
var color_to_hex = __webpack_require__(76588);
;// CONCATENATED MODULE: ./src/core/helpers/normalize/normalize-color.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


const normalizeColor = (colorInput) => {
    const newcolor = ['#'];
    let color = (0,color_to_hex/* colorToHex */.h)(colorInput);
    if (!color) {
        return false;
    }
    color = (0,string/* trim */.fy)(color.toUpperCase());
    color = color.substr(1);
    if (color.length === 3) {
        for (let i = 0; i < 3; i += 1) {
            newcolor.push(color[i]);
            newcolor.push(color[i]);
        }
        return newcolor.join('');
    }
    if (color.length > 6) {
        color = color.substr(0, 6);
    }
    return '#' + color;
};

;// CONCATENATED MODULE: ./src/core/helpers/normalize/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */











/***/ }),

/***/ 99916:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": function() { return /* binding */ normalizeCssValue; }
/* harmony export */ });
/* harmony import */ var _checker_is_numeric__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(57587);
/* harmony import */ var _string_kebab_case__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(90237);
/* harmony import */ var _color_color_to_hex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(76588);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



function normalizeCssValue(key, value) {
    switch ((0,_string_kebab_case__WEBPACK_IMPORTED_MODULE_0__/* .kebabCase */ .G)(key)) {
        case 'font-weight':
            switch (value.toString().toLowerCase()) {
                case '700':
                case 'bold':
                    return 700;
                case '400':
                case 'normal':
                    return 400;
                case '900':
                case 'heavy':
                    return 900;
            }
            return (0,_checker_is_numeric__WEBPACK_IMPORTED_MODULE_1__/* .isNumeric */ .k)(value) ? Number(value) : value;
    }
    if (/color/i.test(key) && /^rgb/i.test(value.toString())) {
        return (0,_color_color_to_hex__WEBPACK_IMPORTED_MODULE_2__/* .colorToHex */ .h)(value.toString()) || value;
    }
    return value;
}


/***/ }),

/***/ 2636:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "d": function() { return /* binding */ size; }
/* harmony export */ });
/* harmony import */ var _checker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99160);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function size(subject) {
    if ((0,_checker__WEBPACK_IMPORTED_MODULE_0__/* .isString */ .HD)(subject) || (0,_checker__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(subject)) {
        return subject.length;
    }
    if ((0,_checker__WEBPACK_IMPORTED_MODULE_0__/* .isPlainObject */ .PO)(subject)) {
        return Object.keys(subject).length;
    }
    return 0;
}


/***/ }),

/***/ 23912:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "e": function() { return /* binding */ camelCase; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const camelCase = (key) => {
    return key.replace(/([-_])(.)/g, (m, code, letter) => {
        return letter.toUpperCase();
    });
};


/***/ }),

/***/ 9470:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Q": function() { return /* binding */ fuzzySearchIndex; }
/* harmony export */ });
/* harmony import */ var jodit_core_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10063);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function fuzzySearchIndex(needle, haystack, offset = 0, maxDistance = 1) {
    let i = 0, j = 0, startIndex = -1, len = 0, errorDistance = 0;
    for (j = offset; i < needle.length && j < haystack.length;) {
        if (needle[i].toLowerCase() === haystack[j].toLowerCase()) {
            i++;
            len++;
            errorDistance = 0;
            if (startIndex === -1) {
                startIndex = j;
            }
        }
        else if (i > 0) {
            if (errorDistance >= maxDistance &&
                haystack[j] !== jodit_core_constants__WEBPACK_IMPORTED_MODULE_0__.INVISIBLE_SPACE) {
                i = 0;
                startIndex = -1;
                len = 0;
                errorDistance = 0;
                j--;
            }
            else {
                errorDistance++;
                len++;
            }
        }
        j++;
    }
    return i === needle.length ? [startIndex, len] : [-1, 0];
}


/***/ }),

/***/ 26132:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "gP": function() { return /* reexport */ kebab_case/* CamelCaseToKebabCase */.g; },
  "eV": function() { return /* reexport */ camel_case/* camelCase */.e; },
  "Qy": function() { return /* reexport */ fuzzy_search_index/* fuzzySearchIndex */.Q; },
  "ag": function() { return /* reexport */ i18n; },
  "GL": function() { return /* reexport */ kebab_case/* kebabCase */.G; },
  "gB": function() { return /* reexport */ sprintf; },
  "Pz": function() { return /* reexport */ stringify/* stringify */.P; },
  "fy": function() { return /* reexport */ trim/* trim */.f; },
  "as": function() { return /* reexport */ trim/* trimInv */.a; },
  "Ps": function() { return /* reexport */ ucfirst; }
});

// EXTERNAL MODULE: ./src/core/helpers/string/camel-case.ts
var camel_case = __webpack_require__(23912);
// EXTERNAL MODULE: ./src/core/helpers/string/fuzzy-search-index.ts
var fuzzy_search_index = __webpack_require__(9470);
// EXTERNAL MODULE: ./src/config.ts
var config = __webpack_require__(27537);
// EXTERNAL MODULE: ./src/core/helpers/utils/index.ts + 11 modules
var utils = __webpack_require__(11358);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-string.ts
var is_string = __webpack_require__(40607);
;// CONCATENATED MODULE: ./src/core/helpers/string/ucfirst.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function ucfirst(value) {
    if (!value.length) {
        return '';
    }
    return value[0].toUpperCase() + value.substr(1);
}

// EXTERNAL MODULE: ./src/core/constants.ts
var constants = __webpack_require__(10063);
;// CONCATENATED MODULE: ./src/core/helpers/string/i18n.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





const sprintf = (str, args) => {
    if (!args || !args.length) {
        return str;
    }
    const reg = /%([sd])/g;
    let fnd = reg.exec(str);
    let res = str, i = 0;
    while (fnd && args[i] !== undefined) {
        res = res.replace(fnd[0], args[i].toString());
        i += 1;
        fnd = reg.exec(str);
    }
    return res;
};
function i18n(key, params, options) {
    if (!(0,is_string/* isString */.H)(key)) {
        throw (0,utils/* error */.vU)('i18n: Need string in first argument');
    }
    if (!key.length) {
        return key;
    }
    const debug = Boolean(options === null || options === void 0 ? void 0 : options.debugLanguage);
    let store = {};
    const parse = (value) => params && params.length ? sprintf(value, params) : value, defaultLanguage = (0,utils/* defaultLanguage */.X9)(config/* Config.defaultOptions.language */.D.defaultOptions.language, config/* Config.defaultOptions.language */.D.defaultOptions.language), language = (0,utils/* defaultLanguage */.X9)(options === null || options === void 0 ? void 0 : options.language, defaultLanguage), tryGet = (store) => {
        if (!store) {
            return;
        }
        if ((0,is_string/* isString */.H)(store[key])) {
            return parse(store[key]);
        }
        const lcKey = key.toLowerCase();
        if ((0,is_string/* isString */.H)(store[lcKey])) {
            return parse(store[lcKey]);
        }
        const ucfKey = ucfirst(key);
        if ((0,is_string/* isString */.H)(store[ucfKey])) {
            return parse(store[ucfKey]);
        }
        return;
    };
    if (constants.lang[language] !== undefined) {
        store = constants.lang[language];
    }
    else if (!debug) {
        if (constants.lang[defaultLanguage] !== undefined) {
            store = constants.lang[defaultLanguage];
        }
        else {
            store = constants.lang.en;
        }
    }
    const i18nOvr = options === null || options === void 0 ? void 0 : options.i18n;
    if (i18nOvr && i18nOvr[language]) {
        const result = tryGet(i18nOvr[language]);
        if (result) {
            return result;
        }
    }
    const result = tryGet(store);
    if (result) {
        return result;
    }
    if (!debug && constants.lang.en && (0,is_string/* isString */.H)(constants.lang.en[key]) && constants.lang.en[key]) {
        return parse(constants.lang.en[key]);
    }
    if (debug) {
        return '{' + key + '}';
    }
    if (false) {}
    return parse(key);
}

// EXTERNAL MODULE: ./src/core/helpers/string/kebab-case.ts
var kebab_case = __webpack_require__(90237);
// EXTERNAL MODULE: ./src/core/helpers/string/stringify.ts
var stringify = __webpack_require__(27561);
// EXTERNAL MODULE: ./src/core/helpers/string/trim.ts
var trim = __webpack_require__(50106);
;// CONCATENATED MODULE: ./src/core/helpers/string/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */









/***/ }),

/***/ 90237:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "G": function() { return /* binding */ kebabCase; },
/* harmony export */   "g": function() { return /* binding */ CamelCaseToKebabCase; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const kebabCase = (key) => {
    return key
        .replace(/([A-Z])([A-Z])([a-z])/g, '$1-$2$3')
        .replace(/([a-z])([A-Z])/g, '$1-$2')
        .replace(/[\s_]+/g, '-')
        .toLowerCase();
};
const CamelCaseToKebabCase = (key) => {
    return key
        .replace(/([A-Z])([A-Z])([a-z])/g, '$1-$2$3')
        .replace(/([a-z])([A-Z])/g, '$1-$2')
        .toLowerCase();
};


/***/ }),

/***/ 27561:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "P": function() { return /* binding */ stringify; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function stringify(value, options = {}) {
    if (typeof value !== 'object') {
        return String(value);
    }
    const excludeKeys = new Set(options.excludeKeys);
    const map = new WeakMap();
    const r = (k, v) => {
        if (excludeKeys.has(k)) {
            return;
        }
        if (typeof v === 'object' && v != null) {
            if (map.get(v)) {
                return '[refObject]';
            }
            map.set(v, true);
        }
        return v;
    };
    return JSON.stringify(value, r, options.prettify);
}


/***/ }),

/***/ 50106:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": function() { return /* binding */ trimInv; },
/* harmony export */   "f": function() { return /* binding */ trim; }
/* harmony export */ });
/* harmony import */ var jodit_core_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10063);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function trim(value) {
    return value
        .replace((0,jodit_core_constants__WEBPACK_IMPORTED_MODULE_0__.SPACE_REG_EXP_END)(), '')
        .replace((0,jodit_core_constants__WEBPACK_IMPORTED_MODULE_0__.SPACE_REG_EXP_START)(), '');
}
function trimInv(value) {
    return value
        .replace((0,jodit_core_constants__WEBPACK_IMPORTED_MODULE_0__.INVISIBLE_SPACE_REG_EXP_END)(), '')
        .replace((0,jodit_core_constants__WEBPACK_IMPORTED_MODULE_0__.INVISIBLE_SPACE_REG_EXP_START)(), '');
}


/***/ }),

/***/ 49359:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "E3": function() { return /* binding */ alignElement; },
/* harmony export */   "wL": function() { return /* binding */ clearAlign; },
/* harmony export */   "zC": function() { return /* binding */ hAlignElement; }
/* harmony export */ });
/* harmony import */ var jodit_core_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(94522);
/* harmony import */ var _utils_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(56672);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function hAlignElement(image, align) {
    if (align && align !== 'normal') {
        if (align !== 'center') {
            (0,_utils_css__WEBPACK_IMPORTED_MODULE_1__/* .css */ .i)(image, 'float', align);
            (0,_utils_css__WEBPACK_IMPORTED_MODULE_1__/* .clearCenterAlign */ .b)(image);
        }
        else {
            (0,_utils_css__WEBPACK_IMPORTED_MODULE_1__/* .css */ .i)(image, {
                float: '',
                display: 'block',
                marginLeft: 'auto',
                marginRight: 'auto'
            });
        }
    }
    else {
        if ((0,_utils_css__WEBPACK_IMPORTED_MODULE_1__/* .css */ .i)(image, 'float') &&
            ['right', 'left'].indexOf((0,_utils_css__WEBPACK_IMPORTED_MODULE_1__/* .css */ .i)(image, 'float').toString().toLowerCase()) !== -1) {
            (0,_utils_css__WEBPACK_IMPORTED_MODULE_1__/* .css */ .i)(image, 'float', '');
        }
        (0,_utils_css__WEBPACK_IMPORTED_MODULE_1__/* .clearCenterAlign */ .b)(image);
    }
}
function clearAlign(node) {
    jodit_core_dom__WEBPACK_IMPORTED_MODULE_0__/* .Dom.each */ .i.each(node, elm => {
        if (jodit_core_dom__WEBPACK_IMPORTED_MODULE_0__/* .Dom.isHTMLElement */ .i.isHTMLElement(elm)) {
            if (elm.style.textAlign) {
                elm.style.textAlign = '';
                if (!elm.style.cssText.trim().length) {
                    elm.removeAttribute('style');
                }
            }
        }
    });
}
function alignElement(command, box) {
    if (jodit_core_dom__WEBPACK_IMPORTED_MODULE_0__/* .Dom.isNode */ .i.isNode(box) && jodit_core_dom__WEBPACK_IMPORTED_MODULE_0__/* .Dom.isElement */ .i.isElement(box)) {
        clearAlign(box);
        switch (command.toLowerCase()) {
            case 'justifyfull':
                box.style.textAlign = 'justify';
                break;
            case 'justifyright':
                box.style.textAlign = 'right';
                break;
            case 'justifyleft':
                box.style.textAlign = 'left';
                break;
            case 'justifycenter':
                box.style.textAlign = 'center';
                break;
        }
    }
}


/***/ }),

/***/ 63116:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GX": function() { return /* binding */ loadNextStyle; },
/* harmony export */   "JL": function() { return /* binding */ appendScriptAsync; },
/* harmony export */   "Nf": function() { return /* binding */ appendStyleAsync; },
/* harmony export */   "uR": function() { return /* binding */ appendScript; },
/* harmony export */   "wY": function() { return /* binding */ loadNext; }
/* harmony export */ });
/* harmony import */ var _complete_url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48659);
/* harmony import */ var _checker_is_function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84121);
/* harmony import */ var _checker_is_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(40607);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



const alreadyLoadedList = new Map();
const cacheLoaders = (loader) => {
    return async (jodit, url) => {
        if (alreadyLoadedList.has(url)) {
            return alreadyLoadedList.get(url);
        }
        const promise = loader(jodit, url);
        alreadyLoadedList.set(url, promise);
        return promise;
    };
};
const appendScript = (jodit, url, callback) => {
    const script = jodit.c.element('script');
    script.type = 'text/javascript';
    script.async = true;
    if ((0,_checker_is_function__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(callback) && !jodit.isInDestruct) {
        jodit.e.on(script, 'load', callback);
    }
    if (!script.src) {
        script.src = (0,_complete_url__WEBPACK_IMPORTED_MODULE_1__/* .completeUrl */ .W)(url);
    }
    jodit.od.body.appendChild(script);
    return {
        callback,
        element: script
    };
};
const appendScriptAsync = cacheLoaders((jodit, url) => {
    return new Promise((resolve, reject) => {
        const { element } = appendScript(jodit, url, resolve);
        !jodit.isInDestruct && jodit.e.on(element, 'error', reject);
    });
});
const appendStyleAsync = cacheLoaders((jodit, url) => {
    return new Promise((resolve, reject) => {
        const link = jodit.c.element('link');
        link.rel = 'stylesheet';
        link.media = 'all';
        link.crossOrigin = 'anonymous';
        const callback = () => resolve(link);
        !jodit.isInDestruct &&
            jodit.e.on(link, 'load', callback).on(link, 'error', reject);
        link.href = (0,_complete_url__WEBPACK_IMPORTED_MODULE_1__/* .completeUrl */ .W)(url);
        if (jodit.o.shadowRoot) {
            jodit.o.shadowRoot.appendChild(link);
        }
        else {
            jodit.od.body.appendChild(link);
        }
    });
});
const loadNext = (jodit, urls, i = 0) => {
    if (!(0,_checker_is_string__WEBPACK_IMPORTED_MODULE_2__/* .isString */ .H)(urls[i])) {
        return Promise.resolve();
    }
    return appendScriptAsync(jodit, urls[i]).then(() => loadNext(jodit, urls, i + 1));
};
const loadNextStyle = (jodit, urls, i = 0) => {
    if (!(0,_checker_is_string__WEBPACK_IMPORTED_MODULE_2__/* .isString */ .H)(urls[i])) {
        return Promise.resolve();
    }
    return appendStyleAsync(jodit, urls[i]).then(() => loadNextStyle(jodit, urls, i + 1));
};


/***/ }),

/***/ 39665:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "h": function() { return /* binding */ assert; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
class AssertionError extends Error {
    constructor(message) {
        super(message);
        this.name = 'AssertionError';
    }
}
function assert(condition, message) {
    if (!condition) {
        throw new AssertionError(`Assertion failed: ${message}`);
    }
}



/***/ }),

/***/ 48659:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "W": function() { return /* binding */ completeUrl; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const completeUrl = (url) => {
    if (window.location.protocol === 'file:' && /^\/\//.test(url)) {
        url = 'https:' + url;
    }
    return url;
};


/***/ }),

/***/ 56672:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "b": function() { return /* binding */ clearCenterAlign; },
/* harmony export */   "i": function() { return /* binding */ css; }
/* harmony export */ });
/* harmony import */ var _checker_is_plain_object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(77184);
/* harmony import */ var _checker_is_numeric__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(57587);
/* harmony import */ var _checker_is_void__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(13859);
/* harmony import */ var _checker_is_boolean__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(65131);
/* harmony import */ var _normalize_normalize_css_value__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(99916);
/* harmony import */ var _string_camel_case__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(23912);
/* harmony import */ var _string_kebab_case__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(90237);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







function css(element, key, value, onlyStyleMode = false) {
    const numberFieldsReg = /^(left|top|bottom|right|width|min|max|height|margin|padding|fontsize|font-size)/i;
    if ((0,_checker_is_boolean__WEBPACK_IMPORTED_MODULE_0__/* .isBoolean */ .j)(value)) {
        onlyStyleMode = value;
        value = undefined;
    }
    if ((0,_checker_is_plain_object__WEBPACK_IMPORTED_MODULE_1__/* .isPlainObject */ .P)(key) || value !== undefined) {
        const setValue = (elm, _key, _value) => {
            if (!(0,_checker_is_void__WEBPACK_IMPORTED_MODULE_2__/* .isVoid */ .n)(_value) &&
                numberFieldsReg.test(_key) &&
                (0,_checker_is_numeric__WEBPACK_IMPORTED_MODULE_3__/* .isNumeric */ .k)(_value.toString())) {
                _value = parseInt(_value.toString(), 10) + 'px';
            }
            if (_value !== undefined &&
                (_value == null ||
                    css(elm, _key, true) !== (0,_normalize_normalize_css_value__WEBPACK_IMPORTED_MODULE_4__/* .normalizeCssValue */ .Z)(_key, _value))) {
                elm.style[_key] = _value;
            }
        };
        if ((0,_checker_is_plain_object__WEBPACK_IMPORTED_MODULE_1__/* .isPlainObject */ .P)(key)) {
            const keys = Object.keys(key);
            for (let j = 0; j < keys.length; j += 1) {
                setValue(element, (0,_string_camel_case__WEBPACK_IMPORTED_MODULE_5__/* .camelCase */ .e)(keys[j]), key[keys[j]]);
            }
        }
        else {
            setValue(element, (0,_string_camel_case__WEBPACK_IMPORTED_MODULE_5__/* .camelCase */ .e)(key), value);
        }
        return '';
    }
    const key2 = (0,_string_kebab_case__WEBPACK_IMPORTED_MODULE_6__/* .kebabCase */ .G)(key), doc = element.ownerDocument || document, win = doc ? doc.defaultView || doc.parentWindow : false;
    const currentValue = element.style[key];
    let result = '';
    if (currentValue !== undefined && currentValue !== '') {
        result = currentValue;
    }
    else if (win && !onlyStyleMode) {
        result = win.getComputedStyle(element).getPropertyValue(key2);
    }
    if (numberFieldsReg.test(key) &&
        /^[-+]?[0-9.]+px$/.test(result.toString())) {
        result = parseInt(result.toString(), 10);
    }
    return (0,_normalize_normalize_css_value__WEBPACK_IMPORTED_MODULE_4__/* .normalizeCssValue */ .Z)(key, result);
}
const clearCenterAlign = (image) => {
    if (css(image, 'display') === 'block') {
        css(image, 'display', '');
    }
    const { style } = image;
    if (style.marginLeft === 'auto' && style.marginRight === 'auto') {
        style.marginLeft = '';
        style.marginRight = '';
    }
};


/***/ }),

/***/ 70774:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "q": function() { return /* binding */ dataBind; }
/* harmony export */ });
/* harmony import */ var _checker_is_view_object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51813);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

const store = new WeakMap();
const dataBind = (elm, key, value) => {
    let itemStore = store.get(elm);
    if (!itemStore) {
        itemStore = {};
        store.set(elm, itemStore);
        let e = null;
        if ((0,_checker_is_view_object__WEBPACK_IMPORTED_MODULE_0__/* .isViewObject */ .f)(elm.j)) {
            e = elm.j.e;
        }
        if ((0,_checker_is_view_object__WEBPACK_IMPORTED_MODULE_0__/* .isViewObject */ .f)(elm)) {
            e = elm.e;
        }
        e &&
            e.on('beforeDestruct', () => {
                store.delete(elm);
            });
    }
    if (value === undefined) {
        return itemStore[key];
    }
    itemStore[key] = value;
    return value;
};


/***/ }),

/***/ 3588:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "X": function() { return /* binding */ defaultLanguage; }
/* harmony export */ });
/* harmony import */ var _checker_is_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(40607);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

const defaultLanguage = (language, defaultLanguage = 'en') => {
    if (language !== 'auto' && (0,_checker_is_string__WEBPACK_IMPORTED_MODULE_0__/* .isString */ .H)(language)) {
        return language;
    }
    if (navigator.language) {
        return navigator.language.substring(0, 2);
    }
    if (document.documentElement && document.documentElement.lang) {
        return document.documentElement.lang;
    }
    return defaultLanguage;
};


/***/ }),

/***/ 59058:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "_L": function() { return /* reexport */ AbortError; },
  "hY": function() { return /* reexport */ ConnectionError; },
  "tW": function() { return /* reexport */ OptionsError; },
  "JG": function() { return /* reexport */ abort; },
  "ZI": function() { return /* reexport */ connection; },
  "vU": function() { return /* reexport */ error; },
  "PQ": function() { return /* reexport */ isAbort; },
  "YM": function() { return /* reexport */ options; }
});

;// CONCATENATED MODULE: ./src/core/helpers/utils/error/errors/abort-error.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
class AbortError extends Error {
    constructor(m) {
        super(m);
        Object.setPrototypeOf(this, AbortError.prototype);
    }
}

;// CONCATENATED MODULE: ./src/core/helpers/utils/error/errors/connection-error.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
class ConnectionError extends Error {
    constructor(m) {
        super(m);
        Object.setPrototypeOf(this, ConnectionError.prototype);
    }
}

;// CONCATENATED MODULE: ./src/core/helpers/utils/error/errors/options-error.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
class OptionsError extends TypeError {
    constructor(m) {
        super(m);
        Object.setPrototypeOf(this, OptionsError.prototype);
    }
}

;// CONCATENATED MODULE: ./src/core/helpers/utils/error/errors/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




;// CONCATENATED MODULE: ./src/core/helpers/utils/error/error.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function error(message) {
    return new TypeError(message);
}
function connection(message) {
    return new ConnectionError(message);
}
function options(message) {
    return new OptionsError(message);
}
function abort(message) {
    return new AbortError(message);
}
function isAbort(error) {
    return error instanceof AbortError;
}

;// CONCATENATED MODULE: ./src/core/helpers/utils/error/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




/***/ }),

/***/ 28693:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "g": function() { return /* binding */ getClassName; },
/* harmony export */   "k": function() { return /* binding */ keepNames; }
/* harmony export */ });
/* harmony import */ var _checker_is_function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84121);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

const keepNames = new Map();
const getClassName = (obj) => {
    var _a;
    if ((0,_checker_is_function__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .m)(obj.className)) {
        return obj.className();
    }
    const constructor = ((_a = obj.constructor) === null || _a === void 0 ? void 0 : _a.originalConstructor) || obj.constructor;
    if (keepNames.has(constructor)) {
        return keepNames.get(constructor);
    }
    if (constructor.name) {
        return constructor.name;
    }
    const regex = new RegExp(/^\s*function\s*(\S*)\s*\(/);
    const res = constructor.toString().match(regex);
    return res ? res[1] : '';
};


/***/ }),

/***/ 85913:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "U": function() { return /* binding */ get; }
/* harmony export */ });
/* harmony import */ var _checker_is_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(40607);
/* harmony import */ var _checker_is_void__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(13859);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function get(chain, obj) {
    if (!(0,_checker_is_string__WEBPACK_IMPORTED_MODULE_0__/* .isString */ .H)(chain) || !chain.length) {
        return null;
    }
    const parts = chain.split('.');
    let result = obj;
    try {
        for (const part of parts) {
            if ((0,_checker_is_void__WEBPACK_IMPORTED_MODULE_1__/* .isVoid */ .n)(result[part])) {
                return null;
            }
            result = result[part];
        }
    }
    catch (_a) {
        return null;
    }
    if ((0,_checker_is_void__WEBPACK_IMPORTED_MODULE_1__/* .isVoid */ .n)(result)) {
        return null;
    }
    return result;
}


/***/ }),

/***/ 52169:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "w": function() { return /* binding */ humanSizeToBytes; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const humanSizeToBytes = (human) => {
    if (/^[0-9.]+$/.test(human.toString())) {
        return parseFloat(human);
    }
    const format = human.substr(-2, 2).toUpperCase(), formats = ['KB', 'MB', 'GB', 'TB'], number = parseFloat(human.substr(0, human.length - 2));
    return formats.indexOf(format) !== -1
        ? number * Math.pow(1024, formats.indexOf(format) + 1)
        : parseInt(human, 10);
};


/***/ }),

/***/ 11358:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "$$": function() { return /* reexport */ selector.$$; },
  "_L": function() { return /* reexport */ error/* AbortError */._L; },
  "tp": function() { return /* reexport */ ConfigFlatten; },
  "II": function() { return /* reexport */ ConfigProto; },
  "hY": function() { return /* reexport */ error/* ConnectionError */.hY; },
  "lI": function() { return /* reexport */ LimitedStack; },
  "tW": function() { return /* reexport */ error/* OptionsError */.tW; },
  "JG": function() { return /* reexport */ error/* abort */.JG; },
  "E3": function() { return /* reexport */ align/* alignElement */.E3; },
  "uR": function() { return /* reexport */ append_script/* appendScript */.uR; },
  "JL": function() { return /* reexport */ append_script/* appendScriptAsync */.JL; },
  "Nf": function() { return /* reexport */ append_script/* appendStyleAsync */.Nf; },
  "hu": function() { return /* reexport */ assert/* assert */.h; },
  "Lj": function() { return /* reexport */ utils/* attr */.Lj; },
  "Xh": function() { return /* reexport */ browser; },
  "XP": function() { return /* reexport */ buildQuery; },
  "RE": function() { return /* reexport */ utils/* call */.RE; },
  "C6": function() { return /* reexport */ utils/* callPromise */.C6; },
  "wL": function() { return /* reexport */ align/* clearAlign */.wL; },
  "bI": function() { return /* reexport */ css/* clearCenterAlign */.b; },
  "H5": function() { return /* reexport */ cns; },
  "WO": function() { return /* reexport */ complete_url/* completeUrl */.W; },
  "ZI": function() { return /* reexport */ error/* connection */.ZI; },
  "UU": function() { return /* reexport */ convertMediaUrlToVideoEmbed; },
  "iv": function() { return /* reexport */ css/* css */.i; },
  "iN": function() { return /* reexport */ selector/* cssPath */.iN; },
  "kT": function() { return /* reexport */ ctrlKey; },
  "qI": function() { return /* reexport */ data_bind/* dataBind */.q; },
  "X9": function() { return /* reexport */ default_language/* defaultLanguage */.X; },
  "vU": function() { return /* reexport */ error/* error */.vU; },
  "V8": function() { return /* reexport */ fastClone; },
  "U2": function() { return /* reexport */ get/* get */.U; },
  "gj": function() { return /* reexport */ get_class_name/* getClassName */.g; },
  "qu": function() { return /* reexport */ utils/* getDataTransfer */.qu; },
  "BR": function() { return /* reexport */ selector/* getXPathByElement */.BR; },
  "zC": function() { return /* reexport */ align/* hAlignElement */.zC; },
  "wx": function() { return /* reexport */ human_size_to_bytes/* humanSizeToBytes */.w; },
  "jF": function() { return /* reexport */ scroll_into_view/* inView */.j; },
  "PQ": function() { return /* reexport */ error/* isAbort */.PQ; },
  "J8": function() { return /* reexport */ isAtom; },
  "kc": function() { return /* reexport */ get_class_name/* keepNames */.k; },
  "am": function() { return /* reexport */ utils/* keys */.XP; },
  "po": function() { return /* reexport */ utils/* loadImage */.po; },
  "wY": function() { return /* reexport */ append_script/* loadNext */.wY; },
  "GX": function() { return /* reexport */ append_script/* loadNextStyle */.GX; },
  "XT": function() { return /* reexport */ markAsAtomic; },
  "Q8": function() { return /* reexport */ markDeprecated; },
  "MN": function() { return /* reexport */ utils/* markOwner */.MN; },
  "u3": function() { return /* reexport */ utils/* memorizeExec */.u3; },
  "YM": function() { return /* reexport */ error/* options */.YM; },
  "mB": function() { return /* reexport */ parseQuery; },
  "$l": function() { return /* reexport */ print/* previewBox */.$; },
  "xL": function() { return /* reexport */ selector/* refs */.xL; },
  "mc": function() { return /* reexport */ utils_reset/* reset */.m; },
  "W2": function() { return /* reexport */ selector/* resolveElement */.W2; },
  "n5": function() { return /* reexport */ scroll_into_view/* scrollIntoViewIfNeeded */.n; },
  "t8": function() { return /* reexport */ set; },
  "P0": function() { return /* reexport */ val; }
});

// EXTERNAL MODULE: ./src/core/helpers/utils/align.ts
var align = __webpack_require__(49359);
// EXTERNAL MODULE: ./src/core/helpers/utils/append-script.ts
var append_script = __webpack_require__(63116);
// EXTERNAL MODULE: ./src/core/helpers/utils/assert.ts
var assert = __webpack_require__(39665);
;// CONCATENATED MODULE: ./src/core/helpers/utils/browser.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const browser = (browser) => {
    const ua = navigator.userAgent.toLowerCase(), match = /(firefox)[\s/]([\w.]+)/.exec(ua) ||
        /(chrome)[\s/]([\w.]+)/.exec(ua) ||
        /(webkit)[\s/]([\w.]+)/.exec(ua) ||
        /(opera)(?:.*version)[\s/]([\w.]+)/.exec(ua) ||
        /(msie)[\s]([\w.]+)/.exec(ua) ||
        /(trident)\/([\w.]+)/.exec(ua) ||
        ua.indexOf('compatible') < 0 ||
        [];
    if (browser === 'version') {
        return match[2];
    }
    if (browser === 'webkit') {
        return match[1] === 'chrome' || match[1] === 'webkit';
    }
    if (browser === 'ff') {
        return match[1] === 'firefox';
    }
    if (browser === 'msie') {
        return match[1] === 'trident' || match[1] === 'msie';
    }
    return match[1] === browser;
};

// EXTERNAL MODULE: ./src/core/helpers/checker/is-plain-object.ts
var is_plain_object = __webpack_require__(77184);
;// CONCATENATED MODULE: ./src/core/helpers/utils/build-query.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

const buildQuery = (data, prefix) => {
    const str = [];
    const enc = encodeURIComponent;
    for (const dataKey in data) {
        if (Object.prototype.hasOwnProperty.call(data, dataKey)) {
            const k = prefix ? prefix + '[' + dataKey + ']' : dataKey;
            const v = data[dataKey];
            str.push((0,is_plain_object/* isPlainObject */.P)(v) ? buildQuery(v, k) : enc(k) + '=' + enc(v));
        }
    }
    return str.join('&');
};

// EXTERNAL MODULE: ./src/core/helpers/utils/complete-url.ts
var complete_url = __webpack_require__(48659);
// EXTERNAL MODULE: ./src/core/helpers/string/stringify.ts
var stringify = __webpack_require__(27561);
;// CONCATENATED MODULE: ./src/core/helpers/utils/extend.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function isAtom(obj) {
    return obj && obj.isAtom;
}
function markAsAtomic(obj) {
    Object.defineProperty(obj, 'isAtom', {
        enumerable: false,
        value: true,
        configurable: false
    });
    return obj;
}
function fastClone(object) {
    return JSON.parse((0,stringify/* stringify */.P)(object));
}

// EXTERNAL MODULE: ./src/core/helpers/checker/is-array.ts
var is_array = __webpack_require__(2555);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-string.ts
var is_string = __webpack_require__(40607);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-void.ts
var is_void = __webpack_require__(13859);
// EXTERNAL MODULE: ./src/config.ts
var config = __webpack_require__(27537);
// EXTERNAL MODULE: ./src/core/helpers/utils/utils.ts
var utils = __webpack_require__(51976);
;// CONCATENATED MODULE: ./src/core/helpers/utils/config-proto.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







function ConfigProto(options, proto, deep = 0) {
    if (Object.getPrototypeOf(options) !== Object.prototype) {
        return options;
    }
    const def = config/* Config.defaultOptions */.D.defaultOptions;
    if ((0,is_string/* isString */.H)(options.preset)) {
        if (def.presets[options.preset] !== undefined) {
            const preset = def.presets[options.preset];
            Object.keys(preset).forEach(subKey => {
                if ((0,is_void/* isVoid */.n)(options[subKey])) {
                    options[subKey] = preset[subKey];
                }
            });
        }
        delete options.preset;
    }
    const newOpt = {};
    Object.keys(options).forEach(key => {
        const opt = options[key], protoKey = proto ? proto[key] : null;
        if ((0,is_plain_object/* isPlainObject */.P)(opt) && (0,is_plain_object/* isPlainObject */.P)(protoKey) && !isAtom(opt)) {
            newOpt[key] = ConfigProto(opt, protoKey, deep + 1);
            return;
        }
        if (deep !== 0 && (0,is_array/* isArray */.k)(opt) && !isAtom(opt) && (0,is_array/* isArray */.k)(protoKey)) {
            newOpt[key] = [...opt, ...protoKey.slice(opt.length)];
            return;
        }
        newOpt[key] = opt;
    });
    Object.setPrototypeOf(newOpt, proto);
    return newOpt;
}
function ConfigFlatten(obj) {
    return (0,utils/* keys */.XP)(obj, false).reduce((app, key) => {
        app[key] = obj[key];
        return app;
    }, {});
}

// EXTERNAL MODULE: ./src/core/helpers/checker/is-url.ts
var is_url = __webpack_require__(56521);
;// CONCATENATED MODULE: ./src/core/helpers/utils/parse-query.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const parseQuery = (queryString) => {
    const query = {}, a = queryString.substring(1).split('&');
    for (let i = 0; i < a.length; i += 1) {
        const keyValue = a[i].split('=');
        query[decodeURIComponent(keyValue[0])] = decodeURIComponent(keyValue[1] || '');
    }
    return query;
};

;// CONCATENATED MODULE: ./src/core/helpers/utils/convert-media-url-to-video-embed.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


const convertMediaUrlToVideoEmbed = (url, width = 400, height = 345) => {
    if (!(0,is_url/* isURL */.P)(url)) {
        return url;
    }
    const parser = document.createElement('a'), pattern1 = /(?:http?s?:\/\/)?(?:www\.)?(?:vimeo\.com)\/?(.+)/g;
    parser.href = url;
    if (!width) {
        width = 400;
    }
    if (!height) {
        height = 345;
    }
    const protocol = parser.protocol || '';
    switch (parser.hostname) {
        case 'www.vimeo.com':
        case 'vimeo.com':
            return pattern1.test(url)
                ? url.replace(pattern1, '<iframe width="' +
                    width +
                    '" height="' +
                    height +
                    '" src="' +
                    protocol +
                    '//player.vimeo.com/video/$1" frameborder="0" allowfullscreen></iframe>')
                : url;
        case 'youtube.com':
        case 'www.youtube.com':
        case 'youtu.be':
        case 'www.youtu.be': {
            const query = parser.search
                ? parseQuery(parser.search)
                : { v: parser.pathname.substr(1) };
            return query.v
                ? '<iframe width="' +
                    width +
                    '" height="' +
                    height +
                    '" src="' +
                    protocol +
                    '//www.youtube.com/embed/' +
                    query.v +
                    '" frameborder="0" allowfullscreen></iframe>'
                : url;
        }
    }
    return url;
};

// EXTERNAL MODULE: ./src/core/helpers/utils/css.ts
var css = __webpack_require__(56672);
;// CONCATENATED MODULE: ./src/core/helpers/utils/ctrl-key.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const ctrlKey = (e) => {
    if (typeof navigator !== 'undefined' &&
        navigator.userAgent.indexOf('Mac OS X') !== -1) {
        if (e.metaKey && !e.altKey) {
            return true;
        }
    }
    else if (e.ctrlKey && !e.altKey) {
        return true;
    }
    return false;
};

// EXTERNAL MODULE: ./src/core/helpers/utils/data-bind.ts
var data_bind = __webpack_require__(70774);
// EXTERNAL MODULE: ./src/core/helpers/utils/default-language.ts
var default_language = __webpack_require__(3588);
// EXTERNAL MODULE: ./src/core/helpers/utils/error/index.ts + 5 modules
var error = __webpack_require__(59058);
// EXTERNAL MODULE: ./src/core/helpers/utils/get.ts
var get = __webpack_require__(85913);
// EXTERNAL MODULE: ./src/core/helpers/utils/get-class-name.ts
var get_class_name = __webpack_require__(28693);
// EXTERNAL MODULE: ./src/core/helpers/utils/human-size-to-bytes.ts
var human_size_to_bytes = __webpack_require__(52169);
;// CONCATENATED MODULE: ./src/core/helpers/utils/mark-deprecated.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const cns = console;
function markDeprecated(method, names = [''], ctx = null) {
    return (...args) => {
        cns.warn(`Method "${names[0]}" deprecated.` +
            (names[1] ? ` Use "${names[1]}" instead` : ''));
        return method.call(ctx, ...args);
    };
}

// EXTERNAL MODULE: ./src/core/helpers/utils/print.ts
var print = __webpack_require__(79775);
// EXTERNAL MODULE: ./src/core/helpers/utils/reset.ts
var utils_reset = __webpack_require__(33872);
// EXTERNAL MODULE: ./src/core/helpers/utils/scroll-into-view.ts
var scroll_into_view = __webpack_require__(6110);
// EXTERNAL MODULE: ./src/core/helpers/utils/selector.ts
var selector = __webpack_require__(78191);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-numeric.ts
var is_numeric = __webpack_require__(57587);
;// CONCATENATED MODULE: ./src/core/helpers/utils/set.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




function set(chain, value, obj) {
    if (!(0,is_string/* isString */.H)(chain) || !chain.length) {
        return;
    }
    const parts = chain.split('.');
    let result = obj, key = parts[0];
    for (let i = 0; i < parts.length - 1; i += 1) {
        key = parts[i];
        if (!(0,is_array/* isArray */.k)(result[key]) && !(0,is_plain_object/* isPlainObject */.P)(result[key])) {
            result[key] = (0,is_numeric/* isNumeric */.k)(parts[i + 1]) ? [] : {};
        }
        result = result[key];
    }
    if (result) {
        result[parts[parts.length - 1]] = value;
    }
}

;// CONCATENATED MODULE: ./src/core/helpers/utils/stack.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
class LimitedStack {
    constructor(limit) {
        this.limit = limit;
        this.stack = [];
    }
    push(item) {
        this.stack.push(item);
        if (this.stack.length > this.limit) {
            this.stack.shift();
        }
        return this;
    }
    pop() {
        return this.stack.pop();
    }
    find(clb) {
        return this.stack.find(clb);
    }
}

;// CONCATENATED MODULE: ./src/core/helpers/utils/val.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const val = (elm, selector, value) => {
    const child = elm.querySelector(selector);
    if (!child) {
        return '';
    }
    if (value) {
        child.value = value;
    }
    return child.value;
};

;// CONCATENATED MODULE: ./src/core/helpers/utils/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





























/***/ }),

/***/ 79775:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$": function() { return /* binding */ previewBox; }
/* harmony export */ });
/* harmony import */ var jodit_core_helpers_checker_is_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(40607);
/* harmony import */ var jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43887);
/* harmony import */ var _css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(56672);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51976);
/* harmony import */ var _selector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(78191);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





function fixedAssetsSizeAndAbsoluteLinks(editor, points) {
    const restoreAttributes = [];
    try {
        (0,_selector__WEBPACK_IMPORTED_MODULE_2__.$$)('img', editor.editor).forEach(item => {
            const previousAttrs = [
                (0,_utils__WEBPACK_IMPORTED_MODULE_1__/* .attr */ .Lj)(item, 'width'),
                (0,_utils__WEBPACK_IMPORTED_MODULE_1__/* .attr */ .Lj)(item, 'height'),
                item.src
            ];
            (0,_utils__WEBPACK_IMPORTED_MODULE_1__/* .attr */ .Lj)(item, {
                width: item.offsetWidth + points,
                height: item.offsetHeight + points
            });
            const a = editor.createInside.a();
            editor.ed.body.appendChild(a);
            a.href = item.src;
            item.src = a.href;
            jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_0__/* .Dom.safeRemove */ .i.safeRemove(a);
            restoreAttributes.push(() => {
                var _a;
                item.src = (_a = previousAttrs[2]) !== null && _a !== void 0 ? _a : '';
                (0,_utils__WEBPACK_IMPORTED_MODULE_1__/* .attr */ .Lj)(item, {
                    width: previousAttrs[0] || null,
                    height: previousAttrs[1] || null
                });
            });
        });
    }
    catch (e) {
        restoreAttributes.forEach(c => c());
        restoreAttributes.length = 0;
        throw e;
    }
    return restoreAttributes;
}
function previewBox(editor, defaultValue, points = 'px', container = null) {
    const restoreAttributes = fixedAssetsSizeAndAbsoluteLinks(editor, points);
    try {
        const res = editor.e.fire('beforePreviewBox', defaultValue, points);
        if (res != null) {
            return res;
        }
        let div = editor.c.div('jodit__preview-box jodit-context');
        if (container) {
            container.appendChild(div);
        }
        (0,_css__WEBPACK_IMPORTED_MODULE_3__/* .css */ .i)(div, {
            position: 'relative',
            padding: 16
        });
        const value = editor.value ||
            `<div style='position: absolute;left:50%;top:50%;transform: translateX(-50%) translateY(-50%);color:#ccc;'>${editor.i18n('Empty')}</div>`;
        if (editor.iframe) {
            const iframe = editor.create.element('iframe');
            (0,_css__WEBPACK_IMPORTED_MODULE_3__/* .css */ .i)(iframe, {
                minWidth: 800,
                minHeight: 600,
                border: 0
            });
            div.appendChild(iframe);
            const myWindow = iframe.contentWindow;
            if (myWindow) {
                editor.e.fire('generateDocumentStructure.iframe', myWindow.document, editor);
                div = myWindow.document.body;
                if (typeof ResizeObserver === 'function') {
                    const resizeObserver = new ResizeObserver(entries => {
                        iframe.style.height =
                            myWindow.document.body.offsetHeight + 20 + 'px';
                    });
                    resizeObserver.observe(myWindow.document.body);
                    editor.e.on('beforeDestruct', () => {
                        resizeObserver.unobserve(myWindow.document.body);
                    });
                }
            }
        }
        else {
            (0,_css__WEBPACK_IMPORTED_MODULE_3__/* .css */ .i)(div, {
                minWidth: 1024,
                minHeight: 600,
                border: 0
            });
        }
        const setHTML = (box, value) => {
            const dv = (0,jodit_core_helpers_checker_is_string__WEBPACK_IMPORTED_MODULE_4__/* .isString */ .H)(value) ? editor.c.div() : value;
            if ((0,jodit_core_helpers_checker_is_string__WEBPACK_IMPORTED_MODULE_4__/* .isString */ .H)(value)) {
                dv.innerHTML = value;
            }
            for (let i = 0; i < dv.childNodes.length; i += 1) {
                const c = dv.childNodes[i];
                if (jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_0__/* .Dom.isElement */ .i.isElement(c)) {
                    const newNode = box.ownerDocument.createElement(c.nodeName);
                    for (let j = 0; j < c.attributes.length; j += 1) {
                        (0,_utils__WEBPACK_IMPORTED_MODULE_1__/* .attr */ .Lj)(newNode, c.attributes[j].nodeName, c.attributes[j].nodeValue);
                    }
                    if (c.childNodes.length === 0 || jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_0__/* .Dom.isTag */ .i.isTag(c, ['table'])) {
                        switch (c.nodeName) {
                            case 'SCRIPT':
                                if (c.textContent) {
                                    newNode.textContent = c.textContent;
                                }
                                break;
                            default:
                                if (c.innerHTML) {
                                    newNode.innerHTML = c.innerHTML;
                                }
                                break;
                        }
                    }
                    else {
                        setHTML(newNode, c);
                    }
                    try {
                        box.appendChild(newNode);
                    }
                    catch (_a) { }
                }
                else {
                    try {
                        box.appendChild(c.cloneNode(true));
                    }
                    catch (_b) { }
                }
            }
        };
        setHTML(div, value);
        editor.e.fire('afterPreviewBox', div);
        return div;
    }
    finally {
        restoreAttributes.forEach(clb => clb());
    }
}


/***/ }),

/***/ 33872:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "m": function() { return /* binding */ reset; }
/* harmony export */ });
/* harmony import */ var _get__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85913);
/* harmony import */ var _checker_is_function__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(84121);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


const map = {};
const reset = function (key) {
    var _a, _b;
    if (!(key in map)) {
        const iframe = document.createElement('iframe');
        try {
            iframe.src = 'about:blank';
            document.body.appendChild(iframe);
            if (!iframe.contentWindow) {
                return null;
            }
            const func = (0,_get__WEBPACK_IMPORTED_MODULE_0__/* .get */ .U)(key, iframe.contentWindow), bind = (0,_get__WEBPACK_IMPORTED_MODULE_0__/* .get */ .U)(key.split('.').slice(0, -1).join('.'), iframe.contentWindow);
            if ((0,_checker_is_function__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(func)) {
                map[key] = func.bind(bind);
            }
        }
        catch (e) {
            if (false) {}
        }
        finally {
            (_a = iframe.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(iframe);
        }
    }
    return (_b = map[key]) !== null && _b !== void 0 ? _b : null;
};


/***/ }),

/***/ 6110:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "j": function() { return /* binding */ inView; },
/* harmony export */   "n": function() { return /* binding */ scrollIntoViewIfNeeded; }
/* harmony export */ });
/* harmony import */ var jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43887);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

const inView = (elm, root, doc) => {
    let rect = elm.getBoundingClientRect(), el = elm;
    const top = rect.top, height = rect.height;
    do {
        if (el && el.parentNode) {
            el = el.parentNode;
            rect = el.getBoundingClientRect();
            if (!(top <= rect.bottom)) {
                return false;
            }
            if (top + height <= rect.top) {
                return false;
            }
        }
    } while (el && el !== root && el.parentNode);
    return (top <= ((doc.documentElement && doc.documentElement.clientHeight) || 0));
};
function scrollIntoViewIfNeeded(elm, root, doc) {
    if (jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_0__/* .Dom.isHTMLElement */ .i.isHTMLElement(elm) && !inView(elm, root, doc)) {
        if (root.clientHeight !== root.scrollHeight) {
            root.scrollTop = elm.offsetTop;
        }
        if (!inView(elm, root, doc)) {
            elm.scrollIntoView();
        }
    }
}


/***/ }),

/***/ 78191:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$$": function() { return /* binding */ $$; },
/* harmony export */   "BR": function() { return /* binding */ getXPathByElement; },
/* harmony export */   "W2": function() { return /* binding */ resolveElement; },
/* harmony export */   "iN": function() { return /* binding */ cssPath; },
/* harmony export */   "xL": function() { return /* binding */ refs; }
/* harmony export */ });
/* harmony import */ var jodit_core_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10063);
/* harmony import */ var jodit_core_helpers_checker_is_string__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(40607);
/* harmony import */ var jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11358);
/* harmony import */ var jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(43887);
/* harmony import */ var jodit_core_helpers_string_camel_case__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(23912);
/* harmony import */ var jodit_core_helpers_array_to_array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(42464);
/* harmony import */ var jodit_core_ui_element__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(71525);
/* harmony import */ var jodit_core_component_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(12614);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */








let temp = 1;
const $$temp = () => {
    temp++;
    return temp;
};
function $$(selector, root) {
    let result;
    if (false) {}
    else {
        result = root.querySelectorAll(selector);
    }
    return [].slice.call(result);
}
const getXPathByElement = (element, root) => {
    if (!element || element.nodeType !== Node.ELEMENT_NODE) {
        return '';
    }
    if (!element.parentNode || root === element) {
        return '';
    }
    if (element.id) {
        return "//*[@id='" + element.id + "']";
    }
    const sames = [].filter.call(element.parentNode.childNodes, (x) => x.nodeName === element.nodeName);
    return (getXPathByElement(element.parentNode, root) +
        '/' +
        element.nodeName.toLowerCase() +
        (sames.length > 1
            ? '[' + ((0,jodit_core_helpers_array_to_array__WEBPACK_IMPORTED_MODULE_3__/* .toArray */ .q)(sames).indexOf(element) + 1) + ']'
            : ''));
};
const refs = (root) => {
    if (jodit_core_component_component__WEBPACK_IMPORTED_MODULE_5__/* .Component.isInstanceOf */ .w.isInstanceOf(root, jodit_core_ui_element__WEBPACK_IMPORTED_MODULE_4__/* .UIElement */ .u)) {
        root = root.container;
    }
    return $$('[ref],[data-ref]', root).reduce((def, child) => {
        const key = (0,jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_1__/* .attr */ .Lj)(child, '-ref');
        if (key && (0,jodit_core_helpers_checker_is_string__WEBPACK_IMPORTED_MODULE_6__/* .isString */ .H)(key)) {
            def[(0,jodit_core_helpers_string_camel_case__WEBPACK_IMPORTED_MODULE_7__/* .camelCase */ .e)(key)] = child;
            def[key] = child;
        }
        return def;
    }, {});
};
const cssPath = (el) => {
    if (!jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_2__/* .Dom.isElement */ .i.isElement(el)) {
        return null;
    }
    const path = [];
    let start = el;
    while (start && start.nodeType === Node.ELEMENT_NODE) {
        let selector = start.nodeName.toLowerCase();
        if (start.id) {
            selector += '#' + start.id;
            path.unshift(selector);
            break;
        }
        else {
            let sib = start, nth = 1;
            do {
                sib = sib.previousElementSibling;
                if (sib && sib.nodeName.toLowerCase() === selector) {
                    nth++;
                }
            } while (sib);
            selector += ':nth-of-type(' + nth + ')';
        }
        path.unshift(selector);
        start = start.parentNode;
    }
    return path.join(' > ');
};
function resolveElement(element, od) {
    let resolved = element;
    if ((0,jodit_core_helpers_checker_is_string__WEBPACK_IMPORTED_MODULE_6__/* .isString */ .H)(element)) {
        try {
            resolved = od.querySelector(element);
        }
        catch (_a) {
            throw (0,jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_1__/* .error */ .vU)('String "' + element + '" should be valid HTML selector');
        }
    }
    if (!resolved ||
        typeof resolved !== 'object' ||
        !jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_2__/* .Dom.isElement */ .i.isElement(resolved) ||
        !resolved.cloneNode) {
        throw (0,jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_1__/* .error */ .vU)('Element "' + element + '" should be string or HTMLElement instance');
    }
    return resolved;
}


/***/ }),

/***/ 51976:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "C6": function() { return /* binding */ callPromise; },
/* harmony export */   "Lj": function() { return /* binding */ attr; },
/* harmony export */   "MN": function() { return /* binding */ markOwner; },
/* harmony export */   "RE": function() { return /* binding */ call; },
/* harmony export */   "XP": function() { return /* binding */ keys; },
/* harmony export */   "po": function() { return /* binding */ loadImage; },
/* harmony export */   "qu": function() { return /* binding */ getDataTransfer; },
/* harmony export */   "u3": function() { return /* binding */ memorizeExec; }
/* harmony export */ });
/* harmony import */ var _checker_is_function__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(84121);
/* harmony import */ var _checker_is_promise__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(30317);
/* harmony import */ var _checker_is_void__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(13859);
/* harmony import */ var _checker_is_plain_object__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(77184);
/* harmony import */ var _checker_is_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(40607);
/* harmony import */ var _data_bind__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(70774);
/* harmony import */ var _css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(56672);
/* harmony import */ var _string_kebab_case__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(90237);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */








function call(func, ...args) {
    return func(...args);
}
function attr(elm, keyOrAttributes, value) {
    if (!elm || !(0,_checker_is_function__WEBPACK_IMPORTED_MODULE_1__/* .isFunction */ .m)(elm.getAttribute)) {
        return null;
    }
    if (!(0,_checker_is_string__WEBPACK_IMPORTED_MODULE_2__/* .isString */ .H)(keyOrAttributes)) {
        Object.keys(keyOrAttributes).forEach(key => {
            const value = keyOrAttributes[key];
            if ((0,_checker_is_plain_object__WEBPACK_IMPORTED_MODULE_3__/* .isPlainObject */ .P)(value) && key === 'style') {
                (0,_css__WEBPACK_IMPORTED_MODULE_4__/* .css */ .i)(elm, value);
            }
            else {
                if (key === 'className') {
                    key = 'class';
                }
                attr(elm, key, value);
            }
        });
        return null;
    }
    let key = (0,_string_kebab_case__WEBPACK_IMPORTED_MODULE_5__/* .CamelCaseToKebabCase */ .g)(keyOrAttributes);
    if (/^-/.test(key)) {
        const res = attr(elm, `data${key}`);
        if (res) {
            return res;
        }
        key = key.substr(1);
    }
    if (value !== undefined) {
        if (value == null) {
            elm.hasAttribute(key) && elm.removeAttribute(key);
        }
        else {
            elm.setAttribute(key, value.toString());
            return value.toString();
        }
    }
    return elm.getAttribute(key);
}
function markOwner(jodit, elm) {
    attr(elm, 'data-editor_id', jodit.id);
    !elm.component &&
        Object.defineProperty(elm, 'jodit', {
            value: jodit
        });
}
function callPromise(condition, callback) {
    if ((0,_checker_is_promise__WEBPACK_IMPORTED_MODULE_6__/* .isPromise */ .t)(condition)) {
        return condition.finally(callback);
    }
    return callback();
}
const loadImage = (src, jodit) => jodit.async.promise((res, rej) => {
    const image = new Image(), onError = () => {
        jodit.e.off(image);
        rej === null || rej === void 0 ? void 0 : rej();
    }, onSuccess = () => {
        jodit.e.off(image);
        res(image);
    };
    jodit.e
        .one(image, 'load', onSuccess)
        .one(image, 'error', onError)
        .one(image, 'abort', onError);
    image.src = src;
    if (image.complete) {
        onSuccess();
    }
});
const keys = (obj, own = true) => {
    if (own) {
        return Object.keys(obj);
    }
    const props = [];
    for (const key in obj) {
        props.push(key);
    }
    return props;
};
const memorizeExec = (editor, _, { control }, preProcessValue) => {
    var _a;
    const key = `button${control.command}`;
    let value = (_a = (control.args && control.args[0])) !== null && _a !== void 0 ? _a : (0,_data_bind__WEBPACK_IMPORTED_MODULE_0__/* .dataBind */ .q)(editor, key);
    if ((0,_checker_is_void__WEBPACK_IMPORTED_MODULE_7__/* .isVoid */ .n)(value)) {
        return false;
    }
    (0,_data_bind__WEBPACK_IMPORTED_MODULE_0__/* .dataBind */ .q)(editor, key, value);
    if (preProcessValue) {
        value = preProcessValue(value);
    }
    editor.execCommand(control.command, false, value !== null && value !== void 0 ? value : undefined);
};
const getDataTransfer = (event) => {
    if (event.clipboardData) {
        return event.clipboardData;
    }
    try {
        return event.dataTransfer || new DataTransfer();
    }
    catch (_a) {
        return null;
    }
};


/***/ }),

/***/ 35570:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "S": function() { return /* reexport safe */ _plugin__WEBPACK_IMPORTED_MODULE_1__.S; }
/* harmony export */ });
/* harmony import */ var _plugin_system__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(58153);
/* harmony import */ var _plugin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(73177);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




/***/ }),

/***/ 58153:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "h": function() { return /* binding */ PluginSystem; }
/* harmony export */ });
/* harmony import */ var jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99160);
/* harmony import */ var jodit_core_helpers_utils_append_script__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(63116);
/* harmony import */ var jodit_core_helpers_array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(22789);
/* harmony import */ var jodit_core_helpers_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(26132);
/* harmony import */ var jodit_core_helpers_utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(51976);
/* harmony import */ var jodit_core_global__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(58299);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






class PluginSystem {
    constructor() {
        this._items = new Map();
    }
    normalizeName(name) {
        return (0,jodit_core_helpers_string__WEBPACK_IMPORTED_MODULE_3__/* .kebabCase */ .GL)(name).toLowerCase();
    }
    items(filter) {
        const results = [];
        this._items.forEach((plugin, name) => {
            results.push([name, plugin]);
        });
        return results.filter(([name]) => !filter || filter.includes(name));
    }
    add(name, plugin) {
        this._items.set(this.normalizeName(name), plugin);
        jodit_core_global__WEBPACK_IMPORTED_MODULE_5__/* .eventEmitter.fire */ .TB.fire(`plugin:${name}:ready`);
    }
    get(name) {
        return this._items.get(this.normalizeName(name));
    }
    remove(name) {
        this._items.delete(this.normalizeName(name));
    }
    init(jodit) {
        const extrasList = jodit.o.extraPlugins.map(s => (0,jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__/* .isString */ .HD)(s) ? { name: s } : s), disableList = (0,jodit_core_helpers_array__WEBPACK_IMPORTED_MODULE_2__/* .splitArray */ .C1)(jodit.o.disablePlugins).map(s => {
            const name = this.normalizeName(s);
            if (false) {}
            return name;
        }), doneList = [], promiseList = {}, plugins = [], pluginsMap = {}, makeAndInit = ([name, plugin]) => {
            if (disableList.includes(name) ||
                doneList.includes(name) ||
                promiseList[name]) {
                return;
            }
            const requires = plugin === null || plugin === void 0 ? void 0 : plugin.requires;
            if (requires &&
                (0,jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(requires) &&
                this.hasDisabledRequires(disableList, requires)) {
                return;
            }
            const instance = PluginSystem.makePluginInstance(jodit, plugin);
            if (instance) {
                this.initOrWait(jodit, name, instance, doneList, promiseList);
                plugins.push(instance);
                pluginsMap[name] = instance;
            }
        };
        const resultLoadExtras = this.loadExtras(jodit, extrasList);
        return (0,jodit_core_helpers_utils_utils__WEBPACK_IMPORTED_MODULE_4__/* .callPromise */ .C6)(resultLoadExtras, () => {
            if (jodit.isInDestruct) {
                return;
            }
            this.items(jodit.o.safeMode
                ? jodit.o.safePluginsList.concat(extrasList.map(s => s.name))
                : null).forEach(makeAndInit);
            this.addListenerOnBeforeDestruct(jodit, plugins);
            jodit.__plugins = pluginsMap;
        });
    }
    wait(name) {
        return new Promise(resolve => {
            if (this.get(name)) {
                return resolve();
            }
            const onReady = () => {
                resolve();
                jodit_core_global__WEBPACK_IMPORTED_MODULE_5__/* .eventEmitter.off */ .TB.off(`plugin:${name}:ready`, onReady);
            };
            jodit_core_global__WEBPACK_IMPORTED_MODULE_5__/* .eventEmitter.on */ .TB.on(`plugin:${name}:ready`, onReady);
        });
    }
    hasDisabledRequires(disableList, requires) {
        return Boolean((requires === null || requires === void 0 ? void 0 : requires.length) &&
            disableList.some(disabled => requires.includes(disabled)));
    }
    static makePluginInstance(jodit, plugin) {
        try {
            try {
                return (0,jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .mf)(plugin) ? new plugin(jodit) : plugin;
            }
            catch (e) {
                if ((0,jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .mf)(plugin) && !plugin.prototype) {
                    return plugin(jodit);
                }
            }
        }
        catch (e) {
            console.error(e);
            if (false) {}
        }
        return null;
    }
    initOrWait(jodit, pluginName, instance, doneList, promiseList) {
        const initPlugin = (name, plugin) => {
            if ((0,jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__/* .isInitable */ .Gu)(plugin)) {
                const req = plugin.requires;
                if (!(req === null || req === void 0 ? void 0 : req.length) ||
                    req.every(name => doneList.includes(name))) {
                    try {
                        plugin.init(jodit);
                    }
                    catch (e) {
                        console.error(e);
                        if (false) {}
                    }
                    doneList.push(name);
                }
                else {
                    if (false) {}
                    promiseList[name] = plugin;
                    return false;
                }
            }
            else {
                doneList.push(name);
            }
            if (plugin.hasStyle) {
                PluginSystem.loadStyle(jodit, name);
            }
            return true;
        };
        initPlugin(pluginName, instance);
        Object.keys(promiseList).forEach(name => {
            const plugin = promiseList[name];
            if (!plugin) {
                return;
            }
            if (initPlugin(name, plugin)) {
                promiseList[name] = undefined;
                delete promiseList[name];
            }
        });
    }
    addListenerOnBeforeDestruct(jodit, plugins) {
        jodit.e.on('beforeDestruct', () => {
            plugins.forEach(instance => {
                if ((0,jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__/* .isDestructable */ .Z$)(instance)) {
                    instance.destruct(jodit);
                }
            });
            plugins.length = 0;
            delete jodit.__plugins;
        });
    }
    load(jodit, pluginList) {
        const reflect = (p) => p.then((v) => ({ v, status: 'fulfilled' }), (e) => ({ e, status: 'rejected' }));
        return Promise.all(pluginList.map(extra => {
            const url = extra.url ||
                PluginSystem.getFullUrl(jodit, extra.name, true);
            return reflect((0,jodit_core_helpers_utils_append_script__WEBPACK_IMPORTED_MODULE_1__/* .appendScriptAsync */ .JL)(jodit, url));
        }));
    }
    static async loadStyle(jodit, pluginName) {
        const url = PluginSystem.getFullUrl(jodit, pluginName, false);
        if (this.styles.has(url)) {
            return;
        }
        this.styles.add(url);
        return (0,jodit_core_helpers_utils_append_script__WEBPACK_IMPORTED_MODULE_1__/* .appendStyleAsync */ .Nf)(jodit, url);
    }
    static getFullUrl(jodit, name, js) {
        name = (0,jodit_core_helpers_string__WEBPACK_IMPORTED_MODULE_3__/* .kebabCase */ .GL)(name);
        return (jodit.basePath +
            'plugins/' +
            name +
            '/' +
            name +
            '.' +
            (js ? 'js' : 'css'));
    }
    loadExtras(jodit, extrasList) {
        if (extrasList && extrasList.length) {
            try {
                const needLoadExtras = extrasList.filter(extra => !this._items.has(this.normalizeName(extra.name)));
                if (needLoadExtras.length) {
                    return this.load(jodit, needLoadExtras);
                }
            }
            catch (e) {
                if (false) {}
            }
        }
    }
}
PluginSystem.styles = new Set();


/***/ }),

/***/ 73177:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "S": function() { return /* binding */ Plugin; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(20255);
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26655);
/* harmony import */ var jodit_core_decorators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11169);
/* harmony import */ var jodit_core_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(52607);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




class Plugin extends _component__WEBPACK_IMPORTED_MODULE_0__/* .ViewComponent */ .Hr {
    constructor(jodit) {
        super(jodit);
        this.requires = [];
        this.buttons = [];
        this.hasStyle = false;
        jodit.e
            .on('afterPluginSystemInit', () => {
            var _a;
            if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_2__.isJoditObject)(jodit)) {
                (_a = this.buttons) === null || _a === void 0 ? void 0 : _a.forEach(btn => {
                    jodit.registerButton(btn);
                });
            }
        })
            .on('afterInit', () => {
            this.setStatus(_component__WEBPACK_IMPORTED_MODULE_0__/* .STATUSES.ready */ .n$.ready);
            this.afterInit(jodit);
        })
            .on('beforeDestruct', this.destruct);
    }
    className() {
        return '';
    }
    init(jodit) {
    }
    destruct() {
        var _a, _b, _c;
        if (!this.isInDestruct) {
            this.setStatus(_component__WEBPACK_IMPORTED_MODULE_0__/* .STATUSES.beforeDestruct */ .n$.beforeDestruct);
            const { j } = this;
            if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_2__.isJoditObject)(j)) {
                (_a = this.buttons) === null || _a === void 0 ? void 0 : _a.forEach(btn => {
                    j === null || j === void 0 ? void 0 : j.unregisterButton(btn);
                });
            }
            (_c = (_b = this.j) === null || _b === void 0 ? void 0 : _b.events) === null || _c === void 0 ? void 0 : _c.off('beforeDestruct', this.destruct);
            this.beforeDestruct(this.j);
            super.destruct();
        }
    }
}
(0,tslib__WEBPACK_IMPORTED_MODULE_3__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_1__.autobind
], Plugin.prototype, "destruct", null);


/***/ }),

/***/ 83282:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "t": function() { return /* binding */ Ajax; }
});

// EXTERNAL MODULE: ./src/config.ts
var config = __webpack_require__(27537);
// EXTERNAL MODULE: ./src/core/helpers/index.ts + 14 modules
var helpers = __webpack_require__(52607);
// EXTERNAL MODULE: ./src/core/helpers/utils/error/index.ts + 5 modules
var error = __webpack_require__(59058);
// EXTERNAL MODULE: ./src/core/request/response.ts
var response = __webpack_require__(55606);
;// CONCATENATED MODULE: ./src/core/request/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.defaultAjaxOptions */.D.prototype.defaultAjaxOptions = {
    successStatuses: [200, 201, 202],
    dataType: 'json',
    method: 'GET',
    url: '',
    data: null,
    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
    headers: {
        'X-REQUESTED-WITH': 'XMLHttpRequest'
    },
    withCredentials: false,
    xhr() {
        return new XMLHttpRequest();
    }
};

;// CONCATENATED MODULE: ./src/core/request/ajax.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





class Ajax {
    constructor(jodit, options) {
        this.jodit = jodit;
        this.isFulfilled = false;
        this.activated = false;
        this.options = (0,helpers.ConfigProto)(options || {}, config/* Config.prototype.defaultAjaxOptions */.D.prototype.defaultAjaxOptions);
        this.xhr = this.o.xhr ? this.o.xhr() : new XMLHttpRequest();
        jodit && jodit.e && jodit.e.on('beforeDestruct', () => this.destruct());
    }
    __buildParams(obj, prefix) {
        if ((0,helpers.isFunction)(this.o.queryBuild)) {
            return this.o.queryBuild.call(this, obj, prefix);
        }
        if ((0,helpers.isString)(obj) ||
            (this.j.ow.FormData &&
                obj instanceof this.j.ow.FormData)) {
            return obj;
        }
        return (0,helpers.buildQuery)(obj);
    }
    get o() {
        return this.options;
    }
    get j() {
        return this.jodit;
    }
    abort() {
        if (this.isFulfilled) {
            return this;
        }
        try {
            this.isFulfilled = true;
            this.xhr.abort();
        }
        catch (_a) { }
        return this;
    }
    send() {
        this.activated = true;
        const { xhr, o } = this;
        const request = this.prepareRequest();
        return this.j.async.promise(async (resolve, reject) => {
            var _a;
            const onReject = () => {
                this.isFulfilled = true;
                reject(error/* connection */.ZI('Connection error'));
            };
            const onResolve = () => {
                this.isFulfilled = true;
                resolve(new response/* Response */.H(request, xhr.status, xhr.statusText, !xhr.responseType ? xhr.responseText : xhr.response));
            };
            xhr.onload = onResolve;
            xhr.onabort = () => {
                this.isFulfilled = true;
                reject(error/* abort */.JG('Abort connection'));
            };
            xhr.onerror = onReject;
            xhr.ontimeout = onReject;
            if (o.responseType) {
                xhr.responseType = o.responseType;
            }
            xhr.onprogress = (e) => {
                var _a, _b;
                let percentComplete = 0;
                if (e.lengthComputable) {
                    percentComplete = (e.loaded / e.total) * 100;
                }
                (_b = (_a = this.options).onProgress) === null || _b === void 0 ? void 0 : _b.call(_a, percentComplete);
            };
            xhr.onreadystatechange = () => {
                var _a, _b;
                (_b = (_a = this.options).onProgress) === null || _b === void 0 ? void 0 : _b.call(_a, 10);
                if (xhr.readyState === XMLHttpRequest.DONE) {
                    if (o.successStatuses.includes(xhr.status)) {
                        onResolve();
                    }
                    else if (xhr.statusText) {
                        this.isFulfilled = true;
                        reject(error/* connection */.ZI(xhr.statusText));
                    }
                }
            };
            xhr.withCredentials = (_a = o.withCredentials) !== null && _a !== void 0 ? _a : false;
            const { url, data, method } = request;
            xhr.open(method, url, true);
            if (o.contentType && xhr.setRequestHeader) {
                xhr.setRequestHeader('Content-type', o.contentType);
            }
            let { headers } = o;
            if ((0,helpers.isFunction)(headers)) {
                headers = await headers.call(this);
            }
            if (headers && xhr.setRequestHeader) {
                Object.keys(headers).forEach(key => {
                    xhr.setRequestHeader(key, headers[key]);
                });
            }
            this.j.async.setTimeout(() => {
                xhr.send(data ? this.__buildParams(data) : undefined);
            }, 0);
        });
    }
    prepareRequest() {
        if (!this.o.url) {
            throw error/* error */.vU('Need URL for AJAX request');
        }
        let url = this.o.url;
        const data = this.o.data;
        const method = (this.o.method || 'get').toLowerCase();
        if (method === 'get' && data && (0,helpers.isPlainObject)(data)) {
            const qIndex = url.indexOf('?');
            if (qIndex !== -1) {
                const urlData = (0,helpers.parseQuery)(url);
                url =
                    url.substring(0, qIndex) +
                        '?' +
                        (0,helpers.buildQuery)({ ...urlData, ...data });
            }
            else {
                url += '?' + (0,helpers.buildQuery)(this.o.data);
            }
        }
        const request = {
            url,
            method,
            data
        };
        Ajax.log.splice(100);
        Ajax.log.push(request);
        return request;
    }
    destruct() {
        if (this.activated && !this.isFulfilled) {
            this.abort();
            this.isFulfilled = true;
        }
    }
}
Ajax.log = [];


/***/ }),

/***/ 71347:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "H": function() { return /* reexport safe */ _response__WEBPACK_IMPORTED_MODULE_1__.H; },
/* harmony export */   "t": function() { return /* reexport safe */ _ajax__WEBPACK_IMPORTED_MODULE_0__.t; }
/* harmony export */ });
/* harmony import */ var _ajax__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(83282);
/* harmony import */ var _response__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(55606);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




/***/ }),

/***/ 55606:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "H": function() { return /* binding */ Response; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
class Response {
    constructor(request, status, statusText, body) {
        this.request = request;
        this.status = status;
        this.statusText = statusText;
        this.body = body;
    }
    get url() {
        return this.request.url;
    }
    async json() {
        return JSON.parse(this.body);
    }
    text() {
        return Promise.resolve(this.body);
    }
    async blob() {
        return this.body;
    }
}


/***/ }),

/***/ 91590:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "F": function() { return /* reexport */ moveNodeInsideStart; },
  "f": function() { return /* reexport */ moveTheNodeAlongTheEdgeOutward; }
});

// EXTERNAL MODULE: ./src/core/dom/index.ts
var dom = __webpack_require__(94522);
// EXTERNAL MODULE: ./src/core/constants.ts
var constants = __webpack_require__(10063);
;// CONCATENATED MODULE: ./src/core/selection/helpers/move-node-inside-start.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function moveNodeInsideStart(j, node, start) {
    let sibling = dom/* Dom.findSibling */.i.findSibling(node, start), anotherSibling = dom/* Dom.findSibling */.i.findSibling(node, !start);
    while (dom/* Dom.isElement */.i.isElement(sibling) &&
        !dom/* Dom.isTag */.i.isTag(sibling, constants.INSEPARABLE_TAGS) &&
        dom/* Dom.isContentEditable */.i.isContentEditable(sibling, j.editor) &&
        (!anotherSibling || !dom/* Dom.closest */.i.closest(node, dom/* Dom.isElement */.i.isElement, j.editor))) {
        if (start || !sibling.firstChild) {
            sibling.appendChild(node);
        }
        else {
            dom/* Dom.before */.i.before(sibling.firstChild, node);
        }
        sibling = dom/* Dom.sibling */.i.sibling(node, start);
        anotherSibling = dom/* Dom.sibling */.i.sibling(node, !start);
    }
}

;// CONCATENATED MODULE: ./src/core/selection/helpers/move-the-node-along-the-edge-outward.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function moveTheNodeAlongTheEdgeOutward(node, start, root) {
    let item = node;
    while (item && item !== root) {
        const sibling = dom/* Dom.findSibling */.i.findSibling(item, start);
        if (sibling) {
            return;
        }
        item = item.parentElement;
        if (item && item !== root) {
            start ? dom/* Dom.before */.i.before(item, node) : dom/* Dom.after */.i.after(item, node);
        }
    }
    return;
}

;// CONCATENATED MODULE: ./src/core/selection/helpers/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




/***/ }),

/***/ 96811:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "RP": function() { return /* reexport */ CommitStyle; },
  "Ph": function() { return /* reexport */ Select; }
});

// UNUSED EXPORTS: CHANGE, INITIAL, REPLACE, UNSET, UNWRAP, WRAP

// EXTERNAL MODULE: ./src/core/constants.ts
var constants = __webpack_require__(10063);
// EXTERNAL MODULE: ./src/core/helpers/index.ts + 14 modules
var helpers = __webpack_require__(52607);
// EXTERNAL MODULE: ./src/core/helpers/utils/index.ts + 11 modules
var utils = __webpack_require__(11358);
// EXTERNAL MODULE: ./src/core/helpers/utils/css.ts
var css = __webpack_require__(56672);
// EXTERNAL MODULE: ./src/core/helpers/utils/data-bind.ts
var data_bind = __webpack_require__(70774);
// EXTERNAL MODULE: ./src/core/helpers/string/kebab-case.ts
var kebab_case = __webpack_require__(90237);
// EXTERNAL MODULE: ./src/core/helpers/normalize/normalize-css-value.ts
var normalize_css_value = __webpack_require__(99916);
// EXTERNAL MODULE: ./src/core/helpers/size/object-size.ts
var object_size = __webpack_require__(2636);
// EXTERNAL MODULE: ./src/core/dom/index.ts
var dom = __webpack_require__(94522);
// EXTERNAL MODULE: ./src/core/global.ts
var global = __webpack_require__(58299);
;// CONCATENATED MODULE: ./src/core/selection/style/api/toggle/toggle-css.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */









function toggleCSS(commitStyle, elm, jodit, mode, dry = false) {
    const { style, className } = commitStyle.options;
    if (style && (0,object_size/* size */.d)(style) > 0) {
        Object.keys(style).forEach((rule) => {
            const inlineValue = elm.style.getPropertyValue((0,kebab_case/* kebabCase */.G)(rule));
            if (inlineValue === '' && style[rule] == null) {
                return;
            }
            if (getNativeCSSValue(jodit, elm, rule) ===
                (0,normalize_css_value/* normalizeCssValue */.Z)(rule, style[rule])) {
                !dry && (0,css/* css */.i)(elm, rule, null);
                mode = UNSET;
                mode = removeExtraStyleAttribute(commitStyle, elm, mode);
                return;
            }
            mode = CHANGE;
            !dry && (0,css/* css */.i)(elm, rule, style[rule]);
            if (!dry) {
                mode = removeExtraStyleAttribute(commitStyle, elm, mode);
            }
        });
    }
    if (className) {
        if (elm.classList.contains(className)) {
            elm.classList.remove(className);
            mode = UNSET;
        }
        else {
            elm.classList.add(className);
            mode = CHANGE;
        }
    }
    return mode;
}
function removeExtraStyleAttribute(commitStyle, elm, mode) {
    if (!(0,utils/* attr */.Lj)(elm, 'style')) {
        (0,utils/* attr */.Lj)(elm, 'style', null);
        if (elm.tagName.toLowerCase() === commitStyle.defaultTag) {
            dom/* Dom.unwrap */.i.unwrap(elm);
            mode = UNWRAP;
        }
    }
    return mode;
}
function getShadowRoot(jodit) {
    var _a;
    if ((0,data_bind/* dataBind */.q)(jodit, 'shadowRoot') !== undefined) {
        return (0,data_bind/* dataBind */.q)(jodit, 'shadowRoot');
    }
    const container = (0,global/* getContainer */.ZO)(jodit);
    const iframe = document.createElement('iframe');
    (0,css/* css */.i)(iframe, {
        width: 0,
        height: 0,
        position: 'absolute',
        border: 0
    });
    iframe.src = 'about:blank';
    container.appendChild(iframe);
    const doc = (_a = iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.document;
    const shadowRoot = !doc ? jodit.od.body : doc.body;
    (0,data_bind/* dataBind */.q)(jodit, 'shadowRoot', shadowRoot);
    return shadowRoot;
}
function getNativeCSSValue(jodit, elm, key) {
    const newElm = jodit.create.element(elm.tagName.toLowerCase());
    newElm.style.cssText = elm.style.cssText;
    const root = getShadowRoot(jodit);
    root.appendChild(newElm);
    const result = (0,css/* css */.i)(newElm, key);
    dom/* Dom.safeRemove */.i.safeRemove(newElm);
    return result;
}

// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(20255);
// EXTERNAL MODULE: ./src/core/decorators/index.ts + 7 modules
var decorators = __webpack_require__(11169);
// EXTERNAL MODULE: ./src/core/selection/helpers/index.ts + 2 modules
var selection_helpers = __webpack_require__(91590);
;// CONCATENATED MODULE: ./src/core/selection/select.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */








class Select {
    constructor(jodit) {
        this.jodit = jodit;
        jodit.e.on('removeMarkers', () => {
            this.removeMarkers();
        });
    }
    get j() {
        return this.jodit;
    }
    errorNode(node) {
        if (!dom/* Dom.isNode */.i.isNode(node)) {
            throw (0,helpers.error)('Parameter node must be instance of Node');
        }
    }
    get area() {
        return this.j.editor;
    }
    get win() {
        return this.j.ew;
    }
    get doc() {
        return this.j.ed;
    }
    get sel() {
        if (this.j.o.shadowRoot &&
            (0,helpers.isFunction)(this.j.o.shadowRoot.getSelection)) {
            return this.j.o.shadowRoot.getSelection();
        }
        return this.win.getSelection();
    }
    get range() {
        const sel = this.sel;
        return sel && sel.rangeCount ? sel.getRangeAt(0) : this.createRange();
    }
    get isInsideArea() {
        const { sel } = this;
        const range = (sel === null || sel === void 0 ? void 0 : sel.rangeCount) ? sel.getRangeAt(0) : null;
        return !(!range || !dom/* Dom.isOrContains */.i.isOrContains(this.area, range.startContainer));
    }
    createRange(select = false) {
        const range = this.doc.createRange();
        if (select) {
            this.selectRange(range);
        }
        return range;
    }
    remove() {
        const sel = this.sel, current = this.current();
        if (sel && current) {
            for (let i = 0; i < sel.rangeCount; i += 1) {
                sel.getRangeAt(i).deleteContents();
                sel.getRangeAt(i).collapse(true);
            }
        }
    }
    clear() {
        var _a, _b;
        if ((_a = this.sel) === null || _a === void 0 ? void 0 : _a.rangeCount) {
            (_b = this.sel) === null || _b === void 0 ? void 0 : _b.removeAllRanges();
        }
    }
    removeNode(node) {
        if (!dom/* Dom.isOrContains */.i.isOrContains(this.j.editor, node, true)) {
            throw (0,helpers.error)("Selection.removeNode can remove only editor's children");
        }
        dom/* Dom.safeRemove */.i.safeRemove(node);
        this.j.e.fire('afterRemoveNode', node);
    }
    insertCursorAtPoint(x, y) {
        this.removeMarkers();
        try {
            const rng = this.createRange();
            (() => {
                if (this.doc.caretPositionFromPoint) {
                    const caret = this.doc.caretPositionFromPoint(x, y);
                    if (caret) {
                        rng.setStart(caret.offsetNode, caret.offset);
                        return;
                    }
                }
                if (this.doc.caretRangeFromPoint) {
                    const caret = this.doc.caretRangeFromPoint(x, y);
                    rng.setStart(caret.startContainer, caret.startOffset);
                }
            })();
            rng.collapse(true);
            this.selectRange(rng);
            return true;
        }
        catch (_a) { }
        return false;
    }
    static isMarker(elm) {
        return (dom/* Dom.isNode */.i.isNode(elm) &&
            dom/* Dom.isTag */.i.isTag(elm, 'span') &&
            elm.hasAttribute('data-' + constants.MARKER_CLASS));
    }
    get hasMarkers() {
        return Boolean(this.markers.length);
    }
    get markers() {
        return (0,helpers.$$)('span[data-' + constants.MARKER_CLASS + ']', this.area);
    }
    removeMarkers() {
        dom/* Dom.safeRemove.apply */.i.safeRemove.apply(null, this.markers);
    }
    marker(atStart = false, range) {
        let newRange = null;
        if (range) {
            newRange = range.cloneRange();
            newRange.collapse(atStart);
        }
        const marker = this.j.createInside.span();
        marker.id =
            constants.MARKER_CLASS +
                '_' +
                Number(new Date()) +
                '_' +
                String(Math.random()).slice(2);
        marker.style.lineHeight = '0';
        marker.style.display = 'none';
        marker.setAttribute('data-' + constants.MARKER_CLASS, atStart ? 'start' : 'end');
        marker.appendChild(this.j.createInside.text(constants.INVISIBLE_SPACE));
        if (newRange) {
            if (dom/* Dom.isOrContains */.i.isOrContains(this.area, atStart ? newRange.startContainer : newRange.endContainer)) {
                newRange.insertNode(marker);
            }
        }
        return marker;
    }
    restore() {
        let range = false;
        const markAttr = (start) => `span[data-${constants.MARKER_CLASS}=${start ? 'start' : 'end'}]`;
        const start = this.area.querySelector(markAttr(true)), end = this.area.querySelector(markAttr(false));
        if (!start) {
            return;
        }
        range = this.createRange();
        if (!end) {
            const previousNode = start.previousSibling;
            if (dom/* Dom.isText */.i.isText(previousNode)) {
                range.setStart(previousNode, previousNode.nodeValue ? previousNode.nodeValue.length : 0);
            }
            else {
                range.setStartBefore(start);
            }
            dom/* Dom.safeRemove */.i.safeRemove(start);
            range.collapse(true);
        }
        else {
            range.setStartAfter(start);
            dom/* Dom.safeRemove */.i.safeRemove(start);
            range.setEndBefore(end);
            dom/* Dom.safeRemove */.i.safeRemove(end);
        }
        if (range) {
            this.selectRange(range);
        }
    }
    save(silent = false) {
        if (this.hasMarkers) {
            return [];
        }
        const sel = this.sel;
        if (!sel || !sel.rangeCount) {
            return [];
        }
        const info = [], length = sel.rangeCount, ranges = [];
        for (let i = 0; i < length; i += 1) {
            ranges[i] = sel.getRangeAt(i);
            if (ranges[i].collapsed) {
                const start = this.marker(true, ranges[i]);
                info[i] = {
                    startId: start.id,
                    collapsed: true,
                    startMarker: start.outerHTML
                };
            }
            else {
                const start = this.marker(true, ranges[i]);
                const end = this.marker(false, ranges[i]);
                info[i] = {
                    startId: start.id,
                    endId: end.id,
                    collapsed: false,
                    startMarker: start.outerHTML,
                    endMarker: end.outerHTML
                };
            }
        }
        if (!silent) {
            sel.removeAllRanges();
            for (let i = length - 1; i >= 0; --i) {
                const startElm = this.doc.getElementById(info[i].startId);
                if (startElm) {
                    if (info[i].collapsed) {
                        ranges[i].setStartAfter(startElm);
                        ranges[i].collapse(true);
                    }
                    else {
                        ranges[i].setStartBefore(startElm);
                        if (info[i].endId) {
                            const endElm = this.doc.getElementById(info[i].endId);
                            if (endElm) {
                                ranges[i].setEndAfter(endElm);
                            }
                        }
                    }
                }
                try {
                    sel.addRange(ranges[i].cloneRange());
                }
                catch (_a) { }
            }
        }
        return info;
    }
    focus(options = {
        preventScroll: true
    }) {
        var _a, _b;
        if (!this.isFocused()) {
            const scrollParent = (0,helpers.getScrollParent)(this.j.container), scrollTop = scrollParent === null || scrollParent === void 0 ? void 0 : scrollParent.scrollTop;
            if (this.j.iframe) {
                if (this.doc.readyState === 'complete') {
                    this.j.iframe.focus(options);
                }
            }
            this.win.focus();
            this.area.focus(options);
            if (scrollTop && (scrollParent === null || scrollParent === void 0 ? void 0 : scrollParent.scrollTo)) {
                scrollParent.scrollTo(0, scrollTop);
            }
            const sel = this.sel, range = (sel === null || sel === void 0 ? void 0 : sel.rangeCount) ? sel === null || sel === void 0 ? void 0 : sel.getRangeAt(0) : null;
            if (!range || !dom/* Dom.isOrContains */.i.isOrContains(this.area, range.startContainer)) {
                const range = this.createRange();
                range.setStart(this.area, 0);
                range.collapse(true);
                this.selectRange(range, false);
            }
            if (!this.j.editorIsActive) {
                (_b = (_a = this.j) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.fire('focus');
            }
            return true;
        }
        return false;
    }
    isCollapsed() {
        const sel = this.sel;
        for (let r = 0; sel && r < sel.rangeCount; r += 1) {
            if (!sel.getRangeAt(r).collapsed) {
                return false;
            }
        }
        return true;
    }
    isFocused() {
        return (this.doc.hasFocus &&
            this.doc.hasFocus() &&
            this.area === this.doc.activeElement);
    }
    current(checkChild = true) {
        if (this.j.getRealMode() === constants.MODE_WYSIWYG) {
            const sel = this.sel;
            if (!sel || sel.rangeCount === 0) {
                return null;
            }
            const range = sel.getRangeAt(0);
            let node = range.startContainer, rightMode = false;
            const child = (nd) => rightMode ? nd.lastChild : nd.firstChild;
            if (dom/* Dom.isTag */.i.isTag(node, 'br') && sel.isCollapsed) {
                return node;
            }
            if (!dom/* Dom.isText */.i.isText(node)) {
                node = range.startContainer.childNodes[range.startOffset];
                if (!node) {
                    node =
                        range.startContainer.childNodes[range.startOffset - 1];
                    rightMode = true;
                }
                if (node && sel.isCollapsed && !dom/* Dom.isText */.i.isText(node)) {
                    if (!rightMode && dom/* Dom.isText */.i.isText(node.previousSibling)) {
                        node = node.previousSibling;
                    }
                    else if (checkChild) {
                        let current = child(node);
                        while (current) {
                            if (current && dom/* Dom.isText */.i.isText(current)) {
                                node = current;
                                break;
                            }
                            current = child(current);
                        }
                    }
                }
                if (node && !sel.isCollapsed && !dom/* Dom.isText */.i.isText(node)) {
                    let leftChild = node, rightChild = node;
                    do {
                        leftChild = leftChild.firstChild;
                        rightChild = rightChild.lastChild;
                    } while (leftChild && rightChild && !dom/* Dom.isText */.i.isText(leftChild));
                    if (leftChild === rightChild &&
                        leftChild &&
                        dom/* Dom.isText */.i.isText(leftChild)) {
                        node = leftChild;
                    }
                }
            }
            if (node && dom/* Dom.isOrContains */.i.isOrContains(this.area, node)) {
                return node;
            }
        }
        return null;
    }
    insertNode(node, insertCursorAfter = true, fireChange = true) {
        var _a;
        this.errorNode(node);
        this.j.e.fire('safeHTML', node);
        if (!this.isFocused() && this.j.isEditorMode()) {
            this.focus();
            this.restore();
        }
        const sel = this.sel;
        if (!this.isCollapsed()) {
            this.j.execCommand('Delete');
        }
        this.j.e.fire('beforeInsertNode', node);
        if (sel && sel.rangeCount) {
            const range = sel.getRangeAt(0);
            if (dom/* Dom.isOrContains */.i.isOrContains(this.area, range.commonAncestorContainer)) {
                if (dom/* Dom.isTag */.i.isTag(range.startContainer, constants.INSEPARABLE_TAGS) &&
                    range.collapsed) {
                    (_a = range.startContainer.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(node, range.startContainer);
                }
                else {
                    dom/* Dom.safeInsertNode */.i.safeInsertNode(range, node);
                }
            }
            else {
                this.area.appendChild(node);
            }
        }
        else {
            this.area.appendChild(node);
        }
        if (insertCursorAfter) {
            if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
                node.lastChild && this.setCursorAfter(node.lastChild);
            }
            else {
                this.setCursorAfter(node);
            }
        }
        if (fireChange && this.j.events) {
            this.j.__imdSynchronizeValues();
        }
        if (this.j.events) {
            this.j.e.fire('afterInsertNode', node);
        }
    }
    insertHTML(html, insertCursorAfter = true) {
        if (html === '') {
            return;
        }
        const node = this.j.createInside.div(), fragment = this.j.createInside.fragment();
        let lastChild;
        if (!this.isFocused() && this.j.isEditorMode()) {
            this.focus();
            this.restore();
        }
        if (!dom/* Dom.isNode */.i.isNode(html)) {
            node.innerHTML = html.toString();
        }
        else {
            node.appendChild(html);
        }
        if (!this.j.isEditorMode() &&
            this.j.e.fire('insertHTML', node.innerHTML) === false) {
            return;
        }
        lastChild = node.lastChild;
        if (!lastChild) {
            return;
        }
        while (node.firstChild) {
            lastChild = node.firstChild;
            fragment.appendChild(node.firstChild);
        }
        this.insertNode(fragment.firstChild && fragment.firstChild === fragment.lastChild
            ? fragment.lastChild
            : fragment, false, false);
        if (insertCursorAfter) {
            if (lastChild) {
                this.setCursorAfter(lastChild);
            }
            else {
                this.setCursorIn(fragment);
            }
        }
        this.j.__imdSynchronizeValues();
    }
    insertImage(url, styles = null, defaultWidth = null) {
        const image = (0,helpers.isString)(url) ? this.j.createInside.element('img') : url;
        if ((0,helpers.isString)(url)) {
            image.setAttribute('src', url);
        }
        if (defaultWidth != null) {
            let dw = defaultWidth.toString();
            if (dw &&
                'auto' !== dw &&
                String(dw).indexOf('px') < 0 &&
                String(dw).indexOf('%') < 0) {
                dw += 'px';
            }
            (0,helpers.call)(this.j.o.resizer.forImageChangeAttributes ? helpers.attr : helpers.css, image, 'width', dw);
        }
        if (styles && typeof styles === 'object') {
            (0,helpers.css)(image, styles);
        }
        const onload = () => {
            if (image.naturalHeight < image.offsetHeight ||
                image.naturalWidth < image.offsetWidth) {
                image.style.width = '';
                image.style.height = '';
            }
            image.removeEventListener('load', onload);
        };
        this.j.e.on(image, 'load', onload);
        if (image.complete) {
            onload();
        }
        this.insertNode(image);
        this.j.e.fire('afterInsertImage', image);
    }
    eachSelection(callback) {
        var _a;
        const sel = this.sel;
        if (sel && sel.rangeCount) {
            const range = sel.getRangeAt(0);
            let root = range.commonAncestorContainer;
            if (!dom/* Dom.isHTMLElement */.i.isHTMLElement(root)) {
                root = root.parentElement;
            }
            const nodes = [], startOffset = range.startOffset, length = root.childNodes.length, elementOffset = startOffset < length ? startOffset : length - 1;
            let start = range.startContainer === this.area
                ? root.childNodes[elementOffset]
                : range.startContainer, end = range.endContainer === this.area
                ? root.childNodes[range.endOffset - 1]
                : range.endContainer;
            if (dom/* Dom.isText */.i.isText(start) &&
                start === range.startContainer &&
                range.startOffset === ((_a = start.nodeValue) === null || _a === void 0 ? void 0 : _a.length) &&
                start.nextSibling) {
                start = start.nextSibling;
            }
            if (dom/* Dom.isText */.i.isText(end) &&
                end === range.endContainer &&
                range.endOffset === 0 &&
                end.previousSibling) {
                end = end.previousSibling;
            }
            const checkElm = (node) => {
                if (node &&
                    node !== root &&
                    !dom/* Dom.isEmptyTextNode */.i.isEmptyTextNode(node) &&
                    !Select.isMarker(node)) {
                    nodes.push(node);
                }
            };
            checkElm(start);
            if (start !== end && dom/* Dom.isOrContains */.i.isOrContains(root, start, true)) {
                dom/* Dom.find */.i.find(start, node => {
                    checkElm(node);
                    return (node === end ||
                        (node && node.contains && node.contains(end)));
                }, root, true, false);
            }
            const forEvery = (current) => {
                if (!dom/* Dom.isOrContains */.i.isOrContains(this.j.editor, current, true)) {
                    return;
                }
                if (current.nodeName.match(/^(UL|OL)$/)) {
                    return (0,helpers.toArray)(current.childNodes).forEach(forEvery);
                }
                if (dom/* Dom.isTag */.i.isTag(current, 'li')) {
                    if (current.firstChild) {
                        current = current.firstChild;
                    }
                    else {
                        const currentB = this.j.createInside.text(constants.INVISIBLE_SPACE);
                        current.appendChild(currentB);
                        current = currentB;
                    }
                }
                callback(current);
            };
            if (nodes.length === 0 && dom/* Dom.isEmptyTextNode */.i.isEmptyTextNode(start)) {
                nodes.push(start);
            }
            if (nodes.length === 0 && start.firstChild) {
                nodes.push(start.firstChild);
            }
            nodes.forEach(forEvery);
        }
    }
    cursorInTheEdge(start, parentBlock) {
        var _a, _b;
        const end = !start, range = (_a = this.sel) === null || _a === void 0 ? void 0 : _a.getRangeAt(0), current = this.current(false);
        if (!range ||
            !current ||
            !dom/* Dom.isOrContains */.i.isOrContains(parentBlock, current, true)) {
            return null;
        }
        const container = start ? range.startContainer : range.endContainer;
        const offset = start ? range.startOffset : range.endOffset;
        const check = (elm) => Boolean(elm && !dom/* Dom.isTag */.i.isTag(elm, 'br') && !dom/* Dom.isEmptyTextNode */.i.isEmptyTextNode(elm));
        if (dom/* Dom.isText */.i.isText(container)) {
            const text = ((_b = container.nodeValue) === null || _b === void 0 ? void 0 : _b.length) ? container.nodeValue : '';
            if (end && text.replace((0,constants.INVISIBLE_SPACE_REG_EXP_END)(), '').length > offset) {
                return false;
            }
            const inv = (0,constants.INVISIBLE_SPACE_REG_EXP_START)().exec(text);
            if (start &&
                ((inv && inv[0].length < offset) || (!inv && offset > 0))) {
                return false;
            }
        }
        else {
            const children = (0,helpers.toArray)(container.childNodes);
            if (end) {
                if (children.slice(offset).some(check)) {
                    return false;
                }
            }
            else {
                if (children.slice(0, offset).some(check)) {
                    return false;
                }
            }
        }
        return !(0,helpers.call)(start ? dom/* Dom.prev */.i.prev : dom/* Dom.next */.i.next, current, check, parentBlock);
    }
    cursorOnTheLeft(parentBlock) {
        return this.cursorInTheEdge(true, parentBlock);
    }
    cursorOnTheRight(parentBlock) {
        return this.cursorInTheEdge(false, parentBlock);
    }
    setCursorAfter(node) {
        return this.setCursorNearWith(node, false);
    }
    setCursorBefore(node) {
        return this.setCursorNearWith(node, true);
    }
    setCursorNearWith(node, inStart) {
        var _a, _b;
        this.errorNode(node);
        if (!dom/* Dom.up */.i.up(node, (elm) => elm === this.area || (elm && elm.parentNode === this.area), this.area)) {
            throw (0,helpers.error)('Node element must be in editor');
        }
        const range = this.createRange();
        let fakeNode = null;
        if (!dom/* Dom.isText */.i.isText(node)) {
            fakeNode = this.j.createInside.text(constants.INVISIBLE_SPACE);
            inStart ? range.setStartBefore(node) : range.setEndAfter(node);
            range.collapse(inStart);
            dom/* Dom.safeInsertNode */.i.safeInsertNode(range, fakeNode);
            range.selectNode(fakeNode);
        }
        else {
            if (inStart) {
                range.setStart(node, 0);
            }
            else {
                range.setEnd(node, (_b = (_a = node.nodeValue) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0);
            }
        }
        range.collapse(inStart);
        this.selectRange(range);
        return fakeNode;
    }
    setCursorIn(node, inStart = false) {
        this.errorNode(node);
        if (!dom/* Dom.up */.i.up(node, (elm) => elm === this.area || (elm && elm.parentNode === this.area), this.area)) {
            throw (0,helpers.error)('Node element must be in editor');
        }
        const range = this.createRange();
        let start = node, last = node;
        do {
            if (dom/* Dom.isText */.i.isText(start)) {
                break;
            }
            last = start;
            start = inStart ? start.firstChild : start.lastChild;
        } while (start);
        if (!start) {
            const fakeNode = this.j.createInside.text(constants.INVISIBLE_SPACE);
            if (!/^(img|br|input)$/i.test(last.nodeName)) {
                last.appendChild(fakeNode);
                last = fakeNode;
            }
            else {
                start = last;
            }
        }
        range.selectNodeContents(start || last);
        range.collapse(inStart);
        this.selectRange(range);
        return last;
    }
    selectRange(range, focus = true) {
        const sel = this.sel;
        if (focus && !this.isFocused()) {
            this.focus();
        }
        if (sel) {
            sel.removeAllRanges();
            sel.addRange(range);
        }
        this.j.e.fire('changeSelection');
        return this;
    }
    select(node, inward = false) {
        this.errorNode(node);
        if (!dom/* Dom.up */.i.up(node, (elm) => elm === this.area || (elm && elm.parentNode === this.area), this.area)) {
            throw (0,helpers.error)('Node element must be in editor');
        }
        const range = this.createRange();
        range[inward ? 'selectNodeContents' : 'selectNode'](node);
        return this.selectRange(range);
    }
    get html() {
        const sel = this.sel;
        if (sel && sel.rangeCount > 0) {
            const range = sel.getRangeAt(0);
            const clonedSelection = range.cloneContents();
            const div = this.j.createInside.div();
            div.appendChild(clonedSelection);
            return div.innerHTML;
        }
        return '';
    }
    *wrapInTagGen() {
        if (this.isCollapsed()) {
            const font = this.jodit.createInside.element('font', constants.INVISIBLE_SPACE);
            this.insertNode(font, false, false);
            const [marker] = this.markers;
            if (marker) {
                font.appendChild(marker);
            }
            else {
                this.setCursorIn(font);
                this.save();
            }
            yield font;
            dom/* Dom.unwrap */.i.unwrap(font);
            return;
        }
        (0,helpers.$$)('*[style*=font-size]', this.area).forEach(elm => (0,helpers.attr)(elm, 'data-font-size', elm.style.fontSize.toString()));
        if (!this.isCollapsed()) {
            this.j.nativeExecCommand('fontsize', false, '7');
        }
        else {
            const font = this.j.createInside.element('font');
            (0,helpers.attr)(font, 'size', 7);
            this.insertNode(font, false, false);
        }
        (0,helpers.$$)('*[data-font-size]', this.area).forEach(elm => {
            const fontSize = (0,helpers.attr)(elm, 'data-font-size');
            if (fontSize) {
                elm.style.fontSize = fontSize;
                (0,helpers.attr)(elm, 'data-font-size', null);
            }
        });
        const elms = (0,helpers.$$)('font[size="7"]', this.area);
        for (const font of elms) {
            const { firstChild, lastChild } = font;
            if (firstChild &&
                firstChild === lastChild &&
                Select.isMarker(firstChild)) {
                dom/* Dom.unwrap */.i.unwrap(font);
                continue;
            }
            if (firstChild && Select.isMarker(firstChild)) {
                dom/* Dom.before */.i.before(font, firstChild);
            }
            if (lastChild && Select.isMarker(lastChild)) {
                dom/* Dom.after */.i.after(font, lastChild);
            }
            yield font;
            dom/* Dom.unwrap */.i.unwrap(font);
        }
    }
    wrapInTag(tagOrCallback) {
        const result = [];
        for (const font of this.wrapInTagGen()) {
            try {
                if (font.firstChild &&
                    font.firstChild === font.lastChild &&
                    Select.isMarker(font.firstChild)) {
                    continue;
                }
                if ((0,helpers.isFunction)(tagOrCallback)) {
                    tagOrCallback(font);
                }
                else {
                    result.push(dom/* Dom.replace */.i.replace(font, tagOrCallback, this.j.createInside));
                }
            }
            finally {
                const pn = font.parentNode;
                if (pn) {
                    dom/* Dom.unwrap */.i.unwrap(font);
                    if (dom/* Dom.isEmpty */.i.isEmpty(pn)) {
                        dom/* Dom.unwrap */.i.unwrap(pn);
                    }
                }
            }
        }
        return result;
    }
    applyStyle(style, options = {}) {
        const styleElm = new CommitStyle({
            style,
            element: options.element,
            className: options.className,
            defaultTag: options.defaultTag
        });
        styleElm.apply(this.j);
    }
    splitSelection(currentBox) {
        if (!this.isCollapsed()) {
            return null;
        }
        const leftRange = this.createRange();
        const range = this.range;
        leftRange.setStartBefore(currentBox);
        const cursorOnTheRight = this.cursorOnTheRight(currentBox);
        const cursorOnTheLeft = this.cursorOnTheLeft(currentBox);
        const br = this.j.createInside.element('br'), prevFake = this.j.createInside.text(constants.INVISIBLE_SPACE), nextFake = prevFake.cloneNode();
        try {
            if (cursorOnTheRight || cursorOnTheLeft) {
                dom/* Dom.safeInsertNode */.i.safeInsertNode(range, br);
                const clearBR = (start, getNext) => {
                    let next = getNext(start);
                    while (next) {
                        const nextSib = getNext(next);
                        if (next &&
                            (dom/* Dom.isTag */.i.isTag(next, 'br') || dom/* Dom.isEmptyTextNode */.i.isEmptyTextNode(next))) {
                            dom/* Dom.safeRemove */.i.safeRemove(next);
                        }
                        else {
                            break;
                        }
                        next = nextSib;
                    }
                };
                clearBR(br, (n) => n.nextSibling);
                clearBR(br, (n) => n.previousSibling);
                dom/* Dom.after */.i.after(br, nextFake);
                dom/* Dom.before */.i.before(br, prevFake);
                if (cursorOnTheRight) {
                    leftRange.setEndBefore(br);
                    range.setEndBefore(br);
                }
                else {
                    leftRange.setEndAfter(br);
                    range.setEndAfter(br);
                }
            }
            else {
                leftRange.setEnd(range.startContainer, range.startOffset);
            }
            const fragment = leftRange.extractContents();
            const clearEmpties = (node) => dom/* Dom.each */.i.each(node, node => dom/* Dom.isEmptyTextNode */.i.isEmptyTextNode(node) && dom/* Dom.safeRemove */.i.safeRemove(node));
            if (currentBox.parentNode) {
                try {
                    clearEmpties(fragment);
                    clearEmpties(currentBox);
                    currentBox.parentNode.insertBefore(fragment, currentBox);
                    if (cursorOnTheRight && (br === null || br === void 0 ? void 0 : br.parentNode)) {
                        const range = this.createRange();
                        range.setStartBefore(br);
                        this.selectRange(range);
                    }
                }
                catch (e) {
                    if (false) {}
                }
            }
            const fillFakeParent = (fake) => {
                var _a, _b, _c;
                if (((_a = fake === null || fake === void 0 ? void 0 : fake.parentNode) === null || _a === void 0 ? void 0 : _a.firstChild) === ((_b = fake === null || fake === void 0 ? void 0 : fake.parentNode) === null || _b === void 0 ? void 0 : _b.lastChild)) {
                    (_c = fake === null || fake === void 0 ? void 0 : fake.parentNode) === null || _c === void 0 ? void 0 : _c.appendChild(br.cloneNode());
                }
            };
            fillFakeParent(prevFake);
            fillFakeParent(nextFake);
        }
        finally {
            dom/* Dom.safeRemove */.i.safeRemove(prevFake);
            dom/* Dom.safeRemove */.i.safeRemove(nextFake);
        }
        return currentBox.previousElementSibling;
    }
    expandSelection() {
        if (this.isCollapsed()) {
            return this;
        }
        const { range } = this, c = range.cloneRange();
        if (!dom/* Dom.isOrContains */.i.isOrContains(this.j.editor, range.commonAncestorContainer, true)) {
            return this;
        }
        const moveMaxEdgeFake = (start) => {
            const fake = this.j.createInside.fake();
            const r = range.cloneRange();
            r.collapse(start);
            dom/* Dom.safeInsertNode */.i.safeInsertNode(r, fake);
            (0,selection_helpers/* moveTheNodeAlongTheEdgeOutward */.f)(fake, start, this.j.editor);
            return fake;
        };
        const leftFake = moveMaxEdgeFake(true);
        const rightFake = moveMaxEdgeFake(false);
        c.setStartAfter(leftFake);
        c.setEndBefore(rightFake);
        const leftBox = dom/* Dom.findSibling */.i.findSibling(leftFake, false);
        const rightBox = dom/* Dom.findSibling */.i.findSibling(rightFake, true);
        if (leftBox !== rightBox) {
            const rightInsideLeft = dom/* Dom.isElement */.i.isElement(leftBox) &&
                dom/* Dom.isOrContains */.i.isOrContains(leftBox, rightFake), leftInsideRight = !rightInsideLeft &&
                dom/* Dom.isElement */.i.isElement(rightBox) &&
                dom/* Dom.isOrContains */.i.isOrContains(rightBox, leftFake);
            if (rightInsideLeft || leftInsideRight) {
                let child = (rightInsideLeft ? leftBox : rightBox), container = child;
                while (dom/* Dom.isElement */.i.isElement(child)) {
                    child = rightInsideLeft
                        ? child.firstElementChild
                        : child.lastElementChild;
                    if (child) {
                        const isInside = rightInsideLeft
                            ? dom/* Dom.isOrContains */.i.isOrContains(child, rightFake)
                            : dom/* Dom.isOrContains */.i.isOrContains(child, leftFake);
                        if (isInside) {
                            container = child;
                        }
                    }
                }
                if (rightInsideLeft) {
                    c.setStart(container, 0);
                }
                else {
                    c.setEnd(container, container.childNodes.length);
                }
            }
        }
        this.selectRange(c);
        dom/* Dom.safeRemove */.i.safeRemove(leftFake, rightFake);
        return this;
    }
}
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], Select.prototype, "createRange", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], Select.prototype, "focus", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], Select.prototype, "setCursorAfter", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], Select.prototype, "setCursorBefore", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], Select.prototype, "setCursorIn", null);

;// CONCATENATED MODULE: ./src/core/selection/style/api/extract.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



function extractSelectedPart(wrapper, font, jodit) {
    const range = jodit.s.createRange();
    const leftEdge = Select.isMarker(font.previousSibling)
        ? font.previousSibling
        : font;
    range.setStartBefore(wrapper);
    range.setEndBefore(leftEdge);
    extractAndMove(wrapper, range, true);
    const rightEdge = Select.isMarker(font.nextSibling)
        ? font.nextSibling
        : font;
    range.setStartAfter(rightEdge);
    range.setEndAfter(wrapper);
    extractAndMove(wrapper, range, false);
}
function extractAndMove(wrapper, range, left) {
    const fragment = range.extractContents();
    if ((!fragment.textContent || !(0,helpers.trim)(fragment.textContent).length) &&
        fragment.firstChild) {
        dom/* Dom.unwrap */.i.unwrap(fragment.firstChild);
    }
    if (wrapper.parentNode) {
        (0,helpers.call)(left ? dom/* Dom.before */.i.before : dom/* Dom.after */.i.after, wrapper, fragment);
    }
}

;// CONCATENATED MODULE: ./src/core/selection/style/api/toggle/toggle-ordered-list.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




function toggleOrderedList(style, li, jodit, mode) {
    if (!li) {
        return mode;
    }
    const list = li.parentElement;
    if (!list) {
        return mode;
    }
    if (list.tagName.toLowerCase() !== style.element) {
        const newList = dom/* Dom.replace */.i.replace(list, style.element, jodit.createInside);
        toggleCSS(style, newList, jodit, mode);
        return REPLACE;
    }
    if (toggleCSS(style, li.parentElement, jodit, INITIAL, true) === CHANGE) {
        return toggleCSS(style, li.parentElement, jodit, mode);
    }
    extractSelectedPart(list, li, jodit);
    dom/* Dom.unwrap */.i.unwrap(li.parentElement);
    dom/* Dom.replace */.i.replace(li, jodit.o.enter, jodit.createInside);
    return mode;
}

// EXTERNAL MODULE: ./src/core/helpers/checker/is-void.ts
var is_void = __webpack_require__(13859);
;// CONCATENATED MODULE: ./src/core/selection/style/api/element-has-same-style.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




function elementHasSameStyle(elm, rules) {
    return Boolean(!dom/* Dom.isTag */.i.isTag(elm, 'font') &&
        dom/* Dom.isHTMLElement */.i.isHTMLElement(elm) &&
        Object.keys(rules).every(property => {
            const value = (0,css/* css */.i)(elm, property, true);
            return (!(0,is_void/* isVoid */.n)(value) &&
                value !== '' &&
                !(0,is_void/* isVoid */.n)(rules[property]) &&
                (0,normalize_css_value/* normalizeCssValue */.Z)(property, rules[property])
                    .toString()
                    .toLowerCase() === value.toString().toLowerCase());
        }));
}
function elementHasSameStyleKeys(elm, rules) {
    return Boolean(!dom/* Dom.isTag */.i.isTag(elm, 'font') &&
        dom/* Dom.isHTMLElement */.i.isHTMLElement(elm) &&
        Object.keys(rules).every(property => !(0,is_void/* isVoid */.n)((0,css/* css */.i)(elm, property, true))));
}

;// CONCATENATED MODULE: ./src/core/selection/style/api/finite-state-machine.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
class FiniteStateMachine {
    constructor(state, transitions) {
        this.state = state;
        this.transitions = transitions;
        this.subState = '';
        this.silent = true;
    }
    setState(state, subState) {
        this.state = state;
        if (subState != null) {
            this.subState = subState;
        }
    }
    getState() {
        return this.state;
    }
    getSubState() {
        return this.subState;
    }
    disableSilent() {
        this.silent = false;
    }
    dispatch(actionName, ...attrs) {
        const action = this.transitions[this.state][actionName];
        if (action) {
            if (!this.silent) {
                console.log('State: ' + this.state, 'Action: ' + actionName);
            }
            const res = action.call(this, ...attrs);
            if (!this.silent) {
                console.log('State: ' + this.state);
            }
            return res;
        }
        if (!this.silent) {
            throw new Error('invalid action: ' + this.state + '.' + actionName);
        }
        return;
    }
}

;// CONCATENATED MODULE: ./src/core/selection/style/api/is-normal-node.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function isNormalNode(elm) {
    return Boolean(elm && !dom/* Dom.isEmptyTextNode */.i.isEmptyTextNode(elm) && !dom/* Dom.isTemporary */.i.isTemporary(elm));
}

;// CONCATENATED MODULE: ./src/core/selection/style/api/is-suit-element.ts



function isSuitElement(commitStyle, elm, strict) {
    if (!elm) {
        return false;
    }
    const { element, elementIsDefault, options } = commitStyle;
    const elmHasSameStyle = Boolean(options.style && elementHasSameStyle(elm, options.style));
    const elmIsSame = elm.nodeName.toLowerCase() === element ||
        (dom/* Dom.isTag */.i.isTag(elm, ['ul', 'ol']) && commitStyle.elementIsList);
    if (((!elementIsDefault || !strict) && elmIsSame) ||
        (elmHasSameStyle && isNormalNode(elm))) {
        return true;
    }
    return Boolean(!elmIsSame && !strict && elementIsDefault && dom/* Dom.isInlineBlock */.i.isInlineBlock(elm));
}
function isSameStyleChild(commitStyle, elm) {
    const { element, options } = commitStyle;
    if (!elm || !isNormalNode(elm)) {
        return false;
    }
    const elmIsSame = elm.nodeName.toLowerCase() === element;
    const elmHasSameStyle = Boolean(options.style && elementHasSameStyleKeys(elm, options.style));
    return elmIsSame && elmHasSameStyle;
}

;// CONCATENATED MODULE: ./src/core/selection/style/api/get-suit-child.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



function getSuitChild(style, font) {
    let { firstChild: child } = font;
    while (child && !isNormalNode(child)) {
        child = child.nextSibling;
        if (!child) {
            return null;
        }
    }
    if (child &&
        !dom/* Dom.next */.i.next(child, isNormalNode, font) &&
        isSuitElement(style, child, false)) {
        return child;
    }
    return null;
}

;// CONCATENATED MODULE: ./src/core/selection/style/api/get-suit-parent.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



function getSuitParent(style, node, root) {
    const { parentNode } = node;
    if (parentNode === root ||
        !dom/* Dom.isHTMLElement */.i.isHTMLElement(parentNode) ||
        dom/* Dom.next */.i.next(node, isNormalNode, parentNode) ||
        dom/* Dom.prev */.i.prev(node, isNormalNode, parentNode)) {
        return null;
    }
    if (style.isElementCommit &&
        style.elementIsBlock &&
        !dom/* Dom.isBlock */.i.isBlock(parentNode)) {
        return getSuitParent(style, parentNode, root);
    }
    if (isSuitElement(style, parentNode, false) &&
        (!dom/* Dom.isBlock */.i.isBlock(parentNode) || style.elementIsBlock)) {
        return parentNode;
    }
    return null;
}

;// CONCATENATED MODULE: ./src/core/selection/style/api/is-inside-invisible-element.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function isInsideInvisibleElement(font, root) {
    return Boolean(dom/* Dom.closest */.i.closest(font, ['style', 'script'], root));
}

;// CONCATENATED MODULE: ./src/core/selection/style/api/toggle-commit-styles.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function toggleCommitStyles(commitStyle, elm) {
    if (commitStyle.elementIsBlock ||
        (dom/* Dom.isTag */.i.isTag(elm, commitStyle.element) && !commitStyle.elementIsDefault)) {
        dom/* Dom.unwrap */.i.unwrap(elm);
        return true;
    }
    return false;
}

;// CONCATENATED MODULE: ./src/core/selection/style/api/unwrap-children.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




function unwrapChildren(style, font) {
    const needUnwrap = [];
    const needChangeStyle = [];
    let firstElementSuit;
    const cssStyle = style.options.style;
    if (font.firstChild) {
        const gen = dom/* Dom.eachGen */.i.eachGen(font);
        let item = gen.next();
        while (!item.done) {
            const elm = item.value;
            if (isSuitElement(style, elm, true) &&
                (!cssStyle || elementHasSameStyleKeys(elm, cssStyle))) {
                if (firstElementSuit === undefined) {
                    firstElementSuit = true;
                }
                needUnwrap.push(elm);
            }
            else if (cssStyle && isSameStyleChild(style, elm)) {
                if (firstElementSuit === undefined) {
                    firstElementSuit = false;
                }
                needChangeStyle.push(() => {
                    (0,helpers.css)(elm, Object.keys(cssStyle).reduce((acc, key) => {
                        acc[key] = null;
                        return acc;
                    }, {}));
                    if (!(0,helpers.attr)(elm, 'style')) {
                        (0,helpers.attr)(elm, 'style', null);
                    }
                    if (!(0,helpers.attr)(elm, 'style') &&
                        elm.nodeName.toLowerCase() === style.element) {
                        needUnwrap.push(elm);
                    }
                });
            }
            else if (!dom/* Dom.isEmptyTextNode */.i.isEmptyTextNode(elm)) {
                if (firstElementSuit === undefined) {
                    firstElementSuit = false;
                }
            }
            item = gen.next();
        }
    }
    needChangeStyle.forEach(clb => clb());
    needUnwrap.forEach(dom/* Dom.unwrap */.i.unwrap);
    return Boolean(firstElementSuit);
}

;// CONCATENATED MODULE: ./src/core/selection/style/api/wrap-unwrapped-text.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function wrapUnwrappedText(style, elm, jodit, getRange) {
    const root = jodit.editor, ci = jodit.createInside, edge = (n, key = 'previousSibling') => {
        let edgeNode = n, node = n;
        while (node) {
            if (dom/* Dom.isTag */.i.isTag(node, jodit.o.enter)) {
                break;
            }
            edgeNode = node;
            if (node[key]) {
                node = node[key];
            }
            else {
                node =
                    node.parentNode &&
                        !dom/* Dom.isBlock */.i.isBlock(node.parentNode) &&
                        node.parentNode !== root
                        ? node.parentNode
                        : null;
            }
            if (dom/* Dom.isBlock */.i.isBlock(node)) {
                break;
            }
        }
        return edgeNode;
    };
    const start = edge(elm), end = edge(elm, 'nextSibling');
    const range = getRange();
    range.setStartBefore(start);
    range.setEndAfter(end);
    const fragment = range.extractContents();
    const wrapper = ci.element(style.element);
    wrapper.appendChild(fragment);
    dom/* Dom.safeInsertNode */.i.safeInsertNode(range, wrapper);
    if (style.elementIsBlock) {
        if (dom/* Dom.isEmpty */.i.isEmpty(wrapper) &&
            !dom/* Dom.isTag */.i.isTag(wrapper.firstElementChild, 'br')) {
            wrapper.appendChild(ci.element('br'));
        }
    }
    return wrapper;
}

;// CONCATENATED MODULE: ./src/core/selection/style/api/wrap-ordered-list.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function wrapOrderedList(commitStyle, wrapper, jodit) {
    const newWrapper = dom/* Dom.replace */.i.replace(wrapper, 'li', jodit.createInside);
    let list = newWrapper.previousElementSibling || newWrapper.nextElementSibling;
    if (!dom/* Dom.isTag */.i.isTag(list, ['ul', 'ol'])) {
        list = jodit.createInside.element(commitStyle.element);
        dom/* Dom.before */.i.before(newWrapper, list);
    }
    if (newWrapper.previousElementSibling === list) {
        dom/* Dom.append */.i.append(list, newWrapper);
    }
    else {
        dom/* Dom.prepend */.i.prepend(list, newWrapper);
    }
    return list;
}

;// CONCATENATED MODULE: ./src/core/selection/style/api/wrap-and-commit-style.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




function wrapAndCommitStyle(commitStyle, font, jodit) {
    const wrapper = findOrCreateWrapper(commitStyle, font, jodit);
    return commitStyle.elementIsList
        ? wrapOrderedList(commitStyle, wrapper, jodit)
        : dom/* Dom.replace */.i.replace(wrapper, commitStyle.element, jodit.createInside, true);
}
function findOrCreateWrapper(commitStyle, font, jodit) {
    if (commitStyle.elementIsBlock) {
        const box = dom/* Dom.up */.i.up(font, node => dom/* Dom.isBlock */.i.isBlock(node) &&
            !dom/* Dom.isTag */.i.isTag(node, [
                'td',
                'th',
                'tr',
                'tbody',
                'table',
                'li',
                'ul',
                'ol'
            ]), jodit.editor);
        if (box) {
            return box;
        }
    }
    if (commitStyle.elementIsBlock) {
        return wrapUnwrappedText(commitStyle, font, jodit, jodit.s.createRange);
    }
    (0,helpers.attr)(font, 'size', null);
    return font;
}

;// CONCATENATED MODULE: ./src/core/selection/style/api/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
















;// CONCATENATED MODULE: ./src/core/selection/style/apply-style.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





function ApplyStyle(jodit, cs) {
    const { s: sel, editor } = jodit;
    const fsm = new FiniteStateMachine('start', {
        start: {
            start() {
                sel.save();
                (0,helpers.normalizeNode)(editor.firstChild);
                this.setState('generator');
            }
        },
        generator: {
            initGenerator() {
                return jodit.s.wrapInTagGen();
            },
            nextFont(gen) {
                const font = gen.next();
                if (font.done) {
                    this.setState('end');
                    return;
                }
                if (isInsideInvisibleElement(font.value, editor) ||
                    dom/* Dom.isEmptyContent */.i.isEmptyContent(font.value)) {
                    return;
                }
                this.setState('check');
                return font.value;
            }
        },
        check: {
            work(font) {
                let elm = getSuitParent(cs, font, jodit.editor) ||
                    getSuitChild(cs, font);
                if (elm) {
                    this.setState('wholeElement');
                    return elm;
                }
                elm = dom/* Dom.closest */.i.closest(font, node => isSuitElement(cs, node, true), jodit.editor);
                if (elm) {
                    if (!cs.elementIsBlock) {
                        extractSelectedPart(elm, font, jodit);
                    }
                }
                if (cs.elementIsList && dom/* Dom.isTag */.i.isTag(elm, ['ul', 'ol'])) {
                    this.setState('orderList');
                    return font;
                }
                if (elm) {
                    this.setState('wholeElement');
                    return elm;
                }
                if (unwrapChildren(cs, font)) {
                    this.setState('endProcess');
                    return null;
                }
                this.setState('wrap');
                return font;
            }
        },
        wholeElement: {
            toggleStyles(toggleElm) {
                let mode = INITIAL;
                if (toggleCommitStyles(cs, toggleElm)) {
                    mode = UNWRAP;
                }
                else {
                    mode = toggleCSS(cs, toggleElm, jodit, mode);
                }
                this.setState('generator', mode);
            }
        },
        orderList: {
            toggleStyles(font) {
                let mode = INITIAL;
                const li = dom/* Dom.closest */.i.closest(font, 'li', jodit.editor);
                if (!li) {
                    this.setState('generator');
                    return;
                }
                const ul = dom/* Dom.closest */.i.closest(font, ['ul', 'ol'], jodit.editor);
                if (!ul) {
                    this.setState('generator');
                    return;
                }
                mode = toggleOrderedList(cs, li, jodit, mode);
                if (mode === REPLACE || mode === UNWRAP || mode === CHANGE) {
                    this.setState('endWhile');
                    return;
                }
                this.setState('generator');
            }
        },
        wrap: {
            toggleStyles(font) {
                if (this.getSubState() !== 'unwrap') {
                    const toggleElm = wrapAndCommitStyle(cs, font, jodit);
                    toggleCSS(cs, toggleElm, jodit, WRAP);
                }
                this.setState('generator');
            }
        },
        endWhile: {
            nextFont(gen) {
                const font = gen.next();
                if (font.done) {
                    this.setState('end');
                }
            }
        },
        endProcess: {
            toggleStyles() {
                this.setState('generator');
            }
        },
        end: {
            finalize() {
                sel.restore();
            }
        }
    });
    fsm.dispatch('start');
    const gen = fsm.dispatch('initGenerator');
    while (fsm.getState() !== 'end') {
        const font = fsm.dispatch('nextFont', gen);
        if (font) {
            const wrapper = fsm.dispatch('work', font);
            fsm.dispatch('toggleStyles', wrapper);
        }
    }
    fsm.dispatch('finalize', gen);
}

;// CONCATENATED MODULE: ./src/core/selection/style/commit-style.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


const WRAP = 'wrap';
const UNWRAP = 'unwrap';
const CHANGE = 'change';
const UNSET = 'unset';
const INITIAL = 'initial';
const REPLACE = 'replace';
class CommitStyle {
    constructor(options) {
        this.options = options;
    }
    get elementIsList() {
        return Boolean(this.options.element && ['ul', 'ol'].includes(this.options.element));
    }
    get element() {
        return this.options.element || this.defaultTag;
    }
    get elementIsBlock() {
        return Boolean(this.options.element && constants.IS_BLOCK.test(this.options.element));
    }
    get isElementCommit() {
        return Boolean(this.options.element &&
            this.options.element !== this.options.defaultTag);
    }
    get defaultTag() {
        if (this.options.defaultTag) {
            return this.options.defaultTag;
        }
        return this.elementIsBlock ? 'p' : 'span';
    }
    get elementIsDefault() {
        return this.element === this.defaultTag;
    }
    apply(jodit) {
        ApplyStyle(jodit, this);
    }
}

;// CONCATENATED MODULE: ./src/core/selection/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




/***/ }),

/***/ 55937:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Ke": function() { return /* reexport */ Storage; }
});

// UNUSED EXPORTS: LocalStorageProvider, MemoryStorageProvider, StorageKey, canUsePersistentStorage

;// CONCATENATED MODULE: ./src/core/storage/engines/local-storage-provider.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const canUsePersistentStorage = (() => {
    const canUse = () => {
        const tmpKey = '___Jodit___' + Math.random().toString();
        try {
            localStorage.setItem(tmpKey, '1');
            const result = localStorage.getItem(tmpKey) === '1';
            localStorage.removeItem(tmpKey);
            return result;
        }
        catch (_a) { }
        return false;
    };
    let result;
    return () => {
        if (result === undefined) {
            result = canUse();
        }
        return result;
    };
})();
class LocalStorageProvider {
    constructor(rootKey) {
        this.rootKey = rootKey;
    }
    set(key, value) {
        try {
            const buffer = localStorage.getItem(this.rootKey);
            const json = buffer ? JSON.parse(buffer) : {};
            json[key] = value;
            localStorage.setItem(this.rootKey, JSON.stringify(json));
        }
        catch (_a) { }
        return this;
    }
    delete(key) {
        try {
            localStorage.removeItem(this.rootKey);
        }
        catch (_a) { }
        return this;
    }
    get(key) {
        try {
            const buffer = localStorage.getItem(this.rootKey);
            const json = buffer ? JSON.parse(buffer) : {};
            return json[key] !== undefined ? json[key] : null;
        }
        catch (_a) { }
    }
    exists(key) {
        return this.get(key) != null;
    }
    clear() {
        try {
            localStorage.removeItem(this.rootKey);
        }
        catch (_a) { }
        return this;
    }
}

// EXTERNAL MODULE: ./src/core/helpers/index.ts + 14 modules
var helpers = __webpack_require__(52607);
;// CONCATENATED MODULE: ./src/core/storage/engines/memory-storage-provider.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
class MemoryStorageProvider {
    constructor() {
        this.data = new Map();
    }
    set(key, value) {
        this.data.set(key, value);
        return this;
    }
    delete(key) {
        this.data.delete(key);
        return this;
    }
    get(key) {
        return this.data.get(key);
    }
    exists(key) {
        return this.data.has(key);
    }
    clear() {
        this.data.clear();
        return this;
    }
}

;// CONCATENATED MODULE: ./src/core/storage/storage.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



const StorageKey = 'Jodit_';
class Storage {
    constructor(provider, suffix) {
        this.provider = provider;
        this.prefix = StorageKey;
        if (suffix) {
            this.prefix += suffix;
        }
    }
    set(key, value) {
        this.provider.set((0,helpers.camelCase)(this.prefix + key), value);
        return this;
    }
    delete(key) {
        this.provider.delete((0,helpers.camelCase)(this.prefix + key));
        return this;
    }
    get(key) {
        return this.provider.get((0,helpers.camelCase)(this.prefix + key));
    }
    exists(key) {
        return this.provider.exists((0,helpers.camelCase)(this.prefix + key));
    }
    clear() {
        this.provider.clear();
        return this;
    }
    static makeStorage(persistent = false, suffix) {
        let provider;
        if (persistent && canUsePersistentStorage()) {
            provider = new LocalStorageProvider(StorageKey + suffix);
        }
        if (!provider) {
            provider = new MemoryStorageProvider();
        }
        return new Storage(provider, suffix);
    }
}

;// CONCATENATED MODULE: ./src/core/storage/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





/***/ }),

/***/ 34821:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "lf": function() { return /* reexport */ Dlgs; },
  "Fx": function() { return /* reexport */ Elms; },
  "$t": function() { return /* reexport */ Mods; }
});

// EXTERNAL MODULE: ./src/core/helpers/array/to-array.ts
var to_array = __webpack_require__(42464);
;// CONCATENATED MODULE: ./src/core/traits/elms.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

class Elms {
    getElm(elementName) {
        return this.container.querySelector(`.${this.getFullElName(elementName)}`);
    }
    getElms(elementName) {
        return (0,to_array/* toArray */.q)(this.container.querySelectorAll(`.${this.getFullElName(elementName)}`));
    }
}

// EXTERNAL MODULE: ./src/core/helpers/checker/is-void.ts
var is_void = __webpack_require__(13859);
;// CONCATENATED MODULE: ./src/core/traits/mods.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


class Mods {
    afterSetMod(name, value) { }
    setMod(name, value, container) {
        name = name.toLowerCase();
        if (this.mods[name] === value) {
            return this;
        }
        const mod = `${this.componentName}_${name}`, cl = (container || this.container).classList;
        (0,to_array/* toArray */.q)(cl).forEach(className => {
            if (className.indexOf(mod) === 0) {
                cl.remove(className);
            }
        });
        !(0,is_void/* isVoid */.n)(value) &&
            value !== '' &&
            cl.add(`${mod}_${value.toString().toLowerCase()}`);
        this.mods[name] = value;
        this.afterSetMod(name, value);
        return this;
    }
    getMod(name) {
        var _a;
        return (_a = this.mods[name]) !== null && _a !== void 0 ? _a : null;
    }
}

// EXTERNAL MODULE: ./src/modules/index.ts + 15 modules
var modules = __webpack_require__(81165);
// EXTERNAL MODULE: ./src/core/helpers/index.ts + 14 modules
var helpers = __webpack_require__(52607);
;// CONCATENATED MODULE: ./src/core/traits/dlgs.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


class Dlgs {
    dlg(options) {
        const dialog = new modules.Dialog({
            language: this.o.language,
            shadowRoot: this.o.shadowRoot,
            ownerWindow: this.o.ownerWindow,
            defaultTimeout: this.o.defaultTimeout,
            theme: this.o.theme,
            globalFullSize: this.o.globalFullSize,
            ...options
        });
        (0,helpers.markOwner)(this, dialog.container);
        dialog.parent = this;
        return dialog.bindDestruct(this);
    }
    confirm(msg, title, callback) {
        if ((0,helpers.isString)(title)) {
            title = this.i18n(title);
        }
        return modules.Confirm.call(this.dlg(), this.i18n(msg), title, callback);
    }
    prompt(msg, title, callback, placeholder, defaultValue) {
        if ((0,helpers.isString)(title)) {
            title = this.i18n(title);
        }
        if ((0,helpers.isString)(placeholder)) {
            placeholder = this.i18n(placeholder);
        }
        return modules.Prompt.call(this.dlg(), this.i18n(msg), title, callback, placeholder, defaultValue);
    }
    alert(msg, title, callback, className) {
        if ((0,helpers.isString)(msg)) {
            msg = this.i18n(msg);
        }
        if ((0,helpers.isString)(title)) {
            title = this.i18n(title);
        }
        return modules.Alert.call(this.dlg(), msg, title, callback, className);
    }
}

;// CONCATENATED MODULE: ./src/core/traits/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





/***/ }),

/***/ 15327:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Yc": function() { return /* binding */ UIButtonState; },
/* harmony export */   "y3": function() { return /* binding */ UIButton; },
/* harmony export */   "zx": function() { return /* binding */ Button; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(20255);
/* harmony import */ var jodit_core_ui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71525);
/* harmony import */ var jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43887);
/* harmony import */ var jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(11358);
/* harmony import */ var jodit_core_helpers_checker_is_string__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(40607);
/* harmony import */ var jodit_core_helpers_checker_is_function__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(84121);
/* harmony import */ var jodit_core_ui_icon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(76381);
/* harmony import */ var jodit_core_ui_group_list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(52048);
/* harmony import */ var jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(11169);
/* harmony import */ var jodit_core_component_statuses__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(10799);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */











const UIButtonState = () => ({
    size: 'middle',
    type: 'button',
    name: '',
    value: '',
    variant: 'initial',
    disabled: false,
    activated: false,
    icon: {
        name: 'empty',
        fill: '',
        iconURL: ''
    },
    tooltip: '',
    text: '',
    tabIndex: undefined
});
let UIButton = class UIButton extends jodit_core_ui_element__WEBPACK_IMPORTED_MODULE_0__/* .UIElement */ .u {
    constructor(jodit, state) {
        super(jodit);
        this.isButton = true;
        this.state = UIButtonState();
        this.actionHandlers = [];
        this.updateSize();
        this.onChangeSize();
        this.onChangeStatus();
        if (state) {
            this.hookStatus(jodit_core_component_statuses__WEBPACK_IMPORTED_MODULE_6__/* .STATUSES.ready */ .n.ready, () => {
                this.setState(state);
            });
        }
    }
    className() {
        return 'UIButton';
    }
    setState(state) {
        Object.assign(this.state, state);
        return this;
    }
    onChangeSize() {
        this.setMod('size', this.state.size);
    }
    onChangeType() {
        (0,jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_2__/* .attr */ .Lj)(this.container, 'type', this.state.type);
    }
    updateSize() {
        const pe = this.closest(jodit_core_ui_group_list__WEBPACK_IMPORTED_MODULE_4__/* .UIList */ .b);
        if (pe) {
            this.state.size = pe.buttonSize;
            return;
        }
    }
    onChangeStatus() {
        this.setMod('variant', this.state.variant);
    }
    onChangeText() {
        this.text.textContent = this.jodit.i18n(this.state.text);
    }
    onChangeTextSetMode() {
        this.setMod('text-icons', Boolean(this.state.text.trim().length));
    }
    onChangeDisabled() {
        (0,jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_2__/* .attr */ .Lj)(this.container, 'disabled', this.state.disabled || null);
    }
    onChangeActivated() {
        (0,jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_2__/* .attr */ .Lj)(this.container, 'aria-pressed', this.state.activated);
    }
    onChangeName() {
        this.container.classList.add(`${this.componentName}_${this.clearName(this.state.name)}`);
        this.name = this.state.name;
        (0,jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_2__/* .attr */ .Lj)(this.container, 'data-ref', this.state.name);
        (0,jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_2__/* .attr */ .Lj)(this.container, 'ref', this.state.name);
    }
    onChangeTooltip() {
        if (this.get('j.o.useNativeTooltip')) {
            (0,jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_2__/* .attr */ .Lj)(this.container, 'title', this.state.tooltip);
        }
        (0,jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_2__/* .attr */ .Lj)(this.container, 'aria-label', this.state.tooltip);
    }
    onChangeTabIndex() {
        (0,jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_2__/* .attr */ .Lj)(this.container, 'tabindex', this.state.tabIndex);
    }
    onChangeIcon() {
        const textIcons = this.get('j.o.textIcons');
        if (textIcons === true ||
            ((0,jodit_core_helpers_checker_is_function__WEBPACK_IMPORTED_MODULE_7__/* .isFunction */ .m)(textIcons) && textIcons(this.state.name))) {
            return;
        }
        jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.detach */ .i.detach(this.icon);
        const iconElement = jodit_core_ui_icon__WEBPACK_IMPORTED_MODULE_3__/* .Icon.makeIcon */ .J.makeIcon(this.j, this.state.icon);
        iconElement && this.icon.appendChild(iconElement);
    }
    focus() {
        this.container.focus();
    }
    isFocused() {
        const { activeElement } = this.od;
        return Boolean(activeElement && jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.isOrContains */ .i.isOrContains(this.container, activeElement));
    }
    createContainer() {
        const cn = this.componentName;
        const button = this.j.c.element('button', {
            class: cn,
            type: 'button',
            role: 'button',
            ariaPressed: false
        });
        this.icon = this.j.c.span(cn + '__icon');
        this.text = this.j.c.span(cn + '__text');
        button.appendChild(this.icon);
        button.appendChild(this.text);
        this.j.e.on(button, 'click', this.onActionFire);
        return button;
    }
    destruct() {
        this.j.e.off(this.container);
        return super.destruct();
    }
    onAction(callback) {
        this.actionHandlers.push(callback);
        return this;
    }
    onActionFire(e) {
        e.buffer = {
            actionTrigger: this
        };
        this.actionHandlers.forEach(callback => callback.call(this, e));
    }
};
(0,tslib__WEBPACK_IMPORTED_MODULE_8__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__.watch)('state.size')
], UIButton.prototype, "onChangeSize", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_8__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__.watch)('state.type')
], UIButton.prototype, "onChangeType", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_8__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__.watch)('parentElement')
], UIButton.prototype, "updateSize", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_8__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__.watch)('state.variant')
], UIButton.prototype, "onChangeStatus", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_8__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__.watch)('state.text')
], UIButton.prototype, "onChangeText", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_8__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__.watch)('state.text')
], UIButton.prototype, "onChangeTextSetMode", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_8__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__.watch)('state.disabled')
], UIButton.prototype, "onChangeDisabled", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_8__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__.watch)('state.activated')
], UIButton.prototype, "onChangeActivated", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_8__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__.watch)('state.name')
], UIButton.prototype, "onChangeName", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_8__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__.watch)('state.tooltip')
], UIButton.prototype, "onChangeTooltip", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_8__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__.watch)('state.tabIndex')
], UIButton.prototype, "onChangeTabIndex", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_8__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__.watch)('state.icon')
], UIButton.prototype, "onChangeIcon", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_8__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__.autobind
], UIButton.prototype, "onActionFire", null);
UIButton = (0,tslib__WEBPACK_IMPORTED_MODULE_8__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__.component
], UIButton);

function Button(jodit, stateOrText, text, variant) {
    const button = new UIButton(jodit);
    button.state.tabIndex = jodit.o.allowTabNavigation ? 0 : -1;
    if ((0,jodit_core_helpers_checker_is_string__WEBPACK_IMPORTED_MODULE_9__/* .isString */ .H)(stateOrText)) {
        button.state.icon.name = stateOrText;
        button.state.name = stateOrText;
        if (variant) {
            button.state.variant = variant;
        }
        if (text) {
            button.state.text = text;
        }
    }
    else {
        button.setState(stateOrText);
    }
    return button;
}


/***/ }),

/***/ 17460:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "zx": function() { return /* reexport */ button_button/* Button */.zx; },
  "y3": function() { return /* reexport */ button_button/* UIButton */.y3; },
  "BO": function() { return /* reexport */ UIButtonGroup; },
  "Yc": function() { return /* reexport */ button_button/* UIButtonState */.Yc; },
  "Ne": function() { return /* reexport */ UITooltip; }
});

// EXTERNAL MODULE: ./src/core/ui/button/button/button.ts
var button_button = __webpack_require__(15327);
// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(20255);
// EXTERNAL MODULE: ./src/core/ui/group/group.ts
var group = __webpack_require__(90181);
// EXTERNAL MODULE: ./src/core/decorators/component/component.ts
var component = __webpack_require__(99205);
// EXTERNAL MODULE: ./src/core/helpers/utils/assert.ts
var assert = __webpack_require__(39665);
;// CONCATENATED MODULE: ./src/core/ui/button/group/group.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






let UIButtonGroup = class UIButtonGroup extends group/* UIGroup */.q {
    constructor(jodit, options = {
        radio: true
    }) {
        var _a, _b;
        super(jodit, (_a = options.options) === null || _a === void 0 ? void 0 : _a.map(opt => {
            const btn = new button_button/* UIButton */.y3(jodit, {
                text: opt.text,
                value: opt.value,
                variant: 'primary'
            });
            btn.onAction(() => {
                this.select(opt.value);
            });
            return btn;
        }), options);
        this.options = options;
        this.select((_b = options.value) !== null && _b !== void 0 ? _b : 0);
    }
    className() {
        return 'UIButtonGroup';
    }
    render(options) {
        return `<div>
			<div class="&__label">~${options.label}~</div>
			<div class="&__options"></div>
		</div>`;
    }
    appendChildToContainer(childContainer) {
        const options = this.getElm('options');
        (0,assert/* assert */.h)(options != null, 'Options does not exist');
        options.appendChild(childContainer);
    }
    select(indexOrValue) {
        var _a, _b;
        this.elements.forEach((elm, index) => {
            if (index === indexOrValue || elm.state.value === indexOrValue) {
                elm.state.activated = true;
            }
            else if (this.options.radio) {
                elm.state.activated = false;
            }
        });
        const result = this.elements
            .filter(elm => elm.state.activated)
            .map(elm => ({
            text: elm.state.text,
            value: elm.state.value
        }));
        this.jodit.e.fire(this, 'select', result);
        (_b = (_a = this.options).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, result);
    }
};
UIButtonGroup = (0,tslib_es6/* __decorate */.gn)([
    component/* component */.w
], UIButtonGroup);


// EXTERNAL MODULE: ./src/core/helpers/index.ts + 14 modules
var helpers = __webpack_require__(52607);
// EXTERNAL MODULE: ./src/core/global.ts
var global = __webpack_require__(58299);
// EXTERNAL MODULE: ./src/core/decorators/index.ts + 7 modules
var decorators = __webpack_require__(11169);
// EXTERNAL MODULE: ./src/core/ui/element.ts
var ui_element = __webpack_require__(71525);
;// CONCATENATED MODULE: ./src/core/ui/button/tooltip/tooltip.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






class UITooltip extends ui_element/* UIElement */.u {
    constructor(view) {
        super(view);
        this.__isOpened = false;
        this.__useCount = 1;
        this.__delayShowTimeout = 0;
        (0,global/* getContainer */.ZO)(view, UITooltip).appendChild(this.container);
        let timeout = 0;
        view.e
            .off('.tooltip')
            .on('showTooltip.tooltip', (getPoint, content) => {
            view.async.clearTimeout(timeout);
            this.__open(getPoint, content);
        })
            .on('delayShowTooltip.tooltip', this.__delayOpen)
            .on('escape.tooltip', this.__close)
            .on('hideTooltip.tooltip change.tooltip scroll.tooltip changePlace.tooltip hidePopup.tooltip closeAllPopups.tooltip', () => {
            this.j.async.clearTimeout(this.__delayShowTimeout);
            timeout = view.async.setTimeout(this.__close, this.j.defaultTimeout);
        });
    }
    className() {
        return 'UITooltip';
    }
    static make(view) {
        let instance = (0,helpers.dataBind)(view, 'ui-tooltip');
        if (instance) {
            instance.__useCount += 1;
            return instance;
        }
        instance = new UITooltip(view);
        (0,helpers.dataBind)(view, 'ui-tooltip', instance);
        return instance;
    }
    __delayOpen(getPoint, content) {
        const to = this.j.o.showTooltipDelay || this.j.defaultTimeout;
        this.j.async.clearTimeout(this.__delayShowTimeout);
        this.__delayShowTimeout = this.j.async.setTimeout(() => this.__open(getPoint, content), {
            timeout: to,
            label: 'tooltip'
        });
    }
    __open(getPoint, content) {
        this.setMod('visible', true);
        this.container.innerHTML = content;
        this.__isOpened = true;
        this.__setPosition(getPoint);
    }
    __setPosition(getPoint) {
        const point = getPoint();
        (0,helpers.css)(this.container, {
            left: point.x,
            top: point.y
        });
    }
    __close() {
        this.j.async.clearTimeout(this.__delayShowTimeout);
        if (this.__isOpened) {
            this.__isOpened = false;
            this.setMod('visible', false);
            (0,helpers.css)(this.container, {
                left: -5000
            });
        }
    }
    destruct() {
        var _a;
        this.__useCount--;
        if (!this.__useCount) {
            (_a = this.j) === null || _a === void 0 ? void 0 : _a.e.off('.tooltip');
            this.__close();
            super.destruct();
        }
    }
}
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], UITooltip.prototype, "__delayOpen", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], UITooltip.prototype, "__close", null);

;// CONCATENATED MODULE: ./src/core/ui/button/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





/***/ }),

/***/ 71525:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "u": function() { return /* binding */ UIElement; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(20255);
/* harmony import */ var jodit_core_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26655);
/* harmony import */ var jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43887);
/* harmony import */ var jodit_core_traits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(34821);
/* harmony import */ var jodit_core_helpers_checker_is_string__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(40607);
/* harmony import */ var jodit_core_ui_icon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(76381);
/* harmony import */ var jodit_core_decorators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(11169);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
var UIElement_1;







let UIElement = UIElement_1 = class UIElement extends jodit_core_component__WEBPACK_IMPORTED_MODULE_0__/* .ViewComponent */ .Hr {
    constructor(jodit, options) {
        super(jodit);
        this.name = '';
        this.__parentElement = null;
        this.mods = {};
        this.container = this.createContainer(options);
        Object.defineProperty(this.container, 'component', {
            value: this,
            configurable: true
        });
    }
    get parentElement() {
        return this.__parentElement;
    }
    set parentElement(parentElement) {
        this.__parentElement = parentElement;
        if (parentElement) {
            parentElement.hookStatus('beforeDestruct', () => this.destruct());
        }
        this.updateParentElement(this);
    }
    bubble(callback) {
        let parent = this.parentElement;
        while (parent) {
            callback(parent);
            parent = parent.parentElement;
        }
        return this;
    }
    updateParentElement(target) {
        var _a;
        (_a = this.__parentElement) === null || _a === void 0 ? void 0 : _a.updateParentElement(target);
        return this;
    }
    get(chain, obj) {
        return super.get(chain, obj) || this.getElm(chain);
    }
    closest(type) {
        const c = typeof type === 'object'
            ? (pe) => pe === type
            : (pe) => jodit_core_component__WEBPACK_IMPORTED_MODULE_0__/* .Component.isInstanceOf */ .wA.isInstanceOf(pe, type);
        let pe = this.__parentElement;
        while (pe) {
            if (c(pe)) {
                return pe;
            }
            if (!pe.parentElement && pe.container.parentElement) {
                pe = UIElement_1.closestElement(pe.container.parentElement, UIElement_1);
            }
            else {
                pe = pe.parentElement;
            }
        }
        return null;
    }
    static closestElement(node, type) {
        const elm = jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.up */ .i.up(node, elm => {
            if (elm) {
                const { component } = elm;
                return component && jodit_core_component__WEBPACK_IMPORTED_MODULE_0__/* .Component.isInstanceOf */ .wA.isInstanceOf(component, type);
            }
            return false;
        });
        return elm ? elm === null || elm === void 0 ? void 0 : elm.component : null;
    }
    update() {
    }
    appendTo(element) {
        element.appendChild(this.container);
        return this;
    }
    clearName(name) {
        return name.replace(/[^a-zA-Z0-9]/g, '_');
    }
    render(options) {
        return this.j.c.div(this.componentName);
    }
    createContainer(options) {
        const result = this.render(options);
        if ((0,jodit_core_helpers_checker_is_string__WEBPACK_IMPORTED_MODULE_5__/* .isString */ .H)(result)) {
            const elm = this.j.c.fromHTML(result
                .replace(/\*([^*]+?)\*/g, (_, name) => jodit_core_ui_icon__WEBPACK_IMPORTED_MODULE_3__/* .Icon.get */ .J.get(name) || '')
                .replace(/&__/g, this.componentName + '__')
                .replace(/~([^~]+?)~/g, (_, s) => this.i18n(s)));
            elm.classList.add(this.componentName);
            return elm;
        }
        return result;
    }
    destruct() {
        jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.safeRemove */ .i.safeRemove(this.container);
        this.parentElement = null;
        return super.destruct();
    }
};
UIElement = UIElement_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_6__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_4__.derive)(jodit_core_traits__WEBPACK_IMPORTED_MODULE_2__/* .Mods */ .$t, jodit_core_traits__WEBPACK_IMPORTED_MODULE_2__/* .Elms */ .Fx)
], UIElement);



/***/ }),

/***/ 1542:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "eC": function() { return /* reexport */ UIBlock; },
  "mA": function() { return /* reexport */ UICheckbox; },
  "x4": function() { return /* reexport */ UIForm; },
  "u3": function() { return /* reexport */ input/* UIInput */.u; },
  "Cj": function() { return /* reexport */ UISelect; },
  "GJ": function() { return /* reexport */ UITextArea; }
});

// UNUSED EXPORTS: UIFileInput

// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(20255);
// EXTERNAL MODULE: ./src/core/ui/group/group.ts
var group = __webpack_require__(90181);
// EXTERNAL MODULE: ./src/core/ui/form/inputs/input/input.ts
var input = __webpack_require__(65484);
// EXTERNAL MODULE: ./src/core/helpers/utils/utils.ts
var utils = __webpack_require__(51976);
// EXTERNAL MODULE: ./src/core/decorators/component/component.ts
var component = __webpack_require__(99205);
// EXTERNAL MODULE: ./src/core/ui/form/validators/index.ts + 2 modules
var validators = __webpack_require__(52342);
;// CONCATENATED MODULE: ./src/core/ui/form/inputs/select/select.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
var UISelect_1;






let UISelect = UISelect_1 = class UISelect extends input/* UIInput */.u {
    constructor(jodit, state) {
        super(jodit, state);
        this.state = { ...UISelect_1.defaultState };
        Object.assign(this.state, state);
    }
    className() {
        return 'UISelect';
    }
    createContainer(state) {
        var _a;
        const container = super.createContainer(state);
        const { j } = this, { nativeInput } = this;
        const opt = () => j.create.element('option');
        if (state.placeholder !== undefined) {
            const option = opt();
            option.value = '';
            option.text = j.i18n(state.placeholder);
            nativeInput.add(option);
        }
        (_a = state.options) === null || _a === void 0 ? void 0 : _a.forEach(element => {
            const option = opt();
            option.value = element.value.toString();
            option.text = j.i18n(element.text);
            nativeInput.add(option);
        });
        if (state.size && state.size > 0) {
            (0,utils/* attr */.Lj)(nativeInput, 'size', state.size);
        }
        if (state.multiple) {
            (0,utils/* attr */.Lj)(nativeInput, 'multiple', '');
        }
        return container;
    }
    createNativeInput() {
        return this.j.create.element('select');
    }
    updateValidators() {
        super.updateValidators();
        if (this.state.required) {
            this.validators.delete(validators/* inputValidators.required */.g.required);
            this.validators.add(validators/* selectValidators.required */.s.C);
        }
    }
};
UISelect.defaultState = {
    ...input/* UIInput.defaultState */.u.defaultState,
    options: [],
    size: 1,
    multiple: false
};
UISelect = UISelect_1 = (0,tslib_es6/* __decorate */.gn)([
    component/* component */.w
], UISelect);


// EXTERNAL MODULE: ./src/core/helpers/utils/index.ts + 11 modules
var helpers_utils = __webpack_require__(11358);
// EXTERNAL MODULE: ./src/core/component/component.ts
var component_component = __webpack_require__(12614);
;// CONCATENATED MODULE: ./src/core/ui/form/form.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







let UIForm = class UIForm extends group/* UIGroup */.q {
    constructor(...args) {
        var _a, _b;
        super(...args);
        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.className) {
            this.container.classList.add((_b = this.options) === null || _b === void 0 ? void 0 : _b.className);
        }
    }
    className() {
        return 'UIForm';
    }
    submit() {
        this.j.e.fire(this.container, 'submit');
    }
    validate() {
        const inputs = this.allChildren.filter(elm => component_component/* Component.isInstanceOf */.w.isInstanceOf(elm, input/* UIInput */.u));
        for (const input of inputs) {
            if (!input.validate()) {
                return false;
            }
        }
        const selects = this.allChildren.filter(elm => component_component/* Component.isInstanceOf */.w.isInstanceOf(elm, UISelect));
        for (const select of selects) {
            if (!select.validate()) {
                return false;
            }
        }
        return true;
    }
    onSubmit(handler) {
        this.j.e.on(this.container, 'submit', () => {
            const inputs = this.allChildren.filter(elm => component_component/* Component.isInstanceOf */.w.isInstanceOf(elm, input/* UIInput */.u));
            if (!this.validate()) {
                return false;
            }
            handler(inputs.reduce((res, item) => {
                res[item.state.name] = item.value;
                return res;
            }, {}));
            return false;
        });
    }
    createContainer() {
        const form = this.j.c.element('form');
        form.classList.add(this.componentName);
        (0,helpers_utils/* attr */.Lj)(form, 'dir', this.j.o.direction || 'auto');
        return form;
    }
};
UIForm = (0,tslib_es6/* __decorate */.gn)([
    component/* component */.w
], UIForm);


;// CONCATENATED MODULE: ./src/core/ui/form/inputs/area/area.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
var UITextArea_1;




let UITextArea = UITextArea_1 = class UITextArea extends input/* UIInput */.u {
    constructor(jodit, state) {
        super(jodit, state);
        this.state = { ...UITextArea_1.defaultState };
        Object.assign(this.state, state);
        if (this.state.resizable === false) {
            this.nativeInput.style.resize = 'none';
        }
    }
    className() {
        return 'UITextArea';
    }
    createContainer(options) {
        this.nativeInput = this.j.create.element('textarea');
        return super.createContainer(options);
    }
};
UITextArea.defaultState = {
    ...input/* UIInput.defaultState */.u.defaultState,
    size: 5,
    resizable: true
};
UITextArea = UITextArea_1 = (0,tslib_es6/* __decorate */.gn)([
    component/* component */.w
], UITextArea);


// EXTERNAL MODULE: ./src/core/decorators/index.ts + 7 modules
var decorators = __webpack_require__(11169);
// EXTERNAL MODULE: ./src/core/dom/dom.ts
var dom = __webpack_require__(43887);
;// CONCATENATED MODULE: ./src/core/ui/form/inputs/checkbox/checkbox.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
var UICheckbox_1;





let UICheckbox = UICheckbox_1 = class UICheckbox extends input/* UIInput */.u {
    constructor(jodit, options) {
        super(jodit, { ...options, type: 'checkbox' });
        this.state = { ...UICheckbox_1.defaultState };
        Object.assign(this.state, options);
    }
    className() {
        return 'UICheckbox';
    }
    render() {
        return this.j.c.element('label', {
            className: this.componentName
        });
    }
    onChangeChecked() {
        this.value = this.state.checked.toString();
        this.nativeInput.checked = this.state.checked;
        this.setMod('checked', this.state.checked);
    }
    onChangeNativeCheckBox() {
        this.state.checked = this.nativeInput.checked;
    }
    onChangeSwitch() {
        this.setMod('switch', this.state.switch);
        let slider = this.getElm('switch-slider');
        if (this.state.switch) {
            if (!slider) {
                slider = this.j.c.div(this.getFullElName('switch-slider'));
            }
            dom/* Dom.after */.i.after(this.nativeInput, slider);
        }
        else {
            dom/* Dom.safeRemove */.i.safeRemove(slider);
        }
    }
};
UICheckbox.defaultState = {
    ...input/* UIInput.defaultState */.u.defaultState,
    checked: false,
    switch: false
};
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)('state.checked'),
    (0,decorators.hook)('ready')
], UICheckbox.prototype, "onChangeChecked", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)('nativeInput:change')
], UICheckbox.prototype, "onChangeNativeCheckBox", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)('state.switch'),
    (0,decorators.hook)('ready')
], UICheckbox.prototype, "onChangeSwitch", null);
UICheckbox = UICheckbox_1 = (0,tslib_es6/* __decorate */.gn)([
    decorators.component
], UICheckbox);


// EXTERNAL MODULE: ./src/core/ui/form/inputs/file/file.ts
var file = __webpack_require__(65841);
;// CONCATENATED MODULE: ./src/core/ui/form/inputs/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






;// CONCATENATED MODULE: ./src/core/ui/form/block/block.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





let UIBlock = class UIBlock extends group/* UIGroup */.q {
    constructor(jodit, elements, options = {
        align: 'left'
    }) {
        super(jodit, elements);
        this.options = options;
        this.setMod('align', this.options.align || 'left');
        this.setMod('width', this.options.width || '');
        this.options.mod && this.setMod(this.options.mod, true);
        this.options.className &&
            this.container.classList.add(this.options.className);
        (0,helpers_utils/* attr */.Lj)(this.container, 'data-ref', options.ref);
        (0,helpers_utils/* attr */.Lj)(this.container, 'ref', options.ref);
    }
    className() {
        return 'UIBlock';
    }
};
UIBlock = (0,tslib_es6/* __decorate */.gn)([
    component/* component */.w
], UIBlock);


;// CONCATENATED MODULE: ./src/core/ui/form/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





/***/ }),

/***/ 65841:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": function() { return /* binding */ UIFileInput; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(20255);
/* harmony import */ var jodit_core_ui_form_inputs_input_input__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(65484);
/* harmony import */ var jodit_core_decorators_component_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(99205);
/* harmony import */ var jodit_core_ui_button_button_button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(15327);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





let UIFileInput = class UIFileInput extends jodit_core_ui_form_inputs_input_input__WEBPACK_IMPORTED_MODULE_0__/* .UIInput */ .u {
    constructor(jodit, options) {
        super(jodit, {
            type: 'file',
            ...options
        });
        this.state = {
            ...jodit_core_ui_form_inputs_input_input__WEBPACK_IMPORTED_MODULE_0__/* .UIInput.defaultState */ .u.defaultState,
            type: 'file',
            onlyImages: true
        };
    }
    className() {
        return 'UIFileInput';
    }
    createContainer(options) {
        this.button = new jodit_core_ui_button_button_button__WEBPACK_IMPORTED_MODULE_1__/* .UIButton */ .y3(this.j, {
            icon: {
                name: 'plus'
            }
        });
        const { container } = this.button;
        if (!this.nativeInput) {
            this.nativeInput = this.createNativeInput(options);
        }
        const { nativeInput } = this;
        nativeInput.classList.add(this.getFullElName('input'));
        container.classList.add(this.componentName);
        container.appendChild(nativeInput);
        return container;
    }
    createNativeInput(options) {
        return this.j.create.fromHTML(`<input
			type="file"
			accept="${options.onlyImages ? 'image/*' : '*'}"
			tabindex="-1"
			dir="auto"
			multiple=""
		/>`);
    }
};
UIFileInput = (0,tslib__WEBPACK_IMPORTED_MODULE_2__/* .__decorate */ .gn)([
    jodit_core_decorators_component_component__WEBPACK_IMPORTED_MODULE_3__/* .component */ .w
], UIFileInput);



/***/ }),

/***/ 65484:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "u": function() { return /* binding */ UIInput; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(20255);
/* harmony import */ var jodit_core_ui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71525);
/* harmony import */ var jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11358);
/* harmony import */ var jodit_core_helpers_array_to_array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(42464);
/* harmony import */ var jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(43887);
/* harmony import */ var jodit_core_decorators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(11169);
/* harmony import */ var jodit_core_ui_icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(76381);
/* harmony import */ var jodit_core_ui_form_validators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(52342);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
var UIInput_1;









let UIInput = UIInput_1 = class UIInput extends jodit_core_ui_element__WEBPACK_IMPORTED_MODULE_0__/* .UIElement */ .u {
    constructor(jodit, options) {
        super(jodit, options);
        this.label = this.j.c.span(this.getFullElName('label'));
        this.icon = this.j.c.span(this.getFullElName('icon'));
        this.clearButton = this.j.c.span(this.getFullElName('clear'), jodit_core_ui_icon__WEBPACK_IMPORTED_MODULE_5__/* .Icon.get */ .J.get('cancel'));
        this.state = { ...UIInput_1.defaultState };
        this.__errorBox = this.j.c.span(this.getFullElName('error'));
        this.validators = new Set([]);
        if ((options === null || options === void 0 ? void 0 : options.value) !== undefined) {
            options.value = options.value.toString();
        }
        Object.assign(this.state, options);
        if (this.state.clearButton !== undefined) {
            this.j.e
                .on(this.clearButton, 'click', (e) => {
                e.preventDefault();
                this.nativeInput.value = '';
                this.j.e.fire(this.nativeInput, 'input');
                this.focus();
            })
                .on(this.nativeInput, 'input', () => {
                this.state.clearButton = Boolean(this.value.length);
            });
            this.state.clearButton = Boolean(this.value.length);
        }
        this.j.e
            .on(this.nativeInput, 'focus blur', () => {
            this.onChangeFocus();
        })
            .on(this.nativeInput, 'input change', this.onChangeValue);
        this.onChangeState();
        this.onChangeClassName();
        this.onChangeStateValue();
    }
    className() {
        return 'UIInput';
    }
    onChangeClear() {
        if (this.state.clearButton) {
            jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_3__/* .Dom.after */ .i.after(this.nativeInput, this.clearButton);
        }
        else {
            jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_3__/* .Dom.safeRemove */ .i.safeRemove(this.clearButton);
        }
    }
    onChangeClassName(ignore, oldClassName) {
        oldClassName && this.container.classList.remove(oldClassName);
        this.state.className &&
            this.container.classList.add(this.state.className);
    }
    onChangeState() {
        this.name = this.state.name;
        const input = this.nativeInput, { name, icon, type, ref, required, placeholder, autocomplete, label } = this.state;
        (0,jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_1__/* .attr */ .Lj)(input, 'name', name);
        (0,jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_1__/* .attr */ .Lj)(input, 'type', type);
        (0,jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_1__/* .attr */ .Lj)(input, 'data-ref', ref || name);
        (0,jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_1__/* .attr */ .Lj)(input, 'ref', ref || name);
        (0,jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_1__/* .attr */ .Lj)(input, 'required', required || null);
        (0,jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_1__/* .attr */ .Lj)(input, 'autocomplete', !autocomplete ? 'off' : null);
        (0,jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_1__/* .attr */ .Lj)(input, 'placeholder', placeholder ? this.j.i18n(placeholder) : '');
        if (icon && jodit_core_ui_icon__WEBPACK_IMPORTED_MODULE_5__/* .Icon.exists */ .J.exists(icon)) {
            jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_3__/* .Dom.before */ .i.before(input, this.icon);
            this.icon.innerHTML = jodit_core_ui_icon__WEBPACK_IMPORTED_MODULE_5__/* .Icon.get */ .J.get(icon);
        }
        else {
            jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_3__/* .Dom.safeRemove */ .i.safeRemove(this.icon);
        }
        if (label) {
            jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_3__/* .Dom.before */ .i.before(this.wrapper, this.label);
            this.label.innerText = this.j.i18n(label);
        }
        else {
            jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_3__/* .Dom.safeRemove */ .i.safeRemove(this.label);
        }
        this.updateValidators();
    }
    updateValidators() {
        var _a;
        this.validators.clear();
        if (this.state.required) {
            this.validators.add(jodit_core_ui_form_validators__WEBPACK_IMPORTED_MODULE_6__/* .inputValidators.required */ .g.required);
        }
        (_a = this.state.validators) === null || _a === void 0 ? void 0 : _a.forEach(name => {
            const validator = jodit_core_ui_form_validators__WEBPACK_IMPORTED_MODULE_6__/* .inputValidators */ .g[name];
            validator && this.validators.add(validator);
        });
    }
    set error(value) {
        this.setMod('has-error', Boolean(value));
        if (!value) {
            jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_3__/* .Dom.safeRemove */ .i.safeRemove(this.__errorBox);
        }
        else {
            this.__errorBox.innerText = this.j.i18n(value, this.j.i18n(this.state.label || ''));
            this.container.appendChild(this.__errorBox);
        }
    }
    get value() {
        return this.nativeInput.value;
    }
    set value(value) {
        if (this.value !== value) {
            this.nativeInput.value = value;
            this.onChangeValue();
        }
    }
    onChangeStateValue() {
        const value = this.state.value.toString();
        if (value !== this.value) {
            this.value = value;
        }
    }
    onChangeValue() {
        var _a, _b;
        const { value } = this;
        if (this.state.value !== value) {
            this.state.value = value;
            this.j.e.fire(this, 'change', value);
            (_b = (_a = this.state).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, value);
        }
    }
    validate() {
        this.error = '';
        return (0,jodit_core_helpers_array_to_array__WEBPACK_IMPORTED_MODULE_2__/* .toArray */ .q)(this.validators).every(validator => validator(this));
    }
    createContainer(options) {
        const container = super.createContainer();
        this.wrapper = this.j.c.div(this.getFullElName('wrapper'));
        if (!this.nativeInput) {
            this.nativeInput = this.createNativeInput();
        }
        const { nativeInput } = this;
        nativeInput.classList.add(this.getFullElName('input'));
        this.wrapper.appendChild(nativeInput);
        container.appendChild(this.wrapper);
        (0,jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_1__/* .attr */ .Lj)(nativeInput, 'dir', this.j.o.direction || 'auto');
        return container;
    }
    createNativeInput(options) {
        return this.j.create.element('input');
    }
    focus() {
        this.nativeInput.focus();
    }
    get isFocused() {
        return this.nativeInput === this.j.od.activeElement;
    }
    onChangeFocus() {
        this.setMod('focused', this.isFocused);
    }
};
UIInput.defaultState = {
    className: '',
    autocomplete: true,
    name: '',
    value: '',
    icon: '',
    label: '',
    ref: '',
    type: 'text',
    placeholder: '',
    required: false,
    validators: []
};
(0,tslib__WEBPACK_IMPORTED_MODULE_7__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_4__.watch)('state.clearButton')
], UIInput.prototype, "onChangeClear", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_7__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_4__.watch)('state.className')
], UIInput.prototype, "onChangeClassName", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_7__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_4__.watch)([
        'state.name',
        'state.type',
        'state.label',
        'state.placeholder',
        'state.autocomplete',
        'state.icon'
    ]),
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_4__.debounce)()
], UIInput.prototype, "onChangeState", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_7__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_4__.watch)('state.value')
], UIInput.prototype, "onChangeStateValue", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_7__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_4__.autobind
], UIInput.prototype, "onChangeValue", null);
UIInput = UIInput_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_7__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_4__.component
], UIInput);



/***/ }),

/***/ 52342:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "g": function() { return /* reexport */ input_namespaceObject; },
  "s": function() { return /* reexport */ select_namespaceObject; }
});

// NAMESPACE OBJECT: ./src/core/ui/form/validators/input.ts
var input_namespaceObject = {};
__webpack_require__.r(input_namespaceObject);
__webpack_require__.d(input_namespaceObject, {
  "required": function() { return required; },
  "url": function() { return url; }
});

// NAMESPACE OBJECT: ./src/core/ui/form/validators/select.ts
var select_namespaceObject = {};
__webpack_require__.r(select_namespaceObject);
__webpack_require__.d(select_namespaceObject, {
  "C": function() { return select_required; }
});

// EXTERNAL MODULE: ./src/core/helpers/checker/is-url.ts
var is_url = __webpack_require__(56521);
// EXTERNAL MODULE: ./src/core/helpers/string/trim.ts
var trim = __webpack_require__(50106);
;// CONCATENATED MODULE: ./src/core/ui/form/validators/input.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


const required = function (input) {
    if (!(0,trim/* trim */.f)(input.value).length) {
        input.error = 'Please fill out this field';
        return false;
    }
    return true;
};
const url = function (input) {
    if (!(0,is_url/* isURL */.P)((0,trim/* trim */.f)(input.value))) {
        input.error = 'Please enter a web address';
        return false;
    }
    return true;
};

;// CONCATENATED MODULE: ./src/core/ui/form/validators/select.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

const select_required = function (select) {
    if (!(0,trim/* trim */.f)(select.value).length) {
        select.error = 'Please fill out this field';
        return false;
    }
    return true;
};

;// CONCATENATED MODULE: ./src/core/ui/form/validators/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






/***/ }),

/***/ 90181:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "q": function() { return /* binding */ UIGroup; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(20255);
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71525);
/* harmony import */ var jodit_core_decorators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11169);
/* harmony import */ var jodit_core_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(52607);
/* harmony import */ var jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(43887);
/* harmony import */ var jodit_core_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12614);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
var UIGroup_1;







let UIGroup = UIGroup_1 = class UIGroup extends _element__WEBPACK_IMPORTED_MODULE_0__/* .UIElement */ .u {
    constructor(jodit, elements, options) {
        super(jodit, options);
        this.options = options;
        this.syncMod = false;
        this.elements = [];
        this.buttonSize = 'middle';
        elements === null || elements === void 0 ? void 0 : elements.forEach(elm => elm && this.append(elm));
        if (options === null || options === void 0 ? void 0 : options.name) {
            this.name = options.name;
        }
    }
    className() {
        return 'UIGroup';
    }
    get allChildren() {
        const result = [];
        const stack = [
            ...this.elements
        ];
        while (stack.length) {
            const elm = stack.shift();
            if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_2__.isArray)(elm)) {
                stack.push(...elm);
            }
            else if (jodit_core_component_component__WEBPACK_IMPORTED_MODULE_4__/* .Component.isInstanceOf */ .w.isInstanceOf(elm, UIGroup_1)) {
                stack.push(...elm.elements);
            }
            else {
                elm && result.push(elm);
            }
        }
        return result;
    }
    update() {
        this.elements.forEach(elm => elm.update());
        this.setMod('size', this.buttonSize);
    }
    append(elm, distElement) {
        if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_2__.isArray)(elm)) {
            elm.forEach(item => this.append(item, distElement));
            return this;
        }
        this.elements.push(elm);
        if (elm.name) {
            elm.container.classList.add(this.getFullElName(elm.name));
        }
        if (distElement) {
            const distElm = this.getElm(distElement);
            (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_2__.assert)(distElm != null, 'Element does not exist');
            distElm.appendChild(elm.container);
        }
        else {
            this.appendChildToContainer(elm.container);
        }
        elm.parentElement = this;
        elm.update();
        return this;
    }
    afterSetMod(name, value) {
        if (this.syncMod) {
            this.elements.forEach(elm => elm.setMod(name, value));
        }
    }
    appendChildToContainer(childContainer) {
        this.container.appendChild(childContainer);
    }
    remove(elm) {
        const index = this.elements.indexOf(elm);
        if (index !== -1) {
            this.elements.splice(index, 1);
            jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_3__/* .Dom.safeRemove */ .i.safeRemove(elm.container);
            elm.parentElement = null;
        }
        return this;
    }
    clear() {
        this.elements.forEach(elm => elm.destruct());
        this.elements.length = 0;
        return this;
    }
    destruct() {
        this.clear();
        return super.destruct();
    }
};
(0,tslib__WEBPACK_IMPORTED_MODULE_5__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_1__.watch)('buttonSize')
], UIGroup.prototype, "update", null);
UIGroup = UIGroup_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_5__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_1__.component
], UIGroup);



/***/ }),

/***/ 52048:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "b": function() { return /* binding */ UIList; }
});

// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(20255);
// EXTERNAL MODULE: ./src/core/ui/helpers/get-control-type.ts
var get_control_type = __webpack_require__(13214);
// EXTERNAL MODULE: ./src/config.ts
var config = __webpack_require__(27537);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-array.ts
var is_array = __webpack_require__(2555);
// EXTERNAL MODULE: ./src/core/helpers/utils/index.ts + 11 modules
var utils = __webpack_require__(11358);
;// CONCATENATED MODULE: ./src/core/ui/helpers/get-strong-control-types.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




function getStrongControlTypes(items, controls) {
    const elements = (0,is_array/* isArray */.k)(items)
        ? items
        : (0,utils/* keys */.am)(items, false).map(key => {
            const value = items[key] || {};
            return (0,utils/* ConfigProto */.II)({ name: key }, value);
        });
    return elements.map(item => (0,get_control_type/* getControlType */.Y)(item, controls || config/* Config.defaultOptions.controls */.D.defaultOptions.controls));
}

// EXTERNAL MODULE: ./src/core/decorators/index.ts + 7 modules
var decorators = __webpack_require__(11169);
// EXTERNAL MODULE: ./src/core/ui/group/group.ts
var group = __webpack_require__(90181);
// EXTERNAL MODULE: ./src/core/ui/group/separator.ts
var separator = __webpack_require__(20166);
// EXTERNAL MODULE: ./src/core/ui/group/spacer.ts
var spacer = __webpack_require__(22526);
// EXTERNAL MODULE: ./src/core/ui/button/button/button.ts
var button_button = __webpack_require__(15327);
// EXTERNAL MODULE: ./src/core/ui/helpers/buttons.ts
var buttons = __webpack_require__(74091);
// EXTERNAL MODULE: ./src/core/helpers/array/split-array.ts
var split_array = __webpack_require__(62541);
// EXTERNAL MODULE: ./src/core/component/component.ts
var component = __webpack_require__(12614);
;// CONCATENATED MODULE: ./src/core/ui/group/list.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */












let UIList = class UIList extends group/* UIGroup */.q {
    constructor(jodit) {
        super(jodit);
        this.mode = 'horizontal';
        this.removeButtons = [];
        this.onChangeMode();
    }
    className() {
        return 'UIList';
    }
    onChangeMode() {
        this.setMod('mode', this.mode);
    }
    makeGroup() {
        return new group/* UIGroup */.q(this.jodit);
    }
    get buttons() {
        return this.allChildren.filter(elm => component/* Component.isInstanceOf */.w.isInstanceOf(elm, button_button/* UIButton */.y3));
    }
    getButtonsNames() {
        return this.buttons
            .map(a => (a instanceof button_button/* UIButton */.y3 && a.state.name) || '')
            .filter(a => a !== '');
    }
    setRemoveButtons(removeButtons) {
        this.removeButtons = removeButtons || [];
        return this;
    }
    build(items, target = null) {
        items = (0,split_array/* splitArray */.C)(items);
        this.clear();
        let lastBtnSeparator = false;
        let line = this.makeGroup();
        this.append(line);
        line.setMod('line', true);
        let group;
        const addButton = (control) => {
            let elm = null;
            switch (control.name) {
                case '\n':
                    line = this.makeGroup();
                    line.setMod('line', true);
                    group = this.makeGroup();
                    line.append(group);
                    this.append(line);
                    break;
                case '|':
                    if (!lastBtnSeparator) {
                        lastBtnSeparator = true;
                        elm = new separator/* UISeparator */.l(this.j);
                    }
                    break;
                case '---': {
                    group.setMod('before-spacer', true);
                    const space = new spacer/* UISpacer */.W(this.j);
                    line.append(space);
                    group = this.makeGroup();
                    line.append(group);
                    lastBtnSeparator = false;
                    break;
                }
                default:
                    lastBtnSeparator = false;
                    elm = this.makeButton(control, target);
            }
            if (elm) {
                if (!group) {
                    group = this.makeGroup();
                    line.append(group);
                }
                group.append(elm);
            }
        };
        const isNotRemoved = (b) => !this.removeButtons.includes(b.name);
        items.forEach(item => {
            if ((0,buttons/* isButtonGroup */.A)(item)) {
                const buttons = item.buttons.filter(b => b);
                if (buttons.length) {
                    group = this.makeGroup();
                    group.setMod('separated', true).setMod('group', item.group);
                    line.append(group);
                    getStrongControlTypes(buttons, this.j.o.controls)
                        .filter(isNotRemoved)
                        .forEach(addButton);
                }
            }
            else {
                if (!group) {
                    group = this.makeGroup();
                    line.append(group);
                }
                const control = (0,get_control_type/* getControlType */.Y)(item, this.j.o.controls);
                isNotRemoved(control) && addButton(control);
            }
        });
        this.update();
        return this;
    }
    makeButton(control, target) {
        return new button_button/* UIButton */.y3(this.j);
    }
};
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)('mode')
], UIList.prototype, "onChangeMode", null);
UIList = (0,tslib_es6/* __decorate */.gn)([
    decorators.component
], UIList);



/***/ }),

/***/ 20166:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "l": function() { return /* binding */ UISeparator; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(20255);
/* harmony import */ var jodit_core_ui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71525);
/* harmony import */ var jodit_core_decorators_component_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(99205);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



let UISeparator = class UISeparator extends jodit_core_ui_element__WEBPACK_IMPORTED_MODULE_0__/* .UIElement */ .u {
    className() {
        return 'UISeparator';
    }
};
UISeparator = (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__decorate */ .gn)([
    jodit_core_decorators_component_component__WEBPACK_IMPORTED_MODULE_2__/* .component */ .w
], UISeparator);



/***/ }),

/***/ 22526:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "W": function() { return /* binding */ UISpacer; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(20255);
/* harmony import */ var jodit_core_ui_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71525);
/* harmony import */ var jodit_core_decorators_component_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(99205);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



let UISpacer = class UISpacer extends jodit_core_ui_element__WEBPACK_IMPORTED_MODULE_0__/* .UIElement */ .u {
    className() {
        return 'UISpacer';
    }
};
UISpacer = (0,tslib__WEBPACK_IMPORTED_MODULE_1__/* .__decorate */ .gn)([
    jodit_core_decorators_component_component__WEBPACK_IMPORTED_MODULE_2__/* .component */ .w
], UISpacer);



/***/ }),

/***/ 74091:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "A": function() { return /* binding */ isButtonGroup; },
/* harmony export */   "q": function() { return /* binding */ flatButtonsSet; }
/* harmony export */ });
/* harmony import */ var jodit_core_helpers_checker_is_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2555);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

const isButtonGroup = (item) => {
    return (0,jodit_core_helpers_checker_is_array__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .k)(item.buttons);
};
function flatButtonsSet(buttons, jodit) {
    const groups = jodit.getRegisteredButtonGroups();
    return new Set(buttons.reduce((acc, item) => {
        var _a;
        if (isButtonGroup(item)) {
            acc = acc.concat([
                ...item.buttons,
                ...((_a = groups[item.group]) !== null && _a !== void 0 ? _a : [])
            ]);
        }
        else {
            acc.push(item);
        }
        return acc;
    }, []));
}


/***/ }),

/***/ 13214:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Y": function() { return /* binding */ getControlType; },
/* harmony export */   "z": function() { return /* binding */ findControlType; }
/* harmony export */ });
/* harmony import */ var jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52607);
/* harmony import */ var jodit_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(27537);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function getControlType(button, controls) {
    let buttonControl;
    if (!controls) {
        controls = jodit_config__WEBPACK_IMPORTED_MODULE_1__/* .Config.defaultOptions.controls */ .D.defaultOptions.controls;
    }
    if (!(0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.isString)(button)) {
        buttonControl = { name: 'empty', ...(0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.ConfigFlatten)(button) };
        if (controls[buttonControl.name] !== undefined) {
            buttonControl = {
                ...(0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.ConfigFlatten)(controls[buttonControl.name]),
                ...(0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.ConfigFlatten)(buttonControl)
            };
        }
    }
    else {
        buttonControl = findControlType(button, controls) || {
            name: button,
            command: button,
            tooltip: button
        };
    }
    return buttonControl;
}
function findControlType(path, controls) {
    let [namespaceOrKey, key] = path.split(/\./);
    let store = controls;
    if (key != null) {
        if (controls[namespaceOrKey] !== undefined) {
            store = controls[namespaceOrKey];
        }
    }
    else {
        key = namespaceOrKey;
    }
    return store[key]
        ? {
            name: key,
            ...(0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.ConfigFlatten)(store[key])
        }
        : undefined;
}


/***/ }),

/***/ 76381:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "J": function() { return /* binding */ Icon; }
/* harmony export */ });
/* harmony import */ var jodit_core_helpers_utils_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(56672);
/* harmony import */ var jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52607);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


class Icon {
    static getIcon(name) {
        if (/<svg/i.test(name)) {
            return name;
        }
        const icon = Icon.icons[name] ||
            Icon.icons[name.replace(/-/g, '_')] ||
            Icon.icons[name.replace(/_/g, '-')] ||
            Icon.icons[(0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.camelCase)(name)] ||
            Icon.icons[(0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.kebabCase)(name)] ||
            Icon.icons[name.toLowerCase()];
        if (false) {}
        return icon;
    }
    static exists(name) {
        return this.getIcon(name) !== undefined;
    }
    static get(name, defaultValue = '<span></span>') {
        return this.getIcon(name) || defaultValue;
    }
    static set(name, value) {
        this.icons[name.replace('_', '-')] = value;
        return this;
    }
    static makeIcon(jodit, icon) {
        var _a;
        let iconElement;
        if (icon) {
            const clearName = icon.name.replace(/[^a-zA-Z0-9]/g, '_');
            if (icon.iconURL) {
                iconElement = jodit.c.span();
                (0,jodit_core_helpers_utils_css__WEBPACK_IMPORTED_MODULE_1__/* .css */ .i)(iconElement, 'backgroundImage', 'url(' +
                    icon.iconURL.replace('{basePath}', (jodit === null || jodit === void 0 ? void 0 : jodit.basePath) || '') +
                    ')');
            }
            else {
                const svg = jodit.e.fire('getIcon', icon.name, icon, clearName) ||
                    Icon.get(icon.name, '') ||
                    ((_a = jodit.o.extraIcons) === null || _a === void 0 ? void 0 : _a[icon.name]);
                if (svg) {
                    iconElement = jodit.c.fromHTML(svg.trim());
                    if (!/^<svg/i.test(icon.name)) {
                        iconElement.classList.add('jodit-icon_' + clearName);
                    }
                }
            }
        }
        if (iconElement) {
            iconElement.classList.add('jodit-icon');
            iconElement.style.fill = icon.fill;
        }
        return iconElement;
    }
}
Icon.icons = {};


/***/ }),

/***/ 41685:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "zx": function() { return /* reexport */ ui_button/* Button */.zx; },
  "JO": function() { return /* reexport */ icon/* Icon */.J; },
  "GI": function() { return /* reexport */ popup/* Popup */.G; },
  "ko": function() { return /* reexport */ ProgressBar; },
  "eC": function() { return /* reexport */ ui_form/* UIBlock */.eC; },
  "y3": function() { return /* reexport */ ui_button/* UIButton */.y3; },
  "BO": function() { return /* reexport */ ui_button/* UIButtonGroup */.BO; },
  "mA": function() { return /* reexport */ ui_form/* UICheckbox */.mA; },
  "u1": function() { return /* reexport */ ui_element/* UIElement */.u; },
  "x4": function() { return /* reexport */ ui_form/* UIForm */.x4; },
  "qe": function() { return /* reexport */ group/* UIGroup */.q; },
  "u3": function() { return /* reexport */ ui_form/* UIInput */.u3; },
  "bz": function() { return /* reexport */ list/* UIList */.b; },
  "Cj": function() { return /* reexport */ ui_form/* UISelect */.Cj; },
  "lU": function() { return /* reexport */ separator/* UISeparator */.l; },
  "GJ": function() { return /* reexport */ ui_form/* UITextArea */.GJ; },
  "Ne": function() { return /* reexport */ ui_button/* UITooltip */.Ne; }
});

// UNUSED EXPORTS: UIButtonState, UIFileInput, UISpacer

// EXTERNAL MODULE: ./src/core/ui/element.ts
var ui_element = __webpack_require__(71525);
// EXTERNAL MODULE: ./src/core/ui/button/index.ts + 2 modules
var ui_button = __webpack_require__(17460);
// EXTERNAL MODULE: ./src/core/ui/popup/index.ts
var popup = __webpack_require__(990);
// EXTERNAL MODULE: ./src/core/ui/group/group.ts
var group = __webpack_require__(90181);
// EXTERNAL MODULE: ./src/core/ui/group/list.ts + 1 modules
var list = __webpack_require__(52048);
// EXTERNAL MODULE: ./src/core/ui/group/separator.ts
var separator = __webpack_require__(20166);
// EXTERNAL MODULE: ./src/core/ui/group/spacer.ts
var spacer = __webpack_require__(22526);
;// CONCATENATED MODULE: ./src/core/ui/group/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





// EXTERNAL MODULE: ./src/core/ui/form/index.ts + 6 modules
var ui_form = __webpack_require__(1542);
// EXTERNAL MODULE: ./src/core/ui/icon.ts
var icon = __webpack_require__(76381);
// EXTERNAL MODULE: ./src/core/dom/dom.ts
var dom = __webpack_require__(43887);
;// CONCATENATED MODULE: ./src/core/ui/progress-bar/progress-bar.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



class ProgressBar extends ui_element/* UIElement */.u {
    className() {
        return 'ProgressBar';
    }
    render() {
        return '<div><div></div></div>';
    }
    show() {
        const container = this.j.workplace || this.j.container;
        container.appendChild(this.container);
        return this;
    }
    hide() {
        dom/* Dom.safeRemove */.i.safeRemove(this.container);
        return this;
    }
    progress(percentage) {
        this.container.style.width = percentage.toFixed(2) + '%';
        return this;
    }
    destruct() {
        this.hide();
        return super.destruct();
    }
}

;// CONCATENATED MODULE: ./src/core/ui/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */









/***/ }),

/***/ 990:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "G": function() { return /* reexport safe */ _popup__WEBPACK_IMPORTED_MODULE_0__.G; }
/* harmony export */ });
/* harmony import */ var _popup__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(26322);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



/***/ }),

/***/ 26322:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "G": function() { return /* binding */ Popup; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(20255);
/* harmony import */ var jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43887);
/* harmony import */ var jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52607);
/* harmony import */ var jodit_core_ui_element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(71525);
/* harmony import */ var jodit_core_decorators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(11169);
/* harmony import */ var jodit_core_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12614);
/* harmony import */ var jodit_core_global__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(58299);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */








class Popup extends jodit_core_ui_element__WEBPACK_IMPORTED_MODULE_2__/* .UIElement */ .u {
    constructor(jodit, smart = true) {
        super(jodit);
        this.smart = smart;
        this.isOpened = false;
        this.strategy = 'leftBottom';
        this.viewBound = () => ({
            left: 0,
            top: 0,
            width: this.ow.innerWidth,
            height: this.ow.innerHeight
        });
        this.childrenPopups = new Set();
        (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.attr)(this.container, 'role', 'popup');
    }
    className() {
        return 'Popup';
    }
    updateParentElement(target) {
        if (target !== this && jodit_core_component_component__WEBPACK_IMPORTED_MODULE_4__/* .Component.isInstanceOf */ .w.isInstanceOf(target, Popup)) {
            this.childrenPopups.forEach(popup => {
                if (!target.closest(popup) && popup.isOpened) {
                    popup.close();
                }
            });
            if (!this.childrenPopups.has(target)) {
                this.j.e.on(target, 'beforeClose', () => {
                    this.childrenPopups.delete(target);
                });
            }
            this.childrenPopups.add(target);
        }
        return super.updateParentElement(target);
    }
    setContent(content) {
        jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_0__/* .Dom.detach */ .i.detach(this.container);
        const box = this.j.c.div(`${this.componentName}__content`);
        let elm;
        if (jodit_core_component_component__WEBPACK_IMPORTED_MODULE_4__/* .Component.isInstanceOf */ .w.isInstanceOf(content, jodit_core_ui_element__WEBPACK_IMPORTED_MODULE_2__/* .UIElement */ .u)) {
            elm = content.container;
            content.parentElement = this;
        }
        else if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.isString)(content)) {
            elm = this.j.c.fromHTML(content);
        }
        else {
            elm = content;
        }
        box.appendChild(elm);
        this.container.appendChild(box);
        this.updatePosition();
        return this;
    }
    open(getBound, keepPosition = false, parentContainer) {
        (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.markOwner)(this.jodit, this.container);
        this.calculateZIndex();
        this.isOpened = true;
        this.addGlobalListeners();
        this.targetBound = !keepPosition
            ? getBound
            : this.getKeepBound(getBound);
        if (parentContainer) {
            parentContainer.appendChild(this.container);
        }
        else {
            const popupContainer = (0,jodit_core_global__WEBPACK_IMPORTED_MODULE_5__/* .getContainer */ .ZO)(this.jodit, Popup);
            if (parentContainer !== this.container.parentElement) {
                popupContainer.appendChild(this.container);
            }
        }
        this.updatePosition();
        this.j.e.fire(this, 'afterOpen');
        return this;
    }
    calculateZIndex() {
        if (this.container.style.zIndex) {
            return;
        }
        const checkView = (view) => {
            const zIndex = view.container.style.zIndex || view.o.zIndex;
            if (zIndex) {
                this.setZIndex(1 + parseInt(zIndex.toString(), 10));
                return true;
            }
            return false;
        };
        const { j } = this;
        if (checkView(j)) {
            return;
        }
        let pe = this.parentElement;
        while (pe) {
            if (checkView(j)) {
                return;
            }
            if (pe.container.style.zIndex) {
                this.setZIndex(1 + parseInt(pe.container.style.zIndex.toString(), 10));
                return;
            }
            if (!pe.parentElement && pe.container.parentElement) {
                const elm = jodit_core_ui_element__WEBPACK_IMPORTED_MODULE_2__/* .UIElement.closestElement */ .u.closestElement(pe.container.parentElement, jodit_core_ui_element__WEBPACK_IMPORTED_MODULE_2__/* .UIElement */ .u);
                if (elm) {
                    pe = elm;
                    continue;
                }
            }
            pe = pe.parentElement;
        }
    }
    getKeepBound(getBound) {
        const oldBound = getBound();
        const elmUnderCursor = this.od.elementFromPoint(oldBound.left, oldBound.top);
        if (!elmUnderCursor) {
            return getBound;
        }
        const element = jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_0__/* .Dom.isHTMLElement */ .i.isHTMLElement(elmUnderCursor)
            ? elmUnderCursor
            : elmUnderCursor.parentElement;
        const oldPos = (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.position)(element, this.j);
        return () => {
            const bound = getBound();
            const newPos = (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.position)(element, this.j);
            return {
                ...bound,
                top: bound.top + (newPos.top - oldPos.top),
                left: bound.left + (newPos.left - oldPos.left)
            };
        };
    }
    updatePosition() {
        if (!this.isOpened) {
            return this;
        }
        const [pos, strategy] = this.calculatePosition(this.targetBound(), this.viewBound(), (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.position)(this.container, this.j));
        this.setMod('strategy', strategy);
        (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.css)(this.container, {
            left: pos.left,
            top: pos.top
        });
        this.childrenPopups.forEach(popup => popup.updatePosition());
        return this;
    }
    throttleUpdatePosition() {
        this.updatePosition();
    }
    calculatePosition(target, view, container, defaultStrategy = this.strategy) {
        const x = {
            left: target.left,
            right: target.left - (container.width - target.width)
        }, y = {
            bottom: target.top + target.height,
            top: target.top - container.height
        };
        const list = Object.keys(x).reduce((keys, xKey) => keys.concat(Object.keys(y).map(yKey => `${xKey}${(0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.ucfirst)(yKey)}`)), []);
        const getPointByStrategy = (strategy) => {
            const [xKey, yKey] = (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.kebabCase)(strategy).split('-');
            return {
                left: x[xKey],
                top: y[yKey],
                width: container.width,
                height: container.height
            };
        };
        const getMatchStrategy = (inBox) => {
            let strategy = null;
            if (Popup.boxInView(getPointByStrategy(defaultStrategy), inBox)) {
                strategy = defaultStrategy;
            }
            else {
                strategy =
                    list.find((key) => {
                        if (Popup.boxInView(getPointByStrategy(key), inBox)) {
                            return key;
                        }
                        return;
                    }) || null;
            }
            return strategy;
        };
        let strategy = getMatchStrategy((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.position)(this.j.container, this.j));
        if (!strategy || !Popup.boxInView(getPointByStrategy(strategy), view)) {
            strategy = getMatchStrategy(view) || strategy || defaultStrategy;
        }
        return [getPointByStrategy(strategy), strategy];
    }
    static boxInView(box, view) {
        const accuracy = 2;
        return (box.top - view.top >= -accuracy &&
            box.left - view.left >= -accuracy &&
            view.top + view.height - (box.top + box.height) >= -accuracy &&
            view.left + view.width - (box.left + box.width) >= -accuracy);
    }
    close() {
        if (!this.isOpened) {
            return this;
        }
        this.isOpened = false;
        this.childrenPopups.forEach(popup => popup.close());
        this.j.e.fire(this, 'beforeClose');
        this.j.e.fire('beforePopupClose', this);
        this.removeGlobalListeners();
        jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_0__/* .Dom.safeRemove */ .i.safeRemove(this.container);
        return this;
    }
    closeOnOutsideClick(e) {
        if (!this.isOpened || this.isOwnClick(e)) {
            return;
        }
        this.close();
    }
    isOwnClick(e) {
        if (!e.target) {
            return false;
        }
        const box = jodit_core_ui_element__WEBPACK_IMPORTED_MODULE_2__/* .UIElement.closestElement */ .u.closestElement(e.target, Popup);
        return Boolean(box && (this === box || box.closest(this)));
    }
    addGlobalListeners() {
        const up = this.throttleUpdatePosition, ow = this.ow;
        jodit_core_global__WEBPACK_IMPORTED_MODULE_5__/* .eventEmitter.on */ .TB.on('closeAllPopups', this.close);
        if (this.smart) {
            this.j.e
                .on('escape', this.close)
                .on('mousedown touchstart', this.closeOnOutsideClick)
                .on(ow, 'mousedown touchstart', this.closeOnOutsideClick);
        }
        this.j.e
            .on('closeAllPopups', this.close)
            .on('resize', up)
            .on(this.container, 'scroll mousewheel', up)
            .on(ow, 'scroll', up)
            .on(ow, 'resize', up);
        jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_0__/* .Dom.up */ .i.up(this.j.container, box => {
            box && this.j.e.on(box, 'scroll mousewheel', up);
        });
    }
    removeGlobalListeners() {
        const up = this.throttleUpdatePosition, ow = this.ow;
        jodit_core_global__WEBPACK_IMPORTED_MODULE_5__/* .eventEmitter.off */ .TB.off('closeAllPopups', this.close);
        if (this.smart) {
            this.j.e
                .off('escape', this.close)
                .off('mousedown touchstart', this.closeOnOutsideClick)
                .off(ow, 'mousedown touchstart', this.closeOnOutsideClick);
        }
        this.j.e
            .off('closeAllPopups', this.close)
            .off('resize', up)
            .off(this.container, 'scroll mousewheel', up)
            .off(ow, 'scroll', up)
            .off(ow, 'resize', up);
        (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.assert)(this.j.container.isConnected, 'The container must be built into the DOM');
        jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_0__/* .Dom.up */ .i.up(this.j.container, box => {
            box && this.j.e.off(box, 'scroll mousewheel', up);
        });
    }
    setZIndex(index) {
        this.container.style.zIndex = index.toString();
    }
    destruct() {
        this.close();
        return super.destruct();
    }
}
(0,tslib__WEBPACK_IMPORTED_MODULE_6__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_3__.autobind
], Popup.prototype, "updatePosition", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_6__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_3__.throttle)(10),
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_3__.autobind
], Popup.prototype, "throttleUpdatePosition", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_6__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_3__.autobind
], Popup.prototype, "close", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_6__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_3__.autobind
], Popup.prototype, "closeOnOutsideClick", null);


/***/ }),

/***/ 62322:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "C": function() { return /* binding */ ViewWithToolbar; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(20255);
/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(23967);
/* harmony import */ var jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52607);
/* harmony import */ var jodit_core_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(94522);
/* harmony import */ var jodit_modules_toolbar_factory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(42701);
/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(26655);
/* harmony import */ var _ui_helpers_buttons__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(74091);
/* harmony import */ var jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(11169);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */









class ViewWithToolbar extends _view__WEBPACK_IMPORTED_MODULE_0__/* .View */ .G {
    constructor(options, isJodit = false) {
        super(options, isJodit);
        this.toolbar = (0,jodit_modules_toolbar_factory__WEBPACK_IMPORTED_MODULE_3__/* .makeCollection */ .R)(this);
        this.defaultToolbarContainer = this.c.div('jodit-toolbar__box');
        this.registeredButtons = new Set();
        this.groupToButtons = {};
        this.isJodit = false;
        this.isJodit = isJodit;
        this.e.on('beforeToolbarBuild', this.beforeToolbarBuild);
    }
    get toolbarContainer() {
        if (!this.o.fullsize &&
            ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.isString)(this.o.toolbar) || jodit_core_dom__WEBPACK_IMPORTED_MODULE_2__/* .Dom.isHTMLElement */ .i.isHTMLElement(this.o.toolbar))) {
            return (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.resolveElement)(this.o.toolbar, this.o.shadowRoot || this.od);
        }
        this.o.toolbar &&
            jodit_core_dom__WEBPACK_IMPORTED_MODULE_2__/* .Dom.appendChildFirst */ .i.appendChildFirst(this.container, this.defaultToolbarContainer);
        return this.defaultToolbarContainer;
    }
    setPanel(element) {
        this.o.toolbar = element;
        this.buildToolbar();
    }
    buildToolbar() {
        var _a, _b, _c;
        if (!this.o.toolbar) {
            return;
        }
        const buttons = this.o.buttons
            ? (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.splitArray)(this.o.buttons)
            : [];
        this.toolbar
            .setRemoveButtons(this.o.removeButtons)
            .build(buttons.concat(this.o.extraButtons || []))
            .appendTo(this.toolbarContainer);
        if (!this.o.toolbarTopButtonSizeUp)
            return;
        if (!((_a = this.toolbar.elements) === null || _a === void 0 ? void 0 : _a.length))
            return;
        const lineFirst = this.toolbar.elements[0];
        lineFirst.container.classList.add('jodit-media-toolbar');
        if (!((_b = lineFirst.elements) === null || _b === void 0 ? void 0 : _b.length))
            return;
        const groupFirst = lineFirst.elements[0];
        if (!((_c = groupFirst === null || groupFirst === void 0 ? void 0 : groupFirst.elements) === null || _c === void 0 ? void 0 : _c.length))
            return;
        for (const element of groupFirst.elements) {
            if (element.text)
                element.text.innerText = element.name;
        }
    }
    getRegisteredButtonGroups() {
        return this.groupToButtons;
    }
    registerButton(btn) {
        var _a;
        this.registeredButtons.add(btn);
        const group = (_a = btn.group) !== null && _a !== void 0 ? _a : 'other';
        if (!this.groupToButtons[group]) {
            this.groupToButtons[group] = [];
        }
        if (btn.position != null) {
            this.groupToButtons[group][btn.position] = btn.name;
        }
        else {
            this.groupToButtons[group].push(btn.name);
        }
        return this;
    }
    unregisterButton(btn) {
        var _a;
        this.registeredButtons.delete(btn);
        const groupName = (_a = btn.group) !== null && _a !== void 0 ? _a : 'other', group = this.groupToButtons[groupName];
        if (group) {
            const index = group.indexOf(btn.name);
            if (index !== -1) {
                group.splice(index, 1);
            }
            if (group.length === 0) {
                delete this.groupToButtons[groupName];
            }
        }
        return this;
    }
    beforeToolbarBuild(items) {
        if (Object.keys(this.groupToButtons).length) {
            return items.map(item => {
                if ((0,_ui_helpers_buttons__WEBPACK_IMPORTED_MODULE_6__/* .isButtonGroup */ .A)(item) &&
                    item.group &&
                    this.groupToButtons[item.group]) {
                    return {
                        group: item.group,
                        buttons: [
                            ...item.buttons,
                            ...this.groupToButtons[item.group]
                        ]
                    };
                }
                return item;
            });
        }
    }
    destruct() {
        if (this.isDestructed) {
            return;
        }
        this.setStatus(_component__WEBPACK_IMPORTED_MODULE_4__/* .STATUSES.beforeDestruct */ .n$.beforeDestruct);
        this.e.off('beforeToolbarBuild', this.beforeToolbarBuild);
        this.toolbar.destruct();
        super.destruct();
    }
}
(0,tslib__WEBPACK_IMPORTED_MODULE_7__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__.autobind
], ViewWithToolbar.prototype, "beforeToolbarBuild", null);


/***/ }),

/***/ 23967:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "G": function() { return /* binding */ View; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(20255);
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(55937);
/* harmony import */ var jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52607);
/* harmony import */ var jodit_core_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(10063);
/* harmony import */ var jodit_modules__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(81165);
/* harmony import */ var jodit_core_global__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(58299);
/* harmony import */ var jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(11169);
/* harmony import */ var jodit_core_traits__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(34821);
/* harmony import */ var jodit_core_event_emitter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(39266);
/* harmony import */ var jodit_modules_messages_messages__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(99186);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
var View_1;










let View = View_1 = class View extends jodit_modules__WEBPACK_IMPORTED_MODULE_3__.Component {
    constructor(options, isJodit = false) {
        super();
        this.isJodit = isJodit;
        this.isView = true;
        this.parent = null;
        this.mods = {};
        this.components = new Set();
        this.version = "3.20.4";
        this.buffer = _storage__WEBPACK_IMPORTED_MODULE_0__/* .Storage.makeStorage */ .Ke.makeStorage();
        this.storage = _storage__WEBPACK_IMPORTED_MODULE_0__/* .Storage.makeStorage */ .Ke.makeStorage(true, this.componentName);
        this.OPTIONS = View_1.defaultOptions;
        this.__isFullSize = false;
        this.__whoLocked = '';
        this.isLockedNotBy = (name) => this.isLocked && this.__whoLocked !== name;
        this.__modulesInstances = new Map();
        this.id = new Date().getTime().toString();
        this.buffer = _storage__WEBPACK_IMPORTED_MODULE_0__/* .Storage.makeStorage */ .Ke.makeStorage();
        this.initOptions(options);
        this.initOwners();
        this.events = new jodit_core_event_emitter__WEBPACK_IMPORTED_MODULE_7__/* .EventEmitter */ .vp(this.od);
        this.create = new jodit_modules__WEBPACK_IMPORTED_MODULE_3__.Create(this.od);
        this.container = this.c.div(`jodit ${this.componentName}`);
        this.progressbar = new jodit_modules__WEBPACK_IMPORTED_MODULE_3__.ProgressBar(this);
        this.message = new jodit_modules_messages_messages__WEBPACK_IMPORTED_MODULE_8__/* .UIMessages */ .D(this);
    }
    get basePath() {
        if (this.o.basePath) {
            return this.o.basePath;
        }
        return jodit_core_constants__WEBPACK_IMPORTED_MODULE_2__.BASE_PATH;
    }
    get defaultTimeout() {
        return (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.isVoid)(this.o.defaultTimeout) ? 100 : this.o.defaultTimeout;
    }
    get c() {
        return this.create;
    }
    get container() {
        return this.__container;
    }
    set container(container) {
        this.__container = container;
    }
    get e() {
        return this.events;
    }
    get options() {
        return this.__options;
    }
    set options(options) {
        this.__options = options;
    }
    get o() {
        return this.options;
    }
    i18n(text, ...params) {
        return (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.i18n)(text, params, this.options);
    }
    toggleFullSize(isFullSize) {
        if (isFullSize === undefined) {
            isFullSize = !this.__isFullSize;
        }
        if (isFullSize === this.__isFullSize) {
            return;
        }
        this.__isFullSize = isFullSize;
        this.e.fire('toggleFullSize', isFullSize);
    }
    get isLocked() {
        return this.__whoLocked !== '';
    }
    lock(name = 'any') {
        if (!this.isLocked) {
            this.__whoLocked = name;
            return true;
        }
        return false;
    }
    unlock() {
        if (this.isLocked) {
            this.__whoLocked = '';
            return true;
        }
        return false;
    }
    get isFullSize() {
        return this.__isFullSize;
    }
    getVersion() {
        return "3.20.4";
    }
    static getVersion() {
        return "3.20.4";
    }
    initOptions(options) {
        this.options = (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.ConfigProto)(options || {}, (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.ConfigProto)(this.options || {}, View_1.defaultOptions));
    }
    initOwners() {
        var _a;
        this.ownerWindow = (_a = this.o.ownerWindow) !== null && _a !== void 0 ? _a : window;
    }
    attachEvents(options) {
        if (!options) {
            return;
        }
        const e = options === null || options === void 0 ? void 0 : options.events;
        e && Object.keys(e).forEach((key) => this.e.on(key, e[key]));
    }
    getInstance(moduleName, options) {
        const instance = this.e.fire((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.camelCase)('getInstance_' + moduleName), options);
        if (instance) {
            return instance;
        }
        const module = jodit_core_global__WEBPACK_IMPORTED_MODULE_4__/* .modules */ .qz[moduleName], mi = this.__modulesInstances;
        if (!(0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.isFunction)(module)) {
            throw (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.error)('Need real module name');
        }
        if (!mi.has(moduleName)) {
            const instance = module.prototype instanceof jodit_modules__WEBPACK_IMPORTED_MODULE_3__.ViewComponent
                ? new module(this, options)
                : new module(options);
            this.components.add(instance);
            mi.set(moduleName, instance);
        }
        return mi.get(moduleName);
    }
    addDisclaimer(elm) {
        this.container.appendChild(elm);
    }
    beforeDestruct() {
        this.e.fire(jodit_modules__WEBPACK_IMPORTED_MODULE_3__.STATUSES.beforeDestruct, this);
        this.components.forEach(component => {
            if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_1__.isDestructable)(component) && !component.isInDestruct) {
                component.destruct();
            }
        });
        this.components.clear();
    }
    destruct() {
        if (this.isDestructed) {
            return;
        }
        this.progressbar.destruct();
        this.message.destruct();
        if (this.async) {
            this.async.destruct();
        }
        if (this.events) {
            this.e.destruct();
        }
        if (this.buffer) {
            this.buffer.clear();
        }
        jodit_modules__WEBPACK_IMPORTED_MODULE_3__.Dom.safeRemove(this.container);
        super.destruct();
    }
};
View.esNext = true;
(0,tslib__WEBPACK_IMPORTED_MODULE_9__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__.hook)(jodit_modules__WEBPACK_IMPORTED_MODULE_3__.STATUSES.beforeDestruct)
], View.prototype, "beforeDestruct", null);
View = View_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_9__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__.derive)(jodit_core_traits__WEBPACK_IMPORTED_MODULE_6__/* .Mods */ .$t, jodit_core_traits__WEBPACK_IMPORTED_MODULE_6__/* .Elms */ .Fx)
], View);

View.defaultOptions = {
    extraButtons: [],
    textIcons: false,
    namespace: '',
    removeButtons: [],
    zIndex: 100002,
    defaultTimeout: 100,
    fullsize: false,
    showTooltip: true,
    useNativeTooltip: false,
    buttons: [],
    globalFullSize: true,
    language: 'auto'
};


/***/ }),

/***/ 33594:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Jodit": function() { return /* reexport */ Jodit; }
});

// NAMESPACE OBJECT: ./src/styles/icons/index.ts
var icons_namespaceObject = {};
__webpack_require__.r(icons_namespaceObject);
__webpack_require__.d(icons_namespaceObject, {
  "angle_down": function() { return angle_down; },
  "angle_left": function() { return angle_left; },
  "angle_right": function() { return angle_right; },
  "angle_up": function() { return angle_up; },
  "bin": function() { return bin; },
  "cancel": function() { return cancel; },
  "center": function() { return center; },
  "check": function() { return check; },
  "chevron": function() { return chevron; },
  "dots": function() { return dots; },
  "eye": function() { return eye; },
  "file": function() { return file; },
  "folder": function() { return folder; },
  "info_circle": function() { return info_circle; },
  "left": function() { return left; },
  "lock": function() { return lock; },
  "ok": function() { return ok; },
  "pencil": function() { return pencil; },
  "plus": function() { return plus; },
  "resize_handler": function() { return resize_handler; },
  "right": function() { return right; },
  "save": function() { return save; },
  "settings": function() { return settings; },
  "unlock": function() { return unlock; },
  "update": function() { return update; },
  "upload": function() { return upload; },
  "valign": function() { return valign; }
});

// NAMESPACE OBJECT: ./src/plugins/clean-html/helpers/visitor/filters/index.ts
var filters_namespaceObject = {};
__webpack_require__.r(filters_namespaceObject);
__webpack_require__.d(filters_namespaceObject, {
  "allowAttributes": function() { return allowAttributes; },
  "fillEmptyParagraph": function() { return fillEmptyParagraph; },
  "removeEmptyTextNode": function() { return removeEmptyTextNode; },
  "removeInvTextNodes": function() { return removeInvTextNodes; },
  "replaceOldTags": function() { return replaceOldTags; },
  "sanitizeAttributes": function() { return sanitizeAttributes; },
  "tryRemoveNode": function() { return tryRemoveNode; }
});

// NAMESPACE OBJECT: ./src/plugins/dtd/before-insert/index.ts
var before_insert_namespaceObject = {};
__webpack_require__.r(before_insert_namespaceObject);
__webpack_require__.d(before_insert_namespaceObject, {
  "checkBlockNesting": function() { return checkBlockNesting; }
});

// NAMESPACE OBJECT: ./src/plugins/dtd/after-insert/index.ts
var after_insert_namespaceObject = {};
__webpack_require__.r(after_insert_namespaceObject);
__webpack_require__.d(after_insert_namespaceObject, {
  "removeExtraBr": function() { return removeExtraBr; }
});

// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(20255);
// EXTERNAL MODULE: ./src/config.ts
var config = __webpack_require__(27537);
// EXTERNAL MODULE: ./src/core/constants.ts
var constants = __webpack_require__(10063);
// EXTERNAL MODULE: ./src/modules/index.ts + 15 modules
var modules = __webpack_require__(81165);
// EXTERNAL MODULE: ./src/core/helpers/index.ts + 14 modules
var helpers = __webpack_require__(52607);
// EXTERNAL MODULE: ./src/core/storage/index.ts + 3 modules
var storage = __webpack_require__(55937);
// EXTERNAL MODULE: ./src/core/global.ts
var global = __webpack_require__(58299);
// EXTERNAL MODULE: ./src/core/decorators/index.ts + 7 modules
var decorators = __webpack_require__(11169);
// EXTERNAL MODULE: ./src/core/traits/index.ts + 3 modules
var traits = __webpack_require__(34821);
;// CONCATENATED MODULE: ./src/jodit.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
var Jodit_1;










const __defaultStyleDisplayKey = 'data-jodit-default-style-display';
const __defaultClassesKey = 'data-jodit-default-classes';
let Jodit = Jodit_1 = class Jodit extends modules.ViewWithToolbar {
    constructor(element, options) {
        super(options, true);
        this.isJodit = true;
        this.commands = new Map();
        this.__selectionLocked = null;
        this.__wasReadOnly = false;
        this.createInside = new modules.Create(() => this.ed, this.o.createAttributes);
        this.editorIsActive = false;
        this.__mode = constants.MODE_WYSIWYG;
        this.__callChangeCount = 0;
        this.isSilentChange = false;
        this.elementToPlace = new Map();
        try {
            const elementSource = (0,helpers.resolveElement)(element, this.o.shadowRoot || this.od);
            if (Jodit_1.isJoditAssigned(elementSource)) {
                return elementSource.component;
            }
        }
        catch (e) {
            this.destruct();
            throw e;
        }
        this.setStatus(modules.STATUSES.beforeInit);
        this.id =
            (0,helpers.attr)((0,helpers.resolveElement)(element, this.o.shadowRoot || this.od), 'id') ||
                new Date().getTime().toString();
        global/* instances */.as[this.id] = this;
        this.storage = storage/* Storage.makeStorage */.Ke.makeStorage(true, this.id);
        this.attachEvents(options);
        this.e.on(this.ow, 'resize', () => {
            if (this.e) {
                this.e.fire('resize');
            }
        });
        this.e.on('prepareWYSIWYGEditor', this.prepareWYSIWYGEditor);
        this.selection = new modules.Select(this);
        const beforeInitHookResult = this.beforeInitHook();
        (0,helpers.callPromise)(beforeInitHookResult, () => {
            this.e.fire('beforeInit', this);
            const initPluginsResult = global/* pluginSystem.init */.pw.init(this);
            (0,helpers.callPromise)(initPluginsResult, () => {
                this.e.fire('afterPluginSystemInit', this);
                this.e.on('changePlace', () => {
                    this.setReadOnly(this.o.readonly);
                    this.setDisabled(this.o.disabled);
                });
                this.places.length = 0;
                const addPlaceResult = this.addPlace(element, options);
                global/* instances */.as[this.id] = this;
                const init = () => {
                    if (this.e) {
                        this.e.fire('afterInit', this);
                    }
                    this.afterInitHook();
                    this.setStatus(modules.STATUSES.ready);
                    this.e.fire('afterConstructor', this);
                };
                (0,helpers.callPromise)(addPlaceResult, init);
            });
        });
    }
    className() {
        return 'Jodit';
    }
    waitForReady() {
        if (this.isReady) {
            return Promise.resolve(this);
        }
        return this.async.promise(resolve => {
            this.hookStatus('ready', () => resolve(this));
        });
    }
    static get ready() {
        return new Promise(resolve => {
            global/* eventEmitter.on */.TB.on('oditready', resolve);
        });
    }
    get text() {
        if (this.editor) {
            return this.editor.innerText || '';
        }
        const div = this.createInside.div();
        div.innerHTML = this.getElementValue();
        return div.innerText || '';
    }
    get defaultTimeout() {
        return (0,helpers.isNumber)(this.o.defaultTimeout)
            ? this.o.defaultTimeout
            : config/* Config.defaultOptions.defaultTimeout */.D.defaultOptions.defaultTimeout;
    }
    static atom(object) {
        return (0,helpers.markAsAtomic)(object);
    }
    static make(element, options) {
        return new Jodit_1(element, options);
    }
    static isJoditAssigned(element) {
        return (element &&
            (0,helpers.isJoditObject)(element.component) &&
            !element.component.isInDestruct);
    }
    static get defaultOptions() {
        return config/* Config.defaultOptions */.D.defaultOptions;
    }
    setPlaceField(field, value) {
        if (!this.currentPlace) {
            this.currentPlace = {};
            this.places = [this.currentPlace];
        }
        this.currentPlace[field] = value;
    }
    get element() {
        return this.currentPlace.element;
    }
    get editor() {
        return this.currentPlace.editor;
    }
    set editor(editor) {
        this.setPlaceField('editor', editor);
    }
    get container() {
        return this.currentPlace.container;
    }
    set container(container) {
        this.setPlaceField('container', container);
    }
    get workplace() {
        return this.currentPlace.workplace;
    }
    get statusbar() {
        return this.currentPlace.statusbar;
    }
    get iframe() {
        return this.currentPlace.iframe;
    }
    set iframe(iframe) {
        this.setPlaceField('iframe', iframe);
    }
    get history() {
        return this.currentPlace.history;
    }
    get observer() {
        return this.history;
    }
    get editorWindow() {
        return this.currentPlace.editorWindow;
    }
    set editorWindow(win) {
        this.setPlaceField('editorWindow', win);
    }
    get ew() {
        return this.editorWindow;
    }
    get editorDocument() {
        return this.currentPlace.editorWindow.document;
    }
    get ed() {
        return this.editorDocument;
    }
    get options() {
        return this.currentPlace.options;
    }
    set options(opt) {
        this.setPlaceField('options', opt);
    }
    get s() {
        return this.selection;
    }
    get uploader() {
        return this.getInstance('Uploader', this.o.uploader);
    }
    get filebrowser() {
        const jodit = this;
        const options = (0,helpers.ConfigProto)({
            defaultTimeout: jodit.defaultTimeout,
            uploader: jodit.o.uploader,
            language: jodit.o.language,
            license: jodit.o.license,
            theme: jodit.o.theme,
            shadowRoot: jodit.o.shadowRoot,
            defaultCallback(data) {
                if (data.files && data.files.length) {
                    data.files.forEach((file, i) => {
                        const url = data.baseurl + file;
                        const isImage = data.isImages
                            ? data.isImages[i]
                            : false;
                        if (isImage) {
                            jodit.s.insertImage(url, null, jodit.o.imageDefaultWidth);
                        }
                        else {
                            jodit.s.insertNode(jodit.createInside.fromHTML(`<a href='${url}' title='${url}'>${url}</a>`));
                        }
                    });
                }
            }
        }, this.o.filebrowser);
        return jodit.getInstance('FileBrowser', options);
    }
    get mode() {
        return this.__mode;
    }
    set mode(mode) {
        this.setMode(mode);
    }
    getNativeEditorValue() {
        const value = this.e.fire('beforeGetNativeEditorValue');
        if ((0,helpers.isString)(value)) {
            return value;
        }
        if (this.editor) {
            return this.editor.innerHTML;
        }
        return this.getElementValue();
    }
    setNativeEditorValue(value) {
        const data = {
            value
        };
        if (this.e.fire('beforeSetNativeEditorValue', data)) {
            return;
        }
        if (this.editor) {
            this.editor.innerHTML = data.value;
        }
    }
    get value() {
        return this.getEditorValue();
    }
    set value(html) {
        this.setEditorValue(html);
        this.history.processChanges();
    }
    synchronizeValues() {
        this.__imdSynchronizeValues();
    }
    __imdSynchronizeValues() {
        this.setEditorValue();
    }
    getEditorValue(removeSelectionMarkers = true, consumer) {
        let value;
        value = this.e.fire('beforeGetValueFromEditor', consumer);
        if (value !== undefined) {
            return value;
        }
        value = this.getNativeEditorValue().replace(constants.INVISIBLE_SPACE_REG_EXP(), '');
        if (removeSelectionMarkers) {
            value = value.replace(/<span[^>]+id="jodit-selection_marker_[^>]+><\/span>/g, '');
        }
        if (value === '<br>') {
            value = '';
        }
        const new_value = { value };
        this.e.fire('afterGetValueFromEditor', new_value, consumer);
        return new_value.value;
    }
    setEditorValue(value) {
        const newValue = this.e.fire('beforeSetValueToEditor', value);
        if (newValue === false) {
            return;
        }
        if ((0,helpers.isString)(newValue)) {
            value = newValue;
        }
        if (!this.editor) {
            if (value !== undefined) {
                this.__setElementValue(value);
            }
            return;
        }
        if (!(0,helpers.isString)(value) && !(0,helpers.isVoid)(value)) {
            throw (0,helpers.error)('value must be string');
        }
        if (!(0,helpers.isVoid)(value) && this.getNativeEditorValue() !== value) {
            this.setNativeEditorValue(value);
        }
        this.e.fire('postProcessSetEditorValue');
        const old_value = this.getElementValue(), new_value = this.getEditorValue();
        if (!this.isSilentChange &&
            old_value !== new_value &&
            this.__callChangeCount < constants.SAFE_COUNT_CHANGE_CALL) {
            this.__setElementValue(new_value);
            this.__callChangeCount += 1;
            if (false) {}
            try {
                this.history.upTick();
                this.e.fire('change', new_value, old_value);
                this.e.fire(this.history, 'change', new_value, old_value);
            }
            finally {
                this.__callChangeCount = 0;
            }
        }
    }
    updateElementValue() {
        this.__setElementValue(this.getEditorValue());
    }
    getElementValue() {
        return this.element.value !== undefined
            ? this.element.value
            : this.element.innerHTML;
    }
    setElementValue(value) {
        const oldValue = this.getElementValue();
        if (value === undefined || ((0,helpers.isString)(value) && value !== oldValue)) {
            value !== null && value !== void 0 ? value : (value = oldValue);
            if (value !== this.getEditorValue()) {
                this.setEditorValue(value);
            }
        }
        return this.__setElementValue(value);
    }
    __setElementValue(value) {
        if (!(0,helpers.isString)(value)) {
            throw (0,helpers.error)('value must be string');
        }
        if (this.element !== this.container &&
            value !== this.getElementValue()) {
            const data = { value };
            const res = this.e.fire('beforeSetElementValue', data);
            (0,helpers.callPromise)(res, () => {
                if (this.element.value !== undefined) {
                    this.element.value = data.value;
                }
                else {
                    this.element.innerHTML = data.value;
                }
                this.e.fire('afterSetElementValue', data);
            });
        }
    }
    registerCommand(commandNameOriginal, command, options) {
        const commandName = commandNameOriginal.toLowerCase();
        let commands = this.commands.get(commandName);
        if (commands === undefined) {
            commands = [];
            this.commands.set(commandName, commands);
        }
        commands.push(command);
        if (!(0,helpers.isFunction)(command)) {
            const hotkeys = this.o.commandToHotkeys[commandName] ||
                this.o.commandToHotkeys[commandNameOriginal] ||
                command.hotkeys;
            if (hotkeys) {
                this.registerHotkeyToCommand(hotkeys, commandName, options === null || options === void 0 ? void 0 : options.stopPropagation);
            }
        }
        return this;
    }
    registerHotkeyToCommand(hotkeys, commandName, shouldStop = true) {
        const shortcuts = (0,helpers.asArray)(hotkeys)
            .map(helpers.normalizeKeyAliases)
            .map(hotkey => hotkey + '.hotkey')
            .join(' ');
        this.e
            .off(shortcuts)
            .on(shortcuts, (type, stop) => {
            if (stop) {
                stop.shouldStop = shouldStop !== null && shouldStop !== void 0 ? shouldStop : true;
            }
            return this.execCommand(commandName);
        });
    }
    execCommand(command, showUI = false, value = null) {
        if (!this.s.isFocused()) {
            this.s.focus();
        }
        if (this.o.readonly &&
            !this.o.allowCommandsInReadOnly.includes(command)) {
            return;
        }
        let result;
        command = command.toLowerCase();
        result = this.e.fire('beforeCommand', command, showUI, value);
        if (result !== false) {
            result = this.execCustomCommands(command, showUI, value);
        }
        if (result !== false) {
            this.s.focus();
            if (command === 'selectall') {
                this.s.select(this.editor, true);
                this.s.expandSelection();
            }
            else {
                try {
                    result = this.nativeExecCommand(command, showUI, value);
                }
                catch (e) {
                    if (false) {}
                }
            }
        }
        this.e.fire('afterCommand', command, showUI, value);
        this.setEditorValue();
        return result;
    }
    nativeExecCommand(command, showUI = false, value = null) {
        this.isSilentChange = true;
        try {
            return this.ed.execCommand(command, showUI, value);
        }
        finally {
            this.isSilentChange = false;
        }
    }
    execCustomCommands(commandName, second = false, third = null) {
        commandName = commandName.toLowerCase();
        const commands = this.commands.get(commandName);
        if (commands !== undefined) {
            let result;
            commands.forEach((command) => {
                let callback;
                if ((0,helpers.isFunction)(command)) {
                    callback = command;
                }
                else {
                    callback = command.exec;
                }
                const resultCurrent = callback.call(this, commandName, second, third);
                if (resultCurrent !== undefined) {
                    result = resultCurrent;
                }
            });
            return result;
        }
    }
    lock(name = 'any') {
        if (super.lock(name)) {
            this.__selectionLocked = this.s.save();
            this.s.clear();
            this.editor.classList.add('jodit_lock');
            this.e.fire('lock', true);
            return true;
        }
        return false;
    }
    unlock() {
        if (super.unlock()) {
            this.editor.classList.remove('jodit_lock');
            if (this.__selectionLocked) {
                this.s.restore();
            }
            this.e.fire('lock', false);
            return true;
        }
        return false;
    }
    getMode() {
        return this.mode;
    }
    isEditorMode() {
        return this.getRealMode() === constants.MODE_WYSIWYG;
    }
    getRealMode() {
        if (this.getMode() !== constants.MODE_SPLIT) {
            return this.getMode();
        }
        const active = this.od.activeElement;
        if (active &&
            (active === this.iframe ||
                modules.Dom.isOrContains(this.editor, active) ||
                modules.Dom.isOrContains(this.toolbar.container, active))) {
            return constants.MODE_WYSIWYG;
        }
        return constants.MODE_SOURCE;
    }
    setMode(mode) {
        const oldMode = this.getMode();
        const data = {
            mode: parseInt(mode.toString(), 10)
        }, modeClasses = [
            'jodit-wysiwyg_mode',
            'jodit-source__mode',
            'jodit_split_mode'
        ];
        if (this.e.fire('beforeSetMode', data) === false) {
            return;
        }
        this.__mode = [
            constants.MODE_SOURCE,
            constants.MODE_WYSIWYG,
            constants.MODE_SPLIT
        ].includes(data.mode)
            ? data.mode
            : constants.MODE_WYSIWYG;
        if (this.o.saveModeInStorage) {
            this.storage.set('jodit_default_mode', this.mode);
        }
        modeClasses.forEach(className => {
            this.container.classList.remove(className);
        });
        this.container.classList.add(modeClasses[this.mode - 1]);
        if (oldMode !== this.getMode()) {
            this.e.fire('afterSetMode');
        }
    }
    toggleMode() {
        let mode = this.getMode();
        if ([
            constants.MODE_SOURCE,
            constants.MODE_WYSIWYG,
            this.o.useSplitMode ? constants.MODE_SPLIT : 9
        ].includes(mode + 1)) {
            mode += 1;
        }
        else {
            mode = constants.MODE_WYSIWYG;
        }
        this.setMode(mode);
    }
    setDisabled(isDisabled) {
        this.o.disabled = isDisabled;
        const readOnly = this.__wasReadOnly;
        this.setReadOnly(isDisabled || readOnly);
        this.__wasReadOnly = readOnly;
        if (this.editor) {
            this.editor.setAttribute('aria-disabled', isDisabled.toString());
            this.container.classList.toggle('jodit_disabled', isDisabled);
            this.e.fire('disabled', isDisabled);
        }
    }
    getDisabled() {
        return this.o.disabled;
    }
    setReadOnly(isReadOnly) {
        if (this.__wasReadOnly === isReadOnly) {
            return;
        }
        this.__wasReadOnly = isReadOnly;
        this.o.readonly = isReadOnly;
        if (isReadOnly) {
            this.editor && this.editor.removeAttribute('contenteditable');
        }
        else {
            this.editor && this.editor.setAttribute('contenteditable', 'true');
        }
        this.e && this.e.fire('readonly', isReadOnly);
    }
    getReadOnly() {
        return this.o.readonly;
    }
    beforeInitHook() {
    }
    afterInitHook() {
    }
    initOptions(options) {
        this.options = ((0,helpers.ConfigProto)(options || {}, config/* Config.defaultOptions */.D.defaultOptions));
    }
    initOwners() {
        this.editorWindow = this.o.ownerWindow;
        this.ownerWindow = this.o.ownerWindow;
    }
    addPlace(source, options) {
        const element = (0,helpers.resolveElement)(source, this.o.shadowRoot || this.od);
        this.attachEvents(options);
        if (element.attributes) {
            (0,helpers.toArray)(element.attributes).forEach((attr) => {
                const name = attr.name;
                let value = attr.value;
                if (config/* Config.defaultOptions */.D.defaultOptions[name] !== undefined &&
                    (!options || options[name] === undefined)) {
                    if (['readonly', 'disabled'].indexOf(name) !== -1) {
                        value = value === '' || value === 'true';
                    }
                    if (/^[0-9]+(\.)?([0-9]+)?$/.test(value.toString())) {
                        value = Number(value);
                    }
                    this.options[name] = value;
                }
            });
        }
        let container = this.c.div('jodit-container');
        container.classList.add('jodit');
        container.classList.add('jodit-container');
        container.classList.add(`jodit_theme_${this.o.theme || 'default'}`);
        const { styleValues } = this.o;
        Object.keys(styleValues).forEach(key => {
            const property = (0,helpers.kebabCase)(key);
            container.style.setProperty(`--jd-${property}`, styleValues[key]);
        });
        container.setAttribute('contenteditable', 'false');
        let buffer = null;
        if (this.o.inline) {
            if (['TEXTAREA', 'INPUT'].indexOf(element.nodeName) === -1) {
                container = element;
                element.setAttribute(__defaultClassesKey, element.className.toString());
                buffer = container.innerHTML;
                container.innerHTML = '';
            }
            container.classList.add('jodit_inline');
            container.classList.add('jodit-container');
        }
        if (element !== container) {
            if (element.style.display) {
                element.setAttribute(__defaultStyleDisplayKey, element.style.display);
            }
            element.style.display = 'none';
        }
        const workplace = this.c.div('jodit-workplace', {
            contenteditable: false
        });
        container.appendChild(workplace);
        if (element.parentNode && element !== container) {
            element.parentNode.insertBefore(container, element);
        }
        Object.defineProperty(element, 'component', {
            enumerable: false,
            configurable: true,
            value: this
        });
        const editor = this.c.div('jodit-wysiwyg', {
            contenteditable: true,
            'aria-disabled': false,
            tabindex: this.o.tabIndex
        });
        workplace.appendChild(editor);
        const currentPlace = {
            editor,
            element,
            container,
            workplace,
            statusbar: new modules.StatusBar(this, container),
            options: this.isReady
                ? (0,helpers.ConfigProto)(options || {}, config/* Config.defaultOptions */.D.defaultOptions)
                : this.options,
            history: new modules.History(this),
            editorWindow: this.ow
        };
        this.elementToPlace.set(editor, currentPlace);
        this.setCurrentPlace(currentPlace);
        this.places.push(currentPlace);
        this.setNativeEditorValue(this.getElementValue());
        const initResult = this.initEditor(buffer);
        const opt = this.options;
        const init = () => {
            if (opt.enableDragAndDropFileToEditor &&
                opt.uploader &&
                (opt.uploader.url || opt.uploader.insertImageAsBase64URI)) {
                this.uploader.bind(this.editor);
            }
            if (!this.elementToPlace.get(this.editor)) {
                this.elementToPlace.set(this.editor, currentPlace);
            }
            this.e.fire('afterAddPlace', currentPlace);
        };
        return (0,helpers.callPromise)(initResult, init);
    }
    addDisclaimer(elm) {
        this.workplace.appendChild(elm);
    }
    setCurrentPlace(place) {
        if (this.currentPlace === place) {
            return;
        }
        if (!this.isEditorMode()) {
            this.setMode(constants.MODE_WYSIWYG);
        }
        this.currentPlace = place;
        this.buildToolbar();
        if (this.isReady) {
            this.e.fire('changePlace', place);
        }
    }
    initEditor(buffer) {
        const result = this.createEditor();
        return (0,helpers.callPromise)(result, () => {
            if (this.isInDestruct) {
                return;
            }
            if (this.element !== this.container) {
                const value = this.getElementValue();
                if (value !== this.getEditorValue()) {
                    this.setEditorValue(value);
                }
            }
            else {
                buffer != null && this.setEditorValue(buffer);
            }
            let mode = this.o.defaultMode;
            if (this.o.saveModeInStorage) {
                const localMode = this.storage.get('jodit_default_mode');
                if (typeof localMode === 'string') {
                    mode = parseInt(localMode, 10);
                }
            }
            this.setMode(mode);
            if (this.o.readonly) {
                this.__wasReadOnly = false;
                this.setReadOnly(true);
            }
            if (this.o.disabled) {
                this.setDisabled(true);
            }
            try {
                this.ed.execCommand('defaultParagraphSeparator', false, this.o.enter.toLowerCase());
            }
            catch (_a) { }
            try {
                this.ed.execCommand('enableObjectResizing', false, 'false');
            }
            catch (_b) { }
            try {
                this.ed.execCommand('enableInlineTableEditing', false, 'false');
            }
            catch (_c) { }
        });
    }
    createEditor() {
        const defaultEditorArea = this.editor;
        const stayDefault = this.e.fire('createEditor', this);
        return (0,helpers.callPromise)(stayDefault, () => {
            if (this.isInDestruct) {
                return;
            }
            if (stayDefault === false || (0,helpers.isPromise)(stayDefault)) {
                modules.Dom.safeRemove(defaultEditorArea);
            }
            if (this.o.editorCssClass) {
                this.editor.classList.add(this.o.editorCssClass);
            }
            if (this.o.style) {
                (0,helpers.css)(this.editor, this.o.style);
            }
            this.e
                .on('synchro', () => {
                this.setEditorValue();
            })
                .on('focus', () => {
                this.editorIsActive = true;
            })
                .on('blur', () => (this.editorIsActive = false));
            this.prepareWYSIWYGEditor();
            if (this.o.direction) {
                const direction = this.o.direction.toLowerCase() === 'rtl' ? 'rtl' : 'ltr';
                this.container.style.direction = direction;
                this.container.setAttribute('dir', direction);
                this.toolbar.setDirection(direction);
            }
            if (this.o.triggerChangeEvent) {
                this.e.on('change', this.async.debounce(() => {
                    this.e && this.e.fire(this.element, 'change');
                }, this.defaultTimeout));
            }
        });
    }
    prepareWYSIWYGEditor() {
        const { editor } = this;
        if (this.o.direction) {
            const direction = this.o.direction.toLowerCase() === 'rtl' ? 'rtl' : 'ltr';
            this.editor.style.direction = direction;
            this.editor.setAttribute('dir', direction);
        }
        this.e
            .on(editor, 'mousedown touchstart focus', () => {
            const place = this.elementToPlace.get(editor);
            if (place) {
                this.setCurrentPlace(place);
            }
        })
            .on(editor, 'compositionend', this.synchronizeValues)
            .on(editor, 'selectionchange selectionstart keydown keyup input keypress dblclick mousedown mouseup ' +
            'click copy cut dragstart drop dragover paste resize touchstart touchend focus blur', (event) => {
            if (this.o.readonly || this.isSilentChange) {
                return;
            }
            const w = this.ew;
            if (event instanceof w.KeyboardEvent &&
                event.isComposing) {
                return;
            }
            if (this.e && this.e.fire) {
                if (this.e.fire(event.type, event) === false) {
                    return false;
                }
                this.synchronizeValues();
            }
        });
    }
    destruct() {
        if (this.isInDestruct) {
            return;
        }
        this.setStatus(modules.STATUSES.beforeDestruct);
        this.elementToPlace.clear();
        if (!this.editor) {
            return;
        }
        const buffer = this.getEditorValue();
        this.storage.clear();
        this.buffer.clear();
        this.commands.clear();
        this.__selectionLocked = null;
        this.e.off(this.ow, 'resize');
        this.e.off(this.ow);
        this.e.off(this.od);
        this.e.off(this.od.body);
        this.places.forEach(({ container, workplace, statusbar, element, iframe, editor, history }) => {
            if (element !== container) {
                if (element.hasAttribute(__defaultStyleDisplayKey)) {
                    const display = (0,helpers.attr)(element, __defaultStyleDisplayKey);
                    if (display) {
                        element.style.display = display;
                        element.removeAttribute(__defaultStyleDisplayKey);
                    }
                }
                else {
                    element.style.display = '';
                }
            }
            else {
                if (element.hasAttribute(__defaultClassesKey)) {
                    element.className =
                        (0,helpers.attr)(element, __defaultClassesKey) || '';
                    element.removeAttribute(__defaultClassesKey);
                }
            }
            if (element.hasAttribute('style') && !(0,helpers.attr)(element, 'style')) {
                element.removeAttribute('style');
            }
            statusbar.destruct();
            this.e.off(container);
            this.e.off(element);
            this.e.off(editor);
            modules.Dom.safeRemove(workplace);
            modules.Dom.safeRemove(editor);
            if (container !== element) {
                modules.Dom.safeRemove(container);
            }
            Object.defineProperty(element, 'component', {
                enumerable: false,
                configurable: true,
                value: null
            });
            modules.Dom.safeRemove(iframe);
            if (container === element) {
                element.innerHTML = buffer;
            }
            history.destruct();
        });
        this.places.length = 0;
        this.currentPlace = {};
        delete global/* instances */.as[this.id];
        super.destruct();
    }
};
Jodit.fatMode = false;
Jodit.plugins = global/* pluginSystem */.pw;
Jodit.modules = global/* modules */.qz;
Jodit.ns = global/* modules */.qz;
Jodit.decorators = {};
Jodit.constants = constants;
Jodit.instances = global/* instances */.as;
Jodit.lang = constants.lang;
Jodit.core = {
    Plugin: modules.Plugin
};
(0,tslib_es6/* __decorate */.gn)([
    decorators.cache
], Jodit.prototype, "uploader", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.cache
], Jodit.prototype, "filebrowser", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.throttle)()
], Jodit.prototype, "synchronizeValues", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':internalChange')
], Jodit.prototype, "updateElementValue", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], Jodit.prototype, "prepareWYSIWYGEditor", null);
Jodit = Jodit_1 = (0,tslib_es6/* __decorate */.gn)([
    (0,decorators.derive)(traits/* Dlgs */.lf)
], Jodit);


// EXTERNAL MODULE: ./src/core/helpers/checker/index.ts + 7 modules
var checker = __webpack_require__(99160);
;// CONCATENATED MODULE: ./src/langs/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

let exp = {};
if (false) {}
const keys = __webpack_require__(11399);
const get = (value) => value ? value.default || value : {}, hashLang = {};
if ((0,checker/* isArray */.kJ)(get(keys))) {
    get(keys).forEach((key, index) => {
        hashLang[index] = key;
    });
}
Object.keys(exp).forEach((lang) => {
    const list = get(exp[lang]);
    if ((0,checker/* isArray */.kJ)(list)) {
        exp[lang] = {};
        list.forEach((value, index) => {
            exp[lang][hashLang[index]] = value;
        });
    }
    else {
        exp[lang] = list;
    }
});
/* harmony default export */ var langs = (exp);

// EXTERNAL MODULE: ./src/styles/icons/angle-down.svg
var angle_down = __webpack_require__(1755);
// EXTERNAL MODULE: ./src/styles/icons/angle-left.svg
var angle_left = __webpack_require__(74911);
// EXTERNAL MODULE: ./src/styles/icons/angle-right.svg
var angle_right = __webpack_require__(8805);
// EXTERNAL MODULE: ./src/styles/icons/angle-up.svg
var angle_up = __webpack_require__(16547);
// EXTERNAL MODULE: ./src/styles/icons/bin.svg
var bin = __webpack_require__(10856);
// EXTERNAL MODULE: ./src/styles/icons/cancel.svg
var cancel = __webpack_require__(98441);
// EXTERNAL MODULE: ./src/styles/icons/center.svg
var center = __webpack_require__(52488);
// EXTERNAL MODULE: ./src/styles/icons/check.svg
var check = __webpack_require__(9370);
// EXTERNAL MODULE: ./src/styles/icons/chevron.svg
var chevron = __webpack_require__(66543);
// EXTERNAL MODULE: ./src/styles/icons/dots.svg
var dots = __webpack_require__(608);
// EXTERNAL MODULE: ./src/styles/icons/eye.svg
var eye = __webpack_require__(42840);
// EXTERNAL MODULE: ./src/styles/icons/file.svg
var file = __webpack_require__(79096);
// EXTERNAL MODULE: ./src/styles/icons/folder.svg
var folder = __webpack_require__(33014);
// EXTERNAL MODULE: ./src/styles/icons/info-circle.svg
var info_circle = __webpack_require__(91677);
// EXTERNAL MODULE: ./src/styles/icons/left.svg
var left = __webpack_require__(8259);
// EXTERNAL MODULE: ./src/styles/icons/lock.svg
var lock = __webpack_require__(64467);
// EXTERNAL MODULE: ./src/styles/icons/ok.svg
var ok = __webpack_require__(86934);
// EXTERNAL MODULE: ./src/styles/icons/pencil.svg
var pencil = __webpack_require__(76133);
// EXTERNAL MODULE: ./src/styles/icons/plus.svg
var plus = __webpack_require__(45519);
// EXTERNAL MODULE: ./src/styles/icons/resize-handler.svg
var resize_handler = __webpack_require__(90265);
// EXTERNAL MODULE: ./src/styles/icons/right.svg
var right = __webpack_require__(81279);
// EXTERNAL MODULE: ./src/styles/icons/save.svg
var save = __webpack_require__(68899);
// EXTERNAL MODULE: ./src/styles/icons/settings.svg
var settings = __webpack_require__(70744);
// EXTERNAL MODULE: ./src/styles/icons/unlock.svg
var unlock = __webpack_require__(19201);
// EXTERNAL MODULE: ./src/styles/icons/update.svg
var update = __webpack_require__(84930);
// EXTERNAL MODULE: ./src/styles/icons/upload.svg
var upload = __webpack_require__(99704);
// EXTERNAL MODULE: ./src/styles/icons/valign.svg
var valign = __webpack_require__(2304);
;// CONCATENATED MODULE: ./src/styles/icons/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





























// EXTERNAL MODULE: ./src/core/ui/icon.ts
var icon = __webpack_require__(76381);
;// CONCATENATED MODULE: ./src/plugins/about/about.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






config/* Config.prototype.controls.about */.D.prototype.controls.about = {
    exec: (editor) => {
        const dialog = editor.dlg(), i = editor.i18n.bind(editor);
        dialog
            .setMod('theme', editor.o.theme)
            .setHeader(i('About Jodit'))
            .setContent(`<div class="jodit-about">
					<div>${i('Jodit Editor')} v.${editor.getVersion()}</div>
					<div>${i('License: %s', !(0,helpers.isLicense)(editor.o.license)
            ? 'MIT'
            : (0,helpers.normalizeLicense)(editor.o.license))}</div>
					<div>
						<a href="${"https://xdsoft.net/jodit/"}" target="_blank">${"https://xdsoft.net/jodit/"}</a>
					</div>
					<div>
						<a href="https://xdsoft.net/jodit/doc/" target="_blank">${i("Jodit User's Guide")}</a>
						${i('contains detailed help for using')}
					</div>
					<div>${i('Copyright Â© XDSoft.net - Chupurnov Valeriy. All rights reserved.')}</div>
				</div>`);
        (0,helpers.css)(dialog.dialog, {
            minHeight: 200,
            minWidth: 420
        });
        dialog.open(true);
    },
    tooltip: 'About Jodit',
    mode: constants.MODE_SOURCE + constants.MODE_WYSIWYG
};
function about(editor) {
    editor.registerButton({
        name: 'about',
        group: 'info'
    });
}
global/* pluginSystem.add */.pw.add('about', about);
icon/* Icon.set */.J.set('about', __webpack_require__(84279));

// EXTERNAL MODULE: ./src/core/ui/index.ts + 2 modules
var ui = __webpack_require__(41685);
;// CONCATENATED MODULE: ./src/plugins/add-new-line/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


config/* Config.prototype.addNewLine */.D.prototype.addNewLine = true;
config/* Config.prototype.addNewLineOnDBLClick */.D.prototype.addNewLineOnDBLClick = true;
config/* Config.prototype.addNewLineTagsTriggers */.D.prototype.addNewLineTagsTriggers = [
    'table',
    'iframe',
    'img',
    'hr',
    'pre',
    'jodit'
];
config/* Config.prototype.addNewLineDeltaShow */.D.prototype.addNewLineDeltaShow = 20;
ui/* Icon.set */.JO.set('enter', __webpack_require__(11257));

;// CONCATENATED MODULE: ./src/plugins/add-new-line/add-new-line.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







const ns = 'addnewline';
class addNewLine extends modules.Plugin {
    constructor() {
        super(...arguments);
        this.line = this.j.c.fromHTML(`<div role="button" tabindex="-1" title="${this.j.i18n('Break')}" class="jodit-add-new-line"><span>${modules.Icon.get('enter')}</span></div>`);
        this.isMatchedTag = (node) => Boolean(node &&
            this.j.o.addNewLineTagsTriggers.includes(node.nodeName.toLowerCase()));
        this.preview = false;
        this.lineInFocus = false;
        this.isShown = false;
        this.hideForce = () => {
            if (!this.isShown) {
                return;
            }
            this.isShown = false;
            this.j.async.clearTimeout(this.timeout);
            this.lineInFocus = false;
            modules.Dom.safeRemove(this.line);
            this.line.style.setProperty('--jd-offset-handle', '0');
        };
        this.canGetFocus = (elm) => {
            return (elm != null &&
                modules.Dom.isBlock(elm) &&
                !/^(img|table|iframe|hr)$/i.test(elm.nodeName));
        };
        this.onClickLine = (e) => {
            const editor = this.j;
            const p = editor.createInside.element(editor.o.enter);
            if (this.preview && this.current && this.current.parentNode) {
                if (this.current === editor.editor) {
                    modules.Dom.prepend(editor.editor, p);
                }
                else {
                    this.current.parentNode.insertBefore(p, this.current);
                }
            }
            else {
                editor.editor.appendChild(p);
            }
            editor.s.setCursorIn(p);
            (0,helpers.scrollIntoViewIfNeeded)(p, editor.editor, editor.ed);
            editor.e.fire('synchro');
            this.hideForce();
            e.preventDefault();
        };
    }
    show() {
        if (this.isShown || this.j.o.readonly || this.j.isLocked) {
            return;
        }
        this.isShown = true;
        this.j.async.clearTimeout(this.timeout);
        this.line.classList.toggle('jodit-add-new-line_after', !this.preview);
        this.j.container.appendChild(this.line);
        this.line.style.width = this.j.container.clientWidth + 'px';
    }
    onLock(isLocked) {
        if (isLocked && this.isShown) {
            this.hideForce();
        }
    }
    hide() {
        if (!this.isShown || this.lineInFocus) {
            return;
        }
        this.timeout = this.j.async.setTimeout(this.hideForce, {
            timeout: 500,
            label: 'add-new-line-hide'
        });
    }
    afterInit(editor) {
        if (!editor.o.addNewLine) {
            return;
        }
        editor.e
            .on(this.line, 'mousemove', (e) => {
            e.stopPropagation();
        })
            .on(this.line, 'mousedown touchstart', this.onClickLine)
            .on('change', this.hideForce)
            .on(this.line, 'mouseenter', () => {
            this.j.async.clearTimeout(this.timeout);
            this.lineInFocus = true;
        })
            .on(this.line, 'mouseleave', () => {
            this.lineInFocus = false;
        })
            .on('changePlace', this.addEventListeners.bind(this));
        this.addEventListeners();
    }
    addEventListeners() {
        const editor = this.j;
        editor.e
            .off(editor.editor, '.' + ns)
            .off(editor.container, '.' + ns)
            .on([editor.ow, editor.ew, editor.editor], 'scroll' + '.' + ns, this.hideForce)
            .on(editor.editor, 'click' + '.' + ns, this.hide)
            .on(editor.container, 'mouseleave' + '.' + ns, this.hide)
            .on(editor.editor, 'mousemove' + '.' + ns, this.onMouseMove);
    }
    onDblClickEditor(e) {
        const editor = this.j;
        if (!editor.o.readonly &&
            editor.o.addNewLineOnDBLClick &&
            e.target === editor.editor &&
            editor.s.isCollapsed()) {
            const editorBound = (0,helpers.offset)(editor.editor, editor, editor.ed);
            const top = e.pageY - editor.ew.pageYOffset;
            const p = editor.createInside.element(editor.o.enter);
            if (Math.abs(top - editorBound.top) <
                Math.abs(top - (editorBound.height + editorBound.top)) &&
                editor.editor.firstChild) {
                editor.editor.insertBefore(p, editor.editor.firstChild);
            }
            else {
                editor.editor.appendChild(p);
            }
            editor.s.setCursorIn(p);
            editor.synchronizeValues();
            this.hideForce();
            e.preventDefault();
        }
    }
    onMouseMove(e) {
        const editor = this.j;
        let currentElement = editor.ed.elementFromPoint(e.clientX, e.clientY);
        if (!modules.Dom.isHTMLElement(currentElement) ||
            modules.Dom.isOrContains(this.line, currentElement)) {
            return;
        }
        if (!modules.Dom.isOrContains(editor.editor, currentElement)) {
            return;
        }
        if (editor.editor !== currentElement &&
            !this.isMatchedTag(currentElement)) {
            currentElement = modules.Dom.closest(currentElement, this.isMatchedTag, editor.editor);
        }
        if (!currentElement) {
            this.hide();
            return;
        }
        if (this.isMatchedTag(currentElement)) {
            const parentBox = modules.Dom.up(currentElement, modules.Dom.isBlock, editor.editor);
            if (parentBox && parentBox !== editor.editor) {
                currentElement = parentBox;
            }
        }
        const pos = (0,helpers.position)(currentElement, this.j);
        let top = false;
        let { clientY, clientX } = e;
        if (this.j.iframe) {
            const { top, left } = (0,helpers.position)(this.j.iframe, this.j, true);
            clientY += top;
            clientX += left;
        }
        const delta = this.j.o.addNewLineDeltaShow;
        if (Math.abs(clientY - pos.top) <= delta) {
            top = pos.top;
            this.preview = true;
        }
        if (Math.abs(clientY - (pos.top + pos.height)) <= delta) {
            top = pos.top + pos.height;
            this.preview = false;
        }
        if (top !== false &&
            ((editor.editor === currentElement && !this.preview) ||
                !(0,helpers.call)(this.preview ? modules.Dom.prev : modules.Dom.next, currentElement, this.canGetFocus, editor.editor))) {
            this.line.style.top = top + 'px';
            this.current = currentElement;
            this.show();
            this.line.style.setProperty('--jd-offset-handle', clientX - pos.left - 10 + 'px');
        }
        else {
            this.current = false;
            this.hide();
        }
    }
    beforeDestruct() {
        this.j.async.clearTimeout(this.timeout);
        this.j.e.off(this.line).off('changePlace', this.addEventListeners);
        modules.Dom.safeRemove(this.line);
        this.j.e
            .off([this.j.ow, this.j.ew, this.j.editor], '.' + ns)
            .off(this.j.container, '.' + ns);
    }
}
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':lock')
], addNewLine.prototype, "onLock", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], addNewLine.prototype, "hide", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':dblclick')
], addNewLine.prototype, "onDblClickEditor", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.debounce)(ctx => ctx.defaultTimeout * 5)
], addNewLine.prototype, "onMouseMove", null);
global/* pluginSystem.add */.pw.add('addNewLine', addNewLine);

// EXTERNAL MODULE: ./src/core/plugin/index.ts
var core_plugin = __webpack_require__(35570);
// EXTERNAL MODULE: ./src/core/dom/index.ts
var dom = __webpack_require__(94522);
// EXTERNAL MODULE: ./src/core/selection/helpers/index.ts + 2 modules
var selection_helpers = __webpack_require__(91590);
// EXTERNAL MODULE: ./src/core/dom/dom.ts
var dom_dom = __webpack_require__(43887);
// EXTERNAL MODULE: ./src/core/helpers/utils/utils.ts
var utils = __webpack_require__(51976);
;// CONCATENATED MODULE: ./src/plugins/backspace/cases/check-join-two-lists.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function checkJoinTwoLists(jodit, fakeNode, backspace) {
    const next = dom_dom/* Dom.findSibling */.i.findSibling(fakeNode, backspace), prev = dom_dom/* Dom.findSibling */.i.findSibling(fakeNode, !backspace);
    if (!dom_dom/* Dom.closest */.i.closest(fakeNode, dom_dom/* Dom.isElement */.i.isElement, jodit.editor) &&
        dom_dom/* Dom.isTag */.i.isTag(next, ['ul', 'ol']) &&
        dom_dom/* Dom.isTag */.i.isTag(prev, ['ul', 'ol']) &&
        dom_dom/* Dom.isTag */.i.isTag(next.lastElementChild, 'li') &&
        dom_dom/* Dom.isTag */.i.isTag(prev.firstElementChild, 'li')) {
        const { setCursorBefore, setCursorAfter } = jodit.s;
        const target = next.lastElementChild, second = prev.firstElementChild;
        (0,utils/* call */.RE)(!backspace ? dom_dom/* Dom.append */.i.append : dom_dom/* Dom.prepend */.i.prepend, second, fakeNode);
        dom_dom/* Dom.moveContent */.i.moveContent(prev, next, !backspace);
        dom_dom/* Dom.safeRemove */.i.safeRemove(prev);
        (0,utils/* call */.RE)(backspace ? dom_dom/* Dom.append */.i.append : dom_dom/* Dom.prepend */.i.prepend, target, fakeNode);
        (0,utils/* call */.RE)(backspace ? setCursorBefore : setCursorAfter, fakeNode);
        return true;
    }
    return false;
}

;// CONCATENATED MODULE: ./src/plugins/backspace/cases/check-remove-empty-parent.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



function checkRemoveEmptyParent(jodit, fakeNode, backspace) {
    let found = false;
    const { setCursorBefore, setCursorIn } = jodit.s;
    let prn = dom/* Dom.closest */.i.closest(fakeNode, dom/* Dom.isElement */.i.isElement, jodit.editor);
    if (!prn || !dom/* Dom.isEmpty */.i.isEmpty(prn)) {
        return false;
    }
    const neighbor = dom/* Dom.findNotEmptyNeighbor */.i.findNotEmptyNeighbor(fakeNode, backspace, jodit.editor);
    do {
        if (prn && dom/* Dom.isEmpty */.i.isEmpty(prn) && !dom/* Dom.isCell */.i.isCell(prn)) {
            dom/* Dom.after */.i.after(prn, fakeNode);
            const tmp = dom/* Dom.closest */.i.closest(prn, n => dom/* Dom.isElement */.i.isElement(n) && n !== prn, jodit.editor);
            dom/* Dom.safeRemove */.i.safeRemove(prn);
            found = true;
            prn = tmp;
        }
        else {
            break;
        }
    } while (prn);
    if (found && checkJoinTwoLists(jodit, fakeNode, backspace)) {
        return true;
    }
    if (neighbor &&
        !dom/* Dom.isText */.i.isText(neighbor) &&
        !dom/* Dom.isTag */.i.isTag(neighbor, constants.INSEPARABLE_TAGS)) {
        setCursorIn(neighbor, !backspace);
    }
    else {
        setCursorBefore(fakeNode);
    }
    return found;
}

;// CONCATENATED MODULE: ./src/plugins/backspace/cases/check-remove-unbreakable-element.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



function checkRemoveUnbreakableElement(jodit, fakeNode, backspace) {
    const neighbor = dom_dom/* Dom.findSibling */.i.findSibling(fakeNode, backspace);
    if (dom_dom/* Dom.isElement */.i.isElement(neighbor) &&
        (dom_dom/* Dom.isTag */.i.isTag(neighbor, constants.INSEPARABLE_TAGS) || dom_dom/* Dom.isEmpty */.i.isEmpty(neighbor))) {
        dom_dom/* Dom.safeRemove */.i.safeRemove(neighbor);
        if (dom_dom/* Dom.isTag */.i.isTag(neighbor, 'br') &&
            !dom_dom/* Dom.findNotEmptySibling */.i.findNotEmptySibling(fakeNode, false)) {
            dom_dom/* Dom.after */.i.after(fakeNode, jodit.createInside.element('br'));
        }
        jodit.s.setCursorBefore(fakeNode);
        if (dom_dom/* Dom.isTag */.i.isTag(neighbor, 'br')) {
            checkRemoveEmptyParent(jodit, fakeNode, backspace);
        }
        return true;
    }
    return false;
}

;// CONCATENATED MODULE: ./src/plugins/backspace/cases/check-remove-content-not-editable.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



function checkRemoveContentNotEditable(jodit, fakeNode, backspace) {
    let neighbor = dom/* Dom.findSibling */.i.findSibling(fakeNode, backspace);
    if (!neighbor &&
        fakeNode.parentElement &&
        fakeNode.parentElement !== jodit.editor) {
        neighbor = dom/* Dom.findSibling */.i.findSibling(fakeNode.parentElement, backspace);
    }
    if (dom/* Dom.isElement */.i.isElement(neighbor) &&
        !dom/* Dom.isContentEditable */.i.isContentEditable(neighbor, jodit.editor)) {
        (0,helpers.call)(backspace ? dom/* Dom.before */.i.before : dom/* Dom.after */.i.after, neighbor, fakeNode);
        dom/* Dom.safeRemove */.i.safeRemove(neighbor);
        (0,selection_helpers/* moveNodeInsideStart */.F)(jodit, fakeNode, backspace);
        (0,helpers.call)(backspace ? jodit.s.setCursorBefore : jodit.s.setCursorAfter, fakeNode);
        return true;
    }
    return false;
}

;// CONCATENATED MODULE: ./src/plugins/backspace/helpers.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function findMostNestedNeighbor(node, right, root, onlyInlide = false) {
    const nextChild = (node) => right ? node.firstChild : node.lastChild;
    let next = dom/* Dom.findNotEmptyNeighbor */.i.findNotEmptyNeighbor(node, !right, root);
    if (onlyInlide && dom/* Dom.isElement */.i.isElement(next) && !dom/* Dom.isInlineBlock */.i.isInlineBlock(next)) {
        return null;
    }
    if (next) {
        do {
            if (nextChild(next)) {
                next = nextChild(next);
            }
            else {
                return next;
            }
        } while (next);
    }
    return null;
}

;// CONCATENATED MODULE: ./src/plugins/backspace/cases/check-remove-char.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




function checkRemoveChar(jodit, fakeNode, backspace, mode) {
    var _a, _b, _c;
    const step = backspace ? -1 : 1;
    const anotherSibling = dom/* Dom.sibling */.i.sibling(fakeNode, !backspace);
    let sibling = dom/* Dom.sibling */.i.sibling(fakeNode, backspace), removeNeighbor = null;
    let charRemoved = false, removed;
    const getNextInlineSibling = (sibling) => {
        let nextSibling = dom/* Dom.sibling */.i.sibling(sibling, backspace);
        if (!nextSibling &&
            sibling.parentNode &&
            sibling.parentNode !== jodit.editor) {
            nextSibling = findMostNestedNeighbor(sibling, !backspace, jodit.editor, true);
        }
        return nextSibling;
    };
    if (!sibling) {
        sibling = getNextInlineSibling(fakeNode);
    }
    while (sibling && (dom/* Dom.isText */.i.isText(sibling) || dom/* Dom.isInlineBlock */.i.isInlineBlock(sibling))) {
        while (dom/* Dom.isInlineBlock */.i.isInlineBlock(sibling)) {
            sibling = (backspace ? sibling === null || sibling === void 0 ? void 0 : sibling.lastChild : sibling === null || sibling === void 0 ? void 0 : sibling.firstChild);
        }
        if (!sibling) {
            break;
        }
        if ((_a = sibling.nodeValue) === null || _a === void 0 ? void 0 : _a.length) {
            let value = (0,helpers.toArray)(sibling.nodeValue);
            const length = value.length;
            let index = backspace ? length - 1 : 0;
            if (value[index] === constants.INVISIBLE_SPACE) {
                while (value[index] === constants.INVISIBLE_SPACE) {
                    index += step;
                }
            }
            removed = value[index];
            if (value[index + step] === constants.INVISIBLE_SPACE) {
                index += step;
                while (value[index] === constants.INVISIBLE_SPACE) {
                    index += step;
                }
                index += backspace ? 1 : -1;
            }
            if (backspace && index < 0) {
                value = [];
            }
            else {
                value = value.slice(backspace ? 0 : index + 1, backspace ? index : length);
            }
            if (!anotherSibling ||
                !dom/* Dom.isText */.i.isText(anotherSibling) ||
                (!backspace ? / $/ : /^ /).test((_b = anotherSibling.nodeValue) !== null && _b !== void 0 ? _b : '') ||
                !(0,helpers.trimInv)(anotherSibling.nodeValue || '').length) {
                for (let i = backspace ? value.length - 1 : 0; backspace ? i >= 0 : i < value.length; i += backspace ? -1 : 1) {
                    if (value[i] === ' ') {
                        value[i] = constants.NBSP_SPACE;
                    }
                    else {
                        break;
                    }
                }
            }
            sibling.nodeValue = value.join('');
        }
        if (!((_c = sibling.nodeValue) === null || _c === void 0 ? void 0 : _c.length)) {
            removeNeighbor = sibling;
        }
        if (!(0,helpers.isVoid)(removed) && removed !== constants.INVISIBLE_SPACE) {
            charRemoved = true;
            (0,helpers.call)(backspace ? dom/* Dom.after */.i.after : dom/* Dom.before */.i.before, sibling, fakeNode);
            if (mode === 'sentence' ||
                (mode === 'word' && removed !== ' ' && removed !== constants.NBSP_SPACE)) {
                checkRemoveChar(jodit, fakeNode, backspace, mode);
            }
            break;
        }
        const nextSibling = getNextInlineSibling(sibling);
        if (removeNeighbor) {
            dom/* Dom.safeRemove */.i.safeRemove(removeNeighbor);
            removeNeighbor = null;
        }
        sibling = nextSibling;
    }
    if (removeNeighbor) {
        dom/* Dom.safeRemove */.i.safeRemove(removeNeighbor);
        removeNeighbor = null;
    }
    if (charRemoved) {
        removeEmptyInlineParent(fakeNode);
        addBRInsideEmptyBlock(jodit, fakeNode);
        jodit.s.setCursorBefore(fakeNode);
        if (dom/* Dom.isTag */.i.isTag(fakeNode.previousSibling, 'br') &&
            !dom/* Dom.findNotEmptySibling */.i.findNotEmptySibling(fakeNode, false)) {
            dom/* Dom.after */.i.after(fakeNode, jodit.createInside.element('br'));
        }
    }
    return charRemoved;
}
function removeEmptyInlineParent(node) {
    let parent = node.parentElement;
    while (parent && dom/* Dom.isInlineBlock */.i.isInlineBlock(parent)) {
        const p = parent.parentElement;
        if (dom/* Dom.isEmpty */.i.isEmpty(parent)) {
            dom/* Dom.after */.i.after(parent, node);
            dom/* Dom.safeRemove */.i.safeRemove(parent);
        }
        parent = p;
    }
}
function addBRInsideEmptyBlock(jodit, node) {
    if (node.parentElement !== jodit.editor &&
        dom/* Dom.isBlock */.i.isBlock(node.parentElement) &&
        dom/* Dom.each */.i.each(node.parentElement, dom/* Dom.isEmptyTextNode */.i.isEmptyTextNode)) {
        dom/* Dom.after */.i.after(node, jodit.createInside.element('br'));
    }
}

;// CONCATENATED MODULE: ./src/plugins/backspace/cases/check-table-cell.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function checkTableCell(jodit, fakeNode) {
    const cell = fakeNode.parentElement;
    if (dom_dom/* Dom.isCell */.i.isCell(cell)) {
        return true;
    }
    return false;
}

;// CONCATENATED MODULE: ./src/plugins/backspace/cases/check-remove-empty-neighbor.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function checkRemoveEmptyNeighbor(jodit, fakeNode, backspace) {
    const parent = dom_dom/* Dom.closest */.i.closest(fakeNode, dom_dom/* Dom.isElement */.i.isElement, jodit.editor);
    if (!parent) {
        return false;
    }
    const neighbor = dom_dom/* Dom.findNotEmptySibling */.i.findNotEmptySibling(parent, backspace);
    if (neighbor && dom_dom/* Dom.isEmpty */.i.isEmpty(neighbor)) {
        dom_dom/* Dom.safeRemove */.i.safeRemove(neighbor);
        jodit.s.setCursorBefore(fakeNode);
        return true;
    }
    return false;
}

;// CONCATENATED MODULE: ./src/plugins/backspace/cases/check-join-neighbors.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function checkJoinNeighbors(jodit, fakeNode, backspace) {
    let nextBox = fakeNode, mainClosestBox = nextBox;
    while (nextBox &&
        !dom_dom/* Dom.findNotEmptySibling */.i.findNotEmptySibling(nextBox, backspace) &&
        nextBox.parentElement !== jodit.editor) {
        nextBox = nextBox.parentElement;
        mainClosestBox = nextBox;
    }
    if (dom_dom/* Dom.isElement */.i.isElement(mainClosestBox) &&
        dom_dom/* Dom.isContentEditable */.i.isContentEditable(mainClosestBox, jodit.editor)) {
        const sibling = dom_dom/* Dom.findNotEmptySibling */.i.findNotEmptySibling(mainClosestBox, backspace);
        if (sibling &&
            (checkMoveListContent(jodit, mainClosestBox, sibling, backspace) ||
                moveContentAndRemoveEmpty(jodit, mainClosestBox, sibling, backspace))) {
            jodit.s.setCursorBefore(fakeNode);
            return true;
        }
    }
    return false;
}
function checkMoveListContent(jodit, mainClosestBox, sibling, backspace) {
    const siblingIsList = dom_dom/* Dom.isTag */.i.isTag(sibling, ['ol', 'ul']);
    const boxIsList = dom_dom/* Dom.isTag */.i.isTag(mainClosestBox, ['ol', 'ul']);
    const elementChild = (elm, side) => side ? elm.firstElementChild : elm.lastElementChild;
    if (boxIsList) {
        sibling = jodit.createInside.element(jodit.o.enterBlock);
        dom_dom/* Dom.before */.i.before(mainClosestBox, sibling);
        return moveContentAndRemoveEmpty(jodit, elementChild(mainClosestBox, backspace), sibling, backspace);
    }
    if (sibling && siblingIsList && !boxIsList) {
        return moveContentAndRemoveEmpty(jodit, mainClosestBox, elementChild(sibling, !backspace), backspace);
    }
    return false;
}
function moveContentAndRemoveEmpty(jodit, mainClosestBox, sibling, backspace) {
    if (mainClosestBox && dom_dom/* Dom.isElement */.i.isElement(sibling)) {
        dom_dom/* Dom.moveContent */.i.moveContent(mainClosestBox, sibling, !backspace);
        let remove = mainClosestBox;
        while (remove && remove !== jodit.editor && dom_dom/* Dom.isEmpty */.i.isEmpty(remove)) {
            const parent = remove.parentElement;
            dom_dom/* Dom.safeRemove */.i.safeRemove(remove);
            remove = parent;
        }
        return true;
    }
    return false;
}

// EXTERNAL MODULE: ./src/core/helpers/utils/index.ts + 11 modules
var helpers_utils = __webpack_require__(11358);
;// CONCATENATED MODULE: ./src/plugins/backspace/cases/check-unwrap-first-list-item.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function checkUnwrapFirstListItem(jodit, fakeNode, backspace) {
    var _a;
    const li = dom_dom/* Dom.closest */.i.closest(fakeNode, dom_dom/* Dom.isElement */.i.isElement, jodit.editor);
    const { s } = jodit;
    if (dom_dom/* Dom.isTag */.i.isTag(li, 'li') &&
        ((_a = li === null || li === void 0 ? void 0 : li.parentElement) === null || _a === void 0 ? void 0 : _a[backspace ? 'firstElementChild' : 'lastElementChild']) === li &&
        s.cursorInTheEdge(backspace, li)) {
        const ul = li.parentElement;
        const p = jodit.createInside.element(jodit.o.enterBlock);
        (0,helpers_utils/* call */.RE)(backspace ? dom_dom/* Dom.before */.i.before : dom_dom/* Dom.after */.i.after, ul, p);
        dom_dom/* Dom.moveContent */.i.moveContent(li, p);
        dom_dom/* Dom.safeRemove */.i.safeRemove(li);
        if (dom_dom/* Dom.isEmpty */.i.isEmpty(ul)) {
            dom_dom/* Dom.safeRemove */.i.safeRemove(ul);
        }
        (0,helpers_utils/* call */.RE)(backspace ? s.setCursorBefore : s.setCursorAfter, fakeNode);
        return true;
    }
    return false;
}

;// CONCATENATED MODULE: ./src/plugins/backspace/cases/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */









const cases = [
    checkRemoveUnbreakableElement,
    checkRemoveContentNotEditable,
    checkRemoveChar,
    checkTableCell,
    checkRemoveEmptyParent,
    checkRemoveEmptyNeighbor,
    checkJoinTwoLists,
    checkJoinNeighbors,
    checkUnwrapFirstListItem
];

;// CONCATENATED MODULE: ./src/plugins/backspace/cases/check-not-collapsed.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function checkNotCollapsed(jodit) {
    if (!jodit.s.isCollapsed()) {
        jodit.execCommand('Delete');
        return true;
    }
    return false;
}

;// CONCATENATED MODULE: ./src/plugins/backspace/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.delete */.D.prototype["delete"] = {
    hotkeys: {
        delete: ['delete', 'cmd+backspace'],
        deleteWord: ['ctrl+delete', 'cmd+alt+backspace', 'ctrl+alt+backspace'],
        deleteSentence: ['ctrl+shift+delete', 'cmd+shift+delete'],
        backspace: ['backspace'],
        backspaceWord: ['ctrl+backspace'],
        backspaceSentence: ['ctrl+shift+backspace', 'cmd+shift+backspace']
    }
};

;// CONCATENATED MODULE: ./src/plugins/backspace/backspace.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */









class backspace extends core_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.requires = ['hotkeys'];
    }
    afterInit(jodit) {
        jodit.e.on('afterCommand.delete', (command) => {
            if (command === 'delete') {
                this.afterDeleteCommand();
            }
        });
        jodit
            .registerCommand('deleteButton', {
            exec: () => this.onDelete(false),
            hotkeys: jodit.o.delete.hotkeys.delete
        }, {
            stopPropagation: false
        })
            .registerCommand('backspaceButton', {
            exec: () => this.onDelete(true),
            hotkeys: jodit.o.delete.hotkeys.backspace
        }, {
            stopPropagation: false
        })
            .registerCommand('deleteWordButton', {
            exec: () => this.onDelete(false, 'word'),
            hotkeys: jodit.o.delete.hotkeys.deleteWord
        })
            .registerCommand('backspaceWordButton', {
            exec: () => this.onDelete(true, 'word'),
            hotkeys: jodit.o.delete.hotkeys.backspaceWord
        })
            .registerCommand('deleteSentenceButton', {
            exec: () => this.onDelete(false, 'sentence'),
            hotkeys: jodit.o.delete.hotkeys.deleteSentence
        })
            .registerCommand('backspaceSentenceButton', {
            exec: () => this.onDelete(true, 'sentence'),
            hotkeys: jodit.o.delete.hotkeys.backspaceSentence
        });
    }
    beforeDestruct(jodit) {
        jodit.e.off('afterCommand.delete');
    }
    afterDeleteCommand() {
        const jodit = this.j;
        const current = jodit.s.current();
        if (current && dom/* Dom.isTag */.i.isTag(current.firstChild, 'br')) {
            jodit.s.removeNode(current.firstChild);
        }
        if (!(0,helpers.trim)(jodit.editor.textContent || '') &&
            !jodit.editor.querySelector('img,table,jodit,iframe,hr') &&
            (!current || !dom/* Dom.closest */.i.closest(current, 'table', jodit.editor))) {
            jodit.editor.innerHTML = '';
            const node = jodit.s.setCursorIn(jodit.editor);
            jodit.s.removeNode(node);
        }
    }
    onDelete(backspace, mode = 'char') {
        const jodit = this.j;
        const sel = jodit.selection;
        if (!sel.isFocused()) {
            sel.focus();
        }
        if (checkNotCollapsed(jodit)) {
            return false;
        }
        const range = sel.range;
        const fakeNode = jodit.createInside.text(constants.INVISIBLE_SPACE);
        try {
            dom/* Dom.safeInsertNode */.i.safeInsertNode(range, fakeNode);
            if (!dom/* Dom.isOrContains */.i.isOrContains(jodit.editor, fakeNode)) {
                return;
            }
            (0,selection_helpers/* moveNodeInsideStart */.F)(jodit, fakeNode, backspace);
            if (cases.some((func) => {
                if ((0,helpers.isFunction)(func) &&
                    func(jodit, fakeNode, backspace, mode)) {
                    if (false) {}
                    return true;
                }
            })) {
                return false;
            }
        }
        catch (e) {
            if (false) {}
            throw e;
        }
        finally {
            this.safeRemoveEmptyNode(fakeNode);
        }
        return false;
    }
    safeRemoveEmptyNode(fakeNode) {
        var _a, _b;
        const { range } = this.j.s;
        if (range.startContainer === fakeNode) {
            if (fakeNode.previousSibling) {
                if (dom/* Dom.isText */.i.isText(fakeNode.previousSibling)) {
                    range.setStart(fakeNode.previousSibling, (_b = (_a = fakeNode.previousSibling.nodeValue) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0);
                }
                else {
                    range.setStartAfter(fakeNode.previousSibling);
                }
            }
            else if (fakeNode.nextSibling) {
                if (dom/* Dom.isText */.i.isText(fakeNode.nextSibling)) {
                    range.setStart(fakeNode.nextSibling, 0);
                }
                else {
                    range.setStartBefore(fakeNode.nextSibling);
                }
            }
            range.collapse(true);
            this.j.s.selectRange(range);
        }
        dom/* Dom.safeRemove */.i.safeRemove(fakeNode);
    }
}
global/* pluginSystem.add */.pw.add('backspace', backspace);

;// CONCATENATED MODULE: ./src/plugins/bold/bold.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




config/* Config.prototype.controls.subscript */.D.prototype.controls.subscript = {
    tags: ['sub'],
    tooltip: 'subscript'
};
config/* Config.prototype.controls.superscript */.D.prototype.controls.superscript = {
    tags: ['sup'],
    tooltip: 'superscript'
};
config/* Config.prototype.controls.bold */.D.prototype.controls.bold = {
    tagRegExp: /^(strong|b)$/i,
    tags: ['strong', 'b'],
    css: {
        'font-weight': ['bold', '700']
    },
    tooltip: 'Bold'
};
config/* Config.prototype.controls.italic */.D.prototype.controls.italic = {
    tagRegExp: /^(em|i)$/i,
    tags: ['em', 'i'],
    css: {
        'font-style': 'italic'
    },
    tooltip: 'Italic'
};
config/* Config.prototype.controls.underline */.D.prototype.controls.underline = {
    tagRegExp: /^(u)$/i,
    tags: ['u'],
    css: {
        'text-decoration-line': 'underline'
    },
    tooltip: 'Underline'
};
config/* Config.prototype.controls.strikethrough */.D.prototype.controls.strikethrough = {
    tagRegExp: /^(s)$/i,
    tags: ['s'],
    css: {
        'text-decoration-line': 'line-through'
    },
    tooltip: 'Strike through'
};
function bold(editor) {
    const callBack = (command) => {
        const control = config/* Config.defaultOptions.controls */.D.defaultOptions.controls[command], cssOptions = {
            ...control.css
        }, cssRules = {};
        Object.keys(cssOptions).forEach((key) => {
            cssRules[key] = (0,helpers.isArray)(cssOptions[key])
                ? cssOptions[key][0]
                : cssOptions[key];
        });
        editor.s.applyStyle(cssRules, {
            element: control.tags ? control.tags[0] : undefined
        });
        editor.e.fire('synchro');
        return false;
    };
    ['bold', 'italic', 'underline', 'strikethrough'].forEach(name => {
        editor.registerButton({
            name,
            group: 'font-style'
        });
    });
    ['superscript', 'subscript'].forEach(name => {
        editor.registerButton({
            name,
            group: 'script'
        });
    });
    editor
        .registerCommand('bold', {
        exec: callBack,
        hotkeys: ['ctrl+b', 'cmd+b']
    })
        .registerCommand('italic', {
        exec: callBack,
        hotkeys: ['ctrl+i', 'cmd+i']
    })
        .registerCommand('underline', {
        exec: callBack,
        hotkeys: ['ctrl+u', 'cmd+u']
    })
        .registerCommand('strikethrough', {
        exec: callBack
    });
}
global/* pluginSystem.add */.pw.add('bold', bold);
icon/* Icon.set */.J.set('bold', __webpack_require__(25141))
    .set('italic', __webpack_require__(24557))
    .set('strikethrough', __webpack_require__(10859))
    .set('subscript', __webpack_require__(9813))
    .set('superscript', __webpack_require__(93395))
    .set('underline', __webpack_require__(98213));

;// CONCATENATED MODULE: ./src/plugins/class-span/class-span.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






config/* Config.prototype.controls.classSpan */.D.prototype.controls.classSpan = {
    command: 'applyClassName',
    exec: helpers.memorizeExec,
    list: [
        'enabled',
        'disabled',
        'activated',
        'text-left',
        'text-center',
        'text-right',
        'warning',
        'error'
    ],
    isChildActive: (editor, control) => {
        const current = editor.s.current();
        if (current) {
            const currentBpx = dom/* Dom.closest */.i.closest(current, dom/* Dom.isElement */.i.isElement, editor.editor) || editor.editor;
            return Boolean(control.args &&
                currentBpx.classList.contains(control.args[0].toString()));
        }
        return false;
    },
    isActive: (editor, control) => {
        const current = editor.s.current();
        if (current) {
            const currentBpx = dom/* Dom.closest */.i.closest(current, dom/* Dom.isElement */.i.isElement, editor.editor) || editor.editor;
            let present = false;
            control.list &&
                Object.keys(control.list).forEach((className) => {
                    if (currentBpx.classList.contains(className)) {
                        present = true;
                    }
                });
            return Boolean(currentBpx &&
                currentBpx !== editor.editor &&
                control.list !== undefined &&
                present);
        }
        return false;
    },
    childTemplate: (e, key, value) => `<span class="${key}">${e.i18n(value)}</span>`,
    tooltip: 'Insert className'
};
class classSpan extends core_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.buttons = [
            {
                name: 'classSpan',
                group: 'font'
            }
        ];
    }
    afterInit(jodit) {
        jodit.registerCommand('applyClassName', (command, second, third) => {
            jodit.s.applyStyle(undefined, {
                className: third
            });
            return false;
        });
    }
    beforeDestruct() { }
}
global/* pluginSystem.add */.pw.add('classSpan', classSpan);
ui/* Icon.set */.JO.set('class-span', __webpack_require__(20026));

// EXTERNAL MODULE: ./src/core/helpers/html/safe-html.ts
var safe_html = __webpack_require__(64829);
// EXTERNAL MODULE: ./src/core/plugin/plugin.ts
var plugin_plugin = __webpack_require__(73177);
// EXTERNAL MODULE: ./src/core/dom/lazy-walker.ts
var lazy_walker = __webpack_require__(74601);
// EXTERNAL MODULE: ./src/core/helpers/string/trim.ts
var trim = __webpack_require__(50106);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-string.ts
var is_string = __webpack_require__(40607);
;// CONCATENATED MODULE: ./src/plugins/clean-html/helpers/get-hash.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function getHash(tags) {
    const attributesReg = /([^[]*)\[([^\]]+)]/;
    const separator = /[\s]*,[\s]*/, attrReg = /^(.*)[\s]*=[\s]*(.*)$/;
    const tagsHash = {};
    if ((0,is_string/* isString */.H)(tags)) {
        tags.split(separator).map((elm) => {
            elm = (0,trim/* trim */.f)(elm);
            const attr = attributesReg.exec(elm), allowAttributes = {}, attributeMap = (attrName) => {
                attrName = (0,trim/* trim */.f)(attrName);
                const val = attrReg.exec(attrName);
                if (val) {
                    allowAttributes[val[1]] = val[2];
                }
                else {
                    allowAttributes[attrName] = true;
                }
            };
            if (attr) {
                const attr2 = attr[2].split(separator);
                if (attr[1]) {
                    attr2.forEach(attributeMap);
                    tagsHash[attr[1].toUpperCase()] = allowAttributes;
                }
            }
            else {
                tagsHash[elm.toUpperCase()] = true;
            }
        });
        return tagsHash;
    }
    if (tags) {
        Object.keys(tags).forEach(tagName => {
            tagsHash[tagName.toUpperCase()] = tags[tagName];
        });
        return tagsHash;
    }
    return false;
}

;// CONCATENATED MODULE: ./src/plugins/clean-html/helpers/remove-format/remove-format-for-collapsed-selection.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function removeFormatForCollapsedSelection(jodit, fake) {
    const { s } = jodit;
    let fakeNode = fake;
    if (!fakeNode) {
        fakeNode = jodit.createInside.fake();
        const { range } = s;
        dom_dom/* Dom.safeInsertNode */.i.safeInsertNode(range, fakeNode);
        range.collapse();
    }
    const mainInline = dom_dom/* Dom.furthest */.i.furthest(fakeNode, isInlineBlock, jodit.editor);
    if (mainInline) {
        if (s.cursorOnTheLeft(mainInline)) {
            dom_dom/* Dom.before */.i.before(mainInline, fakeNode);
        }
        else if (s.cursorOnTheRight(mainInline)) {
            dom_dom/* Dom.after */.i.after(mainInline, fakeNode);
        }
        else {
            const leftHand = s.splitSelection(mainInline);
            leftHand && dom_dom/* Dom.after */.i.after(leftHand, fakeNode);
        }
    }
    if (!fake) {
        s.setCursorBefore(fakeNode);
        dom_dom/* Dom.safeRemove */.i.safeRemove(fakeNode);
    }
}
function isInlineBlock(node) {
    return dom_dom/* Dom.isInlineBlock */.i.isInlineBlock(node) && !dom_dom/* Dom.isTag */.i.isTag(node, constants.INSEPARABLE_TAGS);
}

;// CONCATENATED MODULE: ./src/plugins/clean-html/helpers/remove-format/remove-format-for-selection.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



function removeFormatForSelection(jodit) {
    const { s, editor, createInside } = jodit, { range } = s, left = range.cloneRange(), right = range.cloneRange(), fakeLeft = createInside.fake(), fakeRight = createInside.fake();
    left.collapse(true);
    right.collapse(false);
    dom_dom/* Dom.safeInsertNode */.i.safeInsertNode(left, fakeLeft);
    dom_dom/* Dom.safeInsertNode */.i.safeInsertNode(right, fakeRight);
    range.setStartBefore(fakeLeft);
    range.collapse(true);
    s.selectRange(range);
    removeFormatForCollapsedSelection(jodit, fakeLeft);
    range.setEndAfter(fakeRight);
    range.collapse(false);
    s.selectRange(range);
    removeFormatForCollapsedSelection(jodit, fakeRight);
    const shouldUnwrap = [];
    dom_dom/* Dom.between */.i.between(fakeLeft, fakeRight, node => {
        if (isInlineBlock(node) && !dom_dom/* Dom.isTag */.i.isTag(node, ['a'])) {
            shouldUnwrap.push(node);
        }
        if (dom_dom/* Dom.isElement */.i.isElement(node) && (0,helpers_utils/* attr */.Lj)(node, 'style')) {
            (0,helpers_utils/* attr */.Lj)(node, 'style', null);
        }
    });
    shouldUnwrap.forEach(node => dom_dom/* Dom.unwrap */.i.unwrap(node));
    const clearParent = (node, left) => {
        if (!dom_dom/* Dom.findNotEmptySibling */.i.findNotEmptySibling(node, left)) {
            const pn = node.parentNode;
            if (pn && pn !== editor && (0,helpers_utils/* attr */.Lj)(pn, 'style')) {
                (0,helpers_utils/* attr */.Lj)(pn, 'style', null);
                clearParent(pn, left);
                return true;
            }
        }
    };
    clearParent(fakeLeft, true) && clearParent(fakeRight, false);
    range.setStartAfter(fakeLeft);
    range.setEndBefore(fakeRight);
    s.selectRange(range);
    dom_dom/* Dom.safeRemove */.i.safeRemove(fakeLeft);
    dom_dom/* Dom.safeRemove */.i.safeRemove(fakeRight);
}

;// CONCATENATED MODULE: ./src/plugins/clean-html/helpers/visitor/filters/replace-old-tags.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function replaceOldTags(jodit, nodeElm, hadEffect) {
    const newNodeElm = replaceIfMatched(jodit, nodeElm, jodit.o.cleanHTML.replaceOldTags);
    if (nodeElm !== newNodeElm) {
        nodeElm = newNodeElm;
        return true;
    }
    return hadEffect;
}
function replaceIfMatched(jodit, oldParent, list) {
    if (!list || !dom_dom/* Dom.isHTMLElement */.i.isHTMLElement(oldParent)) {
        return oldParent;
    }
    const tagName = list[oldParent.nodeName.toLowerCase()] || list[oldParent.nodeName];
    if (tagName) {
        return dom_dom/* Dom.replace */.i.replace(oldParent, tagName, jodit.createInside, true, false);
    }
    return oldParent;
}

;// CONCATENATED MODULE: ./src/plugins/clean-html/helpers/visitor/filters/allow-attributes.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function allowAttributes(jodit, nodeElm, hadEffect, allow) {
    if (allow && dom_dom/* Dom.isElement */.i.isElement(nodeElm) && allow[nodeElm.nodeName] !== true) {
        const attrs = nodeElm.attributes;
        if (attrs && attrs.length) {
            const removeAttrs = [];
            for (let i = 0; i < attrs.length; i += 1) {
                const attr = allow[nodeElm.nodeName][attrs[i].name];
                if (!attr || (attr !== true && attr !== attrs[i].value)) {
                    removeAttrs.push(attrs[i].name);
                }
            }
            if (removeAttrs.length) {
                hadEffect = true;
            }
            removeAttrs.forEach(attr => {
                nodeElm.removeAttribute(attr);
            });
        }
    }
    return hadEffect;
}

;// CONCATENATED MODULE: ./src/plugins/clean-html/helpers/visitor/filters/fill-empty-paragraph.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function fillEmptyParagraph(jodit, nodeElm, hadEffect) {
    if (jodit.o.cleanHTML.fillEmptyParagraph &&
        dom_dom/* Dom.isBlock */.i.isBlock(nodeElm) &&
        dom_dom/* Dom.isEmpty */.i.isEmpty(nodeElm, /^(img|svg|canvas|input|textarea|form|br)$/)) {
        const br = jodit.createInside.element('br');
        nodeElm.appendChild(br);
        return true;
    }
    return hadEffect;
}

;// CONCATENATED MODULE: ./src/plugins/clean-html/helpers/visitor/filters/try-remove-node.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



function tryRemoveNode(jodit, nodeElm, hadEffect, allowTags, denyTags, currentSelectionNode) {
    if (isRemovableNode(jodit, nodeElm, currentSelectionNode, allowTags, denyTags)) {
        dom_dom/* Dom.safeRemove */.i.safeRemove(nodeElm);
        return true;
    }
    return hadEffect;
}
function isRemovableNode(jodit, node, current, allow, deny) {
    if (!dom_dom/* Dom.isText */.i.isText(node) &&
        ((allow && !allow[node.nodeName]) || (deny && deny[node.nodeName]))) {
        return true;
    }
    return (jodit.o.cleanHTML.removeEmptyElements &&
        dom_dom/* Dom.isElement */.i.isElement(node) &&
        node.nodeName.match(constants.IS_INLINE) != null &&
        !dom_dom/* Dom.isTemporary */.i.isTemporary(node) &&
        (0,trim/* trim */.f)(node.innerHTML).length === 0 &&
        (current == null || !dom_dom/* Dom.isOrContains */.i.isOrContains(node, current)));
}

;// CONCATENATED MODULE: ./src/plugins/clean-html/helpers/visitor/filters/remove-empty-text-node.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function removeEmptyTextNode(jodit, node, hadEffect, arg, argi, currentNode) {
    if (dom_dom/* Dom.isText */.i.isText(node) && !node.nodeValue) {
        if (node === currentNode && jodit.s.isCollapsed()) {
            jodit.s.setCursorAfter(node);
        }
        dom_dom/* Dom.safeRemove */.i.safeRemove(node);
        return true;
    }
    return hadEffect;
}

;// CONCATENATED MODULE: ./src/plugins/clean-html/helpers/visitor/filters/remove-inv-text-nodes.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function removeInvTextNodes(jodit, node, hadEffect, arg, argi, currentNode) {
    if (!dom_dom/* Dom.isText */.i.isText(node) || node.nodeValue == null) {
        return hadEffect;
    }
    if ((0,constants.INVISIBLE_SPACE_REG_EXP)().test(node.nodeValue)) {
        node.nodeValue = node.nodeValue.replace((0,constants.INVISIBLE_SPACE_REG_EXP)(), '');
        if (node === currentNode && jodit.s.isCollapsed()) {
            jodit.s.setCursorAfter(node);
        }
        if (!node.nodeValue) {
            dom_dom/* Dom.safeRemove */.i.safeRemove(node);
        }
        return true;
    }
    return hadEffect;
}

;// CONCATENATED MODULE: ./src/plugins/clean-html/helpers/visitor/filters/sanitize-attributes.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function sanitizeAttributes(jodit, nodeElm, hadEffect) {
    if (dom_dom/* Dom.isElement */.i.isElement(nodeElm) &&
        (0,helpers.sanitizeHTMLElement)(nodeElm, {
            safeJavaScriptLink: jodit.options.cleanHTML.safeJavaScriptLink,
            removeOnError: jodit.options.cleanHTML.removeOnError
        })) {
        return true;
    }
    return hadEffect;
}

;// CONCATENATED MODULE: ./src/plugins/clean-html/helpers/visitor/filters/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */








;// CONCATENATED MODULE: ./src/plugins/clean-html/helpers/visitor/visit-node-walker.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

const visit_node_walker_keys = Object.keys(filters_namespaceObject);
function visitNodeWalker(jodit, nodeElm, allowTags, denyTags, currentSelectionNode) {
    let hadEffect = false;
    const dcf = jodit.o.cleanHTML.disableCleanFilter;
    for (const key of visit_node_walker_keys) {
        if (dcf && dcf.has(key)) {
            continue;
        }
        const filter = filters_namespaceObject[key];
        const tmp = hadEffect;
        hadEffect = filter(jodit, nodeElm, hadEffect, allowTags, denyTags, currentSelectionNode);
        if (false) {}
        if (!nodeElm.isConnected) {
            return true;
        }
    }
    return hadEffect;
}

;// CONCATENATED MODULE: ./src/plugins/clean-html/helpers/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





;// CONCATENATED MODULE: ./src/plugins/clean-html/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


config/* Config.prototype.cleanHTML */.D.prototype.cleanHTML = {
    timeout: 300,
    removeEmptyElements: true,
    fillEmptyParagraph: true,
    replaceNBSP: true,
    replaceOldTags: {
        i: 'em',
        b: 'strong'
    },
    allowTags: false,
    denyTags: false,
    useIframeSandbox: false,
    removeOnError: true,
    safeJavaScriptLink: true,
    disableCleanFilter: null
};
config/* Config.prototype.controls.eraser */.D.prototype.controls.eraser = {
    command: 'removeFormat',
    tooltip: 'Clear Formatting'
};
icon/* Icon.set */.J.set('eraser', __webpack_require__(66911));

;// CONCATENATED MODULE: ./src/plugins/clean-html/clean-html.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */









class cleanHtml extends plugin_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.buttons = [
            {
                name: 'eraser',
                group: 'font-style'
            }
        ];
        this.currentSelectionNode = null;
        this.walker = new lazy_walker/* LazyWalker */.b(this.j.async, {
            timeout: this.j.o.cleanHTML.timeout
        });
    }
    afterInit(jodit) { }
    get isEditMode() {
        return !(this.j.isInDestruct ||
            !this.j.isEditorMode() ||
            this.j.getReadOnly());
    }
    onChangeCleanHTML() {
        if (!this.isEditMode) {
            return;
        }
        const editor = this.j;
        this.walker.setWork(editor.editor);
        this.currentSelectionNode = editor.s.current();
    }
    startWalker() {
        const { jodit } = this;
        const allow = getHash(this.j.o.cleanHTML.allowTags);
        const deny = getHash(this.j.o.cleanHTML.denyTags);
        this.walker
            .on('visit', (node) => visitNodeWalker(jodit, node, allow, deny, this.currentSelectionNode))
            .on('end', (affected) => {
            this.j.e.fire(affected
                ? 'internalChange finishedCleanHTMLWorker'
                : 'finishedCleanHTMLWorker');
        });
    }
    beforeCommand(command) {
        if (command.toLowerCase() === 'removeformat') {
            if (this.j.s.isCollapsed()) {
                removeFormatForCollapsedSelection(this.j);
            }
            else {
                removeFormatForSelection(this.j);
            }
            return false;
        }
    }
    onBeforeSetNativeEditorValue(data) {
        const sandBox = this.j.o.cleanHTML.useIframeSandbox
            ? this.j.createInside.sandbox()
            : this.j.createInside.div();
        sandBox.innerHTML = data.value;
        this.onSafeHTML(sandBox);
        data.value = sandBox.innerHTML;
        (0,safe_html/* safeHTML */.e)(sandBox, { safeJavaScriptLink: true, removeOnError: true });
        dom_dom/* Dom.safeRemove */.i.safeRemove(sandBox);
        return false;
    }
    onSafeHTML(sandBox) {
        (0,safe_html/* safeHTML */.e)(sandBox, this.j.o.cleanHTML);
    }
    beforeDestruct() {
        this.walker.destruct();
    }
}
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)([':change', ':afterSetMode', ':afterInit', ':mousedown', ':keydown'])
], cleanHtml.prototype, "onChangeCleanHTML", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.hook)('ready')
], cleanHtml.prototype, "startWalker", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':beforeCommand')
], cleanHtml.prototype, "beforeCommand", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':beforeSetNativeEditorValue')
], cleanHtml.prototype, "onBeforeSetNativeEditorValue", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':safeHTML')
], cleanHtml.prototype, "onSafeHTML", null);
global/* pluginSystem.add */.pw.add('cleanHtml', cleanHtml);

;// CONCATENATED MODULE: ./src/plugins/clipboard/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


config/* Config.prototype.controls.cut */.D.prototype.controls.cut = {
    command: 'cut',
    isDisabled: (editor) => editor.s.isCollapsed(),
    tooltip: 'Cut selection'
};
config/* Config.prototype.controls.copy */.D.prototype.controls.copy = {
    command: 'copy',
    isDisabled: (editor) => editor.s.isCollapsed(),
    tooltip: 'Copy selection'
};
config/* Config.prototype.controls.selectall */.D.prototype.controls.selectall = {
    icon: 'select-all',
    command: 'selectall',
    tooltip: 'Select all'
};
icon/* Icon.set */.J.set('copy', __webpack_require__(50018))
    .set('cut', __webpack_require__(99738))
    .set('paste', __webpack_require__(9185))
    .set('select-all', __webpack_require__(8619));

;// CONCATENATED MODULE: ./src/plugins/clipboard/clipboard.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




class clipboard {
    constructor() {
        this.buttons = [
            {
                name: 'cut',
                group: 'clipboard'
            },
            {
                name: 'copy',
                group: 'clipboard'
            },
            {
                name: 'paste',
                group: 'clipboard'
            },
            {
                name: 'selectall',
                group: 'clipboard'
            }
        ];
    }
    init(editor) {
        var _a;
        (_a = this.buttons) === null || _a === void 0 ? void 0 : _a.forEach(btn => editor.registerButton(btn));
        editor.e
            .off(`copy.${constants.CLIPBOARD_ID} cut.${constants.CLIPBOARD_ID}`)
            .on(`copy.${constants.CLIPBOARD_ID} cut.${constants.CLIPBOARD_ID}`, (event) => {
            var _a;
            const selectedText = editor.s.html;
            const clipboardData = (0,helpers.getDataTransfer)(event) ||
                (0,helpers.getDataTransfer)(editor.ew) ||
                (0,helpers.getDataTransfer)(event.originalEvent);
            if (clipboardData) {
                clipboardData.setData(constants.TEXT_PLAIN, (0,helpers.stripTags)(selectedText));
                clipboardData.setData(constants.TEXT_HTML, selectedText);
            }
            editor.buffer.set(constants.CLIPBOARD_ID, selectedText);
            editor.e.fire('pasteStack', {
                html: selectedText,
                action: editor.o.defaultActionOnPaste ||
                    constants.INSERT_AS_HTML
            });
            if (event.type === 'cut') {
                editor.s.remove();
                editor.s.focus();
            }
            event.preventDefault();
            (_a = editor === null || editor === void 0 ? void 0 : editor.events) === null || _a === void 0 ? void 0 : _a.fire('afterCopy', selectedText);
        });
    }
    destruct(editor) {
        var _a, _b;
        (_a = editor === null || editor === void 0 ? void 0 : editor.buffer) === null || _a === void 0 ? void 0 : _a.set(constants.CLIPBOARD_ID, '');
        (_b = editor === null || editor === void 0 ? void 0 : editor.events) === null || _b === void 0 ? void 0 : _b.off('.' + constants.CLIPBOARD_ID);
    }
}
global/* pluginSystem.add */.pw.add('clipboard', clipboard);

// EXTERNAL MODULE: ./src/modules/widget/index.ts + 3 modules
var widget = __webpack_require__(60537);
;// CONCATENATED MODULE: ./src/plugins/color/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





icon/* Icon.set */.J.set('brush', __webpack_require__(73894));
config/* Config.prototype.controls.brush */.D.prototype.controls.brush = {
    update(button, editor) {
        const color = (0,helpers.dataBind)(button, 'color');
        const update = (key, value) => {
            if (value && value !== (0,helpers.css)(editor.editor, key).toString()) {
                button.state.icon.fill = value;
                return;
            }
        };
        if (color) {
            const mode = (0,helpers.dataBind)(button, 'color');
            update(mode === 'color' ? mode : 'background-color', color);
            return;
        }
        const current = editor.s.current();
        if (current && !button.state.disabled) {
            const currentBpx = dom_dom/* Dom.closest */.i.closest(current, dom_dom/* Dom.isElement */.i.isElement, editor.editor) || editor.editor;
            update('color', (0,helpers.css)(currentBpx, 'color').toString());
            update('background-color', (0,helpers.css)(currentBpx, 'background-color').toString());
        }
        button.state.icon.fill = '';
        button.state.activated = false;
    },
    popup: (editor, current, self, close, button) => {
        let colorHEX = '', currentElement = null;
        if (current && current !== editor.editor && dom_dom/* Dom.isNode */.i.isNode(current)) {
            if (dom_dom/* Dom.isElement */.i.isElement(current) &&
                editor.s.isCollapsed() &&
                !dom_dom/* Dom.isTag */.i.isTag(current, ['br', 'hr'])) {
                currentElement = current;
            }
            dom_dom/* Dom.up */.i.up(current, (node) => {
                if (dom_dom/* Dom.isHTMLElement */.i.isHTMLElement(node)) {
                    const color = (0,helpers.css)(node, 'color', true);
                    if (color) {
                        colorHEX = color.toString();
                        return true;
                    }
                }
            }, editor.editor);
        }
        const colorTab = (0,widget/* ColorPickerWidget */.YW)(editor, (value) => {
            if (!currentElement) {
                editor.execCommand('forecolor', false, value);
            }
            else {
                currentElement.style.color = value;
            }
            (0,helpers.dataBind)(button, 'color', value);
            (0,helpers.dataBind)(button, 'color-mode', 'color');
            close();
        }, colorHEX);
        return colorTab;
    },
    exec(jodit, current, { button }) {
        const mode = (0,helpers.dataBind)(button, 'color-mode'), color = (0,helpers.dataBind)(button, 'color');
        if (!mode) {
            return false;
        }
        if (current &&
            current !== jodit.editor &&
            dom_dom/* Dom.isNode */.i.isNode(current) &&
            dom_dom/* Dom.isElement */.i.isElement(current)) {
            switch (mode) {
                case 'color':
                    current.style.color = color;
                    break;
                case 'background':
                    current.style.backgroundColor = color;
                    break;
            }
        }
        else {
            jodit.execCommand(mode === 'background' ? mode : 'forecolor', false, color);
        }
    },
    tooltip: 'Fill color or set the text color'
};

;// CONCATENATED MODULE: ./src/plugins/color/color.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



function color(editor) {
    editor.registerButton({
        name: 'brush',
        group: 'color'
    });
    const callback = (command, second, third) => {
        const colorHEX = (0,helpers.normalizeColor)(third);
        switch (command) {
            case 'forecolor':
                editor.s.applyStyle({
                    color: !colorHEX ? '' : colorHEX
                });
                break;
        }
        editor.synchronizeValues();
        return false;
    };
    editor.registerCommand('forecolor', callback);
}
global/* pluginSystem.add */.pw.add('color', color);

// EXTERNAL MODULE: ./src/core/helpers/utils/css.ts
var css = __webpack_require__(56672);
;// CONCATENATED MODULE: ./src/plugins/copy-format/copy-format.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





const pluginKey = 'copy-format';
const copyStyles = [
    'fontWeight',
    'fontStyle',
    'fontSize',
    'color',
    'margin',
    'padding',
    'borderWidth',
    'borderStyle',
    'borderColor',
    'borderRadius',
    'backgroundColor',
    'textDecorationLine',
    'fontFamily'
];
const getStyle = (editor, key, box, defaultStyles) => {
    let result = (0,css/* css */.i)(box, key);
    if (result === defaultStyles[key]) {
        if (box.parentNode &&
            box !== editor.editor &&
            box.parentNode !== editor.editor) {
            result = getStyle(editor, key, box.parentNode, defaultStyles);
        }
        else {
            result = undefined;
        }
    }
    return result;
};
const getStyles = (editor, box, defaultStyles) => {
    const result = {};
    if (box) {
        copyStyles.forEach((key) => {
            result[key] = getStyle(editor, key, box, defaultStyles);
            if (key.match(/border(Style|Color)/) && !result.borderWidth) {
                result[key] = undefined;
            }
        });
    }
    return result;
};
config/* Config.prototype.controls.copyformat */.D.prototype.controls.copyformat = {
    exec: (editor, current, { button }) => {
        if (!current) {
            return;
        }
        if (editor.buffer.exists(pluginKey)) {
            editor.buffer.delete(pluginKey);
            editor.e.off(editor.editor, 'mouseup.' + pluginKey);
        }
        else {
            const defaultStyles = {}, box = dom_dom/* Dom.up */.i.up(current, (elm) => elm && !dom_dom/* Dom.isText */.i.isText(elm), editor.editor) || editor.editor;
            const ideal = editor.createInside.span();
            editor.editor.appendChild(ideal);
            copyStyles.forEach((key) => {
                defaultStyles[key] = (0,css/* css */.i)(ideal, key);
            });
            if (ideal !== editor.editor) {
                dom_dom/* Dom.safeRemove */.i.safeRemove(ideal);
            }
            const format = getStyles(editor, box, defaultStyles);
            const onMouseUp = () => {
                editor.buffer.delete(pluginKey);
                const currentNode = editor.s.current();
                if (currentNode) {
                    if (dom_dom/* Dom.isTag */.i.isTag(currentNode, 'img')) {
                        (0,css/* css */.i)(currentNode, format);
                    }
                    else {
                        editor.s.applyStyle(format);
                    }
                }
                editor.e.off(editor.editor, 'mouseup.' + pluginKey);
            };
            editor.e.on(editor.editor, 'mouseup.' + pluginKey, onMouseUp);
            editor.buffer.set(pluginKey, true);
        }
        button.update();
    },
    isActive: (editor) => editor.buffer.exists(pluginKey),
    tooltip: 'Paint format'
};
function copyFormat(editor) {
    editor.registerButton({
        name: 'copyformat',
        group: 'clipboard'
    });
    (0,global/* extendLang */.xl)(__webpack_require__(53914));
}
global/* pluginSystem.add */.pw.add('copyformat', copyFormat);
icon/* Icon.set */.J.set('copyformat', __webpack_require__(83301));

// EXTERNAL MODULE: ./src/modules/file-browser/index.ts + 13 modules
var file_browser = __webpack_require__(41405);
;// CONCATENATED MODULE: ./src/plugins/drag-and-drop/drag-and-drop.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */








class dragAndDrop extends core_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.isFragmentFromEditor = false;
        this.isCopyMode = false;
        this.startDragPoint = { x: 0, y: 0 };
        this.draggable = null;
        this.bufferRange = null;
        this.getText = (event) => {
            const dt = (0,helpers.getDataTransfer)(event);
            return dt ? dt.getData(constants.TEXT_HTML) || dt.getData(constants.TEXT_PLAIN) : null;
        };
    }
    afterInit() {
        this.j.e.on([window, this.j.ed, this.j.editor], 'dragstart.DragAndDrop', this.onDragStart);
    }
    onDragStart(event) {
        let target = event.target;
        this.onDragEnd();
        this.isFragmentFromEditor = dom_dom/* Dom.isOrContains */.i.isOrContains(this.j.editor, target, true);
        this.isCopyMode = this.isFragmentFromEditor ? (0,helpers.ctrlKey)(event) : true;
        if (this.isFragmentFromEditor) {
            const sel = this.j.s.sel;
            const range = sel && sel.rangeCount ? sel.getRangeAt(0) : null;
            if (range) {
                this.bufferRange = range.cloneRange();
            }
        }
        else {
            this.bufferRange = null;
        }
        this.startDragPoint.x = event.clientX;
        this.startDragPoint.y = event.clientY;
        if ((0,file_browser/* isFileBrowserFilesItem */.F)(target)) {
            target = target.querySelector('img');
        }
        if (dom_dom/* Dom.isTag */.i.isTag(target, 'img')) {
            this.draggable = target.cloneNode(true);
            (0,helpers.dataBind)(this.draggable, 'target', target);
        }
        this.addDragListeners();
    }
    addDragListeners() {
        this.j.e
            .on('dragover', this.onDrag)
            .on('drop.DragAndDrop', this.onDrop)
            .on(window, 'dragend.DragAndDrop drop.DragAndDrop mouseup.DragAndDrop', this.onDragEnd);
    }
    removeDragListeners() {
        this.j.e
            .off('dragover', this.onDrag)
            .off('drop.DragAndDrop', this.onDrop)
            .off(window, 'dragend.DragAndDrop drop.DragAndDrop mouseup.DragAndDrop', this.onDragEnd);
    }
    onDrag(event) {
        if (this.draggable) {
            this.j.e.fire('hidePopup');
            this.j.s.insertCursorAtPoint(event.clientX, event.clientY);
            event.preventDefault();
            event.stopPropagation();
        }
    }
    onDragEnd() {
        if (this.draggable) {
            dom_dom/* Dom.safeRemove */.i.safeRemove(this.draggable);
            this.draggable = null;
        }
        this.isCopyMode = false;
        this.removeDragListeners();
    }
    onDrop(event) {
        if (!event.dataTransfer ||
            !event.dataTransfer.files ||
            !event.dataTransfer.files.length) {
            if (!this.isFragmentFromEditor && !this.draggable) {
                this.j.e.fire('paste', event);
                event.preventDefault();
                event.stopPropagation();
                return false;
            }
            const sel = this.j.s.sel;
            const range = this.bufferRange ||
                (sel && sel.rangeCount ? sel.getRangeAt(0) : null);
            let fragment = null;
            if (!this.draggable && range) {
                fragment = this.isCopyMode
                    ? range.cloneContents()
                    : range.extractContents();
            }
            else if (this.draggable) {
                if (this.isCopyMode) {
                    const [tagName, field] = (0,helpers.attr)(this.draggable, '-is-file') === '1'
                        ? ['a', 'href']
                        : ['img', 'src'];
                    fragment = this.j.createInside.element(tagName);
                    fragment.setAttribute(field, (0,helpers.attr)(this.draggable, 'data-src') ||
                        (0,helpers.attr)(this.draggable, 'src') ||
                        '');
                    if (tagName === 'a') {
                        fragment.textContent = (0,helpers.attr)(fragment, field) || '';
                    }
                }
                else {
                    fragment = (0,helpers.dataBind)(this.draggable, 'target');
                }
            }
            else if (this.getText(event)) {
                fragment = this.j.createInside.fromHTML(this.getText(event));
            }
            sel && sel.removeAllRanges();
            this.j.s.insertCursorAtPoint(event.clientX, event.clientY);
            if (fragment) {
                this.j.s.insertNode(fragment, false, false);
                if (range && fragment.firstChild && fragment.lastChild) {
                    range.setStartBefore(fragment.firstChild);
                    range.setEndAfter(fragment.lastChild);
                    this.j.s.selectRange(range);
                    this.j.e.fire('synchro');
                }
                if (dom_dom/* Dom.isTag */.i.isTag(fragment, 'img') && this.j.events) {
                    this.j.e.fire('afterInsertImage', fragment);
                }
            }
            event.preventDefault();
            event.stopPropagation();
        }
        this.isFragmentFromEditor = false;
        this.removeDragListeners();
    }
    beforeDestruct() {
        this.onDragEnd();
        this.j.e
            .off(window, '.DragAndDrop')
            .off('.DragAndDrop')
            .off([window, this.j.ed, this.j.editor], 'dragstart.DragAndDrop', this.onDragStart);
    }
}
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], dragAndDrop.prototype, "onDragStart", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.throttle)(ctx => ctx.defaultTimeout / 10)
], dragAndDrop.prototype, "onDrag", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], dragAndDrop.prototype, "onDragEnd", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], dragAndDrop.prototype, "onDrop", null);
global/* pluginSystem.add */.pw.add('dragAndDrop', dragAndDrop);

;// CONCATENATED MODULE: ./src/plugins/drag-and-drop-element/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.draggableTags */.D.prototype.draggableTags = ['img', 'jodit-media', 'jodit'];

;// CONCATENATED MODULE: ./src/plugins/drag-and-drop-element/drag-and-drop-element.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







var DragState;
(function (DragState) {
    DragState[DragState["IDLE"] = 0] = "IDLE";
    DragState[DragState["WAIT_DRAGGING"] = 1] = "WAIT_DRAGGING";
    DragState[DragState["DRAGGING"] = 2] = "DRAGGING";
})(DragState || (DragState = {}));
class dragAndDropElement extends core_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.dragList = [];
        this.draggable = null;
        this.isCopyMode = false;
        this.diffStep = 10;
        this.startX = 0;
        this.startY = 0;
        this.state = DragState.IDLE;
    }
    afterInit() {
        this.dragList = this.j.o.draggableTags
            ? (0,helpers.splitArray)(this.j.o.draggableTags)
                .filter(Boolean)
                .map(item => item.toLowerCase())
            : [];
        if (!this.dragList.length) {
            return;
        }
        this.j.e.on('mousedown dragstart', this.onDragStart);
    }
    onDragStart(event) {
        if (event.type === 'dragstart' && this.draggable) {
            return false;
        }
        if (this.state > DragState.IDLE) {
            return;
        }
        const target = event.target;
        if (!this.dragList.length || !target) {
            return;
        }
        const matched = (node) => Boolean(node && this.dragList.includes(node.nodeName.toLowerCase()));
        let lastTarget = dom/* Dom.furthest */.i.furthest(target, matched, this.j.editor) ||
            (matched(target) ? target : null);
        if (!lastTarget) {
            return;
        }
        if (dom/* Dom.isTag */.i.isTag(lastTarget.parentElement, 'a') &&
            lastTarget.parentElement.firstChild === lastTarget &&
            lastTarget.parentElement.lastChild === lastTarget) {
            lastTarget = lastTarget.parentElement;
        }
        this.startX = event.clientX;
        this.startY = event.clientY;
        this.isCopyMode = (0,helpers.ctrlKey)(event);
        this.draggable = lastTarget.cloneNode(true);
        (0,helpers.dataBind)(this.draggable, 'target', lastTarget);
        this.state = DragState.WAIT_DRAGGING;
        this.addDragListeners();
    }
    onDrag(event) {
        var _a, _b;
        if (!this.draggable || this.state === DragState.IDLE) {
            return;
        }
        const x = event.clientX, y = event.clientY;
        if (this.state === DragState.WAIT_DRAGGING &&
            Math.sqrt(Math.pow(x - this.startX, 2) + Math.pow(y - this.startY, 2)) < this.diffStep) {
            return;
        }
        if (this.state === DragState.WAIT_DRAGGING) {
            this.j.lock('drag-and-drop-element');
            this.state = DragState.DRAGGING;
        }
        this.j.e.fire('hidePopup hideResizer');
        if (!this.draggable.parentNode) {
            const target = (0,helpers.dataBind)(this.draggable, 'target');
            (0,helpers.css)(this.draggable, {
                zIndex: 10000000000000,
                pointerEvents: 'none',
                pointer: 'drag',
                position: 'fixed',
                opacity: 0.7,
                display: 'inline-block',
                left: event.clientX,
                top: event.clientY,
                width: (_a = target === null || target === void 0 ? void 0 : target.offsetWidth) !== null && _a !== void 0 ? _a : 100,
                height: (_b = target === null || target === void 0 ? void 0 : target.offsetHeight) !== null && _b !== void 0 ? _b : 100
            });
            (0,global/* getContainer */.ZO)(this.j, dragAndDropElement).appendChild(this.draggable);
        }
        (0,helpers.css)(this.draggable, {
            left: event.clientX,
            top: event.clientY
        });
        this.j.s.insertCursorAtPoint(event.clientX, event.clientY);
    }
    onDragEnd() {
        if (this.isInDestruct) {
            return;
        }
        this.removeDragListeners();
        this.j.unlock();
        this.state = DragState.IDLE;
        if (this.draggable) {
            dom/* Dom.safeRemove */.i.safeRemove(this.draggable);
            this.draggable = null;
        }
    }
    onDrop() {
        if (!this.draggable || this.state < DragState.DRAGGING) {
            this.onDragEnd();
            return;
        }
        let fragment = (0,helpers.dataBind)(this.draggable, 'target');
        this.onDragEnd();
        if (this.isCopyMode) {
            fragment = fragment.cloneNode(true);
        }
        const { parentElement } = fragment;
        this.j.s.insertNode(fragment, true, false);
        if (parentElement &&
            dom/* Dom.isEmpty */.i.isEmpty(parentElement) &&
            !dom/* Dom.isTag */.i.isTag(parentElement, ['td', 'th'])) {
            dom/* Dom.safeRemove */.i.safeRemove(parentElement);
        }
        if (dom/* Dom.isTag */.i.isTag(fragment, 'img') && this.j.e) {
            this.j.e.fire('afterInsertImage', fragment);
        }
        this.j.e.fire('synchro');
    }
    addDragListeners() {
        this.j.e
            .on(this.j.editor, 'mousemove', this.onDrag)
            .on('mouseup', this.onDrop)
            .on([this.j.ew, this.ow], 'mouseup', this.onDragEnd);
    }
    removeDragListeners() {
        this.j.e
            .off(this.j.editor, 'mousemove', this.onDrag)
            .off('mouseup', this.onDrop)
            .off([this.j.ew, this.ow], 'mouseup', this.onDragEnd);
    }
    beforeDestruct() {
        this.onDragEnd();
        this.j.e.off('mousedown dragstart', this.onDragStart);
        this.removeDragListeners();
    }
}
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], dragAndDropElement.prototype, "onDragStart", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.throttle)(ctx => ctx.defaultTimeout / 10)
], dragAndDropElement.prototype, "onDrag", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], dragAndDropElement.prototype, "onDragEnd", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], dragAndDropElement.prototype, "onDrop", null);
global/* pluginSystem.add */.pw.add('dragAndDropElement', dragAndDropElement);

// EXTERNAL MODULE: ./src/core/helpers/utils/scroll-into-view.ts
var scroll_into_view = __webpack_require__(6110);
;// CONCATENATED MODULE: ./src/plugins/enter/helpers/check-br.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



function checkBR(jodit, current, shiftKeyPressed) {
    const isMultiLineBlock = dom_dom/* Dom.closest */.i.closest(current, ['pre', 'blockquote'], jodit.editor);
    const isBRMode = jodit.o.enter.toLowerCase() === constants.BR.toLowerCase();
    if (isBRMode ||
        (shiftKeyPressed && !isMultiLineBlock) ||
        (!shiftKeyPressed && isMultiLineBlock)) {
        const br = jodit.createInside.element('br');
        jodit.s.insertNode(br, false, false);
        if (!dom_dom/* Dom.findNotEmptySibling */.i.findNotEmptySibling(br, false)) {
            dom_dom/* Dom.after */.i.after(br, br.cloneNode());
        }
        const range = jodit.s.range;
        range.setStartAfter(br);
        range.collapse(true);
        jodit.s.selectRange(range);
        (0,scroll_into_view/* scrollIntoViewIfNeeded */.n)(br, jodit.editor, jodit.ed);
        return false;
    }
    return true;
}

;// CONCATENATED MODULE: ./src/plugins/enter/helpers/check-unsplittable-box.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function checkUnsplittableBox(jodit, currentBox) {
    const sel = jodit.s;
    if (!dom_dom/* Dom.canSplitBlock */.i.canSplitBlock(currentBox)) {
        const br = jodit.createInside.element('br');
        sel.insertNode(br, false, false);
        sel.setCursorAfter(br);
        return false;
    }
    return true;
}

// EXTERNAL MODULE: ./src/core/helpers/utils/selector.ts
var selector = __webpack_require__(78191);
;// CONCATENATED MODULE: ./src/plugins/enter/helpers/insert-paragraph.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function insertParagraph(editor, fake, wrapperTag, style) {
    var _a, _b;
    const { s, createInside } = editor, p = createInside.element(wrapperTag), helper_node = createInside.element('br');
    p.appendChild(helper_node);
    if (style && style.cssText) {
        p.setAttribute('style', style.cssText);
    }
    if (fake && fake.isConnected) {
        dom_dom/* Dom.before */.i.before(fake, p);
        dom_dom/* Dom.safeRemove */.i.safeRemove(fake);
    }
    else {
        s.insertNode(p, false, false);
    }
    const range = s.createRange();
    range.setStartBefore(wrapperTag.toLowerCase() !== 'br' ? helper_node : p);
    range.collapse(true);
    (_a = s.sel) === null || _a === void 0 ? void 0 : _a.removeAllRanges();
    (_b = s.sel) === null || _b === void 0 ? void 0 : _b.addRange(range);
    (0,scroll_into_view/* scrollIntoViewIfNeeded */.n)(p, editor.editor, editor.ed);
    return p;
}

;// CONCATENATED MODULE: ./src/plugins/enter/helpers/process-empty-li-leaf.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



function processEmptyLILeaf(jodit, li) {
    const list = dom_dom/* Dom.closest */.i.closest(li, ['ol', 'ul'], jodit.editor);
    if (!list) {
        return;
    }
    const parentLi = list.parentElement, listInsideLeaf = dom_dom/* Dom.isTag */.i.isTag(parentLi, 'li');
    const container = listInsideLeaf ? parentLi : list;
    const leftRange = jodit.s.createRange();
    leftRange.setStartAfter(li);
    leftRange.setEndAfter(list);
    const rightPart = leftRange.extractContents();
    const fakeTextNode = jodit.createInside.fake();
    dom_dom/* Dom.after */.i.after(container, fakeTextNode);
    dom_dom/* Dom.safeRemove */.i.safeRemove(li);
    if (!(0,selector.$$)('li', list).length) {
        dom_dom/* Dom.safeRemove */.i.safeRemove(list);
    }
    const newLi = insertParagraph(jodit, fakeTextNode, listInsideLeaf ? 'li' : jodit.o.enter);
    if (!rightPart.querySelector('li')) {
        return;
    }
    if (listInsideLeaf) {
        newLi.appendChild(rightPart);
    }
    else {
        dom_dom/* Dom.after */.i.after(newLi, rightPart);
    }
}

;// CONCATENATED MODULE: ./src/plugins/enter/helpers/get-block-wrapper.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function getBlockWrapper(jodit, current, tagReg = constants.IS_BLOCK) {
    let node = current;
    const root = jodit.editor;
    do {
        if (!node || node === root) {
            break;
        }
        if (tagReg.test(node.nodeName)) {
            if (dom_dom/* Dom.isTag */.i.isTag(node, 'li')) {
                return node;
            }
            return (getBlockWrapper(jodit, node.parentNode, /^li$/i) ||
                node);
        }
        node = node.parentNode;
    } while (node && node !== root);
    return null;
}

;// CONCATENATED MODULE: ./src/plugins/enter/helpers/has-previous-block.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function hasPreviousBlock(jodit, current) {
    return Boolean(dom_dom/* Dom.prev */.i.prev(current, elm => dom_dom/* Dom.isBlock */.i.isBlock(elm) || dom_dom/* Dom.isImage */.i.isImage(elm), jodit.editor));
}

;// CONCATENATED MODULE: ./src/plugins/enter/helpers/split-fragment.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



function splitFragment(jodit, currentBox) {
    const sel = jodit.s, { enter } = jodit.o;
    const defaultTag = enter.toLowerCase();
    const isLi = dom_dom/* Dom.isTag */.i.isTag(currentBox, 'li');
    const canSplit = currentBox.tagName.toLowerCase() === defaultTag || isLi;
    const cursorOnTheRight = sel.cursorOnTheRight(currentBox);
    const cursorOnTheLeft = sel.cursorOnTheLeft(currentBox);
    if (!canSplit && (cursorOnTheRight || cursorOnTheLeft)) {
        let fake = null;
        if (cursorOnTheRight) {
            fake = sel.setCursorAfter(currentBox);
        }
        else {
            fake = sel.setCursorBefore(currentBox);
        }
        insertParagraph(jodit, fake, defaultTag);
        if (cursorOnTheLeft && !cursorOnTheRight) {
            sel.setCursorIn(currentBox, true);
        }
        return;
    }
    const newP = sel.splitSelection(currentBox);
    (0,scroll_into_view/* scrollIntoViewIfNeeded */.n)(newP, jodit.editor, jodit.ed);
}

;// CONCATENATED MODULE: ./src/plugins/enter/helpers/wrap-text.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function wrapText(jodit, current) {
    let needWrap = current;
    dom_dom/* Dom.up */.i.up(needWrap, node => {
        if (node && node.hasChildNodes() && node !== jodit.editor) {
            needWrap = node;
        }
    }, jodit.editor);
    const currentBox = dom_dom/* Dom.wrapInline */.i.wrapInline(needWrap, jodit.o.enter, jodit);
    if (dom_dom/* Dom.isEmpty */.i.isEmpty(currentBox)) {
        const helper_node = jodit.createInside.element('br');
        currentBox.appendChild(helper_node);
        jodit.s.setCursorBefore(helper_node);
    }
    return currentBox;
}

;// CONCATENATED MODULE: ./src/plugins/enter/helpers/move-cursor-out-from-specal-tags.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function moveCursorOutFromSpecialTags(jodit, current, tags) {
    const { s } = jodit;
    const link = dom_dom/* Dom.closest */.i.closest(current, tags, jodit.editor);
    if (link) {
        if (s.cursorOnTheRight(link)) {
            s.setCursorAfter(link);
        }
        else if (s.cursorOnTheLeft(link)) {
            s.setCursorBefore(link);
        }
    }
}

;// CONCATENATED MODULE: ./src/plugins/enter/helpers/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */










;// CONCATENATED MODULE: ./src/plugins/enter/enter.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







class enter extends plugin_plugin/* Plugin */.S {
    afterInit(editor) {
        const defaultTag = editor.o.enter.toLowerCase();
        const brMode = defaultTag === constants.BR.toLowerCase();
        if (!editor.o.enterBlock) {
            editor.o.enterBlock = brMode
                ? constants.PARAGRAPH
                : defaultTag;
        }
        editor.registerCommand('enter', (command, value, event = {}) => this.onEnter(event));
    }
    onEnterKeyDown(event) {
        if (event.key === constants.KEY_ENTER) {
            const editor = this.j;
            const beforeEnter = editor.e.fire('beforeEnter', event);
            if (beforeEnter !== undefined) {
                return beforeEnter;
            }
            if (!editor.s.isCollapsed()) {
                editor.execCommand('Delete');
            }
            editor.s.focus();
            this.onEnter(event);
            editor.synchronizeValues();
            return false;
        }
    }
    onEnter(event) {
        const jodit = this.j;
        const current = this.getCurrentOrFillEmpty(jodit);
        moveCursorOutFromSpecialTags(jodit, current, ['a']);
        let currentBox = getBlockWrapper(jodit, current);
        const isLi = dom_dom/* Dom.isTag */.i.isTag(currentBox, 'li');
        if ((!isLi || (event === null || event === void 0 ? void 0 : event.shiftKey)) &&
            !checkBR(jodit, current, event === null || event === void 0 ? void 0 : event.shiftKey)) {
            return false;
        }
        if (!currentBox && !hasPreviousBlock(jodit, current)) {
            currentBox = wrapText(jodit, current);
        }
        if (!currentBox || currentBox === current) {
            insertParagraph(jodit, null, isLi ? 'li' : jodit.o.enter);
            return false;
        }
        if (!checkUnsplittableBox(jodit, currentBox)) {
            return false;
        }
        if (isLi && dom_dom/* Dom.isEmpty */.i.isEmpty(currentBox)) {
            processEmptyLILeaf(jodit, currentBox);
            return false;
        }
        splitFragment(jodit, currentBox);
    }
    getCurrentOrFillEmpty(editor) {
        const { s } = editor;
        let current = s.current(false);
        if (!current || current === editor.editor) {
            current = editor.createInside.text(constants.INVISIBLE_SPACE);
            s.insertNode(current, false, false);
            s.select(current);
        }
        return current;
    }
    beforeDestruct(editor) {
        editor.e.off('keydown.enter');
    }
}
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':keydown.enter')
], enter.prototype, "onEnterKeyDown", null);
global/* pluginSystem.add */.pw.add('enter', enter);

;// CONCATENATED MODULE: ./src/plugins/file/file.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




config/* Config.prototype.controls.file */.D.prototype.controls.file = {
    popup: (editor, current, self, close) => {
        const insert = (url, title = '') => {
            editor.s.insertNode(editor.createInside.fromHTML(`<a href="${url}" title="${title}">${title || url}</a>`));
        };
        let sourceAnchor = null;
        if (current &&
            (dom_dom/* Dom.isTag */.i.isTag(current, 'a') ||
                dom_dom/* Dom.closest */.i.closest(current, 'a', editor.editor))) {
            sourceAnchor = dom_dom/* Dom.isTag */.i.isTag(current, 'a')
                ? current
                : dom_dom/* Dom.closest */.i.closest(current, 'a', editor.editor);
        }
        return (0,widget/* FileSelectorWidget */.ov)(editor, {
            filebrowser: (data) => {
                data.files &&
                    data.files.forEach(file => insert(data.baseurl + file));
                close();
            },
            upload: true,
            url: (url, text) => {
                if (sourceAnchor) {
                    sourceAnchor.setAttribute('href', url);
                    sourceAnchor.setAttribute('title', text);
                }
                else {
                    insert(url, text);
                }
                close();
            }
        }, sourceAnchor, close, false);
    },
    tags: ['a'],
    tooltip: 'Insert file'
};
function file_file(editor) {
    editor.registerButton({
        name: 'file',
        group: 'media'
    });
}
global/* pluginSystem.add */.pw.add('file', file_file);

;// CONCATENATED MODULE: ./src/plugins/focus/focus.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



config/* Config.prototype.autofocus */.D.prototype.autofocus = false;
config/* Config.prototype.cursorAfterAutofocus */.D.prototype.cursorAfterAutofocus = 'end';
config/* Config.prototype.saveSelectionOnBlur */.D.prototype.saveSelectionOnBlur = true;
function focus_focus(editor) {
    if (editor.o.saveSelectionOnBlur) {
        editor.e
            .on('blur', () => {
            if (editor.isEditorMode()) {
                editor.s.save(true);
            }
        })
            .on('focus', () => {
            editor.s.restore();
        });
    }
    const focus = () => {
        editor.s.focus();
        if (editor.o.cursorAfterAutofocus === 'end') {
            const lastTextNode = dom/* Dom.last */.i.last(editor.editor, node => dom/* Dom.isText */.i.isText(node));
            if (lastTextNode) {
                editor.s.setCursorIn(lastTextNode, false);
            }
        }
    };
    editor.e.on('afterInit', () => {
        if (editor.o.autofocus) {
            if (editor.defaultTimeout) {
                editor.async.setTimeout(focus, 300);
            }
            else {
                focus();
            }
        }
    });
    editor.e.on('afterInit afterAddPlace', () => {
        editor.e
            .off(editor.editor, 'mousedown.autofocus')
            .on(editor.editor, 'mousedown.autofocus', (e) => {
            if (editor.isEditorMode() &&
                e.target &&
                dom/* Dom.isBlock */.i.isBlock(e.target) &&
                !e.target.childNodes.length) {
                if (editor.editor === e.target) {
                    editor.s.focus();
                }
                else {
                    editor.s.setCursorIn(e.target);
                }
            }
        });
    });
}
global/* pluginSystem.add */.pw.add('focus', focus_focus);

;// CONCATENATED MODULE: ./src/plugins/font/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




config/* Config.prototype.defaultFontSizePoints */.D.prototype.defaultFontSizePoints = 'px';
icon/* Icon.set */.J.set('font', __webpack_require__(84142)).set('fontsize', __webpack_require__(57292));
config/* Config.prototype.controls.fontsize */.D.prototype.controls.fontsize = {
    command: 'fontsize',
    data: {
        cssRule: 'font-size'
    },
    list: [
        '8',
        '9',
        '10',
        '11',
        '12',
        '14',
        '16',
        '18',
        '24',
        '30',
        '36',
        '48',
        '60',
        '72',
        '96'
    ],
    exec: (editor, event, { control }) => (0,helpers_utils/* memorizeExec */.u3)(editor, event, { control }, (value) => {
        var _a;
        if (((_a = control.command) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'fontsize') {
            return `${value}${editor.o.defaultFontSizePoints}`;
        }
        return value;
    }),
    childTemplate: (editor, key, value) => {
        return `${value}${editor.o.defaultFontSizePoints}`;
    },
    tooltip: 'Font size',
    isChildActive: (editor, control) => {
        var _a, _b;
        const current = editor.s.current(), cssKey = ((_a = control.data) === null || _a === void 0 ? void 0 : _a.cssRule) || 'font-size', normalize = ((_b = control.data) === null || _b === void 0 ? void 0 : _b.normalize) ||
            ((v) => {
                if (/pt$/i.test(v) &&
                    editor.o.defaultFontSizePoints === 'pt') {
                    return v.replace(/pt$/i, '');
                }
                return v;
            });
        if (current) {
            const currentBpx = dom_dom/* Dom.closest */.i.closest(current, dom_dom/* Dom.isElement */.i.isElement, editor.editor) || editor.editor;
            const value = (0,helpers_utils/* css */.iv)(currentBpx, cssKey);
            return Boolean(value &&
                control.args &&
                normalize(control.args[0].toString()) ===
                    normalize(value.toString()));
        }
        return false;
    }
};
config/* Config.prototype.controls.font */.D.prototype.controls.font = {
    ...config/* Config.prototype.controls.fontsize */.D.prototype.controls.fontsize,
    command: 'fontname',
    list: {
        '': 'Default',
        'Helvetica,sans-serif': 'Helvetica',
        'Arial,Helvetica,sans-serif': 'Arial',
        'Georgia,serif': 'Georgia',
        'Impact,Charcoal,sans-serif': 'Impact',
        'Tahoma,Geneva,sans-serif': 'Tahoma',
        'Times New Roman,Times,serif': 'Times New Roman',
        'Verdana,Geneva,sans-serif': 'Verdana'
    },
    childTemplate: (editor, key, value) => {
        let isAvailable = false;
        try {
            isAvailable =
                key.indexOf('dings') === -1 &&
                    document.fonts.check(`16px ${key}`, value);
        }
        catch (_a) { }
        return `<span style="${isAvailable ? `font-family: ${key}!important;` : ''}">${value}</span>`;
    },
    data: {
        cssRule: 'font-family',
        normalize: (v) => {
            return v
                .toLowerCase()
                .replace(/['"]+/g, '')
                .replace(/[^a-z0-9]+/g, ',');
        }
    },
    tooltip: 'Font family'
};

;// CONCATENATED MODULE: ./src/plugins/font/font.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



function font(editor) {
    editor
        .registerButton({
        name: 'font',
        group: 'font'
    })
        .registerButton({
        name: 'fontsize',
        group: 'font'
    });
    const callback = (command, second, third) => {
        switch (command) {
            case 'fontsize':
                editor.s.applyStyle({
                    fontSize: (0,helpers.normalizeSize)(third)
                });
                break;
            case 'fontname':
                editor.s.applyStyle({
                    fontFamily: third
                });
                break;
        }
        editor.e.fire('synchro');
        return false;
    };
    editor
        .registerCommand('fontsize', callback)
        .registerCommand('fontname', callback);
}
global/* pluginSystem.add */.pw.add('font', font);

;// CONCATENATED MODULE: ./src/plugins/format-block/format-block.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





icon/* Icon.set */.J.set('paragraph', __webpack_require__(18019));
config/* Config.prototype.controls.paragraph */.D.prototype.controls.paragraph = {
    command: 'formatBlock',
    update(button, editor) {
        const control = button.control, current = editor.s.current();
        if (current && editor.o.textIcons) {
            const currentBox = modules.Dom.closest(current, modules.Dom.isBlock, editor.editor) ||
                editor.editor, currentValue = currentBox.nodeName.toLowerCase(), list = control.list;
            if (button &&
                control.data &&
                control.data.currentValue !== currentValue &&
                list &&
                list[currentValue]) {
                if (editor.o.textIcons) {
                    button.state.text = currentValue;
                }
                else {
                    button.state.icon.name = currentValue;
                }
                control.data.currentValue = currentValue;
            }
        }
        return false;
    },
    exec: helpers.memorizeExec,
    data: {
        currentValue: 'left'
    },
    list: {
        p: 'Normal',
        h1: 'Heading 1',
        h2: 'Heading 2',
        h3: 'Heading 3',
        h4: 'Heading 4',
        h5: 'Heading 5',
        h6: 'Heading 6'
    },
    isChildActive: (editor, control) => {
        const current = editor.s.current();
        if (current) {
            const currentBox = modules.Dom.closest(current, modules.Dom.isBlock, editor.editor);
            return Boolean(currentBox &&
                currentBox !== editor.editor &&
                control.args !== undefined &&
                currentBox.nodeName.toLowerCase() === control.args[0]);
        }
        return false;
    },
    isActive: (editor, control) => {
        const current = editor.s.current();
        if (current) {
            const currentBpx = modules.Dom.closest(current, modules.Dom.isBlock, editor.editor);
            return Boolean(currentBpx &&
                currentBpx !== editor.editor &&
                control.list !== undefined &&
                !modules.Dom.isTag(currentBpx, 'p') &&
                control.list[currentBpx.nodeName.toLowerCase()] !== undefined);
        }
        return false;
    },
    childTemplate: (e, key, value) => `<${key} style="margin:0;padding:0"><span>${e.i18n(value)}</span></${key}>`,
    tooltip: 'Insert format block'
};
function formatBlock(editor) {
    editor.registerButton({
        name: 'paragraph',
        group: 'font'
    });
    editor.registerCommand('formatblock', (command, second, third) => {
        editor.s.applyStyle(undefined, {
            element: third
        });
        editor.synchronizeValues();
        return false;
    });
}
global/* pluginSystem.add */.pw.add('formatBlock', formatBlock);

// EXTERNAL MODULE: ./src/core/helpers/checker/is-jodit-object.ts
var is_jodit_object = __webpack_require__(47442);
;// CONCATENATED MODULE: ./src/plugins/fullsize/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




config/* Config.prototype.fullsize */.D.prototype.fullsize = false;
config/* Config.prototype.globalFullSize */.D.prototype.globalFullSize = true;
icon/* Icon.set */.J.set('fullsize', __webpack_require__(45146)).set('shrink', __webpack_require__(53576));
config/* Config.prototype.controls.fullsize */.D.prototype.controls.fullsize = {
    exec: (editor) => {
        editor.toggleFullSize();
    },
    update(button, editor) {
        const mode = editor.isFullSize ? 'shrink' : 'fullsize';
        button.state.activated = editor.isFullSize;
        if (editor.o.textIcons) {
            button.state.text = mode;
        }
        else {
            button.state.icon.name = mode;
        }
    },
    tooltip: 'Open in fullsize',
    mode: constants.MODE_SOURCE + constants.MODE_WYSIWYG
};

;// CONCATENATED MODULE: ./src/plugins/fullsize/fullsize.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





const fullsizeStack = new Set();
function fullsize(editor) {
    editor.registerButton({
        name: 'fullsize'
    });
    let isEnabled = false, oldHeight = 0, oldWidth = 0, wasToggled = false;
    const resize = () => {
        const { container, events } = editor;
        if (events) {
            if (isEnabled) {
                oldHeight = (0,css/* css */.i)(container, 'height', true);
                oldWidth = (0,css/* css */.i)(container, 'width', true);
                (0,css/* css */.i)(container, {
                    height: editor.ow.innerHeight,
                    width: editor.ow.innerWidth
                });
                wasToggled = true;
            }
            else if (wasToggled) {
                (0,css/* css */.i)(container, {
                    height: oldHeight || 'auto',
                    width: oldWidth || 'auto'
                });
            }
        }
    }, toggle = (enable) => {
        const { container, events } = editor;
        if (!container) {
            return;
        }
        if (enable === undefined) {
            enable = !container.classList.contains('jodit_fullsize');
        }
        editor.setMod('fullsize', enable);
        editor.o.fullsize = enable;
        isEnabled = enable;
        container.classList.toggle('jodit_fullsize', enable);
        if (editor.toolbar) {
            (0,is_jodit_object/* isJoditObject */.Z)(editor) &&
                editor.toolbarContainer.appendChild(editor.toolbar.container);
            (0,css/* css */.i)(editor.toolbar.container, 'width', 'auto');
        }
        enable
            ? fullsizeStack.add(container)
            : fullsizeStack.delete(container);
        const shouldToggleGlobalFullsize = editor.o.globalFullSize &&
            ((fullsizeStack.size === 1 && enable) ||
                (fullsizeStack.size === 0 && !enable));
        if (shouldToggleGlobalFullsize) {
            let node = container.parentNode;
            while (node &&
                node.nodeType !== Node.DOCUMENT_NODE &&
                node.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {
                node.classList.toggle('jodit_fullsize-box_true', enable);
                node = node.parentNode;
            }
            resize();
        }
        events.fire('afterResize');
    };
    if (editor.o.globalFullSize) {
        editor.e.on(editor.ow, 'resize', resize);
    }
    editor.e
        .on('afterInit afterOpen', () => {
        var _a;
        editor.toggleFullSize((_a = editor === null || editor === void 0 ? void 0 : editor.options) === null || _a === void 0 ? void 0 : _a.fullsize);
    })
        .on('toggleFullSize', toggle)
        .on('beforeDestruct', () => {
        isEnabled && toggle(false);
    })
        .on('beforeDestruct', () => {
        editor.events && editor.e.off(editor.ow, 'resize', resize);
    });
}
global/* pluginSystem.add */.pw.add('fullsize', fullsize);

;// CONCATENATED MODULE: ./src/plugins/hotkeys/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.commandToHotkeys */.D.prototype.commandToHotkeys = {
    removeFormat: ['ctrl+shift+m', 'cmd+shift+m'],
    insertOrderedList: ['ctrl+shift+7', 'cmd+shift+7'],
    insertUnorderedList: ['ctrl+shift+8, cmd+shift+8'],
    selectall: ['ctrl+a', 'cmd+a']
};

;// CONCATENATED MODULE: ./src/plugins/hotkeys/hotkeys.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





class hotkeys extends core_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.onKeyPress = (event) => {
            const special = this.specialKeys[event.which], character = (event.key || String.fromCharCode(event.which)).toLowerCase();
            const modif = [special || character];
            ['alt', 'ctrl', 'shift', 'meta'].forEach(specialKey => {
                if (event[specialKey + 'Key'] && special !== specialKey) {
                    modif.push(specialKey);
                }
            });
            return (0,helpers.normalizeKeyAliases)(modif.join('+'));
        };
        this.specialKeys = {
            8: 'backspace',
            9: 'tab',
            10: 'return',
            13: 'return',
            16: 'shift',
            17: 'ctrl',
            18: 'alt',
            19: 'pause',
            20: 'capslock',
            27: 'esc',
            32: 'space',
            33: 'pageup',
            34: 'pagedown',
            35: 'end',
            36: 'home',
            37: 'left',
            38: 'up',
            39: 'right',
            40: 'down',
            45: 'insert',
            46: 'del',
            59: ';',
            61: '=',
            91: 'meta',
            96: '0',
            97: '1',
            98: '2',
            99: '3',
            100: '4',
            101: '5',
            102: '6',
            103: '7',
            104: '8',
            105: '9',
            106: '*',
            107: '+',
            109: '-',
            110: '.',
            111: '/',
            112: 'f1',
            113: 'f2',
            114: 'f3',
            115: 'f4',
            116: 'f5',
            117: 'f6',
            118: 'f7',
            119: 'f8',
            120: 'f9',
            121: 'f10',
            122: 'f11',
            123: 'f12',
            144: 'numlock',
            145: 'scroll',
            173: '-',
            186: ';',
            187: '=',
            188: ',',
            189: '-',
            190: '.',
            191: '/',
            192: '`',
            219: '[',
            220: '\\',
            221: ']',
            222: "'"
        };
    }
    afterInit(editor) {
        (0,helpers.keys)(editor.o.commandToHotkeys, false).forEach((commandName) => {
            const shortcuts = editor.o.commandToHotkeys[commandName];
            if (shortcuts && ((0,helpers.isArray)(shortcuts) || (0,helpers.isString)(shortcuts))) {
                editor.registerHotkeyToCommand(shortcuts, commandName);
            }
        });
        let itIsHotkey = false;
        editor.e
            .off('.hotkeys')
            .on([editor.ow, editor.ew], 'keydown.hotkeys', (e) => {
            if (e.key === constants.KEY_ESC) {
                return this.j.e.fire('escape', e);
            }
        })
            .on('keydown.hotkeys', (event) => {
            const shortcut = this.onKeyPress(event), stop = {
                shouldStop: true
            };
            const resultOfFire = this.j.e.fire(shortcut + '.hotkey', event.type, stop);
            if (resultOfFire === false) {
                if (stop.shouldStop) {
                    itIsHotkey = true;
                    editor.e.stopPropagation('keydown');
                    return false;
                }
                else {
                    event.preventDefault();
                }
            }
        }, { top: true })
            .on('keyup.hotkeys', () => {
            if (itIsHotkey) {
                itIsHotkey = false;
                editor.e.stopPropagation('keyup');
                return false;
            }
        }, { top: true });
    }
    beforeDestruct(jodit) {
        if (jodit.events) {
            jodit.e.off('.hotkeys');
        }
    }
}
global/* pluginSystem.add */.pw.add('hotkeys', hotkeys);

;// CONCATENATED MODULE: ./src/plugins/hr/hr.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




icon/* Icon.set */.J.set('hr', __webpack_require__(14655));
config/* Config.prototype.controls.hr */.D.prototype.controls.hr = {
    command: 'insertHorizontalRule',
    tags: ['hr'],
    tooltip: 'Insert Horizontal Line'
};
function hr(editor) {
    editor.registerButton({
        name: 'hr',
        group: 'insert'
    });
    editor.registerCommand('insertHorizontalRule', () => {
        const elm = editor.createInside.element('hr');
        editor.s.insertNode(elm, false, false);
        const block = dom/* Dom.closest */.i.closest(elm.parentElement, dom/* Dom.isBlock */.i.isBlock, editor.editor);
        if (block && dom/* Dom.isEmpty */.i.isEmpty(block) && block !== editor.editor) {
            dom/* Dom.after */.i.after(block, elm);
            dom/* Dom.safeRemove */.i.safeRemove(block);
        }
        let p = dom/* Dom.next */.i.next(elm, dom/* Dom.isBlock */.i.isBlock, editor.editor, false);
        if (!p) {
            p = editor.createInside.element(editor.o.enter);
            dom/* Dom.after */.i.after(elm, p);
        }
        editor.s.setCursorIn(p);
        return false;
    });
}
global/* pluginSystem.add */.pw.add('hr', hr);

;// CONCATENATED MODULE: ./src/plugins/iframe/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.iframeBaseUrl */.D.prototype.iframeBaseUrl = '';
config/* Config.prototype.iframeTitle */.D.prototype.iframeTitle = 'Jodit Editor';
config/* Config.prototype.iframeDoctype */.D.prototype.iframeDoctype = '<!DOCTYPE html>';
config/* Config.prototype.iframeDefaultSrc */.D.prototype.iframeDefaultSrc = 'about:blank';
config/* Config.prototype.iframeStyle */.D.prototype.iframeStyle =
    'html{' +
        'margin:0;' +
        'padding:0;' +
        'min-height: 100%;' +
        '}' +
        'body{' +
        'box-sizing:border-box;' +
        'font-size:13px;' +
        'line-height:1.6;' +
        'padding:10px;' +
        'margin:0;' +
        'background:transparent;' +
        'color:#000;' +
        'position:' +
        'relative;' +
        'z-index:2;' +
        'user-select:auto;' +
        'margin:0px;' +
        'overflow:auto;' +
        'outline:none;' +
        '}' +
        'table{' +
        'width:100%;' +
        'border:none;' +
        'border-collapse:collapse;' +
        'empty-cells: show;' +
        'max-width: 100%;' +
        '}' +
        'th,td{' +
        'padding: 2px 5px;' +
        'border:1px solid #ccc;' +
        '-webkit-user-select:text;' +
        '-moz-user-select:text;' +
        '-ms-user-select:text;' +
        'user-select:text' +
        '}' +
        'p{' +
        'margin-top:0;' +
        '}' +
        '.jodit_editor .jodit_iframe_wrapper{' +
        'display: block;' +
        'clear: both;' +
        'user-select: none;' +
        'position: relative;' +
        '}' +
        '.jodit_editor .jodit_iframe_wrapper:after {' +
        'position:absolute;' +
        'content:"";' +
        'z-index:1;' +
        'top:0;' +
        'left:0;' +
        'right: 0;' +
        'bottom: 0;' +
        'cursor: pointer;' +
        'display: block;' +
        'background: rgba(0, 0, 0, 0);' +
        '} ' +
        '.jodit_disabled{' +
        'user-select: none;' +
        '-o-user-select: none;' +
        '-moz-user-select: none;' +
        '-khtml-user-select: none;' +
        '-webkit-user-select: none;' +
        '-ms-user-select: none' +
        '}';
config/* Config.prototype.iframeCSSLinks */.D.prototype.iframeCSSLinks = [];

;// CONCATENATED MODULE: ./src/plugins/iframe/iframe.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





function iframe(editor) {
    const opt = editor.options;
    editor.e
        .on('afterSetMode', () => {
        if (editor.isEditorMode()) {
            editor.s.focus();
        }
    })
        .on('generateDocumentStructure.iframe', (__doc, jodit) => {
        const doc = __doc ||
            jodit.iframe
                .contentWindow.document;
        doc.open();
        doc.write(opt.iframeDoctype +
            `<html dir="${opt.direction}" class="jodit" lang="${(0,helpers.defaultLanguage)(opt.language)}">` +
            '<head>' +
            `<title>${opt.iframeTitle}</title>` +
            (opt.iframeBaseUrl
                ? `<base href="${opt.iframeBaseUrl}"/>`
                : '') +
            '</head>' +
            '<body class="jodit-wysiwyg"></body>' +
            '</html>');
        doc.close();
        if (opt.iframeCSSLinks) {
            opt.iframeCSSLinks.forEach(href => {
                const link = doc.createElement('link');
                link.setAttribute('rel', 'stylesheet');
                link.setAttribute('href', href);
                doc.head && doc.head.appendChild(link);
            });
        }
        if (opt.iframeStyle) {
            const style = doc.createElement('style');
            style.innerHTML = opt.iframeStyle;
            doc.head && doc.head.appendChild(style);
        }
    })
        .on('createEditor', () => {
        if (!opt.iframe) {
            return;
        }
        const iframe = editor.c.element('iframe');
        iframe.style.display = 'block';
        iframe.src = 'about:blank';
        iframe.className = 'jodit-wysiwyg_iframe';
        iframe.setAttribute('allowtransparency', 'true');
        iframe.setAttribute('tabindex', opt.tabIndex.toString());
        iframe.setAttribute('frameborder', '0');
        editor.workplace.appendChild(iframe);
        editor.iframe = iframe;
        const result = editor.e.fire('generateDocumentStructure.iframe', null, editor);
        const init = () => {
            if (!editor.iframe) {
                return false;
            }
            const doc = editor.iframe.contentWindow.document;
            editor.editorWindow = editor.iframe.contentWindow;
            const docMode = opt.editHTMLDocumentMode;
            const toggleEditable = () => {
                (0,helpers.attr)(doc.body, 'contenteditable', (editor.getMode() !== constants.MODE_SOURCE &&
                    !editor.getReadOnly()) ||
                    null);
            };
            const clearMarkers = (html) => {
                const bodyReg = /<body.*<\/body>/im, bodyMarker = '{%%BODY%%}', body = bodyReg.exec(html);
                if (body) {
                    html = html
                        .replace(bodyReg, bodyMarker)
                        .replace(/<span([^>]*?)>(.*?)<\/span>/gim, '')
                        .replace(/&lt;span([^&]*?)&gt;(.*?)&lt;\/span&gt;/gim, '')
                        .replace(bodyMarker, body[0]
                        .replace(/(<body[^>]+?)min-height["'\s]*:[\s"']*[0-9]+(px|%)/im, '$1')
                        .replace(/(<body[^>]+?)([\s]*["'])?contenteditable["'\s]*=[\s"']*true["']?/im, '$1')
                        .replace(/<(style|script|span)[^>]+jodit[^>]+>.*?<\/\1>/g, ''))
                        .replace(/(class\s*=\s*)(['"])([^"']*)(jodit-wysiwyg|jodit)([^"']*\2)/g, '$1$2$3$5')
                        .replace(/(<[^<]+?)\sclass="[\s]*"/gim, '$1')
                        .replace(/(<[^<]+?)\sstyle="[\s;]*"/gim, '$1')
                        .replace(/(<[^<]+?)\sdir="[\s]*"/gim, '$1');
                }
                return html;
            };
            if (docMode) {
                const tag = editor.element.tagName;
                if (tag !== 'TEXTAREA' && tag !== 'INPUT') {
                    throw (0,helpers.error)('If enable `editHTMLDocumentMode` - source element should be INPUT or TEXTAREA');
                }
                editor.e
                    .on('beforeGetNativeEditorValue', () => clearMarkers(editor.o.iframeDoctype +
                    doc.documentElement.outerHTML))
                    .on('beforeSetNativeEditorValue', ({ value }) => {
                    if (editor.isLocked) {
                        return false;
                    }
                    if (/<(html|body)/i.test(value)) {
                        const old = doc.documentElement.outerHTML;
                        if (clearMarkers(old) !==
                            clearMarkers(value)) {
                            doc.open();
                            doc.write(editor.o.iframeDoctype +
                                clearMarkers(value));
                            doc.close();
                            editor.editor = doc.body;
                            editor.e.fire('safeHTML', editor.editor);
                            toggleEditable();
                            editor.e.fire('prepareWYSIWYGEditor');
                            editor.e.stopPropagation('beforeSetNativeEditorValue');
                        }
                    }
                    else {
                        doc.body.innerHTML = value;
                    }
                    return true;
                }, { top: true });
            }
            editor.editor = doc.body;
            editor.e.on('afterSetMode afterInit afterAddPlace', toggleEditable);
            if (opt.height === 'auto') {
                doc.documentElement &&
                    (doc.documentElement.style.overflowY = 'hidden');
                const resizeIframe = editor.async.throttle(() => {
                    if (editor.editor &&
                        editor.iframe &&
                        opt.height === 'auto') {
                        const style = editor.ew.getComputedStyle(editor.editor), marginOffset = parseInt(style.marginTop || '0', 10) +
                            parseInt(style.marginBottom || '0', 10);
                        (0,helpers.css)(editor.iframe, 'height', editor.editor.offsetHeight + marginOffset);
                    }
                }, editor.defaultTimeout / 2);
                editor.e
                    .on('change afterInit afterSetMode resize', resizeIframe)
                    .on([editor.iframe, editor.ew, doc.documentElement], 'load', resizeIframe)
                    .on(doc, 'readystatechange DOMContentLoaded', resizeIframe);
                if (typeof ResizeObserver === 'function') {
                    const resizeObserver = new ResizeObserver(resizeIframe);
                    resizeObserver.observe(doc.body);
                    editor.e.on('beforeDestruct', () => {
                        resizeObserver.unobserve(doc.body);
                    });
                }
            }
            if (doc.documentElement) {
                editor.e
                    .on(doc.documentElement, 'mousedown touchend', () => {
                    if (!editor.s.isFocused()) {
                        editor.s.focus();
                        if (editor.editor === doc.body) {
                            editor.s.setCursorIn(doc.body);
                        }
                    }
                })
                    .on(editor.ew, 'mousedown touchstart keydown keyup touchend click mouseup mousemove scroll', (e) => {
                    var _a;
                    (_a = editor.events) === null || _a === void 0 ? void 0 : _a.fire(editor.ow, e);
                });
            }
            return false;
        };
        return (0,helpers.callPromise)(result, init);
    });
}
global/* pluginSystem.add */.pw.add('iframe', iframe);

;// CONCATENATED MODULE: ./src/plugins/image/image.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






icon/* Icon.set */.J.set('image', __webpack_require__(53477));
config/* Config.prototype.controls.image */.D.prototype.controls.image = {
    popup: (editor, current, self, close) => {
        let sourceImage = null;
        if (current &&
            !dom/* Dom.isText */.i.isText(current) &&
            dom/* Dom.isHTMLElement */.i.isHTMLElement(current) &&
            (dom/* Dom.isTag */.i.isTag(current, 'img') || (0,helpers.$$)('img', current).length)) {
            sourceImage = dom/* Dom.isTag */.i.isTag(current, 'img')
                ? current
                : (0,helpers.$$)('img', current)[0];
        }
        editor.s.save();
        return (0,widget/* FileSelectorWidget */.ov)(editor, {
            filebrowser: (data) => {
                editor.s.restore();
                data.files &&
                    data.files.forEach(file => editor.s.insertImage(data.baseurl + file, null, editor.o.imageDefaultWidth));
                close();
            },
            upload: true,
            url: async (url, text) => {
                editor.s.restore();
                if (/^[a-z\d_-]+(\.[a-z\d_-]+)+/i.test(url)) {
                    url = '//' + url;
                }
                const image = sourceImage || editor.createInside.element('img');
                image.setAttribute('src', url);
                image.setAttribute('alt', text);
                if (!sourceImage) {
                    await editor.s.insertImage(image, null, editor.o.imageDefaultWidth);
                }
                close();
            }
        }, sourceImage, close);
    },
    tags: ['img'],
    tooltip: 'Insert Image'
};
function image_image(editor) {
    editor.registerButton({
        name: 'image',
        group: 'media'
    });
}
global/* pluginSystem.add */.pw.add('image', image_image);

;// CONCATENATED MODULE: ./src/plugins/image-processor/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.imageProcessor */.D.prototype.imageProcessor = {
    replaceDataURIToBlobIdInView: true
};

;// CONCATENATED MODULE: ./src/plugins/image-processor/image-processor.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







const JODIT_IMAGE_PROCESSOR_BINDED = '__jodit_imageprocessor_binded';
const JODIT_IMAGE_BLOB_ID = JODIT_IMAGE_PROCESSOR_BINDED + 'blob-id';
class imageProcessor extends core_plugin/* Plugin */.S {
    afterInit(jodit) { }
    beforeDestruct(jodit) {
        const list = jodit.buffer.get(JODIT_IMAGE_BLOB_ID);
        if (list) {
            const keys = Object.keys(list);
            for (const uri of keys) {
                URL.revokeObjectURL(uri);
            }
            jodit.buffer.delete(JODIT_IMAGE_BLOB_ID);
        }
    }
    onAfterGetValueFromEditor(data, consumer) {
        if (consumer !== constants.SOURCE_CONSUMER) {
            return this.onBeforeSetElementValue(data);
        }
    }
    onBeforeSetElementValue(data) {
        const { jodit: editor } = this;
        if (!editor.o.imageProcessor.replaceDataURIToBlobIdInView) {
            return;
        }
        const list = editor.buffer.get(JODIT_IMAGE_BLOB_ID);
        if (list) {
            const keys = Object.keys(list);
            for (const uri of keys) {
                while (data.value.includes(uri)) {
                    data.value = data.value.replace(uri, list[uri]);
                }
            }
        }
    }
    async afterChange(data) {
        const { jodit: editor } = this;
        if (!editor.editor) {
            return;
        }
        (0,helpers.$$)('img', editor.editor).forEach(elm => {
            if (!(0,helpers.dataBind)(elm, JODIT_IMAGE_PROCESSOR_BINDED)) {
                (0,helpers.dataBind)(elm, JODIT_IMAGE_PROCESSOR_BINDED, true);
                if (!elm.complete) {
                    editor.e.on(elm, 'load', function ElementOnLoad() {
                        var _a;
                        !editor.isInDestruct && ((_a = editor.e) === null || _a === void 0 ? void 0 : _a.fire('resize'));
                        editor.e.off(elm, 'load', ElementOnLoad);
                    });
                }
                if (elm.src && /^data:/.test(elm.src)) {
                    replaceDataURIToBlobUUID(editor, elm);
                }
                editor.e.on(elm, 'mousedown touchstart', () => {
                    editor.s.select(elm);
                });
            }
        });
    }
}
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':afterGetValueFromEditor')
], imageProcessor.prototype, "onAfterGetValueFromEditor", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':beforeSetElementValue')
], imageProcessor.prototype, "onBeforeSetElementValue", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)([':change', ':afterInit', ':changePlace']),
    (0,decorators.debounce)()
], imageProcessor.prototype, "afterChange", null);
function replaceDataURIToBlobUUID(editor, elm) {
    if (!editor.o.imageProcessor.replaceDataURIToBlobIdInView) {
        return;
    }
    if (typeof ArrayBuffer === 'undefined' || typeof URL === 'undefined') {
        return;
    }
    const dataUri = elm.src, blob = dataURItoBlob(dataUri);
    elm.src = URL.createObjectURL(blob);
    editor.e.fire('internalUpdate');
    const { buffer } = editor;
    const list = buffer.get(JODIT_IMAGE_BLOB_ID) || {};
    list[elm.src] = dataUri;
    editor.buffer.set(JODIT_IMAGE_BLOB_ID, list);
}
function dataURItoBlob(dataURI) {
    const byteString = atob(dataURI.split(',')[1]);
    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
    const ab = new ArrayBuffer(byteString.length);
    const ia = new Uint8Array(ab);
    for (let i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
    }
    return new Blob([ab], { type: mimeString });
}
global/* pluginSystem.add */.pw.add('imageProcessor', imageProcessor);

// EXTERNAL MODULE: ./src/core/ui/button/index.ts + 2 modules
var ui_button = __webpack_require__(17460);
// EXTERNAL MODULE: ./src/modules/image-editor/image-editor.ts + 2 modules
var image_editor = __webpack_require__(21121);
;// CONCATENATED MODULE: ./src/plugins/image-properties/templates/form.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function form_form(editor) {
    const { showPreview, editSize } = editor.o.image, gi = icon/* Icon.get.bind */.J.get.bind(icon/* Icon */.J);
    return editor.c.fromHTML(`<form class="jodit-properties">
		<div class="jodit-grid jodit-grid_xs-column">
			<div class="jodit_col-lg-2-5 jodit_col-xs-5-5">
				<div class="jodit-properties_view_box">
					<div style="${!showPreview ? 'display:none' : ''}" class="jodit-properties_image_view">
						<img data-ref="imageViewSrc" src="" alt=""/>
					</div>
					<div style="${!editSize ? 'display:none' : ''}" class="jodit-form__group jodit-properties_image_sizes">
						<input data-ref="imageWidth" type="text" class="jodit-input"/>
						<a data-ref="lockSize" class="jodit-properties__lock">${gi('lock')}</a>
						<input data-ref="imageHeight" type="text" class="imageHeight jodit-input"/>
					</div>
				</div>
			</div>
			<div data-ref="tabsBox" class="jodit_col-lg-3-5 jodit_col-xs-5-5"></div>
		</div>
	</form>`);
}

;// CONCATENATED MODULE: ./src/plugins/image-properties/templates/main-tab.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function mainTab(editor) {
    const opt = editor.o, i18n = editor.i18n.bind(editor), gi = icon/* Icon.get.bind */.J.get.bind(icon/* Icon */.J), hasFbUrl = opt.filebrowser.ajax.url || opt.uploader.url, hasEditor = opt.image.useImageEditor;
    return editor.c.fromHTML(`<div style="${!opt.image.editSrc ? 'display:none' : ''}" class="jodit-form__group">
			<label>${i18n('Src')}</label>
			<div class="jodit-input_group">
				<input data-ref="imageSrc" class="jodit-input" type="text"/>
				<div
					class="jodit-input_group-buttons"
					style="${hasFbUrl ? '' : 'display: none'}"
				>
						<a
							data-ref="changeImage"
							class="jodit-button"
						>${gi('image')}</a>
						<a
							data-ref="editImage"
							class="jodit-button"
							style="${hasEditor ? '' : 'display: none'}"
						>${gi('crop')}</a>
				</div>
			</div>
		</div>
		<div style="${!opt.image.editTitle ? 'display:none' : ''}" class="jodit-form__group">
			<label>${i18n('Title')}</label>
			<input data-ref="imageTitle" type="text" class="jodit-input"/>
		</div>
		<div style="${!opt.image.editAlt ? 'display:none' : ''}" class="jodit-form__group">
			<label>${i18n('Alternative')}</label>
			<input data-ref="imageAlt" type="text" class="jodit-input"/>
		</div>
		<div style="${!opt.image.editLink ? 'display:none' : ''}" class="jodit-form__group">
			<label>${i18n('Link')}</label>
			<input data-ref="imageLink" type="text" class="jodit-input"/>
		</div>
		<div style="${!opt.image.editLink ? 'display:none' : ''}" class="jodit-form__group">
			<label class="jodit_vertical_middle">
				<input data-ref="imageLinkOpenInNewTab" type="checkbox" class="jodit-checkbox"/>
				<span>${i18n('Open link in new tab')}</span>
			</label>
		</div>`);
}

;// CONCATENATED MODULE: ./src/plugins/image-properties/templates/position-tab.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function positionTab(editor) {
    const opt = editor.o, i18n = editor.i18n.bind(editor), gi = icon/* Icon.get.bind */.J.get.bind(icon/* Icon */.J);
    return editor.c.fromHTML(`<div style="${!opt.image.editMargins ? 'display:none' : ''}" class="jodit-form__group">
			<label>${i18n('Margins')}</label>
			<div class="jodit-grid jodit_vertical_middle">
				<input class="jodit_col-lg-1-5 jodit-input" data-ref="marginTop" type="text" placeholder="${i18n('top')}"/>
				<a style="text-align: center;" data-ref="lockMargin" class="jodit-properties__lock jodit_col-lg-1-5">${gi('lock')}</a>
				<input disabled="true" class="jodit_col-lg-1-5 jodit-input" data-ref="marginRight" type="text" placeholder="${i18n('right')}"/>
				<input disabled="true" class="jodit_col-lg-1-5 jodit-input" data-ref="marginBottom" type="text" placeholder="${i18n('bottom')}"/>
				<input disabled="true" class="jodit_col-lg-1-5 jodit-input" data-ref="marginLeft" type="text" placeholder="${i18n('left')}"/>
			</div>
		</div>
		<div
			style="${!opt.image.editAlign ? 'display:none' : ''}"
			class="jodit-form__group"
		>
			<label>${i18n('Align')}</label>
			<select data-ref="align" class="jodit-select">
				<option value="">${i18n('--Not Set--')}</option>
				<option value="left">${i18n('Left')}</option>
				<option value="center">${i18n('Center')}</option>
				<option value="right">${i18n('Right')}</option>
			</select>
		</div>
		<div style="${!opt.image.editStyle ? 'display:none' : ''}" class="jodit-form__group">
			<label>${i18n('Styles')}</label>
			<input data-ref="style" type="text" class="jodit-input"/>
		</div>
		<div style="${!opt.image.editClass ? 'display:none' : ''}" class="jodit-form__group">
			<label>${i18n('Classes')}</label>
			<input data-ref="classes" type="text" class="jodit-input"/>
		</div>
		<div style="${!opt.image.editId ? 'display:none' : ''}" class="jodit-form__group">
			<label>Id</label>
			<input data-ref="id" type="text" class="jodit-input"/>
		</div>
		<div
			style="${!opt.image.editBorderRadius ? 'display:none' : ''}"
			class="jodit-form__group"
		>
			<label>${i18n('Border radius')}</label>
				<input data-ref="borderRadius" type="number" class="jodit-input"/>
		</div>`);
}

;// CONCATENATED MODULE: ./src/plugins/image-properties/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.image */.D.prototype.image = {
    dialogWidth: 600,
    openOnDblClick: true,
    editSrc: true,
    useImageEditor: true,
    editTitle: true,
    editAlt: true,
    editLink: true,
    editSize: true,
    editBorderRadius: true,
    editMargins: true,
    editClass: true,
    editStyle: true,
    editId: true,
    editAlign: true,
    showPreview: true,
    selectImageAfterClose: true
};

;// CONCATENATED MODULE: ./src/plugins/image-properties/image-properties.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */













const normalSizeToString = (value) => {
    value = (0,helpers.trim)(value);
    return /^[0-9]+$/.test(value) ? value + 'px' : value;
};
const normalSizeFromString = (value) => {
    return /^[-+]?[0-9.]+px$/.test(value.toString())
        ? parseFloat(value.toString())
        : value;
};
class imageProperties extends modules.Plugin {
    constructor() {
        super(...arguments);
        this.state = {
            image: new Image(),
            get ratio() {
                return this.image.naturalWidth / this.image.naturalHeight || 1;
            },
            sizeIsLocked: true,
            marginIsLocked: true
        };
        this.activeTabState = {
            __activeTab: 'Image'
        };
    }
    onChangeMarginIsLocked() {
        if (!this.form) {
            return;
        }
        const { marginRight, marginBottom, marginLeft, lockMargin } = (0,helpers.refs)(this.form);
        [marginRight, marginBottom, marginLeft].forEach(elm => {
            (0,helpers.attr)(elm, 'disabled', this.state.marginIsLocked || null);
        });
        lockMargin.innerHTML = modules.Icon.get(this.state.marginIsLocked ? 'lock' : 'unlock');
    }
    onChangeSizeIsLocked() {
        if (!this.form) {
            return;
        }
        const { lockSize, imageWidth } = (0,helpers.refs)(this.form);
        lockSize.innerHTML = modules.Icon.get(this.state.sizeIsLocked ? 'lock' : 'unlock');
        lockSize.classList.remove('jodit-properties__lock');
        lockSize.classList.remove('jodit-properties__unlock');
        lockSize.classList.add(this.state.sizeIsLocked
            ? 'jodit-properties__lock'
            : 'jodit-properties__unlock');
        this.j.e.fire(imageWidth, 'change');
    }
    open() {
        this.makeForm();
        this.activeTabState.__activeTab = 'Image';
        this.j.e.fire('hidePopup');
        (0,helpers.markOwner)(this.j, this.dialog.container);
        this.state.marginIsLocked = true;
        this.state.sizeIsLocked = true;
        this.onChangeMarginIsLocked();
        this.onChangeSizeIsLocked();
        this.updateValues();
        this.dialog.open().setModal(true).setPosition();
        return false;
    }
    makeForm() {
        if (this.dialog) {
            return;
        }
        this.dialog = this.j.dlg({
            minWidth: Math.min(400, screen.width),
            minHeight: 590,
            buttons: ['fullsize', 'dialog.close']
        });
        const editor = this.j, opt = editor.o, i18n = editor.i18n.bind(editor), buttons = {
            check: (0,ui_button/* Button */.zx)(editor, 'ok', 'Apply', 'primary'),
            remove: (0,ui_button/* Button */.zx)(editor, 'bin', 'Delete')
        };
        editor.e.on(this.dialog, 'afterClose', () => {
            if (this.state.image.parentNode &&
                opt.image.selectImageAfterClose) {
                editor.s.select(this.state.image);
            }
        });
        buttons.remove.onAction(() => {
            editor.s.removeNode(this.state.image);
            this.dialog.close();
        });
        const { dialog } = this;
        dialog.setHeader(i18n('Image properties'));
        const mainForm = form_form(editor);
        this.form = mainForm;
        dialog.setContent(mainForm);
        const { tabsBox } = (0,helpers.refs)(this.form);
        if (tabsBox) {
            tabsBox.appendChild((0,widget/* TabsWidget */.IL)(editor, [
                { name: 'Image', content: mainTab(editor) },
                { name: 'Advanced', content: positionTab(editor) }
            ], this.activeTabState));
        }
        buttons.check.onAction(this.onApply);
        const { changeImage, editImage } = (0,helpers.refs)(this.form);
        editor.e.on(changeImage, 'click', this.openImagePopup);
        if (opt.image.useImageEditor) {
            editor.e.on(editImage, 'click', this.openImageEditor);
        }
        const { lockSize, lockMargin, imageWidth, imageHeight } = (0,helpers.refs)(mainForm);
        if (lockSize) {
            editor.e.on(lockSize, 'click', () => {
                this.state.sizeIsLocked = !this.state.sizeIsLocked;
            });
        }
        editor.e.on(lockMargin, 'click', (e) => {
            this.state.marginIsLocked = !this.state.marginIsLocked;
            e.preventDefault();
        });
        const changeSizes = (event) => {
            if (!(0,helpers.isNumeric)(imageWidth.value) || !(0,helpers.isNumeric)(imageHeight.value)) {
                return;
            }
            const w = parseFloat(imageWidth.value), h = parseFloat(imageHeight.value);
            if (event.target === imageWidth) {
                imageHeight.value = Math.round(w / this.state.ratio).toString();
            }
            else {
                imageWidth.value = Math.round(h * this.state.ratio).toString();
            }
        };
        editor.e.on([imageWidth, imageHeight], 'change keydown mousedown paste', (event) => {
            if (!this.state.sizeIsLocked) {
                return;
            }
            editor.async.setTimeout(changeSizes.bind(this, event), {
                timeout: editor.defaultTimeout,
                label: 'image-properties-changeSize'
            });
        });
        dialog.setFooter([buttons.remove, buttons.check]);
        dialog.setSize(this.j.o.image.dialogWidth);
    }
    updateValues() {
        const opt = this.j.o;
        const { image } = this.state;
        const { marginTop, marginRight, marginBottom, marginLeft, lockMargin, imageSrc, id, classes, align, style, imageTitle, imageAlt, borderRadius, imageLink, imageWidth, imageHeight, imageLinkOpenInNewTab, imageViewSrc, lockSize } = (0,helpers.refs)(this.form);
        const updateLock = () => {
            lockMargin.checked = this.state.marginIsLocked;
            lockSize.checked = this.state.sizeIsLocked;
        }, updateAlign = () => {
            if (image.style.cssFloat &&
                ['left', 'right'].indexOf(image.style.cssFloat.toLowerCase()) !== -1) {
                align.value = (0,helpers.css)(image, 'float');
            }
            else {
                if ((0,helpers.css)(image, 'display') === 'block' &&
                    image.style.marginLeft === 'auto' &&
                    image.style.marginRight === 'auto') {
                    align.value = 'center';
                }
            }
        }, updateBorderRadius = () => {
            borderRadius.value = (parseInt(image.style.borderRadius || '0', 10) || '0').toString();
        }, updateId = () => {
            id.value = (0,helpers.attr)(image, 'id') || '';
        }, updateStyle = () => {
            style.value = (0,helpers.attr)(image, 'style') || '';
        }, updateClasses = () => {
            classes.value = ((0,helpers.attr)(image, 'class') || '').replace(/jodit_focused_image[\s]*/, '');
        }, updateMargins = () => {
            if (!opt.image.editMargins) {
                return;
            }
            let equal = true, wasEmptyField = false;
            [marginTop, marginRight, marginBottom, marginLeft].forEach(elm => {
                const id = (0,helpers.attr)(elm, 'data-ref') || '';
                let value = image.style.getPropertyValue((0,helpers.kebabCase)(id));
                if (!value) {
                    wasEmptyField = true;
                    elm.value = '';
                    return;
                }
                if (/^[0-9]+(px)?$/.test(value)) {
                    value = parseInt(value, 10);
                }
                elm.value = value.toString() || '';
                if ((wasEmptyField && elm.value) ||
                    (equal &&
                        id !== 'marginTop' &&
                        elm.value !== marginTop.value)) {
                    equal = false;
                }
            });
            this.state.marginIsLocked = equal;
        }, updateSizes = () => {
            const width = (0,helpers.attr)(image, 'width') ||
                (0,helpers.css)(image, 'width', true) ||
                false, height = (0,helpers.attr)(image, 'height') ||
                (0,helpers.css)(image, 'height', true) ||
                false;
            imageWidth.value =
                width !== false
                    ? normalSizeFromString(width).toString()
                    : image.offsetWidth.toString();
            imageHeight.value =
                height !== false
                    ? normalSizeFromString(height).toString()
                    : image.offsetHeight.toString();
            this.state.sizeIsLocked = (() => {
                if (!(0,helpers.isNumeric)(imageWidth.value) ||
                    !(0,helpers.isNumeric)(imageHeight.value)) {
                    return false;
                }
                const w = parseFloat(imageWidth.value), h = parseFloat(imageHeight.value);
                return Math.abs(w - h * this.state.ratio) < 1;
            })();
        }, updateText = () => {
            imageTitle.value = (0,helpers.attr)(image, 'title') || '';
            imageAlt.value = (0,helpers.attr)(image, 'alt') || '';
            const a = modules.Dom.closest(image, 'a', this.j.editor);
            if (a) {
                imageLink.value = (0,helpers.attr)(a, 'href') || '';
                imageLinkOpenInNewTab.checked =
                    (0,helpers.attr)(a, 'target') === '_blank';
            }
            else {
                imageLink.value = '';
                imageLinkOpenInNewTab.checked = false;
            }
        }, updateSrc = () => {
            imageSrc.value = (0,helpers.attr)(image, 'src') || '';
            if (imageViewSrc) {
                (0,helpers.attr)(imageViewSrc, 'src', (0,helpers.attr)(image, 'src') || '');
            }
        };
        updateLock();
        updateSrc();
        updateText();
        updateSizes();
        updateMargins();
        updateClasses();
        updateId();
        updateBorderRadius();
        updateAlign();
        updateStyle();
    }
    onApply() {
        const { style, imageSrc, borderRadius, imageTitle, imageAlt, imageLink, imageWidth, imageHeight, marginTop, marginRight, marginBottom, marginLeft, imageLinkOpenInNewTab, align, classes, id } = (0,helpers.refs)(this.form);
        const opt = this.j.o;
        const { image } = this.state;
        if (opt.image.editStyle) {
            (0,helpers.attr)(image, 'style', style.value || null);
        }
        if (imageSrc.value) {
            (0,helpers.attr)(image, 'src', imageSrc.value);
        }
        else {
            modules.Dom.safeRemove(image);
            this.dialog.close();
            return;
        }
        if (borderRadius.value !== '0' && /^[0-9]+$/.test(borderRadius.value)) {
            image.style.borderRadius = borderRadius.value + 'px';
        }
        else {
            image.style.borderRadius = '';
        }
        (0,helpers.attr)(image, 'title', imageTitle.value || null);
        (0,helpers.attr)(image, 'alt', imageAlt.value || null);
        let link = modules.Dom.closest(image, 'a', this.j.editor);
        if (imageLink.value) {
            if (!link) {
                link = modules.Dom.wrap(image, 'a', this.j.createInside);
            }
            (0,helpers.attr)(link, 'href', imageLink.value);
            (0,helpers.attr)(link, 'target', imageLinkOpenInNewTab.checked ? '_blank' : null);
        }
        else {
            if (link && link.parentNode) {
                link.parentNode.replaceChild(image, link);
            }
        }
        if (imageWidth.value !== image.offsetWidth.toString() ||
            imageHeight.value !== image.offsetHeight.toString()) {
            const updatedtWidth = (0,helpers.trim)(imageWidth.value)
                ? normalSizeToString(imageWidth.value)
                : null;
            const updatedHeight = (0,helpers.trim)(imageHeight.value)
                ? normalSizeToString(imageHeight.value)
                : null;
            (0,helpers.css)(image, {
                width: updatedtWidth,
                height: updatedHeight
            });
            (0,helpers.attr)(image, 'width', (0,helpers.attr)(image, 'width') ? updatedtWidth : null);
            (0,helpers.attr)(image, 'height', (0,helpers.attr)(image, 'height') ? updatedHeight : null);
        }
        const margins = [marginTop, marginRight, marginBottom, marginLeft];
        if (opt.image.editMargins) {
            if (!this.state.marginIsLocked) {
                margins.forEach((margin) => {
                    const side = (0,helpers.attr)(margin, 'data-ref') || '';
                    (0,helpers.css)(image, side, normalSizeToString(margin.value));
                });
            }
            else {
                (0,helpers.css)(image, 'margin', normalSizeToString(marginTop.value));
            }
        }
        if (opt.image.editClass) {
            (0,helpers.attr)(image, 'class', classes.value || null);
        }
        if (opt.image.editId) {
            (0,helpers.attr)(image, 'id', id.value || null);
        }
        if (opt.image.editAlign) {
            (0,helpers.hAlignElement)(image, align.value);
        }
        this.j.synchronizeValues();
        this.dialog.close();
    }
    openImageEditor() {
        const url = (0,helpers.attr)(this.state.image, 'src') || '', a = this.j.c.element('a'), loadExternal = () => {
            if (a.host !== location.host) {
                this.j.confirm('You can only edit your own images. Download this image on the host?', yes => {
                    if (yes && this.j.uploader) {
                        this.j.uploader.uploadRemoteImage(a.href.toString(), resp => {
                            this.j.alert('The image has been successfully uploaded to the host!', () => {
                                if ((0,helpers.isString)(resp.newfilename)) {
                                    (0,helpers.attr)(this.state.image, 'src', resp.baseurl +
                                        resp.newfilename);
                                    this.updateValues();
                                }
                            });
                        }, error => {
                            this.j.alert('There was an error loading %s', error.message);
                        });
                    }
                });
                return;
            }
        };
        a.href = url;
        this.j.filebrowser.dataProvider
            .getPathByUrl(a.href.toString())
            .then(resp => {
            image_editor/* openImageEditor.call */.r.call(this.j.filebrowser, a.href, resp.name, resp.path, resp.source, () => {
                const timestamp = new Date().getTime();
                (0,helpers.attr)(this.state.image, 'src', url +
                    (url.indexOf('?') !== -1 ? '' : '?') +
                    '&_tmp=' +
                    timestamp.toString());
                this.updateValues();
            }, error => {
                this.j.alert(error.message);
            });
        })
            .catch(error => {
            this.j.alert(error.message, loadExternal);
        });
    }
    openImagePopup(event) {
        const popup = new modules.Popup(this.j), { changeImage } = (0,helpers.refs)(this.form);
        popup.setZIndex(this.dialog.getZIndex() + 1);
        popup
            .setContent((0,widget/* FileSelectorWidget */.ov)(this.j, {
            upload: (data) => {
                if (data.files && data.files.length) {
                    (0,helpers.attr)(this.state.image, 'src', data.baseurl + data.files[0]);
                }
                this.updateValues();
                popup.close();
            },
            filebrowser: (data) => {
                if (data &&
                    (0,helpers.isArray)(data.files) &&
                    data.files.length) {
                    (0,helpers.attr)(this.state.image, 'src', data.files[0]);
                    popup.close();
                    this.updateValues();
                }
            }
        }, this.state.image, popup.close))
            .open(() => (0,helpers.position)(changeImage));
        event.stopPropagation();
    }
    afterInit(editor) {
        const self = this;
        editor.e
            .on('afterConstructor changePlace', () => {
            editor.e
                .off(editor.editor, '.imageproperties')
                .on(editor.editor, 'dblclick.imageproperties', (e) => {
                const image = e.target;
                if (!modules.Dom.isTag(image, 'img')) {
                    return;
                }
                if (editor.o.image.openOnDblClick) {
                    if (this.j.e.fire('openOnDblClick', image) ===
                        false) {
                        return;
                    }
                    self.state.image = image;
                    if (!editor.o.readonly) {
                        e.stopImmediatePropagation();
                        e.preventDefault();
                        self.open();
                    }
                }
                else {
                    e.stopImmediatePropagation();
                    editor.s.select(image);
                }
            });
        })
            .on('openImageProperties.imageproperties', (image) => {
            this.state.image = image;
            this.open();
        });
    }
    beforeDestruct(editor) {
        this.dialog && this.dialog.destruct();
        editor.e.off(editor.editor, '.imageproperties').off('.imageproperties');
    }
}
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)('state.marginIsLocked')
], imageProperties.prototype, "onChangeMarginIsLocked", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)('state.sizeIsLocked')
], imageProperties.prototype, "onChangeSizeIsLocked", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], imageProperties.prototype, "onApply", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], imageProperties.prototype, "openImageEditor", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], imageProperties.prototype, "openImagePopup", null);
global/* pluginSystem.add */.pw.add('imageProperties', imageProperties);

;// CONCATENATED MODULE: ./src/plugins/indent/helpers.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

const getKey = (direction, box) => `${dom_dom/* Dom.isCell */.i.isCell(box) ? 'padding' : 'margin'}${direction === 'rtl' ? 'Right' : 'Left'}`;

;// CONCATENATED MODULE: ./src/plugins/indent/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




icon/* Icon.set */.J.set('indent', __webpack_require__(90053)).set('outdent', __webpack_require__(72230));
config/* Config.prototype.controls.indent */.D.prototype.controls.indent = {
    tooltip: 'Increase Indent'
};
config/* Config.prototype.controls.outdent */.D.prototype.controls.outdent = {
    isDisabled: (editor) => {
        const current = editor.s.current();
        if (current) {
            const currentBox = dom/* Dom.closest */.i.closest(current, dom/* Dom.isBlock */.i.isBlock, editor.editor);
            if (currentBox) {
                const arrow = getKey(editor.o.direction, currentBox);
                return (!currentBox.style[arrow] ||
                    parseInt(currentBox.style[arrow], 10) <= 0);
            }
        }
        return true;
    },
    tooltip: 'Decrease Indent'
};
config/* Config.prototype.indentMargin */.D.prototype.indentMargin = 10;

;// CONCATENATED MODULE: ./src/plugins/indent/indent.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






function indent(editor) {
    editor
        .registerButton({
        name: 'indent',
        group: 'indent'
    })
        .registerButton({
        name: 'outdent',
        group: 'indent'
    });
    const callback = (command) => {
        const processedElements = [];
        editor.s.eachSelection((current) => {
            editor.s.save();
            let currentBox = current
                ? dom/* Dom.up */.i.up(current, dom/* Dom.isBlock */.i.isBlock, editor.editor)
                : false;
            const { enter } = editor.o;
            if (!currentBox && current) {
                currentBox = dom/* Dom.wrapInline */.i.wrapInline(current, enter !== constants.BR ? enter : constants.PARAGRAPH, editor);
            }
            if (!currentBox) {
                editor.s.restore();
                return false;
            }
            const alreadyIndented = processedElements.includes(currentBox);
            if (currentBox && !alreadyIndented) {
                const key = getKey(editor.o.direction, currentBox);
                processedElements.push(currentBox);
                let value = currentBox.style[key]
                    ? parseInt(currentBox.style[key], 10)
                    : 0;
                value +=
                    editor.o.indentMargin * (command === 'outdent' ? -1 : 1);
                currentBox.style[key] = value > 0 ? value + 'px' : '';
                if (!(0,helpers.attr)(currentBox, 'style')) {
                    (0,helpers.attr)(currentBox, 'style', null);
                }
            }
            editor.s.restore();
        });
        editor.synchronizeValues();
        return false;
    };
    editor.registerCommand('indent', {
        exec: callback,
        hotkeys: ['ctrl+]', 'cmd+]']
    });
    editor.registerCommand('outdent', {
        exec: callback,
        hotkeys: ['ctrl+[', 'cmd+[']
    });
}
global/* pluginSystem.add */.pw.add('indent', indent);

// EXTERNAL MODULE: ./src/modules/toolbar/factory.ts
var factory = __webpack_require__(42701);
// EXTERNAL MODULE: ./src/core/ui/popup/index.ts
var popup = __webpack_require__(990);
;// CONCATENATED MODULE: ./src/plugins/inline-popup/config/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


config/* Config.prototype.toolbarInline */.D.prototype.toolbarInline = true;
config/* Config.prototype.toolbarInlineForSelection */.D.prototype.toolbarInlineForSelection = false;
config/* Config.prototype.toolbarInlineDisableFor */.D.prototype.toolbarInlineDisableFor = [];
config/* Config.prototype.toolbarInlineDisabledButtons */.D.prototype.toolbarInlineDisabledButtons = ['source'];
icon/* Icon.set */.J.set('addcolumn', __webpack_require__(78321))
    .set('addrow', __webpack_require__(77654))
    .set('merge', __webpack_require__(43371))
    .set('th', __webpack_require__(52242))
    .set('splitg', __webpack_require__(44563))
    .set('splitv', __webpack_require__(53183))
    .set('th-list', __webpack_require__(6102));
config/* Config.prototype.popup */.D.prototype.popup = {
    a: (__webpack_require__(58169)/* ["default"] */ .Z),
    img: (__webpack_require__(92534)/* ["default"] */ .Z),
    cells: (__webpack_require__(40373)/* ["default"] */ .Z),
    toolbar: (__webpack_require__(25328)/* ["default"] */ .Z),
    jodit: (__webpack_require__(21651)/* ["default"] */ .Z),
    iframe: (__webpack_require__(21651)/* ["default"] */ .Z),
    'jodit-media': (__webpack_require__(21651)/* ["default"] */ .Z),
    selection: [
        'bold',
        'underline',
        'italic',
        'ul',
        'ol',
        '\n',
        'outdent',
        'indent',
        'fontsize',
        'brush',
        'cut',
        '\n',
        'paragraph',
        'link',
        'align',
        'dots'
    ]
};

;// CONCATENATED MODULE: ./src/plugins/inline-popup/inline-popup.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */











class inlinePopup extends core_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.requires = ['select'];
        this.type = null;
        this.popup = new popup/* Popup */.G(this.jodit, false);
        this.toolbar = (0,factory/* makeCollection */.R)(this.jodit, this.popup);
        this.snapRange = null;
        this.elmsList = (0,helpers.keys)(this.j.o.popup, false).filter(s => !this.isExcludedTarget(s));
    }
    onClick(node) {
        const elements = this.elmsList, target = dom/* Dom.isTag */.i.isTag(node, 'img')
            ? node
            : dom/* Dom.closest */.i.closest(node, elements, this.j.editor);
        if (target && this.canShowPopupForType(target.nodeName.toLowerCase())) {
            this.showPopup(() => (0,helpers.position)(target, this.j), target.nodeName.toLowerCase(), target);
            return false;
        }
    }
    showPopup(rect, type, target) {
        type = type.toLowerCase();
        if (!this.canShowPopupForType(type)) {
            return false;
        }
        if (this.type !== type || target !== this.previousTarget) {
            this.previousTarget = target;
            const data = this.j.o.popup[type];
            let content;
            if ((0,helpers.isFunction)(data)) {
                content = data(this.j, target, this.popup.close);
            }
            else {
                content = data;
            }
            if ((0,helpers.isArray)(content)) {
                this.toolbar.build(content, target);
                this.toolbar.buttonSize = this.j.o.toolbarButtonSize;
                content = this.toolbar.container;
            }
            this.popup.setContent(content);
            this.type = type;
        }
        this.popup.open(rect);
        return true;
    }
    hidePopup(type) {
        if (!(0,helpers.isString)(type) || type === this.type) {
            this.popup.close();
        }
    }
    onOutsideClick() {
        this.popup.close();
    }
    canShowPopupForType(type) {
        const data = this.j.o.popup[type.toLowerCase()];
        if (this.j.o.readonly || !this.j.o.toolbarInline || !data) {
            return false;
        }
        return !this.isExcludedTarget(type);
    }
    isExcludedTarget(type) {
        return (0,helpers.splitArray)(this.j.o.toolbarInlineDisableFor)
            .map(a => a.toLowerCase())
            .includes(type.toLowerCase());
    }
    afterInit(jodit) {
        this.j.e
            .on('getDiffButtons.mobile', (toolbar) => {
            if (this.toolbar === toolbar) {
                const names = this.toolbar.getButtonsNames();
                return (0,helpers.toArray)(jodit.registeredButtons)
                    .filter(btn => !this.j.o.toolbarInlineDisabledButtons.includes(btn.name))
                    .filter(item => {
                    const name = (0,helpers.isString)(item) ? item : item.name;
                    return (name &&
                        name !== '|' &&
                        name !== '\n' &&
                        !names.includes(name));
                });
            }
        })
            .on('hidePopup', this.hidePopup)
            .on('showInlineToolbar', this.showInlineToolbar)
            .on('showPopup', (elm, rect, type) => {
            this.showPopup(rect, type || ((0,helpers.isString)(elm) ? elm : elm.nodeName), (0,helpers.isString)(elm) ? undefined : elm);
        })
            .on('mousedown keydown', this.onSelectionStart)
            .on('change', () => {
            if (this.popup.isOpened &&
                this.previousTarget &&
                !this.previousTarget.parentNode) {
                this.hidePopup();
                this.previousTarget = undefined;
            }
        })
            .on([this.j.ew, this.j.ow], 'mouseup keyup', this.onSelectionEnd);
        this.addListenersForElements();
    }
    onSelectionStart() {
        this.snapRange = this.j.s.range.cloneRange();
    }
    onSelectionEnd(e) {
        if (e &&
            e.target &&
            ui/* UIElement.closestElement */.u1.closestElement(e.target, popup/* Popup */.G)) {
            return;
        }
        const { snapRange } = this, { range } = this.j.s;
        if (!snapRange ||
            range.collapsed ||
            range.startContainer !== snapRange.startContainer ||
            range.startOffset !== snapRange.startOffset ||
            range.endContainer !== snapRange.endContainer ||
            range.endOffset !== snapRange.endOffset) {
            this.onSelectionChange();
        }
    }
    onSelectionChange() {
        if (!this.j.o.toolbarInlineForSelection) {
            return;
        }
        const type = 'selection', sel = this.j.s.sel, range = this.j.s.range;
        if ((sel === null || sel === void 0 ? void 0 : sel.isCollapsed) ||
            this.isSelectedTarget(range) ||
            this.tableModule.getAllSelectedCells().length) {
            if (this.type === type && this.popup.isOpened) {
                this.hidePopup();
            }
            return;
        }
        const node = this.j.s.current();
        if (!node) {
            return;
        }
        this.showPopup(() => range.getBoundingClientRect(), type);
    }
    isSelectedTarget(r) {
        const sc = r.startContainer;
        return (dom/* Dom.isElement */.i.isElement(sc) &&
            sc === r.endContainer &&
            dom/* Dom.isTag */.i.isTag(sc.childNodes[r.startOffset], (0,helpers.keys)(this.j.o.popup, false)) &&
            r.startOffset === r.endOffset - 1);
    }
    get tableModule() {
        return this.j.getInstance('Table', this.j.o);
    }
    beforeDestruct(jodit) {
        jodit.e
            .off('showPopup')
            .off([this.j.ew, this.j.ow], 'mouseup keyup', this.onSelectionEnd);
        this.removeListenersForElements();
    }
    _eventsList() {
        const el = this.elmsList;
        return el
            .map(e => (0,helpers.camelCase)(`click_${e}`))
            .concat(el.map(e => (0,helpers.camelCase)(`touchstart_${e}`)))
            .join(' ');
    }
    addListenersForElements() {
        this.j.e.on(this._eventsList(), this.onClick);
    }
    removeListenersForElements() {
        this.j.e.off(this._eventsList(), this.onClick);
    }
    showInlineToolbar(bound) {
        this.showPopup(() => {
            if (bound) {
                return bound;
            }
            const { range } = this.j.s;
            return range.getBoundingClientRect();
        }, 'toolbar');
    }
}
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], inlinePopup.prototype, "onClick", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.wait)((ctx) => !ctx.j.isLocked)
], inlinePopup.prototype, "showPopup", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':clickEditor'),
    decorators.autobind
], inlinePopup.prototype, "hidePopup", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':outsideClick')
], inlinePopup.prototype, "onOutsideClick", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], inlinePopup.prototype, "onSelectionStart", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], inlinePopup.prototype, "onSelectionEnd", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.debounce)(ctx => ctx.defaultTimeout)
], inlinePopup.prototype, "onSelectionChange", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], inlinePopup.prototype, "showInlineToolbar", null);
global/* pluginSystem.add */.pw.add('inlinePopup', inlinePopup);

// EXTERNAL MODULE: ./src/core/helpers/utils/align.ts
var align = __webpack_require__(49359);
;// CONCATENATED MODULE: ./src/plugins/justify/justify.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






icon/* Icon.set */.J.set('justify', __webpack_require__(87498));
config/* Config.prototype.controls.align */.D.prototype.controls.align = {
    name: 'left',
    tooltip: 'Align',
    update(button, editor) {
        const control = button.control, current = editor.s.current();
        if (current) {
            const currentBox = dom_dom/* Dom.closest */.i.closest(current, dom_dom/* Dom.isBlock */.i.isBlock, editor.editor) ||
                editor.editor;
            let currentValue = (0,css/* css */.i)(currentBox, 'text-align').toString();
            if (control.defaultValue &&
                control.defaultValue.indexOf(currentValue) !== -1) {
                currentValue = 'left';
            }
            if (control.data &&
                control.data.currentValue !== currentValue &&
                control.list &&
                control.list.indexOf(currentValue) !== -1) {
                if (editor.o.textIcons) {
                    button.state.text = currentValue;
                }
                else {
                    button.state.icon.name = currentValue;
                }
                control.data.currentValue = currentValue;
            }
        }
    },
    isActive: (editor, btn) => {
        const current = editor.s.current();
        if (current && btn.defaultValue) {
            const currentBox = dom_dom/* Dom.closest */.i.closest(current, dom_dom/* Dom.isBlock */.i.isBlock, editor.editor) || editor.editor;
            return (btn.defaultValue.indexOf((0,css/* css */.i)(currentBox, 'text-align').toString()) === -1);
        }
        return false;
    },
    defaultValue: ['left', 'start', 'inherit'],
    data: {
        currentValue: 'left'
    },
    list: ['center', 'left', 'right', 'justify']
};
config/* Config.prototype.controls.center */.D.prototype.controls.center = {
    command: 'justifyCenter',
    css: {
        'text-align': 'center'
    },
    tooltip: 'Align Center'
};
config/* Config.prototype.controls.justify */.D.prototype.controls.justify = {
    command: 'justifyFull',
    css: {
        'text-align': 'justify'
    },
    tooltip: 'Align Justify'
};
config/* Config.prototype.controls.left */.D.prototype.controls.left = {
    command: 'justifyLeft',
    css: {
        'text-align': 'left'
    },
    tooltip: 'Align Left'
};
config/* Config.prototype.controls.right */.D.prototype.controls.right = {
    command: 'justifyRight',
    css: {
        'text-align': 'right'
    },
    tooltip: 'Align Right'
};
function justify(editor) {
    editor.registerButton({
        name: 'align',
        group: 'indent'
    });
    const callback = (command) => {
        editor.s.focus();
        editor.s.eachSelection((current) => {
            if (!current) {
                return;
            }
            let currentBox = dom_dom/* Dom.up */.i.up(current, dom_dom/* Dom.isBlock */.i.isBlock, editor.editor);
            if (!currentBox) {
                currentBox = dom_dom/* Dom.wrapInline */.i.wrapInline(current, editor.o.enterBlock, editor);
            }
            (0,align/* alignElement */.E3)(command, currentBox);
        });
        return false;
    };
    editor.registerCommand('justifyfull', callback);
    editor.registerCommand('justifyright', callback);
    editor.registerCommand('justifyleft', callback);
    editor.registerCommand('justifycenter', callback);
}
global/* pluginSystem.add */.pw.add('justify', justify);

;// CONCATENATED MODULE: ./src/plugins/key-arrow-outside/key-arrow-outside.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






class keyArrowOutside extends core_plugin/* Plugin */.S {
    afterInit(jodit) { }
    beforeDestruct(jodit) { }
    onKeyDownArrow(e) {
        var _a;
        if (e.key !== constants.KEY_RIGHT || !this.j.selection.isCollapsed()) {
            return;
        }
        const { endContainer, endOffset } = this.j.selection.range;
        if (!dom_dom/* Dom.isText */.i.isText(endContainer)) {
            return;
        }
        if (((_a = endContainer.nodeValue) === null || _a === void 0 ? void 0 : _a.length) === endOffset) {
            const { parentNode } = endContainer;
            if (dom_dom/* Dom.isInlineBlock */.i.isInlineBlock(parentNode) &&
                !dom_dom/* Dom.findNotEmptyNeighbor */.i.findNotEmptyNeighbor(parentNode, false, this.j.editor)) {
                dom_dom/* Dom.after */.i.after(parentNode, this.j.createInside.text(constants.NBSP_SPACE));
            }
        }
    }
}
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':keydown')
], keyArrowOutside.prototype, "onKeyDownArrow", null);
global/* pluginSystem.add */.pw.add('keyArrowOutside', keyArrowOutside);

;// CONCATENATED MODULE: ./src/plugins/limit/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.limitWords */.D.prototype.limitWords = false;
config/* Config.prototype.limitChars */.D.prototype.limitChars = false;
config/* Config.prototype.limitHTML */.D.prototype.limitHTML = false;

;// CONCATENATED MODULE: ./src/plugins/limit/limit.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






class limit extends core_plugin/* Plugin */.S {
    afterInit(jodit) {
        const { limitWords, limitChars } = jodit.o;
        if (jodit && (limitWords || limitChars)) {
            let snapshot = null;
            jodit.e
                .off('.limit')
                .on('beforePaste.limit', () => {
                snapshot = jodit.history.snapshot.make();
            })
                .on('keydown.limit keyup.limit beforeEnter.limit', this.checkPreventKeyPressOrPaste)
                .on('change.limit', this.checkPreventChanging)
                .on('afterPaste.limit', () => {
                if (this.__shouldDenyInput(true) && snapshot) {
                    jodit.history.snapshot.restore(snapshot);
                    jodit.e.fire('denyPaste.limit');
                    return false;
                }
            });
        }
    }
    shouldPreventInsertHTML(event) {
        if (event &&
            (constants.COMMAND_KEYS.includes(event.key) || event.ctrlKey || event.metaKey)) {
            return false;
        }
        return this.__shouldDenyInput(false);
    }
    __shouldDenyInput(strict) {
        const { jodit } = this;
        const { limitWords, limitChars } = jodit.o;
        const text = jodit.o.limitHTML ? jodit.value : jodit.text;
        const words = this.__splitWords(text);
        if (limitWords && isGt(words.length, limitWords, strict)) {
            jodit.e.fire('denyWords.limit limit.limit');
            return true;
        }
        const should = Boolean(limitChars && isGt(words.join('').length, limitChars, strict));
        if (should) {
            jodit.e.fire('denyChars.limit limit.limit');
        }
        return should;
    }
    checkPreventKeyPressOrPaste(event) {
        if (this.shouldPreventInsertHTML(event)) {
            return false;
        }
    }
    checkPreventChanging(newValue, oldValue) {
        const { jodit } = this;
        if (this.__shouldDenyInput(true)) {
            jodit.value = oldValue;
        }
    }
    __splitWords(text) {
        return text
            .replace((0,constants.INVISIBLE_SPACE_REG_EXP)(), '')
            .split((0,constants.SPACE_REG_EXP)())
            .filter(e => e.length);
    }
    beforeDestruct(jodit) {
        jodit.e.off('.limit');
    }
}
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], limit.prototype, "checkPreventKeyPressOrPaste", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], limit.prototype, "checkPreventChanging", null);
function isGt(a, b, strict) {
    return strict ? a > b : a >= b;
}
global/* pluginSystem.add */.pw.add('limit', limit);

;// CONCATENATED MODULE: ./src/plugins/line-height/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



config/* Config.prototype.defaultLineHeight */.D.prototype.defaultLineHeight = 1.5;
icon/* Icon.set */.J.set('line-height', __webpack_require__(7986));
config/* Config.prototype.controls.lineHeight */.D.prototype.controls.lineHeight = {
    command: 'applyLineHeight',
    tags: ['ol'],
    tooltip: 'Line height',
    list: [1, 1.1, 1.2, 1.3, 1.4, 1.5, 2],
    exec: (editor, event, { control }) => (0,helpers.memorizeExec)(editor, event, { control }, (value) => value)
};

;// CONCATENATED MODULE: ./src/plugins/line-height/line-height.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







class lineHeight extends core_plugin/* Plugin */.S {
    constructor(jodit) {
        super(jodit);
        this.buttons = [
            {
                name: 'lineHeight',
                group: 'font'
            }
        ];
        (0,global/* extendLang */.xl)(__webpack_require__(52279));
    }
    afterInit(jodit) {
        (0,helpers.css)(jodit.editor, {
            lineHeight: jodit.o.defaultLineHeight
        });
        jodit.registerCommand('applyLineHeight', this.applyLineHeight);
    }
    applyLineHeight(ignore, ignoreA, value) {
        const { s, createInside: c, editor: root, o } = this.j;
        if (!s.isFocused()) {
            s.focus();
        }
        s.save();
        let addStyle;
        const apply = (node) => {
            let parentBlock = dom_dom/* Dom.closest */.i.closest(node, dom_dom/* Dom.isBlock */.i.isBlock, root);
            if (!parentBlock) {
                parentBlock = dom_dom/* Dom.wrap */.i.wrap(node, o.enter, c);
            }
            const previousValue = (0,helpers.css)(parentBlock, 'lineHeight');
            if (addStyle === undefined) {
                addStyle = previousValue.toString() !== value.toString();
            }
            (0,helpers.css)(parentBlock, 'lineHeight', addStyle ? value : null);
        };
        try {
            if (s.isCollapsed()) {
                const fake = c.fake();
                s.insertNode(fake, false, false);
                apply(fake);
                dom_dom/* Dom.safeRemove */.i.safeRemove(fake);
            }
            else {
                s.eachSelection(apply);
            }
        }
        finally {
            s.restore();
        }
    }
    beforeDestruct(jodit) {
        (0,helpers.css)(jodit.editor, {
            lineHeight: null
        });
    }
}
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], lineHeight.prototype, "applyLineHeight", null);
global/* pluginSystem.add */.pw.add('lineHeight', lineHeight);

// EXTERNAL MODULE: ./src/core/ui/form/index.ts + 6 modules
var ui_form = __webpack_require__(1542);
;// CONCATENATED MODULE: ./src/plugins/link/template.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


const formTemplate = (editor) => {
    const { openInNewTabCheckbox, noFollowCheckbox, modeClassName, selectSizeClassName, selectMultipleClassName, selectOptionsClassName } = editor.o.link;
    return new ui_form/* UIForm */.x4(editor, [
        new ui_form/* UIBlock */.eC(editor, [
            new ui_form/* UIInput */.u3(editor, {
                name: 'url',
                type: 'text',
                ref: 'url_input',
                label: 'URL',
                placeholder: 'http://',
                required: true
            })
        ]),
        new ui_form/* UIBlock */.eC(editor, [
            new ui_form/* UIInput */.u3(editor, {
                name: 'content',
                ref: 'content_input',
                label: 'Text'
            })
        ], {
            ref: 'content_input_box'
        }),
        modeClassName
            ? new ui_form/* UIBlock */.eC(editor, [
                (() => {
                    if (modeClassName === 'input') {
                        return new ui_form/* UIInput */.u3(editor, {
                            name: 'className',
                            ref: 'className_input',
                            label: 'Class name'
                        });
                    }
                    if (modeClassName === 'select') {
                        return new ui_form/* UISelect */.Cj(editor, {
                            name: 'className',
                            ref: 'className_select',
                            label: 'Class name',
                            size: selectSizeClassName,
                            multiple: selectMultipleClassName,
                            options: selectOptionsClassName
                        });
                    }
                    return null;
                })()
            ])
            : null,
        openInNewTabCheckbox
            ? new ui_form/* UICheckbox */.mA(editor, {
                name: 'target',
                ref: 'target_checkbox',
                label: 'Open in new tab'
            })
            : null,
        noFollowCheckbox
            ? new ui_form/* UICheckbox */.mA(editor, {
                name: 'nofollow',
                ref: 'nofollow_checkbox',
                label: 'No follow'
            })
            : null,
        new ui_form/* UIBlock */.eC(editor, [
            new ui_button/* UIButton */.y3(editor, {
                name: 'unlink',
                variant: 'default',
                text: 'Unlink'
            }),
            new ui_button/* UIButton */.y3(editor, {
                name: 'insert',
                type: 'submit',
                variant: 'primary',
                text: 'Insert'
            })
        ], {
            align: 'full'
        })
    ]);
};

;// CONCATENATED MODULE: ./src/plugins/link/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




config/* Config.prototype.link */.D.prototype.link = {
    formTemplate: formTemplate,
    followOnDblClick: false,
    processVideoLink: true,
    processPastedLink: true,
    noFollowCheckbox: true,
    openInNewTabCheckbox: true,
    modeClassName: 'input',
    selectMultipleClassName: true,
    selectSizeClassName: 3,
    selectOptionsClassName: [],
    hotkeys: ['ctrl+k', 'cmd+k']
};
icon/* Icon.set */.J.set('link', __webpack_require__(23075)).set('unlink', __webpack_require__(10655));
config/* Config.prototype.controls.unlink */.D.prototype.controls.unlink = {
    exec: (editor, current) => {
        const anchor = dom_dom/* Dom.closest */.i.closest(current, 'a', editor.editor);
        if (anchor) {
            dom_dom/* Dom.unwrap */.i.unwrap(anchor);
        }
        editor.synchronizeValues();
        editor.e.fire('hidePopup');
    },
    tooltip: 'Unlink'
};
config/* Config.prototype.controls.link */.D.prototype.controls.link = {
    isActive: (editor) => {
        const current = editor.s.current();
        return Boolean(current && dom_dom/* Dom.closest */.i.closest(current, 'a', editor.editor));
    },
    popup: (editor, current, self, close) => {
        return editor.e.fire('generateLinkForm.link', current, close);
    },
    tags: ['a'],
    tooltip: 'Insert link'
};

;// CONCATENATED MODULE: ./src/plugins/link/link.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







class link_link extends core_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.buttons = [
            {
                name: 'link',
                group: 'insert'
            }
        ];
    }
    afterInit(jodit) {
        if (jodit.o.link.followOnDblClick) {
            jodit.e.on('dblclick.link', this.onDblClickOnLink);
        }
        if (jodit.o.link.processPastedLink) {
            jodit.e.on('processPaste.link', this.onProcessPasteLink);
        }
        jodit.e.on('generateLinkForm.link', this.generateForm);
        jodit.registerCommand('openLinkDialog', {
            exec: () => {
                const dialog = jodit.dlg({
                    resizable: false
                });
                const htmlForm = this.generateForm(jodit.s.current(), () => {
                    dialog.close();
                });
                htmlForm.container.classList.add('jodit-dialog_alert');
                dialog.setContent(htmlForm);
                dialog.open();
                jodit.async.requestIdleCallback(() => {
                    const { url_input } = (0,helpers.refs)(htmlForm.container);
                    url_input === null || url_input === void 0 ? void 0 : url_input.focus();
                });
            },
            hotkeys: jodit.o.link.hotkeys
        });
    }
    onDblClickOnLink(e) {
        if (!dom/* Dom.isTag */.i.isTag(e.target, 'a')) {
            return;
        }
        const href = (0,helpers.attr)(e.target, 'href');
        if (href) {
            location.href = href;
            e.preventDefault();
        }
    }
    onProcessPasteLink(ignore, html) {
        const { jodit } = this;
        if ((0,helpers.isURL)(html)) {
            if (jodit.o.link.processVideoLink) {
                const embed = (0,helpers.convertMediaUrlToVideoEmbed)(html);
                if (embed !== html) {
                    jodit.e.stopPropagation('processPaste');
                    return jodit.createInside.fromHTML(embed);
                }
            }
            const a = jodit.createInside.element('a');
            a.setAttribute('href', html);
            a.textContent = html;
            jodit.e.stopPropagation('processPaste');
            jodit.e.fire('applyLink', jodit, a, null);
            return a;
        }
    }
    generateForm(current, close) {
        const { jodit } = this;
        const i18n = jodit.i18n.bind(jodit), { openInNewTabCheckbox, noFollowCheckbox, formTemplate, formClassName, modeClassName } = jodit.o.link;
        const html = formTemplate(jodit), form = (0,helpers.isString)(html)
            ? jodit.c.fromHTML(html, {
                target_checkbox_box: openInNewTabCheckbox,
                nofollow_checkbox_box: noFollowCheckbox
            })
            : html, htmlForm = dom/* Dom.isElement */.i.isElement(form) ? form : form.container;
        const elements = (0,helpers.refs)(htmlForm), { insert, unlink, content_input_box } = elements, { target_checkbox, nofollow_checkbox, url_input } = elements, currentElement = current, isImageContent = dom/* Dom.isImage */.i.isImage(currentElement);
        let { content_input } = elements;
        const { className_input } = elements, { className_select } = elements;
        if (!content_input) {
            content_input = jodit.c.element('input', {
                type: 'hidden',
                ref: 'content_input'
            });
        }
        if (formClassName) {
            htmlForm.classList.add(formClassName);
        }
        if (isImageContent) {
            dom/* Dom.hide */.i.hide(content_input_box);
        }
        let link;
        const getSelectionText = () => link
            ? link.innerText
            : (0,helpers.stripTags)(jodit.s.range.cloneContents(), jodit.ed);
        if (current && dom/* Dom.closest */.i.closest(current, 'a', jodit.editor)) {
            link = dom/* Dom.closest */.i.closest(current, 'a', jodit.editor);
        }
        else {
            link = false;
        }
        if (!isImageContent && current) {
            content_input.value = getSelectionText();
        }
        if (link) {
            url_input.value = (0,helpers.attr)(link, 'href') || '';
            if (modeClassName) {
                switch (modeClassName) {
                    case 'input':
                        if (className_input) {
                            className_input.value = (0,helpers.attr)(link, 'class') || '';
                        }
                        break;
                    case 'select':
                        if (className_select) {
                            for (let i = 0; i < className_select.selectedOptions.length; i++) {
                                const option = className_select.options.item(i);
                                if (option) {
                                    option.selected = false;
                                }
                            }
                            const classNames = (0,helpers.attr)(link, 'class') || '';
                            classNames.split(' ').forEach(className => {
                                if (className) {
                                    for (let i = 0; i < className_select.options.length; i++) {
                                        const option = className_select.options.item(i);
                                        if ((option === null || option === void 0 ? void 0 : option.value) &&
                                            option.value === className) {
                                            option.selected = true;
                                        }
                                    }
                                }
                            });
                        }
                        break;
                }
            }
            if (openInNewTabCheckbox && target_checkbox) {
                target_checkbox.checked = (0,helpers.attr)(link, 'target') === '_blank';
            }
            if (noFollowCheckbox && nofollow_checkbox) {
                nofollow_checkbox.checked = (0,helpers.attr)(link, 'rel') === 'nofollow';
            }
            insert.textContent = i18n('Update');
        }
        else {
            dom/* Dom.hide */.i.hide(unlink);
        }
        jodit.editor.normalize();
        const snapshot = jodit.history.snapshot.make();
        if (unlink) {
            jodit.e.on(unlink, 'click', (e) => {
                jodit.s.restore();
                jodit.history.snapshot.restore(snapshot);
                if (link) {
                    dom/* Dom.unwrap */.i.unwrap(link);
                }
                jodit.synchronizeValues();
                close();
                e.preventDefault();
            });
        }
        const onSubmit = () => {
            if (!url_input.value.trim().length) {
                url_input.focus();
                url_input.classList.add('jodit_error');
                return false;
            }
            let links;
            jodit.s.restore();
            jodit.s.removeMarkers();
            jodit.editor.normalize();
            jodit.history.snapshot.restore(snapshot);
            const textWasChanged = getSelectionText() !== content_input.value.trim();
            const ci = jodit.createInside;
            if (!link) {
                if (!jodit.s.isCollapsed()) {
                    const node = jodit.s.current();
                    if (dom/* Dom.isTag */.i.isTag(node, ['img'])) {
                        links = [dom/* Dom.wrap */.i.wrap(node, 'a', ci)];
                    }
                    else {
                        links = jodit.s.wrapInTag('a');
                    }
                }
                else {
                    const a = ci.element('a');
                    jodit.s.insertNode(a, false, false);
                    links = [a];
                }
                links.forEach(link => jodit.s.select(link));
            }
            else {
                links = [link];
            }
            links.forEach(a => {
                var _a;
                (0,helpers.attr)(a, 'href', url_input.value);
                if (modeClassName && (className_input !== null && className_input !== void 0 ? className_input : className_select)) {
                    if (modeClassName === 'input') {
                        if (className_input.value === '' &&
                            a.hasAttribute('class')) {
                            (0,helpers.attr)(a, 'class', null);
                        }
                        if (className_input.value !== '') {
                            (0,helpers.attr)(a, 'class', className_input.value);
                        }
                    }
                    else if (modeClassName === 'select') {
                        if (a.hasAttribute('class')) {
                            (0,helpers.attr)(a, 'class', null);
                        }
                        for (let i = 0; i < className_select.selectedOptions.length; i++) {
                            const className = (_a = className_select.selectedOptions.item(i)) === null || _a === void 0 ? void 0 : _a.value;
                            if (className) {
                                a.classList.add(className);
                            }
                        }
                    }
                }
                if (!isImageContent) {
                    let newContent = a.textContent;
                    if (content_input.value.trim().length) {
                        if (textWasChanged) {
                            newContent = content_input.value;
                        }
                    }
                    else {
                        newContent = url_input.value;
                    }
                    const content = a.textContent;
                    if (newContent !== content) {
                        a.textContent = newContent;
                    }
                }
                if (openInNewTabCheckbox && target_checkbox) {
                    (0,helpers.attr)(a, 'target', target_checkbox.checked ? '_blank' : null);
                }
                if (noFollowCheckbox && nofollow_checkbox) {
                    (0,helpers.attr)(a, 'rel', nofollow_checkbox.checked ? 'nofollow' : null);
                }
                jodit.e.fire('applyLink', jodit, a, form);
            });
            jodit.synchronizeValues();
            close();
            return false;
        };
        if (dom/* Dom.isElement */.i.isElement(form)) {
            jodit.e.on(form, 'submit', (event) => {
                event.preventDefault();
                event.stopImmediatePropagation();
                onSubmit();
                return false;
            });
        }
        else {
            form.onSubmit(onSubmit);
        }
        return form;
    }
    beforeDestruct(jodit) {
        jodit.e
            .off('generateLinkForm.link', this.generateForm)
            .off('dblclick.link', this.onDblClickOnLink)
            .off('processPaste.link', this.onProcessPasteLink);
    }
}
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], link_link.prototype, "onDblClickOnLink", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], link_link.prototype, "onProcessPasteLink", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], link_link.prototype, "generateForm", null);
global/* pluginSystem.add */.pw.add('link', link_link);

;// CONCATENATED MODULE: ./src/plugins/media/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.mediaFakeTag */.D.prototype.mediaFakeTag = 'jodit-media';
config/* Config.prototype.mediaInFakeBlock */.D.prototype.mediaInFakeBlock = true;
config/* Config.prototype.mediaBlocks */.D.prototype.mediaBlocks = ['video', 'audio'];

;// CONCATENATED MODULE: ./src/plugins/media/media.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




function media(editor) {
    const keyFake = 'jodit_fake_wrapper';
    const { mediaFakeTag, mediaBlocks, mediaInFakeBlock } = editor.options;
    const wrap = (element) => {
        if (element.parentNode &&
            (0,helpers_utils/* attr */.Lj)(element.parentNode, 'data-jodit_iframe_wrapper')) {
            element = element.parentNode;
        }
        else {
            const wrapper = editor.createInside.element(mediaFakeTag, {
                'data-jodit-temp': 1,
                contenteditable: false,
                draggable: true,
                [`data-${keyFake}`]: 1
            });
            (0,helpers_utils/* attr */.Lj)(wrapper, 'style', (0,helpers_utils/* attr */.Lj)(element, 'style'));
            wrapper.style.display =
                element.style.display === 'inline-block'
                    ? 'inline-block'
                    : 'block';
            wrapper.style.width = element.offsetWidth + 'px';
            wrapper.style.height = element.offsetHeight + 'px';
            if (element.parentNode) {
                element.parentNode.insertBefore(wrapper, element);
            }
            wrapper.appendChild(element);
            element = wrapper;
        }
        editor.e
            .off(element, 'mousedown.select touchstart.select')
            .on(element, 'mousedown.select touchstart.select', () => {
            editor.s.setCursorAfter(element);
        });
    };
    if (mediaInFakeBlock) {
        editor.e
            .on('afterGetValueFromEditor', (data) => {
            const rxp = new RegExp(`<${mediaFakeTag}[^>]+data-${keyFake}[^>]+>([^]+?)</${mediaFakeTag}>`, 'ig');
            if (rxp.test(data.value)) {
                data.value = data.value.replace(rxp, '$1');
            }
        })
            .on('change afterInit afterSetMode changePlace', editor.async.debounce(() => {
            if (!editor.isDestructed &&
                editor.getMode() !== constants.MODE_SOURCE) {
                (0,helpers_utils.$$)(mediaBlocks.join(','), editor.editor).forEach((elm) => {
                    if (!(0,helpers_utils/* dataBind */.qI)(elm, keyFake)) {
                        (0,helpers_utils/* dataBind */.qI)(elm, keyFake, true);
                        wrap(elm);
                    }
                });
            }
        }, editor.defaultTimeout));
    }
}
global/* pluginSystem.add */.pw.add('media', media);

// EXTERNAL MODULE: ./src/core/ui/helpers/buttons.ts
var helpers_buttons = __webpack_require__(74091);
// EXTERNAL MODULE: ./src/modules/toolbar/collection/collection.ts
var collection = __webpack_require__(39697);
;// CONCATENATED MODULE: ./src/plugins/mobile/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





config/* Config.prototype.mobileTapTimeout */.D.prototype.mobileTapTimeout = 300;
config/* Config.prototype.toolbarAdaptive */.D.prototype.toolbarAdaptive = true;
config/* Config.prototype.controls.dots */.D.prototype.controls.dots = {
    mode: constants.MODE_SOURCE + constants.MODE_WYSIWYG,
    popup: (editor, current, control, close, button) => {
        let store = control.data;
        if (store === undefined) {
            store = {
                toolbar: (0,factory/* makeCollection */.R)(editor),
                rebuild: () => {
                    var _a;
                    if (button) {
                        const buttons = editor.e.fire('getDiffButtons.mobile', button.closest(collection/* ToolbarCollection */.n));
                        if (buttons && store) {
                            store.toolbar.build((0,helpers.splitArray)(buttons));
                            const w = ((_a = editor.toolbar.firstButton) === null || _a === void 0 ? void 0 : _a.container.offsetWidth) || 36;
                            store.toolbar.container.style.width =
                                (w + 4) * 3 + 'px';
                        }
                    }
                }
            };
            control.data = store;
        }
        store.rebuild();
        return store.toolbar;
    },
    tooltip: 'Show all'
};

;// CONCATENATED MODULE: ./src/plugins/mobile/mobile.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




function mobile(editor) {
    let timeout = 0, store = (0,helpers.splitArray)(editor.o.buttons);
    if (editor.o.mobileTapTimeout) {
        editor.e.on('touchend', (e) => {
            if (e.changedTouches && e.changedTouches.length) {
                const now = new Date().getTime(), diff = now - timeout;
                if (diff > editor.o.mobileTapTimeout) {
                    timeout = now;
                    if (diff < editor.o.mobileTapTimeout * 1.5) {
                        editor.s.insertCursorAtPoint(e.clientX, e.clientY);
                    }
                }
            }
        });
    }
    editor.e.on('getDiffButtons.mobile', (toolbar) => {
        if (toolbar === editor.toolbar) {
            const buttons = (0,helpers_buttons/* flatButtonsSet */.q)((0,helpers.splitArray)(editor.o.buttons), editor), flatStore = (0,helpers_buttons/* flatButtonsSet */.q)(store, editor);
            return (0,helpers.toArray)(buttons).reduce((acc, item) => {
                if (!flatStore.has(item)) {
                    acc.push(item);
                }
                return acc;
            }, []);
        }
    });
    if (editor.o.toolbarAdaptive) {
        editor.e
            .on('resize afterInit recalcAdaptive changePlace afterAddPlace', () => {
            var _a;
            if (!editor.o.toolbar) {
                return;
            }
            const width = ((_a = editor.container.parentElement) !== null && _a !== void 0 ? _a : editor.container).offsetWidth;
            const newStore = (() => {
                if (editor.isFullSize || width >= editor.o.sizeLG) {
                    return (0,helpers.splitArray)(editor.o.buttons);
                }
                if (width >= editor.o.sizeMD) {
                    return (0,helpers.splitArray)(editor.o.buttonsMD);
                }
                if (width >= editor.o.sizeSM) {
                    return (0,helpers.splitArray)(editor.o.buttonsSM);
                }
                return (0,helpers.splitArray)(editor.o.buttonsXS);
            })();
            if (newStore.toString() !== store.toString()) {
                store = newStore;
                editor.e.fire('closeAllPopups');
                editor.toolbar
                    .setRemoveButtons(editor.o.removeButtons)
                    .build(store.concat(editor.o.extraButtons));
            }
        })
            .on(editor.ow, 'load resize', () => editor.e.fire('recalcAdaptive'));
    }
}
global/* pluginSystem.add */.pw.add('mobile', mobile);

// EXTERNAL MODULE: ./src/core/helpers/utils/data-bind.ts
var data_bind = __webpack_require__(70774);
;// CONCATENATED MODULE: ./src/plugins/ordered-list/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



const memoExec = (jodit, _, { control }) => {
    var _a;
    const key = `button${control.command}`;
    const value = (_a = (control.args && control.args[0])) !== null && _a !== void 0 ? _a : (0,data_bind/* dataBind */.q)(jodit, key);
    (0,data_bind/* dataBind */.q)(jodit, key, value);
    jodit.execCommand(control.command, false, value === 'default' ? null : value);
};
icon/* Icon.set */.J.set('ol', __webpack_require__(15476)).set('ul', __webpack_require__(59403));
config/* Config.prototype.controls.ul */.D.prototype.controls.ul = {
    command: 'insertUnorderedList',
    tags: ['ul'],
    tooltip: 'Insert Unordered List',
    exec: memoExec
};
config/* Config.prototype.controls.ol */.D.prototype.controls.ol = {
    command: 'insertOrderedList',
    tags: ['ol'],
    tooltip: 'Insert Ordered List',
    exec: memoExec
};

;// CONCATENATED MODULE: ./src/plugins/ordered-list/ordered-list.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





class orderedList extends core_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.buttons = [
            {
                name: 'ul',
                group: 'list'
            },
            {
                name: 'ol',
                group: 'list'
            }
        ];
    }
    afterInit(jodit) {
        jodit
            .registerCommand('insertUnorderedList', this.onCommand)
            .registerCommand('insertOrderedList', this.onCommand);
    }
    onCommand(command, _, type) {
        this.jodit.s.applyStyle({
            listStyleType: type !== null && type !== void 0 ? type : null
        }, {
            element: command === 'insertunorderedlist' ? 'ul' : 'ol'
        });
        this.jodit.synchronizeValues();
        return false;
    }
    beforeDestruct(jodit) { }
}
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], orderedList.prototype, "onCommand", null);
global/* pluginSystem.add */.pw.add('orderedList', orderedList);

// EXTERNAL MODULE: ./src/plugins/paste/helpers.ts
var paste_helpers = __webpack_require__(23063);
;// CONCATENATED MODULE: ./src/plugins/paste/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



config/* Config.prototype.askBeforePasteHTML */.D.prototype.askBeforePasteHTML = true;
config/* Config.prototype.processPasteHTML */.D.prototype.processPasteHTML = true;
config/* Config.prototype.pasteHTMLActionList */.D.prototype.pasteHTMLActionList = [
    { value: constants.INSERT_AS_HTML, text: 'Keep' },
    { value: constants.INSERT_AS_TEXT, text: 'Insert as Text' },
    { value: constants.INSERT_ONLY_TEXT, text: 'Insert only Text' }
];
config/* Config.prototype.memorizeChoiceWhenPasteFragment */.D.prototype.memorizeChoiceWhenPasteFragment = false;
config/* Config.prototype.nl2brInPlainText */.D.prototype.nl2brInPlainText = true;
const psKey = 'pasteStorage';
config/* Config.prototype.controls.paste */.D.prototype.controls.paste = {
    tooltip: 'Paste from clipboard',
    async exec(editor, _, { control }) {
        if (control.name === psKey) {
            editor.execCommand('showPasteStorage');
            return;
        }
        editor.s.focus();
        let text = '', error = true;
        if (navigator.clipboard) {
            try {
                const items = await navigator.clipboard.read();
                if (items && items.length) {
                    const textBlob = await items[0].getType(constants.TEXT_PLAIN);
                    text = await new Response(textBlob).text();
                }
                error = false;
            }
            catch (e) {
                if (false) {}
            }
            if (error) {
                try {
                    text = await navigator.clipboard.readText();
                    error = false;
                }
                catch (e) {
                    if (false) {}
                }
            }
        }
        if (error) {
            text = editor.buffer.get(constants.CLIPBOARD_ID) || '';
            error = text.length === 0;
        }
        const value = editor.value;
        if (error) {
            editor.ed.execCommand('paste');
            error = value === editor.value;
            !error && editor.e.fire('afterPaste');
        }
        else if (text.length) {
            (0,paste_helpers/* pasteInsertHtml */.kU)(null, editor, text);
            editor.e.fire('afterPaste');
        }
        else {
            if (error) {
                editor.alert("Your browser doesn't support direct access to the clipboard.", () => void editor.s.focus());
            }
        }
    },
    list: {
        [psKey]: 'Paste Storage'
    },
    isChildDisabled(j) {
        return j.e.fire('pasteStorageList') < 2;
    }
};

;// CONCATENATED MODULE: ./src/plugins/paste/paste.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */









class paste extends plugin_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.pasteStack = new helpers.LimitedStack(20);
        this._isDialogOpened = false;
    }
    afterInit(jodit) {
        jodit.e
            .on('paste.paste', this.onPaste)
            .on('pasteStack.paste', (item) => this.pasteStack.push(item));
        if (jodit.o.nl2brInPlainText) {
            this.j.e.on('processPaste.paste', this.onProcessPasteReplaceNl2Br);
        }
    }
    beforeDestruct(jodit) {
        jodit.e
            .off('paste.paste', this.onPaste)
            .off('processPaste.paste', this.onProcessPasteReplaceNl2Br)
            .off('.paste');
    }
    onPaste(e) {
        try {
            if (this.customPasteProcess(e) === false ||
                this.j.e.fire('beforePaste', e) === false) {
                e.preventDefault();
                return false;
            }
            this.defaultPasteProcess(e);
        }
        finally {
            this.j.e.fire('afterPaste', e);
        }
    }
    customPasteProcess(e) {
        if (!this.j.o.processPasteHTML) {
            return;
        }
        const dt = (0,helpers.getDataTransfer)(e), texts = {
            html: dt === null || dt === void 0 ? void 0 : dt.getData(constants.TEXT_HTML),
            plain: dt === null || dt === void 0 ? void 0 : dt.getData(constants.TEXT_PLAIN),
            rtf: dt === null || dt === void 0 ? void 0 : dt.getData(constants.TEXT_RTF)
        };
        let key;
        for (key in texts) {
            const value = texts[key];
            if ((0,helpers.isHTML)(value) &&
                (this.j.e.fire('processHTML', e, value, texts) ||
                    this.processHTML(e, value))) {
                return false;
            }
        }
    }
    defaultPasteProcess(e) {
        const dt = (0,helpers.getDataTransfer)(e);
        let text = (dt === null || dt === void 0 ? void 0 : dt.getData(constants.TEXT_HTML)) || (dt === null || dt === void 0 ? void 0 : dt.getData(constants.TEXT_PLAIN));
        if (dt && text && (0,helpers.trim)(text) !== '') {
            const result = this.j.e.fire('processPaste', e, text, (0,paste_helpers/* getAllTypes */.ZH)(dt));
            if (result !== undefined) {
                text = result;
            }
            if ((0,helpers.isString)(text) || dom_dom/* Dom.isNode */.i.isNode(text)) {
                this.insertByType(e, text, this.j.o.defaultActionOnPaste);
            }
            e.preventDefault();
            e.stopPropagation();
        }
    }
    processHTML(e, html) {
        if (this.j.o.askBeforePasteHTML) {
            if (this.j.o.memorizeChoiceWhenPasteFragment) {
                const cached = this.pasteStack.find(cachedItem => cachedItem.html === html);
                if (cached) {
                    this.insertByType(e, html, cached.action || this.j.o.defaultActionOnPaste);
                    return true;
                }
            }
            if (this._isDialogOpened) {
                return true;
            }
            const dialog = (0,paste_helpers/* askInsertTypeDialog */.$t)(this.j, 'Your code is similar to HTML. Keep as HTML?', 'Paste as HTML', insertType => {
                this._isDialogOpened = false;
                this.insertByType(e, html, insertType);
            }, this.j.o.pasteHTMLActionList);
            if (dialog) {
                this._isDialogOpened = true;
                dialog.e.on('beforeClose', () => {
                    this._isDialogOpened = false;
                });
            }
            return true;
        }
        return false;
    }
    insertByType(e, html, action) {
        this.pasteStack.push({ html, action });
        if ((0,helpers.isString)(html)) {
            this.j.buffer.set(constants.CLIPBOARD_ID, html);
            switch (action) {
                case constants.INSERT_CLEAR_HTML:
                    html = (0,helpers.cleanFromWord)(html);
                    break;
                case constants.INSERT_ONLY_TEXT:
                    html = (0,helpers.stripTags)(html);
                    break;
                case constants.INSERT_AS_TEXT:
                    html = (0,helpers.htmlspecialchars)(html);
                    break;
                default:
            }
        }
        (0,paste_helpers/* pasteInsertHtml */.kU)(e, this.j, html);
    }
    onProcessPasteReplaceNl2Br(ignore, text, type) {
        if (type === constants.TEXT_PLAIN + ';' && !(0,helpers.isHTML)(text)) {
            return (0,helpers.nl2br)(text);
        }
    }
}
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], paste.prototype, "onPaste", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], paste.prototype, "onProcessPasteReplaceNl2Br", null);
global/* pluginSystem.add */.pw.add('paste', paste);

// EXTERNAL MODULE: ./src/plugins/paste-from-word/paste-from-word.ts + 26 modules
var paste_from_word = __webpack_require__(57128);
// EXTERNAL MODULE: ./src/core/ui/button/button/button.ts
var button_button = __webpack_require__(15327);
;// CONCATENATED MODULE: ./src/plugins/paste-storage/paste-storage.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







class pasteStorage extends plugin_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.currentIndex = 0;
        this.list = [];
        this.container = null;
        this.listBox = null;
        this.previewBox = null;
        this.dialog = null;
        this.paste = () => {
            this.j.s.focus();
            this.j.s.insertHTML(this.list[this.currentIndex]);
            if (this.currentIndex !== 0) {
                const buffer = this.list[0];
                this.list[0] = this.list[this.currentIndex];
                this.list[this.currentIndex] = buffer;
            }
            this.dialog && this.dialog.close();
            this.j.synchronizeValues();
            this.j.e.fire('afterPaste');
        };
        this.onKeyDown = (e) => {
            let index = this.currentIndex;
            if ([constants.KEY_UP, constants.KEY_DOWN, constants.KEY_ENTER].indexOf(e.key) === -1) {
                return;
            }
            if (e.key === constants.KEY_UP) {
                if (index === 0) {
                    index = this.list.length - 1;
                }
                else {
                    index -= 1;
                }
            }
            if (e.key === constants.KEY_DOWN) {
                if (index === this.list.length - 1) {
                    index = 0;
                }
                else {
                    index += 1;
                }
            }
            if (e.key === constants.KEY_ENTER) {
                this.paste();
                return;
            }
            if (index !== this.currentIndex) {
                this.selectIndex(index);
            }
            e.stopImmediatePropagation();
            e.preventDefault();
        };
        this.selectIndex = (index) => {
            if (this.listBox) {
                (0,helpers.toArray)(this.listBox.childNodes).forEach((a, i) => {
                    a.classList.remove('jodit_active');
                    if (index === i && this.previewBox) {
                        a.classList.add('jodit_active');
                        this.previewBox.innerHTML = this.list[index];
                        a.focus();
                    }
                });
            }
            this.currentIndex = index;
        };
        this.showDialog = () => {
            if (this.list.length < 2) {
                return;
            }
            this.dialog || this.createDialog();
            if (this.listBox) {
                this.listBox.innerHTML = '';
            }
            if (this.previewBox) {
                this.previewBox.innerHTML = '';
            }
            this.list.forEach((html, index) => {
                const a = this.j.c.element('a');
                a.textContent =
                    index + 1 + '. ' + html.replace((0,constants.SPACE_REG_EXP)(), '');
                this.j.e.on(a, 'keydown', this.onKeyDown);
                (0,helpers.attr)(a, 'href', '#');
                (0,helpers.attr)(a, 'data-index', index.toString());
                (0,helpers.attr)(a, 'tab-index', '-1');
                this.listBox && this.listBox.appendChild(a);
            });
            this.dialog && this.dialog.open();
            this.j.async.setTimeout(() => {
                this.selectIndex(0);
            }, 100);
        };
    }
    createDialog() {
        this.dialog = this.j.dlg();
        const pasteButton = (0,button_button/* Button */.zx)(this.j, 'paste', 'Paste', 'primary');
        pasteButton.onAction(this.paste);
        const cancelButton = (0,button_button/* Button */.zx)(this.j, '', 'Cancel');
        cancelButton.onAction(this.dialog.close);
        this.container = this.j.c.div();
        this.container.classList.add('jodit-paste-storage');
        this.listBox = this.j.c.div();
        this.previewBox = this.j.c.div();
        this.container.appendChild(this.listBox);
        this.container.appendChild(this.previewBox);
        this.dialog.setHeader(this.j.i18n('Choose Content to Paste'));
        this.dialog.setContent(this.container);
        this.dialog.setFooter([pasteButton, cancelButton]);
        this.j.e.on(this.listBox, 'click dblclick', (e) => {
            const a = e.target;
            if (dom_dom/* Dom.isTag */.i.isTag(a, 'a') && a.hasAttribute('data-index')) {
                this.selectIndex(parseInt((0,helpers.attr)(a, '-index') || '0', 10));
            }
            if (e.type === 'dblclick') {
                this.paste();
            }
            return false;
        });
    }
    afterInit() {
        this.j.e
            .off('afterCopy.paste-storage')
            .on('pasteStorageList.paste-storage', () => this.list.length)
            .on('afterCopy.paste-storage', (html) => {
            if (this.list.indexOf(html) !== -1) {
                this.list.splice(this.list.indexOf(html), 1);
            }
            this.list.unshift(html);
            if (this.list.length > 5) {
                this.list.length = 5;
            }
        });
        this.j.registerCommand('showPasteStorage', {
            exec: this.showDialog,
            hotkeys: ['ctrl+shift+v', 'cmd+shift+v']
        });
    }
    beforeDestruct() {
        this.dialog && this.dialog.destruct();
        this.j.e.off('.paste-storage');
        dom_dom/* Dom.safeRemove */.i.safeRemove(this.previewBox);
        dom_dom/* Dom.safeRemove */.i.safeRemove(this.listBox);
        dom_dom/* Dom.safeRemove */.i.safeRemove(this.container);
        this.container = null;
        this.listBox = null;
        this.previewBox = null;
        this.dialog = null;
        this.list = [];
    }
}
global/* pluginSystem.add */.pw.add('pasteStorage', pasteStorage);

// EXTERNAL MODULE: ./src/plugins/placeholder/placeholder.ts + 1 modules
var placeholder = __webpack_require__(43257);
;// CONCATENATED MODULE: ./src/plugins/powered-by-jodit/powered-by-jodit.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function poweredByJodit(jodit) {
    const { o } = jodit;
    if (!o.hidePoweredByJodit &&
        !o.inline &&
        (o.showCharsCounter ||
            o.showWordsCounter ||
            o.showXPathInStatusbar)) {
        jodit.hookStatus('ready', () => {
            jodit.statusbar.append(jodit.create.fromHTML(`<a
						tabindex="-1"
						style="text-transform: uppercase"
						class="jodit-status-bar-link"
						target="_blank"
						href="https://xdsoft.net/jodit/">
							Powered by Jodit
						</a>`), true);
        });
    }
}
global/* pluginSystem.add */.pw.add('poweredByJodit', poweredByJodit);

// EXTERNAL MODULE: ./src/core/helpers/utils/print.ts
var print = __webpack_require__(79775);
;// CONCATENATED MODULE: ./src/plugins/preview/preview.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





config/* Config.prototype.controls.preview */.D.prototype.controls.preview = {
    icon: 'eye',
    command: 'preview',
    mode: constants.MODE_SOURCE + constants.MODE_WYSIWYG,
    tooltip: 'Preview'
};
function preview(editor) {
    editor.registerButton({
        name: 'preview'
    });
    editor.registerCommand('preview', (_, _1, defaultValue) => {
        const dialog = editor.dlg();
        dialog
            .setSize(1024, 600)
            .open('', editor.i18n('Preview'))
            .setModal(true);
        (0,print/* previewBox */.$)(editor, defaultValue, 'px', dialog.getElm('content'));
    });
}
global/* pluginSystem.add */.pw.add('preview', preview);

// EXTERNAL MODULE: ./src/core/helpers/utils/default-language.ts
var default_language = __webpack_require__(3588);
// EXTERNAL MODULE: ./src/plugins/print/lib/generate-critical-css.ts
var generate_critical_css = __webpack_require__(28895);
;// CONCATENATED MODULE: ./src/plugins/print/print.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */









icon/* Icon.set */.J.set('print', __webpack_require__(22860));
config/* Config.prototype.controls.print */.D.prototype.controls.print = {
    exec: (editor) => {
        const iframe = editor.create.element('iframe');
        Object.assign(iframe.style, {
            position: 'fixed',
            right: 0,
            bottom: 0,
            width: 0,
            height: 0,
            border: 0
        });
        (0,global/* getContainer */.ZO)(editor, config/* Config */.D).appendChild(iframe);
        const afterFinishPrint = () => {
            editor.e.off(editor.ow, 'mousemove', afterFinishPrint);
            dom/* Dom.safeRemove */.i.safeRemove(iframe);
        };
        const myWindow = iframe.contentWindow;
        if (myWindow) {
            editor.e
                .on(myWindow, 'onbeforeunload onafterprint', afterFinishPrint)
                .on(editor.ow, 'mousemove', afterFinishPrint);
            if (editor.o.iframe) {
                editor.e.fire('generateDocumentStructure.iframe', myWindow.document, editor);
                myWindow.document.body.innerHTML = editor.value;
            }
            else {
                myWindow.document.write('<!doctype html><html lang="' +
                    (0,default_language/* defaultLanguage */.X)(editor.o.language) +
                    '"><head><title></title></head><style>' +
                    (0,generate_critical_css/* generateCriticalCSS */.a)(editor) +
                    '</style><body></body></html>');
                myWindow.document.close();
                (0,print/* previewBox */.$)(editor, undefined, 'px', myWindow.document.body);
            }
            const style = myWindow.document.createElement('style');
            style.innerHTML = `@media print {
					body {
							-webkit-print-color-adjust: exact;
					}
			}`;
            myWindow.document.head.appendChild(style);
            myWindow.focus();
            myWindow.print();
        }
    },
    mode: constants.MODE_SOURCE + constants.MODE_WYSIWYG,
    tooltip: 'Print'
};
function print_print(editor) {
    editor.registerButton({
        name: 'print'
    });
}
global/* pluginSystem.add */.pw.add('print', print_print);

;// CONCATENATED MODULE: ./src/plugins/redo-undo/redo-undo.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





icon/* Icon.set */.J.set('redo', __webpack_require__(95600)).set('undo', __webpack_require__(76214));
config/* Config.prototype.controls.redo */.D.prototype.controls.redo = {
    mode: constants.MODE_SPLIT,
    isDisabled: (editor) => !editor.history.canRedo(),
    tooltip: 'Redo'
};
config/* Config.prototype.controls.undo */.D.prototype.controls.undo = {
    mode: constants.MODE_SPLIT,
    isDisabled: (editor) => !editor.history.canUndo(),
    tooltip: 'Undo'
};
class redoUndo extends plugin_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.buttons = [
            {
                name: 'undo',
                group: 'history'
            },
            {
                name: 'redo',
                group: 'history'
            }
        ];
    }
    beforeDestruct() {
    }
    afterInit(editor) {
        const callback = (command) => {
            editor.history[command]();
            return false;
        };
        editor.registerCommand('redo', {
            exec: callback,
            hotkeys: ['ctrl+y', 'ctrl+shift+z', 'cmd+y', 'cmd+shift+z']
        });
        editor.registerCommand('undo', {
            exec: callback,
            hotkeys: ['ctrl+z', 'cmd+z']
        });
    }
}
global/* pluginSystem.add */.pw.add('redoUndo', redoUndo);

;// CONCATENATED MODULE: ./src/plugins/resize-cells/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.tableAllowCellResize */.D.prototype.tableAllowCellResize = true;

;// CONCATENATED MODULE: ./src/plugins/resize-cells/resize-cells.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */









const key = 'table_processor_observer-resize';
class resizeCells extends modules.Plugin {
    constructor() {
        super(...arguments);
        this.selectMode = false;
        this.resizeDelta = 0;
        this.createResizeHandle = () => {
            if (!this.resizeHandler) {
                this.resizeHandler = this.j.c.div('jodit-table-resizer');
                this.j.e
                    .on(this.resizeHandler, 'mousedown.table touchstart.table', this.onHandleMouseDown)
                    .on(this.resizeHandler, 'mouseenter.table', () => {
                    this.j.async.clearTimeout(this.hideTimeout);
                });
            }
        };
        this.hideTimeout = 0;
        this.drag = false;
        this.minX = 0;
        this.maxX = 0;
        this.startX = 0;
    }
    get module() {
        return this.j.getInstance('Table', this.j.o);
    }
    get isRTL() {
        return this.j.o.direction === 'rtl';
    }
    showResizeHandle() {
        this.j.async.clearTimeout(this.hideTimeout);
        this.j.workplace.appendChild(this.resizeHandler);
    }
    hideResizeHandle() {
        this.hideTimeout = this.j.async.setTimeout(() => {
            dom_dom/* Dom.safeRemove */.i.safeRemove(this.resizeHandler);
        }, {
            timeout: this.j.defaultTimeout,
            label: 'hideResizer'
        });
    }
    onHandleMouseDown(event) {
        if (this.j.isLocked) {
            return;
        }
        this.drag = true;
        this.j.e
            .on(this.j.ow, 'mouseup.resize-cells touchend.resize-cells', this.onMouseUp)
            .on(this.j.ew, 'mousemove.table touchmove.table', this.onMouseMove);
        this.startX = event.clientX;
        this.j.lock(key);
        this.resizeHandler.classList.add('jodit-table-resizer_moved');
        let box, tableBox = this.workTable.getBoundingClientRect();
        this.minX = 0;
        this.maxX = 1000000;
        if (this.wholeTable != null) {
            tableBox = this.workTable.parentNode.getBoundingClientRect();
            this.minX = tableBox.left;
            this.maxX = this.minX + tableBox.width;
        }
        else {
            const coordinate = modules.Table.formalCoordinate(this.workTable, this.workCell, true);
            modules.Table.formalMatrix(this.workTable, (td, i, j) => {
                if (coordinate[1] === j) {
                    box = td.getBoundingClientRect();
                    this.minX = Math.max(box.left + constants.NEARBY / 2, this.minX);
                }
                if (coordinate[1] + (this.isRTL ? -1 : 1) === j) {
                    box = td.getBoundingClientRect();
                    this.maxX = Math.min(box.left + box.width - constants.NEARBY / 2, this.maxX);
                }
            });
        }
        return false;
    }
    onMouseMove(event) {
        if (!this.drag) {
            return;
        }
        this.j.e.fire('closeAllPopups');
        let x = event.clientX;
        const workplacePosition = (0,helpers.offset)((this.resizeHandler.parentNode ||
            this.j.od.documentElement), this.j, this.j.od, true);
        if (x < this.minX) {
            x = this.minX;
        }
        if (x > this.maxX) {
            x = this.maxX;
        }
        this.resizeDelta =
            x - this.startX + (!this.j.o.iframe ? 0 : workplacePosition.left);
        this.resizeHandler.style.left =
            x - (this.j.o.iframe ? 0 : workplacePosition.left) + 'px';
        const sel = this.j.s.sel;
        sel && sel.removeAllRanges();
    }
    onMouseUp(e) {
        if (this.selectMode || this.drag) {
            this.selectMode = false;
            this.j.unlock();
        }
        if (!this.resizeHandler || !this.drag) {
            return;
        }
        this.drag = false;
        this.j.e.off(this.j.ew, 'mousemove.table touchmove.table', this.onMouseMove);
        this.resizeHandler.classList.remove('jodit-table-resizer_moved');
        if (this.startX !== e.clientX) {
            if (this.wholeTable == null) {
                this.resizeColumns();
            }
            else {
                this.resizeTable();
            }
        }
        this.j.synchronizeValues();
        this.j.s.focus();
    }
    resizeColumns() {
        const delta = this.resizeDelta;
        const marked = [];
        modules.Table.setColumnWidthByDelta(this.workTable, modules.Table.formalCoordinate(this.workTable, this.workCell, true)[1], delta, true, marked);
        const nextTD = (0,helpers.call)(this.isRTL ? dom_dom/* Dom.prev */.i.prev : dom_dom/* Dom.next */.i.next, this.workCell, dom_dom/* Dom.isCell */.i.isCell, this.workCell.parentNode);
        modules.Table.setColumnWidthByDelta(this.workTable, modules.Table.formalCoordinate(this.workTable, nextTD)[1], -delta, false, marked);
    }
    resizeTable() {
        const delta = this.resizeDelta * (this.isRTL ? -1 : 1);
        const width = this.workTable.offsetWidth, parentWidth = (0,helpers.getContentWidth)(this.workTable.parentNode, this.j.ew);
        const rightSide = !this.wholeTable;
        const needChangeWidth = this.isRTL ? !rightSide : rightSide;
        if (needChangeWidth) {
            this.workTable.style.width =
                ((width + delta) / parentWidth) * 100 + '%';
        }
        else {
            const side = this.isRTL ? 'marginRight' : 'marginLeft';
            const margin = parseInt(this.j.ew.getComputedStyle(this.workTable)[side] || '0', 10);
            this.workTable.style.width =
                ((width - delta) / parentWidth) * 100 + '%';
            this.workTable.style[side] =
                ((margin + delta) / parentWidth) * 100 + '%';
        }
    }
    setWorkCell(cell, wholeTable = null) {
        this.wholeTable = wholeTable;
        this.workCell = cell;
        this.workTable = dom_dom/* Dom.up */.i.up(cell, (elm) => dom_dom/* Dom.isTag */.i.isTag(elm, 'table'), this.j.editor);
    }
    calcHandlePosition(table, cell, offsetX = 0, delta = 0) {
        const box = (0,helpers.offset)(cell, this.j, this.j.ed);
        if (offsetX > constants.NEARBY && offsetX < box.width - constants.NEARBY) {
            this.hideResizeHandle();
            return;
        }
        const workplacePosition = (0,helpers.offset)(this.j.workplace, this.j, this.j.od, true), parentBox = (0,helpers.offset)(table, this.j, this.j.ed);
        this.resizeHandler.style.left =
            (offsetX <= constants.NEARBY ? box.left : box.left + box.width) -
                workplacePosition.left +
                delta +
                'px';
        Object.assign(this.resizeHandler.style, {
            height: parentBox.height + 'px',
            top: parentBox.top - workplacePosition.top + 'px'
        });
        this.showResizeHandle();
        if (offsetX <= constants.NEARBY) {
            const prevTD = (0,helpers.call)(this.isRTL ? dom_dom/* Dom.next */.i.next : dom_dom/* Dom.prev */.i.prev, cell, dom_dom/* Dom.isCell */.i.isCell, cell.parentNode);
            this.setWorkCell(prevTD || cell, prevTD ? null : true);
        }
        else {
            const nextTD = (0,helpers.call)(!this.isRTL ? dom_dom/* Dom.next */.i.next : dom_dom/* Dom.prev */.i.prev, cell, dom_dom/* Dom.isCell */.i.isCell, cell.parentNode);
            this.setWorkCell(cell, !nextTD ? false : null);
        }
    }
    afterInit(editor) {
        if (!editor.o.tableAllowCellResize) {
            return;
        }
        editor.e
            .off(this.j.ow, '.resize-cells')
            .off('.resize-cells')
            .on('change.resize-cells afterCommand.resize-cells afterSetMode.resize-cells', () => {
            (0,helpers.$$)('table', editor.editor).forEach(this.observe);
        })
            .on(this.j.ow, 'scroll.resize-cells', () => {
            if (!this.drag) {
                return;
            }
            const parent = dom_dom/* Dom.up */.i.up(this.workCell, (elm) => dom_dom/* Dom.isTag */.i.isTag(elm, 'table'), editor.editor);
            if (parent) {
                const parentBox = parent.getBoundingClientRect();
                this.resizeHandler.style.top = parentBox.top + 'px';
            }
        })
            .on('beforeSetMode.resize-cells', () => {
            this.module.getAllSelectedCells().forEach(td => {
                this.module.removeSelection(td);
                modules.Table.normalizeTable(dom_dom/* Dom.closest */.i.closest(td, 'table', editor.editor));
            });
        });
    }
    observe(table) {
        if ((0,helpers.dataBind)(table, key)) {
            return;
        }
        (0,helpers.dataBind)(table, key, true);
        this.j.e
            .on(table, 'mouseleave.resize-cells', (e) => {
            if (this.resizeHandler &&
                this.resizeHandler !== e.relatedTarget) {
                this.hideResizeHandle();
            }
        })
            .on(table, 'mousemove.resize-cells touchmove.resize-cells', this.j.async.throttle((event) => {
            if (this.j.isLocked) {
                return;
            }
            const cell = dom_dom/* Dom.up */.i.up(event.target, dom_dom/* Dom.isCell */.i.isCell, table);
            if (!cell) {
                return;
            }
            this.calcHandlePosition(table, cell, event.offsetX);
        }, {
            timeout: this.j.defaultTimeout
        }));
        this.createResizeHandle();
    }
    beforeDestruct(jodit) {
        if (jodit.events) {
            jodit.e.off(this.j.ow, '.resize-cells');
            jodit.e.off('.resize-cells');
        }
    }
}
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], resizeCells.prototype, "onHandleMouseDown", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], resizeCells.prototype, "onMouseMove", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], resizeCells.prototype, "onMouseUp", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], resizeCells.prototype, "observe", null);
global/* pluginSystem.add */.pw.add('resizeCells', resizeCells);

;// CONCATENATED MODULE: ./src/plugins/resize-handler/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.allowResizeX */.D.prototype.allowResizeX = false;
config/* Config.prototype.allowResizeY */.D.prototype.allowResizeY = true;

;// CONCATENATED MODULE: ./src/plugins/resize-handler/resize-handler.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







let resizeHandler = class resizeHandler extends core_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.isResized = false;
        this.start = {
            x: 0,
            y: 0,
            w: 0,
            h: 0
        };
        this.handle = this.j.c.div('jodit-editor__resize', ui/* Icon.get */.JO.get('resize_handler'));
    }
    afterInit(editor) {
        const { height, width, allowResizeX } = editor.o;
        let { allowResizeY } = editor.o;
        if (height === 'auto' && width !== 'auto') {
            allowResizeY = false;
        }
        if ((height !== 'auto' || width !== 'auto') &&
            (allowResizeX || allowResizeY)) {
            editor.statusbar.setMod('resize-handle', true);
            editor.e
                .on('toggleFullSize.resizeHandler', () => {
                this.handle.style.display = editor.isFullSize
                    ? 'none'
                    : 'block';
            })
                .on(this.handle, 'mousedown touchstart', this.onHandleResizeStart)
                .on(editor.ow, 'mouseup touchend', this.onHandleResizeEnd);
            editor.container.appendChild(this.handle);
        }
    }
    onHandleResizeStart(e) {
        this.isResized = true;
        this.start.x = e.clientX;
        this.start.y = e.clientY;
        this.start.w = this.j.container.offsetWidth;
        this.start.h = this.j.container.offsetHeight;
        this.j.lock();
        this.j.e.on(this.j.ow, 'mousemove touchmove', this.onHandleResize);
        e.preventDefault();
    }
    onHandleResize(e) {
        if (!this.isResized) {
            return;
        }
        if (this.j.o.allowResizeY) {
            this.j.e.fire('setHeight', this.start.h + e.clientY - this.start.y);
        }
        if (this.j.o.allowResizeX) {
            this.j.e.fire('setWidth', this.start.w + e.clientX - this.start.x);
        }
        this.j.e.fire('resize');
    }
    onHandleResizeEnd() {
        if (this.isResized) {
            this.isResized = false;
            this.j.e.off(this.j.ow, 'mousemove touchmove', this.onHandleResize);
            this.j.unlock();
        }
    }
    beforeDestruct() {
        dom/* Dom.safeRemove */.i.safeRemove(this.handle);
        this.j.e.off(this.j.ow, 'mouseup touchsend', this.onHandleResizeEnd);
    }
};
resizeHandler.requires = ['size'];
resizeHandler = (0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], resizeHandler);

global/* pluginSystem.add */.pw.add('resizeHandler', resizeHandler);

;// CONCATENATED MODULE: ./src/plugins/resizer/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.allowResizeTags */.D.prototype.allowResizeTags = ['img', 'iframe', 'table', 'jodit'];
config/* Config.prototype.resizer */.D.prototype.resizer = {
    showSize: true,
    hideSizeTimeout: 1000,
    forImageChangeAttributes: true,
    min_width: 10,
    min_height: 10,
    useAspectRatio: ['img']
};

;// CONCATENATED MODULE: ./src/plugins/resizer/resizer.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */











const keyBInd = '__jodit-resizer_binded';
class resizer extends plugin_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.LOCK_KEY = 'resizer';
        this.element = null;
        this.isResizeMode = false;
        this.isShown = false;
        this.startX = 0;
        this.startY = 0;
        this.width = 0;
        this.height = 0;
        this.ratio = 0;
        this.rect = this.j.c.fromHTML(`<div title="${this.j.i18n('Press Alt for custom resizing')}" class="jodit-resizer">
				<div class="jodit-resizer__top-left"></div>
				<div class="jodit-resizer__top-right"></div>
				<div class="jodit-resizer__bottom-right"></div>
				<div class="jodit-resizer__bottom-left"></div>
				<span>100x100</span>
			</div>`);
        this.sizeViewer = this.rect.getElementsByTagName('span')[0];
        this.pointerX = 0;
        this.pointerY = 0;
        this.isAltMode = false;
        this.onClickElement = (element) => {
            if (this.isResizeMode) {
                return;
            }
            if (this.element !== element || !this.isShown) {
                this.element = element;
                this.show();
                if (dom_dom/* Dom.isTag */.i.isTag(this.element, 'img') && !this.element.complete) {
                    this.j.e.one(this.element, 'load', this.updateSize);
                }
            }
        };
        this.updateSize = () => {
            if (this.isInDestruct || !this.isShown) {
                return;
            }
            if (this.element && this.rect) {
                const workplacePosition = this.getWorkplacePosition();
                const pos = (0,helpers.offset)(this.element, this.j, this.j.ed), left = parseInt(this.rect.style.left || '0', 10), top = parseInt(this.rect.style.top || '0', 10), w = this.rect.offsetWidth, h = this.rect.offsetHeight;
                const newTop = pos.top - workplacePosition.top, newLeft = pos.left - workplacePosition.left;
                if (top !== newTop ||
                    left !== newLeft ||
                    w !== this.element.offsetWidth ||
                    h !== this.element.offsetHeight) {
                    (0,helpers.css)(this.rect, {
                        top: newTop,
                        left: newLeft,
                        width: this.element.offsetWidth,
                        height: this.element.offsetHeight
                    });
                    if (this.j.events) {
                        this.j.e.fire(this.element, 'changesize');
                        if (!isNaN(left)) {
                            this.j.e.fire('resize');
                        }
                    }
                }
            }
        };
        this.hideSizeViewer = () => {
            this.sizeViewer.style.opacity = '0';
        };
    }
    afterInit(editor) {
        (0,helpers.$$)('div', this.rect).forEach((resizeHandle) => {
            editor.e.on(resizeHandle, 'mousedown.resizer touchstart.resizer', this.onStartResizing.bind(this, resizeHandle));
        });
        global/* eventEmitter.on */.TB.on('hideHelpers', this.hide);
        editor.e
            .on('readonly', (isReadOnly) => {
            if (isReadOnly) {
                this.hide();
            }
        })
            .on('afterInit changePlace', this.addEventListeners.bind(this))
            .on('afterGetValueFromEditor.resizer', (data) => {
            const rgx = /<jodit[^>]+data-jodit_iframe_wrapper[^>]+>(.*?<iframe[^>]*>.*?<\/iframe>.*?)<\/jodit>/gi;
            if (rgx.test(data.value)) {
                data.value = data.value.replace(rgx, '$1');
            }
        })
            .on('hideResizer', this.hide)
            .on('change afterInit afterSetMode', this.onChangeEditor);
        this.addEventListeners();
        this.onChangeEditor();
    }
    onEditorClick(e) {
        let node = e.target;
        const { editor, options: { allowResizeTags } } = this.j;
        while (node && node !== editor) {
            if (dom_dom/* Dom.isTag */.i.isTag(node, allowResizeTags)) {
                this.bind(node);
                this.onClickElement(node);
                return;
            }
            node = node.parentNode;
        }
    }
    addEventListeners() {
        const editor = this.j;
        editor.e
            .off(editor.editor, '.resizer')
            .off(editor.ow, '.resizer')
            .on(editor.editor, 'keydown.resizer', (e) => {
            if (this.isShown &&
                e.key === constants.KEY_DELETE &&
                this.element &&
                !dom_dom/* Dom.isTag */.i.isTag(this.element, 'table')) {
                this.onDelete(e);
            }
        })
            .on(editor.ow, 'resize.resizer', this.updateSize)
            .on('resize.resizer', this.updateSize)
            .on([editor.ow, editor.editor], 'scroll.resizer', () => {
            if (this.isShown && !this.isResizeMode) {
                this.hide();
            }
        })
            .on(editor.ow, 'keydown.resizer', this.onKeyDown)
            .on(editor.ow, 'keyup.resizer', this.onKeyUp)
            .on(editor.ow, 'mouseup.resizer touchend.resizer', this.onClickOutside);
    }
    onStartResizing(resizeHandle, e) {
        if (!this.element || !this.element.parentNode) {
            this.hide();
            return false;
        }
        this.handle = resizeHandle;
        if (e.cancelable) {
            e.preventDefault();
        }
        e.stopImmediatePropagation();
        this.width = this.element.offsetWidth;
        this.height = this.element.offsetHeight;
        this.ratio = this.width / this.height;
        this.isResizeMode = true;
        this.startX = e.clientX;
        this.startY = e.clientY;
        this.pointerX = e.clientX;
        this.pointerY = e.clientY;
        const { j } = this;
        j.e.fire('hidePopup');
        j.lock(this.LOCK_KEY);
        j.e.on(j.ow, 'mousemove.resizer touchmove.resizer', this.onResize);
    }
    onEndResizing() {
        const { j } = this;
        j.unlock();
        this.isResizeMode = false;
        this.isAltMode = false;
        j.synchronizeValues();
        j.e.off(j.ow, 'mousemove.resizer touchmove.resizer', this.onResize);
    }
    onResize(e) {
        if (this.isResizeMode) {
            if (!this.element) {
                return;
            }
            this.pointerX = e.clientX;
            this.pointerY = e.clientY;
            let diff_x, diff_y;
            if (this.j.options.iframe) {
                const workplacePosition = this.getWorkplacePosition();
                diff_x = e.clientX + workplacePosition.left - this.startX;
                diff_y = e.clientY + workplacePosition.top - this.startY;
            }
            else {
                diff_x = this.pointerX - this.startX;
                diff_y = this.pointerY - this.startY;
            }
            const className = this.handle.className;
            let new_w = 0, new_h = 0;
            const uar = this.j.o.resizer.useAspectRatio;
            if (!this.isAltMode &&
                (uar === true ||
                    (Array.isArray(uar) && dom_dom/* Dom.isTag */.i.isTag(this.element, uar)))) {
                if (diff_x) {
                    new_w =
                        this.width +
                            (className.match(/left/) ? -1 : 1) * diff_x;
                    new_h = Math.round(new_w / this.ratio);
                }
                else {
                    new_h =
                        this.height +
                            (className.match(/top/) ? -1 : 1) * diff_y;
                    new_w = Math.round(new_h * this.ratio);
                }
                if (new_w > (0,helpers.innerWidth)(this.j.editor, this.j.ow)) {
                    new_w = (0,helpers.innerWidth)(this.j.editor, this.j.ow);
                    new_h = Math.round(new_w / this.ratio);
                }
            }
            else {
                new_w =
                    this.width + (className.match(/left/) ? -1 : 1) * diff_x;
                new_h =
                    this.height + (className.match(/top/) ? -1 : 1) * diff_y;
            }
            if (new_w > this.j.o.resizer.min_width) {
                if (new_w < this.rect.parentNode.offsetWidth) {
                    this.applySize(this.element, 'width', new_w);
                }
                else {
                    this.applySize(this.element, 'width', '100%');
                }
            }
            if (new_h > this.j.o.resizer.min_height) {
                this.applySize(this.element, 'height', new_h);
            }
            this.updateSize();
            this.showSizeViewer(this.element.offsetWidth, this.element.offsetHeight);
            e.stopImmediatePropagation();
        }
    }
    onKeyDown(e) {
        this.isAltMode = e.key === constants.KEY_ALT;
        if (!this.isAltMode && this.isResizeMode) {
            this.onEndResizing();
        }
    }
    onKeyUp() {
        if (this.isAltMode && this.isResizeMode && this.element) {
            this.width = this.element.offsetWidth;
            this.height = this.element.offsetHeight;
            this.ratio = this.width / this.height;
            this.startX = this.pointerX;
            this.startY = this.pointerY;
        }
        this.isAltMode = false;
    }
    onClickOutside(e) {
        if (!this.isShown) {
            return;
        }
        if (!this.isResizeMode) {
            return this.hide();
        }
        e.stopImmediatePropagation();
        this.onEndResizing();
    }
    getWorkplacePosition() {
        return (0,helpers.offset)((this.rect.parentNode || this.j.od.documentElement), this.j, this.j.od, true);
    }
    applySize(element, key, value) {
        const changeAttrs = dom_dom/* Dom.isImage */.i.isImage(element) && this.j.o.resizer.forImageChangeAttributes;
        if (changeAttrs) {
            (0,helpers.attr)(element, key, value);
        }
        if (!changeAttrs || element.style[key]) {
            (0,helpers.css)(element, key, value);
        }
    }
    onDelete(e) {
        if (!this.element) {
            return;
        }
        if (this.element.tagName !== 'JODIT') {
            this.j.s.select(this.element);
        }
        else {
            dom_dom/* Dom.safeRemove */.i.safeRemove(this.element);
            this.hide();
            e.preventDefault();
        }
    }
    onChangeEditor() {
        if (this.isShown) {
            if (!this.element || !this.element.parentNode) {
                this.hide();
            }
            else {
                this.updateSize();
            }
        }
        (0,helpers.$$)('iframe', this.j.editor).forEach(this.bind);
    }
    bind(element) {
        if (!dom_dom/* Dom.isHTMLElement */.i.isHTMLElement(element) ||
            !this.j.o.allowResizeTags.includes(element.tagName.toLowerCase()) ||
            (0,helpers.dataBind)(element, keyBInd)) {
            return;
        }
        (0,helpers.dataBind)(element, keyBInd, true);
        let wrapper;
        if (dom_dom/* Dom.isTag */.i.isTag(element, 'iframe')) {
            const iframe = element;
            if (dom_dom/* Dom.isHTMLElement */.i.isHTMLElement(element.parentNode) &&
                (0,helpers.attr)(element.parentNode, '-jodit_iframe_wrapper')) {
                element = element.parentNode;
            }
            else {
                wrapper = this.j.createInside.element('jodit', {
                    'data-jodit-temp': 1,
                    contenteditable: false,
                    draggable: true,
                    'data-jodit_iframe_wrapper': 1
                });
                (0,helpers.attr)(wrapper, 'style', (0,helpers.attr)(element, 'style'));
                (0,helpers.css)(wrapper, {
                    display: element.style.display === 'inline-block'
                        ? 'inline-block'
                        : 'block',
                    width: element.offsetWidth,
                    height: element.offsetHeight
                });
                if (element.parentNode) {
                    element.parentNode.insertBefore(wrapper, element);
                }
                wrapper.appendChild(element);
                this.j.e.on(wrapper, 'click', () => {
                    (0,helpers.attr)(wrapper, 'data-jodit-wrapper_active', true);
                });
                element = wrapper;
            }
            this.j.e
                .off(element, 'mousedown.select touchstart.select')
                .on(element, 'mousedown.select touchstart.select', () => {
                this.j.s.select(element);
            })
                .off(element, 'changesize')
                .on(element, 'changesize', () => {
                iframe.setAttribute('width', element.offsetWidth + 'px');
                iframe.setAttribute('height', element.offsetHeight + 'px');
            });
        }
        this.j.e.on(element, 'dragstart', this.hide);
        if (false) {}
    }
    showSizeViewer(w, h) {
        if (!this.j.o.resizer.showSize) {
            return;
        }
        if (w < this.sizeViewer.offsetWidth ||
            h < this.sizeViewer.offsetHeight) {
            this.hideSizeViewer();
            return;
        }
        this.sizeViewer.style.opacity = '1';
        this.sizeViewer.textContent = `${w} x ${h}`;
        this.j.async.setTimeout(this.hideSizeViewer, {
            timeout: this.j.o.resizer.hideSizeTimeout,
            label: 'hideSizeViewer'
        });
    }
    show() {
        if (this.j.o.readonly || this.isShown) {
            return;
        }
        this.isShown = true;
        if (!this.rect.parentNode) {
            (0,helpers.markOwner)(this.j, this.rect);
            this.j.workplace.appendChild(this.rect);
        }
        if (this.j.isFullSize) {
            this.rect.style.zIndex = (0,helpers.css)(this.j.container, 'zIndex').toString();
        }
        this.updateSize();
    }
    hide() {
        if (!this.isResizeMode) {
            this.isResizeMode = false;
            this.isShown = false;
            this.element = null;
            dom_dom/* Dom.safeRemove */.i.safeRemove(this.rect);
            (0,helpers.$$)("[data-jodit-wrapper_active='true']", this.j.editor).forEach(elm => (0,helpers.attr)(elm, 'data-jodit-wrapper_active', false));
        }
    }
    beforeDestruct(jodit) {
        this.hide();
        global/* eventEmitter.off */.TB.off('hideHelpers', this.hide);
        jodit.e.off(this.j.ow, '.resizer').off('.resizer');
    }
}
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':click')
], resizer.prototype, "onEditorClick", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], resizer.prototype, "onStartResizing", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], resizer.prototype, "onEndResizing", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], resizer.prototype, "onResize", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], resizer.prototype, "onKeyDown", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], resizer.prototype, "onKeyUp", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], resizer.prototype, "onClickOutside", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.debounce)()
], resizer.prototype, "onChangeEditor", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], resizer.prototype, "bind", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], resizer.prototype, "hide", null);
global/* pluginSystem.add */.pw.add('resizer', resizer);

;// CONCATENATED MODULE: ./src/plugins/search/ui/search.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */








let UISearch = class UISearch extends ui/* UIElement */.u1 {
    constructor(jodit) {
        super(jodit);
        this.selInfo = null;
        this._currentIndex = 0;
        this.isOpened = false;
        const { query, replace, cancel, next, prev, replaceBtn, current, count } = (0,helpers.refs)(this.container);
        this.queryInput = query;
        this.replaceInput = replace;
        this.closeButton = cancel;
        this.replaceButton = replaceBtn;
        this.currentBox = current;
        this.countBox = count;
        jodit.e
            .on(this.closeButton, 'pointerdown', () => {
            this.close();
            return false;
        })
            .on(this.queryInput, 'input', () => {
            this.currentIndex = 0;
        })
            .on(this.queryInput, 'pointerdown', () => {
            if (jodit.s.isFocused()) {
                jodit.s.removeMarkers();
                this.selInfo = jodit.s.save();
            }
        })
            .on(this.replaceButton, 'pointerdown', () => {
            jodit.e.fire(this, 'pressReplaceButton');
            return false;
        })
            .on(next, 'pointerdown', () => {
            jodit.e.fire('searchNext');
            return false;
        })
            .on(prev, 'pointerdown', () => {
            jodit.e.fire('searchPrevious');
            return false;
        })
            .on(this.queryInput, 'input', () => {
            this.setMod('empty-query', !(0,helpers.trim)(this.queryInput.value).length);
        })
            .on(this.queryInput, 'keydown', this.j.async.debounce((e) => {
            switch (e.key) {
                case constants.KEY_ENTER:
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    if (jodit.e.fire('searchNext')) {
                        this.close();
                    }
                    break;
                default:
                    jodit.e.fire(this, 'needUpdateCounters');
                    break;
            }
        }, this.j.defaultTimeout));
    }
    className() {
        return 'UISearch';
    }
    render() {
        return `<div>
			<div class="&__box">
				<div class="&__inputs">
					<input data-ref="query" tabindex="0" placeholder="~Search for~" type="text"/>
					<input data-ref="replace" tabindex="0" placeholder="~Replace with~" type="text"/>
				</div>
				<div class="&__counts">
					<span data-ref="counter-box">
						<span data-ref="current">0</span><span>/</span><span data-ref="count">0</span>
					</span>
				</div>
				<div class="&__buttons">
					<button data-ref="next" tabindex="0" type="button">${ui/* Icon.get */.JO.get('angle-down')}</button>
					<button data-ref="prev" tabindex="0" type="button">${ui/* Icon.get */.JO.get('angle-up')}</button>
					<button data-ref="cancel" tabindex="0" type="button">${ui/* Icon.get */.JO.get('cancel')}</button>
					<button data-ref="replace-btn" tabindex="0" type="button" class="jodit-ui-button">~Replace~</button>
				</div>
			</div>
		</div>`;
    }
    get currentIndex() {
        return this._currentIndex;
    }
    set currentIndex(value) {
        this._currentIndex = value;
        this.currentBox.innerText = value.toString();
    }
    set count(value) {
        this.countBox.innerText = value.toString();
    }
    get query() {
        return this.queryInput.value;
    }
    get replace() {
        return this.replaceInput.value;
    }
    onEditorKeyDown(e) {
        if (!this.isOpened) {
            return;
        }
        const { j } = this;
        if (j.getRealMode() !== constants.MODE_WYSIWYG) {
            return;
        }
        switch (e.key) {
            case constants.KEY_ESC:
                this.close();
                break;
            case constants.KEY_F3:
                if (this.queryInput.value) {
                    j.e.fire(!e.shiftKey ? 'searchNext' : 'searchPrevious');
                    e.preventDefault();
                }
                break;
        }
    }
    open(searchAndReplace = false) {
        if (!this.isOpened) {
            this.j.workplace.appendChild(this.container);
            this.isOpened = true;
        }
        this.calcSticky(this.j.e.fire('getStickyState.sticky') || false);
        this.j.e.fire('hidePopup');
        this.setMod('replace', searchAndReplace);
        const selStr = (this.j.s.sel || '').toString();
        if (selStr) {
            this.queryInput.value = selStr;
        }
        this.setMod('empty-query', !selStr.length);
        this.j.e.fire(this, 'needUpdateCounters');
        if (selStr) {
            this.queryInput.select();
        }
        else {
            this.queryInput.focus();
        }
    }
    close() {
        if (!this.isOpened) {
            return;
        }
        this.j.s.restore();
        dom/* Dom.safeRemove */.i.safeRemove(this.container);
        this.isOpened = false;
        this.j.e.fire(this, 'afterClose');
    }
    calcSticky(enabled) {
        if (this.isOpened) {
            this.setMod('sticky', enabled);
            if (enabled) {
                const pos = (0,helpers.position)(this.j.toolbarContainer);
                (0,helpers.css)(this.container, {
                    top: pos.top + pos.height,
                    left: pos.left + pos.width
                });
            }
            else {
                (0,helpers.css)(this.container, {
                    top: null,
                    left: null
                });
            }
        }
    }
};
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)([':keydown', 'queryInput:keydown'])
], UISearch.prototype, "onEditorKeyDown", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], UISearch.prototype, "open", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], UISearch.prototype, "close", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':toggleSticky')
], UISearch.prototype, "calcSticky", null);
UISearch = (0,tslib_es6/* __decorate */.gn)([
    decorators.component
], UISearch);


// EXTERNAL MODULE: ./src/core/helpers/string/fuzzy-search-index.ts
var fuzzy_search_index = __webpack_require__(9470);
;// CONCATENATED MODULE: ./src/plugins/search/helpers/sentence-finder.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

class SentenceFinder {
    constructor(searchIndex = fuzzy_search_index/* fuzzySearchIndex */.Q) {
        this.searchIndex = searchIndex;
        this.queue = [];
        this.value = '';
    }
    add(node) {
        var _a;
        const value = ((_a = node.nodeValue) !== null && _a !== void 0 ? _a : '').toLowerCase();
        if (!value.length) {
            return;
        }
        const index = this.value.length;
        this.queue.push({
            startIndex: index,
            endIndex: index + value.length,
            node
        });
        this.value += value;
    }
    ranges(needle, position = 0) {
        const results = [];
        let index = position, len = 0, startQueueIndex = 0;
        do {
            [index, len] = this.searchIndex(needle, this.value, index);
            if (index !== -1) {
                let startContainer, startOffset = 0, endContainer, endOffset = 0;
                for (let i = startQueueIndex; i < this.queue.length; i += 1) {
                    if (!startContainer && this.queue[i].endIndex > index) {
                        startContainer = this.queue[i].node;
                        startOffset = index - this.queue[i].startIndex;
                    }
                    if (startContainer &&
                        this.queue[i].endIndex >= index + len) {
                        endContainer = this.queue[i].node;
                        endOffset = index + len - this.queue[i].startIndex;
                        startQueueIndex = i;
                        break;
                    }
                }
                if (startContainer && endContainer) {
                    results.push({
                        startContainer,
                        startOffset,
                        endContainer,
                        endOffset
                    });
                }
                index += len;
            }
        } while (index !== -1);
        return results.length === 0 ? null : results;
    }
}

;// CONCATENATED MODULE: ./src/plugins/search/helpers/wrap-ranges-texts-in-tmp-span.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


const TMP_ATTR = 'jd-tmp-selection';
function wrapRangesTextsInTmpSpan(rng, restRanges, ci, root) {
    if (rng.startContainer.nodeValue == null ||
        rng.endContainer.nodeValue == null) {
        return;
    }
    const span = ci.element('span', {
        [TMP_ATTR]: true
    });
    const startText = rng.startContainer.nodeValue;
    let diff = 0;
    if (rng.startOffset !== 0) {
        const text = ci.text(startText.substring(0, rng.startOffset));
        rng.startContainer.nodeValue = startText.substring(rng.startOffset);
        dom/* Dom.before */.i.before(rng.startContainer, text);
        if (rng.startContainer === rng.endContainer) {
            diff = rng.startOffset;
            rng.endOffset -= diff;
        }
        rng.startOffset = 0;
    }
    const endText = rng.endContainer.nodeValue;
    if (rng.endOffset !== endText.length) {
        const text = ci.text(endText.substring(rng.endOffset));
        rng.endContainer.nodeValue = endText.substring(0, rng.endOffset);
        dom/* Dom.after */.i.after(rng.endContainer, text);
        for (const range of restRanges) {
            if (range.startContainer === rng.endContainer) {
                range.startContainer = text;
                range.startOffset = range.startOffset - rng.endOffset - diff;
                if (range.endContainer === rng.endContainer) {
                    range.endContainer = text;
                    range.endOffset = range.endOffset - rng.endOffset - diff;
                }
            }
            else {
                break;
            }
        }
        rng.endOffset = rng.endContainer.nodeValue.length;
    }
    let next = rng.startContainer;
    do {
        if (!next) {
            break;
        }
        if (dom/* Dom.isText */.i.isText(next) && !isSelectionWrapper(next.parentNode)) {
            dom/* Dom.wrap */.i.wrap(next, span.cloneNode(), ci);
        }
        if (next === rng.endContainer) {
            break;
        }
        let step = next.firstChild || next.nextSibling;
        if (!step) {
            while (next && !next.nextSibling && next !== root) {
                next = next.parentNode;
            }
            step = next === null || next === void 0 ? void 0 : next.nextSibling;
        }
        next = step;
    } while (next && next !== root);
}
function getSelectionWrappers(root) {
    return (0,selector.$$)(`[${TMP_ATTR}]`, root);
}
function clearSelectionWrappers(root) {
    getSelectionWrappers(root).forEach(span => dom/* Dom.unwrap */.i.unwrap(span));
}
function clearSelectionWrappersFromHTML(root) {
    return root.replace(RegExp(`<span[^>]+${TMP_ATTR}[^>]+>(.*?)</span>`, 'g'), '$1');
}
function isSelectionWrapper(node) {
    return dom/* Dom.isElement */.i.isElement(node) && node.hasAttribute(TMP_ATTR);
}

;// CONCATENATED MODULE: ./src/plugins/search/helpers/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



;// CONCATENATED MODULE: ./src/plugins/search/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


config/* Config.prototype.useSearch */.D.prototype.useSearch = true;
config/* Config.prototype.search */.D.prototype.search = {
    lazyIdleTimeout: 0
};
icon/* Icon.set */.J.set('search', __webpack_require__(41197));
config/* Config.prototype.controls.find */.D.prototype.controls.find = {
    tooltip: 'Find',
    icon: 'search',
    exec(jodit, _, { control }) {
        const value = control.args && control.args[0];
        switch (value) {
            case 'findPrevious':
                jodit.e.fire('searchPrevious');
                break;
            case 'findNext':
                jodit.e.fire('searchNext');
                break;
            case 'replace':
                jodit.execCommand('openReplaceDialog');
                break;
            default:
                jodit.execCommand('openSearchDialog');
        }
    },
    list: {
        search: 'Find',
        findNext: 'Find Next',
        findPrevious: 'Find Previous',
        replace: 'Replace'
    },
    childTemplate: (_, k, v) => v
};

;// CONCATENATED MODULE: ./src/plugins/search/search.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */









class search extends core_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.buttons = [
            {
                name: 'find',
                group: 'search'
            }
        ];
        this.previousQuery = '';
        this.drawPromise = null;
        this.walker = null;
        this.walkerCount = null;
        this.cache = {};
        this.wrapFrameRequest = 0;
    }
    get ui() {
        return new UISearch(this.j);
    }
    async updateCounters() {
        if (!this.ui.isOpened) {
            return;
        }
        this.ui.count = await this.calcCounts(this.ui.query);
    }
    onPressReplaceButton() {
        this.findAndReplace(this.ui.query);
        this.updateCounters();
    }
    tryScrollToElement(startContainer) {
        let parentBox = dom/* Dom.closest */.i.closest(startContainer, dom/* Dom.isElement */.i.isElement, this.j.editor);
        if (!parentBox) {
            parentBox = dom/* Dom.prev */.i.prev(startContainer, dom/* Dom.isElement */.i.isElement, this.j.editor);
        }
        parentBox &&
            parentBox !== this.j.editor &&
            (0,helpers.scrollIntoViewIfNeeded)(parentBox, this.j.editor, this.j.ed);
    }
    async calcCounts(query) {
        if (this.walkerCount) {
            this.walkerCount.break();
        }
        this.walkerCount = new dom/* LazyWalker */.b(this.j.async, {
            timeout: this.j.o.search.lazyIdleTimeout
        });
        const result = await this.find(this.walkerCount, query).catch(() => []);
        return result.length;
    }
    async findAndReplace(query) {
        if (this.walker) {
            this.walker.break();
        }
        this.walker = new dom/* LazyWalker */.b(this.j.async, {
            timeout: this.j.o.search.lazyIdleTimeout
        });
        const range = this.j.s.range, bounds = await this.find(this.walker, query).catch(() => []);
        let currentIndex = this.findCurrentIndexInRanges(bounds, range);
        if (currentIndex === -1) {
            currentIndex = 0;
        }
        const bound = bounds[currentIndex];
        if (bound) {
            try {
                const rng = this.j.ed.createRange();
                rng.setStart(bound.startContainer, bound.startOffset);
                rng.setEnd(bound.endContainer, bound.endOffset);
                rng.deleteContents();
                const textNode = this.j.createInside.text(this.ui.replace);
                dom/* Dom.safeInsertNode */.i.safeInsertNode(rng, textNode);
                this.j.s.select(textNode);
                this.tryScrollToElement(textNode);
                this.cache = {};
                this.j.synchronizeValues();
            }
            catch (_a) { }
            this.j.e.fire('afterFindAndReplace');
            return true;
        }
        return false;
    }
    async findAndSelect(query, next) {
        var _a;
        if (this.walker) {
            this.walker.break();
        }
        this.walker = new dom/* LazyWalker */.b(this.j.async, {
            timeout: this.j.defaultTimeout
        });
        const bounds = await this.find(this.walker, query);
        if (!bounds.length) {
            return false;
        }
        if (this.previousQuery !== query ||
            !getSelectionWrappers(this.j.editor).length) {
            (_a = this.drawPromise) === null || _a === void 0 ? void 0 : _a.rejectCallback();
            this.j.async.cancelAnimationFrame(this.wrapFrameRequest);
            clearSelectionWrappers(this.j.editor);
            this.drawPromise = this.drawSelectionRanges(bounds);
        }
        this.previousQuery = query;
        let currentIndex = this.ui.currentIndex - 1;
        if (currentIndex === -1) {
            currentIndex = 0;
        }
        else if (next) {
            currentIndex =
                currentIndex === bounds.length - 1 ? 0 : currentIndex + 1;
        }
        else {
            currentIndex =
                currentIndex === 0 ? bounds.length - 1 : currentIndex - 1;
        }
        this.ui.currentIndex = currentIndex + 1;
        const bound = bounds[currentIndex];
        if (bound) {
            const rng = this.j.ed.createRange();
            try {
                rng.setStart(bound.startContainer, bound.startOffset);
                rng.setEnd(bound.endContainer, bound.endOffset);
                this.j.s.selectRange(rng);
            }
            catch (e) { }
            this.tryScrollToElement(bound.startContainer);
            await this.updateCounters();
            await this.drawPromise;
            this.j.e.fire('afterFindAndSelect');
            return true;
        }
        return false;
    }
    findCurrentIndexInRanges(bounds, range) {
        return bounds.findIndex(bound => bound.startContainer === range.startContainer &&
            bound.startOffset === range.startOffset &&
            bound.endContainer === range.startContainer &&
            bound.endOffset === range.endOffset);
    }
    async isValidCache(promise) {
        const res = await promise;
        return res.every(r => {
            var _a, _b, _c, _d;
            return r.startContainer.isConnected &&
                r.startOffset <= ((_b = (_a = r.startContainer.nodeValue) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) &&
                r.endContainer.isConnected &&
                r.endOffset <= ((_d = (_c = r.endContainer.nodeValue) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0);
        });
    }
    async find(walker, query) {
        if (!query.length) {
            return [];
        }
        const cache = this.cache[query];
        if (cache && (await this.isValidCache(cache))) {
            return cache;
        }
        const sentence = new SentenceFinder(this.j.o.search.fuzzySearch);
        this.cache[query] = this.j.async.promise(resolve => {
            walker
                .on('break', () => {
                resolve([]);
            })
                .on('visit', (elm) => {
                if (dom/* Dom.isText */.i.isText(elm)) {
                    sentence.add(elm);
                }
                return false;
            })
                .on('end', () => {
                var _a;
                resolve((_a = sentence.ranges(query)) !== null && _a !== void 0 ? _a : []);
            })
                .setWork(this.j.editor);
        });
        return this.cache[query];
    }
    drawSelectionRanges(ranges) {
        const { async, createInside: ci, editor } = this.j;
        async.cancelAnimationFrame(this.wrapFrameRequest);
        const parts = [...ranges];
        let sRange, total = 0;
        return async.promise(resolve => {
            const drawParts = () => {
                do {
                    sRange = parts.shift();
                    if (sRange) {
                        wrapRangesTextsInTmpSpan(sRange, parts, ci, editor);
                    }
                    total += 1;
                } while (sRange && total <= 5);
                if (parts.length) {
                    this.wrapFrameRequest =
                        async.requestAnimationFrame(drawParts);
                }
                else {
                    resolve();
                }
            };
            drawParts();
        });
    }
    onAfterGetValueFromEditor(data) {
        data.value = clearSelectionWrappersFromHTML(data.value);
    }
    afterInit(editor) {
        if (editor.o.useSearch) {
            const self = this;
            editor.e
                .on('beforeSetMode.search', () => {
                this.ui.close();
            })
                .on(this.ui, 'afterClose', () => {
                clearSelectionWrappers(editor.editor);
                this.ui.currentIndex = 0;
                this.ui.count = 0;
                this.cache = {};
            })
                .on('click', () => {
                this.ui.currentIndex = 0;
                clearSelectionWrappers(editor.editor);
            })
                .on('change.search', () => {
                this.cache = {};
            })
                .on('keydown.search mousedown.search', editor.async.debounce(() => {
                if (this.ui.selInfo) {
                    editor.s.removeMarkers();
                    this.ui.selInfo = null;
                }
                if (this.ui.isOpened) {
                    this.updateCounters();
                }
            }, editor.defaultTimeout))
                .on('searchNext.search searchPrevious.search', () => {
                if (!this.ui.isOpened) {
                    this.ui.open();
                }
                return self
                    .findAndSelect(self.ui.query, editor.e.current === 'searchNext')
                    .catch(() => { });
            })
                .on('search.search', (value, next = true) => {
                this.ui.currentIndex = 0;
                return self
                    .findAndSelect(value || '', next)
                    .catch(() => { });
            });
            editor
                .registerCommand('search', {
                exec: (command, value, next = true) => {
                    value &&
                        self.findAndSelect(value, next).catch(() => { });
                    return false;
                }
            })
                .registerCommand('openSearchDialog', {
                exec: () => {
                    self.ui.open();
                    return false;
                },
                hotkeys: ['ctrl+f', 'cmd+f']
            })
                .registerCommand('openReplaceDialog', {
                exec: () => {
                    if (!editor.o.readonly) {
                        self.ui.open(true);
                    }
                    return false;
                },
                hotkeys: ['ctrl+h', 'cmd+h']
            });
        }
    }
    beforeDestruct(jodit) {
        this.ui.destruct();
        jodit.e.off('.search');
    }
}
(0,tslib_es6/* __decorate */.gn)([
    decorators.cache
], search.prototype, "ui", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)('ui:needUpdateCounters')
], search.prototype, "updateCounters", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)('ui:pressReplaceButton')
], search.prototype, "onPressReplaceButton", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], search.prototype, "findAndReplace", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], search.prototype, "findAndSelect", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], search.prototype, "find", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':afterGetValueFromEditor')
], search.prototype, "onAfterGetValueFromEditor", null);
global/* pluginSystem.add */.pw.add('search', search);

// EXTERNAL MODULE: ./src/core/helpers/string/camel-case.ts
var camel_case = __webpack_require__(23912);
;// CONCATENATED MODULE: ./src/plugins/select/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.select */.D.prototype.select = {
    normalizeSelectionBeforeCutAndCopy: false
};

;// CONCATENATED MODULE: ./src/plugins/select/select.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */








class select_select extends core_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.proxyEventsList = [
            'click',
            'mousedown',
            'touchstart',
            'mouseup',
            'touchend'
        ];
    }
    afterInit(jodit) {
        this.proxyEventsList.forEach(eventName => {
            jodit.e.on(eventName + '.select', this.onStartSelection);
        });
    }
    beforeDestruct(jodit) {
        this.proxyEventsList.forEach(eventName => {
            jodit.e.on(eventName + '.select', this.onStartSelection);
        });
    }
    onStartSelection(e) {
        const { j } = this;
        let result, target = e.target;
        while (result === undefined && target && target !== j.editor) {
            result = j.e.fire((0,camel_case/* camelCase */.e)(e.type + '_' + target.nodeName.toLowerCase()), target, e);
            target = target.parentElement;
        }
        if (e.type === 'click' && result === undefined && target === j.editor) {
            j.e.fire(e.type + 'Editor', target, e);
        }
    }
    onOutsideClick(e) {
        const node = e.target;
        if (dom_dom/* Dom.up */.i.up(node, elm => elm === this.j.editor)) {
            return;
        }
        const box = ui/* UIElement.closestElement */.u1.closestElement(node, ui/* Popup */.GI);
        if (!box) {
            this.j.e.fire('outsideClick', e);
        }
    }
    beforeCommandCut(command) {
        const { s } = this.j;
        if (command === 'cut' && !s.isCollapsed()) {
            const current = s.current();
            if (current && dom_dom/* Dom.isOrContains */.i.isOrContains(this.j.editor, current)) {
                this.onCopyNormalizeSelectionBound();
            }
        }
    }
    onCopyNormalizeSelectionBound(e) {
        const { s, editor, o } = this.j;
        if (!o.select.normalizeSelectionBeforeCutAndCopy || s.isCollapsed()) {
            return;
        }
        if (e &&
            (!e.isTrusted ||
                !dom_dom/* Dom.isNode */.i.isNode(e.target) ||
                !dom_dom/* Dom.isOrContains */.i.isOrContains(editor, e.target))) {
            return;
        }
        this.jodit.s.expandSelection();
    }
}
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], select_select.prototype, "onStartSelection", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)('ow:click')
], select_select.prototype, "onOutsideClick", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)([':beforeCommand'])
], select_select.prototype, "beforeCommandCut", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)([':copy', ':cut'])
], select_select.prototype, "onCopyNormalizeSelectionBound", null);
global/* pluginSystem.add */.pw.add('select', select_select);

;// CONCATENATED MODULE: ./src/plugins/select-cells/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.tableAllowCellSelection */.D.prototype.tableAllowCellSelection = true;

;// CONCATENATED MODULE: ./src/plugins/select-cells/select-cells.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */









const select_cells_key = 'table_processor_observer';
const MOUSE_MOVE_LABEL = 'onMoveTableSelectCell';
class selectCells extends core_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.requires = ['select'];
        this.selectedCell = null;
        this.isSelectionMode = false;
    }
    get module() {
        return this.j.getInstance('Table', this.j.o);
    }
    afterInit(jodit) {
        if (!jodit.o.tableAllowCellSelection) {
            return;
        }
        jodit.e
            .on('keydown.select-cells', (event) => {
            if (event.key === constants.KEY_TAB) {
                this.unselectCells();
            }
        })
            .on('beforeCommand.select-cells', this.onExecCommand)
            .on('afterCommand.select-cells', this.onAfterCommand)
            .on([
            'clickEditor',
            'mousedownTd',
            'mousedownTh',
            'touchstartTd',
            'touchstartTh'
        ]
            .map(e => e + '.select-cells')
            .join(' '), this.onStartSelection)
            .on('clickTr clickTbody', () => {
            var _a;
            const cellsCount = this.module.getAllSelectedCells().length;
            if (cellsCount) {
                if (cellsCount > 1) {
                    (_a = this.j.s.sel) === null || _a === void 0 ? void 0 : _a.removeAllRanges();
                }
                return false;
            }
        });
    }
    onStartSelection(cell) {
        if (this.j.o.readonly) {
            return;
        }
        this.unselectCells();
        if (cell === this.j.editor) {
            return;
        }
        const table = dom_dom/* Dom.closest */.i.closest(cell, 'table', this.j.editor);
        if (!cell || !table) {
            return;
        }
        if (!cell.firstChild) {
            cell.appendChild(this.j.createInside.element('br'));
        }
        this.isSelectionMode = true;
        this.selectedCell = cell;
        this.module.addSelection(cell);
        this.j.e
            .on(table, 'mousemove.select-cells touchmove.select-cells', this.j.async.throttle(this.onMove.bind(this, table), {
            label: MOUSE_MOVE_LABEL,
            timeout: this.j.defaultTimeout / 2
        }))
            .on(table, 'mouseup.select-cells touchend.select-cells', this.onStopSelection.bind(this, table));
        return false;
    }
    onOutsideClick() {
        this.selectedCell = null;
        this.onRemoveSelection();
    }
    onChange() {
        if (!this.j.isLocked && !this.isSelectionMode) {
            this.onRemoveSelection();
        }
    }
    onMove(table, e) {
        var _a;
        if (this.j.o.readonly && !this.j.isLocked) {
            return;
        }
        if (this.j.isLockedNotBy(select_cells_key)) {
            return;
        }
        const node = this.j.ed.elementFromPoint(e.clientX, e.clientY);
        if (!node) {
            return;
        }
        const cell = dom_dom/* Dom.closest */.i.closest(node, ['td', 'th'], table);
        if (!cell || !this.selectedCell) {
            return;
        }
        if (cell !== this.selectedCell) {
            this.j.lock(select_cells_key);
        }
        this.unselectCells();
        const bound = modules.Table.getSelectedBound(table, [cell, this.selectedCell]), box = modules.Table.formalMatrix(table);
        for (let i = bound[0][0]; i <= bound[1][0]; i += 1) {
            for (let j = bound[0][1]; j <= bound[1][1]; j += 1) {
                this.module.addSelection(box[i][j]);
            }
        }
        const cellsCount = this.module.getAllSelectedCells().length;
        if (cellsCount > 1) {
            (_a = this.j.s.sel) === null || _a === void 0 ? void 0 : _a.removeAllRanges();
        }
        this.j.e.fire('hidePopup');
        e.stopPropagation();
        (() => {
            const n = this.j.createInside.fromHTML('<div style="color:rgba(0,0,0,0.01);width:0;height:0">&nbsp;</div>');
            cell.appendChild(n);
            this.j.async.setTimeout(() => {
                var _a;
                (_a = n.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(n);
            }, this.j.defaultTimeout / 5);
        })();
    }
    onRemoveSelection(e) {
        var _a;
        if (!((_a = e === null || e === void 0 ? void 0 : e.buffer) === null || _a === void 0 ? void 0 : _a.actionTrigger) &&
            !this.selectedCell &&
            this.module.getAllSelectedCells().length) {
            this.j.unlock();
            this.unselectCells();
            this.j.e.fire('hidePopup', 'cells');
            return;
        }
        this.isSelectionMode = false;
        this.selectedCell = null;
    }
    onStopSelection(table, e) {
        if (!this.selectedCell) {
            return;
        }
        this.isSelectionMode = false;
        this.j.unlock();
        const node = this.j.ed.elementFromPoint(e.clientX, e.clientY);
        if (!node) {
            return;
        }
        const cell = dom_dom/* Dom.closest */.i.closest(node, ['td', 'th'], table);
        if (!cell) {
            return;
        }
        const ownTable = dom_dom/* Dom.closest */.i.closest(cell, 'table', table);
        if (ownTable && ownTable !== table) {
            return;
        }
        const bound = modules.Table.getSelectedBound(table, [cell, this.selectedCell]), box = modules.Table.formalMatrix(table);
        const max = box[bound[1][0]][bound[1][1]], min = box[bound[0][0]][bound[0][1]];
        this.j.e.fire('showPopup', table, () => {
            const minOffset = (0,helpers.position)(min, this.j), maxOffset = (0,helpers.position)(max, this.j);
            return {
                left: minOffset.left,
                top: minOffset.top,
                width: maxOffset.left - minOffset.left + maxOffset.width,
                height: maxOffset.top - minOffset.top + maxOffset.height
            };
        }, 'cells');
        (0,helpers.$$)('table', this.j.editor).forEach(table => {
            this.j.e.off(table, 'mousemove.select-cells touchmove.select-cells mouseup.select-cells touchend.select-cells');
        });
        this.j.async.clearTimeout(MOUSE_MOVE_LABEL);
    }
    unselectCells(currentCell) {
        const module = this.module;
        const cells = module.getAllSelectedCells();
        if (cells.length) {
            cells.forEach(cell => {
                if (!currentCell || currentCell !== cell) {
                    module.removeSelection(cell);
                }
            });
        }
    }
    onExecCommand(command) {
        if (/table(splitv|splitg|merge|empty|bin|binrow|bincolumn|addcolumn|addrow)/.test(command)) {
            command = command.replace('table', '');
            const cells = this.module.getAllSelectedCells();
            if (cells.length) {
                const [cell] = cells;
                if (!cell) {
                    return;
                }
                const table = dom_dom/* Dom.closest */.i.closest(cell, 'table', this.j.editor);
                if (!table) {
                    return;
                }
                switch (command) {
                    case 'splitv':
                        modules.Table.splitVertical(table, this.j);
                        break;
                    case 'splitg':
                        modules.Table.splitHorizontal(table, this.j);
                        break;
                    case 'merge':
                        modules.Table.mergeSelected(table, this.j);
                        break;
                    case 'empty':
                        cells.forEach(td => dom_dom/* Dom.detach */.i.detach(td));
                        break;
                    case 'bin':
                        dom_dom/* Dom.safeRemove */.i.safeRemove(table);
                        break;
                    case 'binrow':
                        new Set(cells.map(td => td.parentNode)).forEach(row => {
                            modules.Table.removeRow(table, row.rowIndex);
                        });
                        break;
                    case 'bincolumn':
                        {
                            const columnsSet = new Set(), columns = cells.reduce((acc, td) => {
                                if (!columnsSet.has(td.cellIndex)) {
                                    acc.push(td);
                                    columnsSet.add(td.cellIndex);
                                }
                                return acc;
                            }, []);
                            columns.forEach(td => {
                                modules.Table.removeColumn(table, td.cellIndex);
                            });
                        }
                        break;
                    case 'addcolumnafter':
                    case 'addcolumnbefore':
                        modules.Table.appendColumn(table, cell.cellIndex, command === 'addcolumnafter', this.j.createInside);
                        break;
                    case 'addrowafter':
                    case 'addrowbefore':
                        modules.Table.appendRow(table, cell.parentNode, command === 'addrowafter', this.j.createInside);
                        break;
                }
            }
            return false;
        }
    }
    onAfterCommand(command) {
        if (/^justify/.test(command)) {
            this.module
                .getAllSelectedCells()
                .forEach(elm => (0,helpers.alignElement)(command, elm));
        }
    }
    beforeDestruct(jodit) {
        this.onRemoveSelection();
        jodit.e.off('.select-cells');
    }
}
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], selectCells.prototype, "onStartSelection", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':outsideClick')
], selectCells.prototype, "onOutsideClick", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':change')
], selectCells.prototype, "onChange", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], selectCells.prototype, "onRemoveSelection", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], selectCells.prototype, "onStopSelection", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], selectCells.prototype, "onExecCommand", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], selectCells.prototype, "onAfterCommand", null);
global/* pluginSystem.add */.pw.add('selectCells', selectCells);

;// CONCATENATED MODULE: ./src/plugins/size/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.minWidth */.D.prototype.minWidth = 200;
config/* Config.prototype.maxWidth */.D.prototype.maxWidth = '100%';
config/* Config.prototype.minHeight */.D.prototype.minHeight = 200;
config/* Config.prototype.maxHeight */.D.prototype.maxHeight = 'auto';
config/* Config.prototype.saveHeightInStorage */.D.prototype.saveHeightInStorage = false;

;// CONCATENATED MODULE: ./src/plugins/size/size.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







let size = class size extends plugin_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.resizeWorkspaces = this.j.async.debounce(this.resizeWorkspaceImd, this.j.defaultTimeout, true);
    }
    afterInit(editor) {
        editor.e
            .on('setHeight.size', this.setHeight)
            .on('setWidth.size', this.setWidth)
            .on('afterInit.size changePlace.size', this.initialize, {
            top: true
        })
            .on(editor.ow, 'load.size', this.resizeWorkspaces)
            .on('afterInit.size resize.size afterUpdateToolbar.size ' +
            'scroll.size afterResize.size', this.resizeWorkspaces)
            .on('toggleFullSize.size toggleToolbar.size', this.resizeWorkspaceImd);
        this.initialize();
    }
    initialize() {
        const { j } = this;
        if (j.o.inline) {
            return;
        }
        let { height } = j.o;
        if (j.o.saveHeightInStorage && height !== 'auto') {
            const localHeight = j.storage.get('height');
            if (localHeight) {
                height = localHeight;
            }
        }
        (0,helpers.css)(j.editor, {
            minHeight: '100%'
        });
        (0,helpers.css)(j.container, {
            minHeight: j.o.minHeight,
            maxHeight: j.o.maxHeight,
            minWidth: j.o.minWidth,
            maxWidth: j.o.maxWidth
        });
        this.setHeight(height);
        this.setWidth(j.o.width);
    }
    setHeight(height) {
        if ((0,helpers.isNumber)(height)) {
            const { minHeight, maxHeight } = this.j.o;
            if ((0,helpers.isNumber)(minHeight) && minHeight > height) {
                height = minHeight;
            }
            if ((0,helpers.isNumber)(maxHeight) && maxHeight < height) {
                height = maxHeight;
            }
        }
        (0,helpers.css)(this.j.container, 'height', height);
        if (this.j.o.saveHeightInStorage) {
            this.j.storage.set('height', height);
        }
        this.resizeWorkspaceImd();
    }
    setWidth(width) {
        if ((0,helpers.isNumber)(width)) {
            const { minWidth, maxWidth } = this.j.o;
            if ((0,helpers.isNumber)(minWidth) && minWidth > width) {
                width = minWidth;
            }
            if ((0,helpers.isNumber)(maxWidth) && maxWidth < width) {
                width = maxWidth;
            }
        }
        (0,helpers.css)(this.j.container, 'width', width);
        this.resizeWorkspaceImd();
    }
    getNotWorkHeight() {
        var _a, _b;
        return ((((_a = this.j.toolbarContainer) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0) +
            (((_b = this.j.statusbar) === null || _b === void 0 ? void 0 : _b.getHeight()) || 0) +
            2);
    }
    resizeWorkspaceImd() {
        if (!this.j || this.j.isDestructed || !this.j.o || this.j.o.inline) {
            return;
        }
        if (!this.j.container || !this.j.container.parentNode) {
            return;
        }
        const minHeight = ((0,helpers.css)(this.j.container, 'minHeight') || 0) -
            this.getNotWorkHeight();
        if ((0,helpers.isNumber)(minHeight) && minHeight > 0) {
            [this.j.workplace, this.j.iframe, this.j.editor].map(elm => {
                elm && (0,helpers.css)(elm, 'minHeight', minHeight);
            });
            this.j.e.fire('setMinHeight', minHeight);
        }
        if ((0,helpers.isNumber)(this.j.o.maxHeight)) {
            const maxHeight = this.j.o.maxHeight - this.getNotWorkHeight();
            [this.j.workplace, this.j.iframe, this.j.editor].map(elm => {
                elm && (0,helpers.css)(elm, 'maxHeight', maxHeight);
            });
            this.j.e.fire('setMaxHeight', maxHeight);
        }
        if (this.j.container) {
            (0,helpers.css)(this.j.workplace, 'height', this.j.o.height !== 'auto' || this.j.isFullSize
                ? this.j.container.offsetHeight - this.getNotWorkHeight()
                : 'auto');
        }
    }
    beforeDestruct(jodit) {
        jodit.e.off(jodit.ow, 'load.size', this.resizeWorkspaces).off('.size');
    }
};
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], size.prototype, "resizeWorkspaceImd", null);
size = (0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], size);

global/* pluginSystem.add */.pw.add('size', size);

;// CONCATENATED MODULE: ./src/plugins/source/editor/sourceEditor.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
class SourceEditor {
    constructor(jodit, container, toWYSIWYG, fromWYSIWYG) {
        this.jodit = jodit;
        this.container = container;
        this.toWYSIWYG = toWYSIWYG;
        this.fromWYSIWYG = fromWYSIWYG;
        this.className = '';
        this.isReady = false;
    }
    get j() {
        return this.jodit;
    }
    onReady() {
        this.replaceUndoManager();
        this.isReady = true;
        this.j.e.fire(this, 'ready');
    }
    onReadyAlways(onReady) {
        var _a;
        if (!this.isReady) {
            (_a = this.j.events) === null || _a === void 0 ? void 0 : _a.on(this, 'ready', onReady);
        }
        else {
            onReady();
        }
    }
}

;// CONCATENATED MODULE: ./src/plugins/source/editor/engines/area.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



class TextAreaEditor extends SourceEditor {
    constructor() {
        super(...arguments);
        this.autosize = this.j.async.debounce(() => {
            this.instance.style.height = 'auto';
            this.instance.style.height = this.instance.scrollHeight + 'px';
        }, this.j.defaultTimeout);
    }
    init(editor) {
        this.instance = editor.c.element('textarea', {
            class: 'jodit-source__mirror'
        });
        this.container.appendChild(this.instance);
        editor.e
            .on(this.instance, 'mousedown keydown touchstart input', editor.async.debounce(this.toWYSIWYG, editor.defaultTimeout))
            .on('setMinHeight.source', (minHeightD) => {
            (0,css/* css */.i)(this.instance, 'minHeight', minHeightD);
        })
            .on(this.instance, 'change keydown mousedown touchstart input', this.autosize)
            .on('afterSetMode.source', this.autosize)
            .on(this.instance, 'mousedown focus', (e) => {
            editor.e.fire(e.type, e);
        });
        this.autosize();
        this.onReady();
    }
    destruct() {
        dom_dom/* Dom.safeRemove */.i.safeRemove(this.instance);
    }
    getValue() {
        return this.instance.value;
    }
    setValue(raw) {
        this.instance.value = raw;
    }
    insertRaw(raw) {
        const value = this.getValue();
        if (this.getSelectionStart() >= 0) {
            const startPos = this.getSelectionStart(), endPos = this.getSelectionEnd();
            this.setValue(value.substring(0, startPos) +
                raw +
                value.substring(endPos, value.length));
        }
        else {
            this.setValue(value + raw);
        }
    }
    getSelectionStart() {
        return this.instance.selectionStart;
    }
    getSelectionEnd() {
        return this.instance.selectionEnd;
    }
    setSelectionRange(start, end = start) {
        this.instance.setSelectionRange(start, end);
    }
    get isFocused() {
        return this.instance === this.j.od.activeElement;
    }
    focus() {
        this.instance.focus();
    }
    blur() {
        this.instance.blur();
    }
    setPlaceHolder(title) {
        this.instance.setAttribute('placeholder', title);
    }
    setReadOnly(isReadOnly) {
        if (isReadOnly) {
            this.instance.setAttribute('readonly', 'true');
        }
        else {
            this.instance.removeAttribute('readonly');
        }
    }
    selectAll() {
        this.instance.select();
    }
    replaceUndoManager() {
        const { history } = this.jodit;
        this.j.e.on(this.instance, 'keydown', (e) => {
            if ((e.ctrlKey || e.metaKey) && e.key === 'z') {
                if (e.shiftKey) {
                    history.redo();
                }
                else {
                    history.undo();
                }
                this.setSelectionRange(this.getValue().length);
                return false;
            }
        });
    }
}

;// CONCATENATED MODULE: ./src/plugins/source/editor/engines/ace.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



class AceEditor extends SourceEditor {
    constructor() {
        super(...arguments);
        this.className = 'jodit_ace_editor';
        this.proxyOnBlur = (e) => {
            this.j.e.fire('blur', e);
        };
        this.proxyOnFocus = (e) => {
            this.j.e.fire('focus', e);
        };
        this.proxyOnMouseDown = (e) => {
            this.j.e.fire('mousedown', e);
        };
    }
    aceExists() {
        return this.j.ow.ace !== undefined;
    }
    getLastColumnIndex(row) {
        return this.instance.session.getLine(row).length;
    }
    getLastColumnIndices() {
        const rows = this.instance.session.getLength();
        const lastColumnIndices = [];
        let lastColIndex = 0;
        for (let i = 0; i < rows; i++) {
            lastColIndex += this.getLastColumnIndex(i);
            if (i > 0) {
                lastColIndex += 1;
            }
            lastColumnIndices[i] = lastColIndex;
        }
        return lastColumnIndices;
    }
    getRowColumnIndices(characterIndex) {
        const lastColumnIndices = this.getLastColumnIndices();
        if (characterIndex <= lastColumnIndices[0]) {
            return { row: 0, column: characterIndex };
        }
        let row = 1;
        for (let i = 1; i < lastColumnIndices.length; i++) {
            if (characterIndex > lastColumnIndices[i]) {
                row = i + 1;
            }
        }
        const column = characterIndex - lastColumnIndices[row - 1] - 1;
        return { row, column };
    }
    setSelectionRangeIndices(start, end) {
        const startRowColumn = this.getRowColumnIndices(start);
        const endRowColumn = this.getRowColumnIndices(end);
        this.instance.getSelection().setSelectionRange({
            start: startRowColumn,
            end: endRowColumn
        });
    }
    getIndexByRowColumn(row, column) {
        const lastColumnIndices = this.getLastColumnIndices();
        return lastColumnIndices[row] - this.getLastColumnIndex(row) + column;
    }
    init(editor) {
        const tryInitAceEditor = () => {
            if (this.instance !== undefined || !this.aceExists()) {
                return;
            }
            const fakeMirror = this.j.c.div('jodit-source__mirror-fake');
            this.container.appendChild(fakeMirror);
            const ace = editor.ow.ace;
            this.instance = ace.edit(fakeMirror);
            this.instance.setTheme(editor.o.sourceEditorNativeOptions.theme);
            this.instance.renderer.setShowGutter(editor.o.sourceEditorNativeOptions.showGutter);
            this.instance
                .getSession()
                .setMode(editor.o.sourceEditorNativeOptions.mode);
            this.instance.setHighlightActiveLine(editor.o.sourceEditorNativeOptions.highlightActiveLine);
            this.instance.getSession().setUseWrapMode(true);
            this.instance.setOption('indentedSoftWrap', false);
            this.instance.setOption('wrap', editor.o.sourceEditorNativeOptions.wrap);
            this.instance.getSession().setUseWorker(false);
            this.instance.$blockScrolling = Infinity;
            this.instance.on('change', this.toWYSIWYG);
            this.instance.on('focus', this.proxyOnFocus);
            this.instance.on('mousedown', this.proxyOnMouseDown);
            this.instance.on('blur', this.proxyOnBlur);
            if (editor.getRealMode() !== constants.MODE_WYSIWYG) {
                this.setValue(this.getValue());
            }
            const onResize = this.j.async.debounce(() => {
                if (editor.isInDestruct) {
                    return;
                }
                if (editor.o.height !== 'auto') {
                    this.instance.setOption('maxLines', editor.workplace.offsetHeight /
                        this.instance.renderer.lineHeight);
                }
                else {
                    this.instance.setOption('maxLines', Infinity);
                }
                this.instance.resize();
            }, this.j.defaultTimeout * 2);
            editor.e.on('afterResize afterSetMode', onResize);
            onResize();
            this.onReady();
        };
        editor.e.on('afterSetMode', () => {
            if (editor.getRealMode() !== constants.MODE_SOURCE &&
                editor.getMode() !== constants.MODE_SPLIT) {
                return;
            }
            this.fromWYSIWYG();
            tryInitAceEditor();
        });
        tryInitAceEditor();
        if (!this.aceExists()) {
            (0,helpers.loadNext)(editor, editor.o.sourceEditorCDNUrlsJS)
                .then(() => {
                if (!editor.isInDestruct) {
                    tryInitAceEditor();
                }
            })
                .catch(() => null);
        }
    }
    destruct() {
        var _a, _b;
        this.instance.off('change', this.toWYSIWYG);
        this.instance.off('focus', this.proxyOnFocus);
        this.instance.off('mousedown', this.proxyOnMouseDown);
        this.instance.destroy();
        (_b = (_a = this.j) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.off('aceInited.source');
    }
    setValue(value) {
        if (!this.j.o.editHTMLDocumentMode && this.j.o.beautifyHTML) {
            const html = this.j.e.fire('beautifyHTML', value);
            if ((0,helpers.isString)(html)) {
                value = html;
            }
        }
        this.instance.setValue(value);
        this.instance.clearSelection();
    }
    getValue() {
        return this.instance.getValue();
    }
    setReadOnly(isReadOnly) {
        this.instance.setReadOnly(isReadOnly);
    }
    get isFocused() {
        return this.instance.isFocused();
    }
    focus() {
        this.instance.focus();
    }
    blur() {
        this.instance.blur();
    }
    getSelectionStart() {
        const range = this.instance.selection.getRange();
        return this.getIndexByRowColumn(range.start.row, range.start.column);
    }
    getSelectionEnd() {
        const range = this.instance.selection.getRange();
        return this.getIndexByRowColumn(range.end.row, range.end.column);
    }
    selectAll() {
        this.instance.selection.selectAll();
    }
    insertRaw(html) {
        const start = this.instance.selection.getCursor(), end = this.instance.session.insert(start, html);
        this.instance.selection.setRange({
            start,
            end
        }, false);
    }
    setSelectionRange(start, end) {
        this.setSelectionRangeIndices(start, end);
    }
    setPlaceHolder(title) {
    }
    replaceUndoManager() {
        const { history } = this.jodit;
        this.instance.commands.addCommand({
            name: 'Undo',
            bindKey: { win: 'Ctrl-Z', mac: 'Command-Z' },
            exec: () => {
                history.undo();
            }
        });
        this.instance.commands.addCommand({
            name: 'Redo',
            bindKey: { win: 'Ctrl-Shift-Z', mac: 'Command-Shift-Z' },
            exec: () => {
                history.redo();
            }
        });
    }
}

;// CONCATENATED MODULE: ./src/plugins/source/editor/engines/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



;// CONCATENATED MODULE: ./src/plugins/source/editor/factory.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function createSourceEditor(type, editor, container, toWYSIWYG, fromWYSIWYG) {
    let sourceEditor;
    if ((0,helpers.isFunction)(type)) {
        sourceEditor = type(editor);
    }
    else {
        switch (type) {
            case 'ace':
                if (!editor.o.shadowRoot) {
                    sourceEditor = new AceEditor(editor, container, toWYSIWYG, fromWYSIWYG);
                    break;
                }
            default:
                sourceEditor = new TextAreaEditor(editor, container, toWYSIWYG, fromWYSIWYG);
        }
    }
    sourceEditor.init(editor);
    sourceEditor.onReadyAlways(() => {
        sourceEditor.setReadOnly(editor.o.readonly);
    });
    return sourceEditor;
}

;// CONCATENATED MODULE: ./src/plugins/source/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



config/* Config.prototype.beautifyHTML */.D.prototype.beautifyHTML = !constants.IS_IE;
config/* Config.prototype.sourceEditor */.D.prototype.sourceEditor = 'ace';
config/* Config.prototype.sourceEditorNativeOptions */.D.prototype.sourceEditorNativeOptions = {
    showGutter: true,
    theme: 'ace/theme/idle_fingers',
    mode: 'ace/mode/html',
    wrap: true,
    highlightActiveLine: true
};
config/* Config.prototype.sourceEditorCDNUrlsJS */.D.prototype.sourceEditorCDNUrlsJS = [
    'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.2/ace.js'
];
config/* Config.prototype.beautifyHTMLCDNUrlsJS */.D.prototype.beautifyHTMLCDNUrlsJS = [
    'https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.14.4/beautify.min.js',
    'https://cdnjs.cloudflare.com/ajax/libs/js-beautify/1.14.4/beautify-html.min.js'
];
icon/* Icon.set */.J.set('source', __webpack_require__(9342));
config/* Config.prototype.controls.source */.D.prototype.controls.source = {
    mode: constants.MODE_SPLIT,
    exec: (editor) => {
        editor.toggleMode();
    },
    isActive: (editor) => {
        return editor.getRealMode() === constants.MODE_SOURCE;
    },
    tooltip: 'Change mode'
};

;// CONCATENATED MODULE: ./src/plugins/source/source.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */











class source extends core_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.buttons = [
            {
                name: 'source',
                group: 'source'
            }
        ];
        this.__lock = false;
        this.__oldMirrorValue = '';
        this.tempMarkerStart = '{start-jodit-selection}';
        this.tempMarkerStartReg = /{start-jodit-selection}/g;
        this.tempMarkerEnd = '{end-jodit-selection}';
        this.tempMarkerEndReg = /{end-jodit-selection}/g;
        this.getSelectionStart = () => {
            var _a, _b;
            return (_b = (_a = this.sourceEditor) === null || _a === void 0 ? void 0 : _a.getSelectionStart()) !== null && _b !== void 0 ? _b : 0;
        };
        this.getSelectionEnd = () => {
            var _a, _b;
            return (_b = (_a = this.sourceEditor) === null || _a === void 0 ? void 0 : _a.getSelectionEnd()) !== null && _b !== void 0 ? _b : 0;
        };
    }
    onInsertHTML(html) {
        var _a;
        if (!this.j.o.readonly && !this.j.isEditorMode()) {
            (_a = this.sourceEditor) === null || _a === void 0 ? void 0 : _a.insertRaw(html);
            this.toWYSIWYG();
            return false;
        }
    }
    fromWYSIWYG(force = false) {
        if (!this.__lock || force === true) {
            this.__lock = true;
            const new_value = this.j.getEditorValue(false, constants.SOURCE_CONSUMER);
            if (new_value !== this.getMirrorValue()) {
                this.setMirrorValue(new_value);
            }
            this.__lock = false;
        }
    }
    toWYSIWYG() {
        if (this.__lock) {
            return;
        }
        const value = this.getMirrorValue();
        if (value === this.__oldMirrorValue) {
            return;
        }
        this.__lock = true;
        this.j.value = value;
        this.__lock = false;
        this.__oldMirrorValue = value;
    }
    getNormalPosition(pos, str) {
        str = str.replace(/<(script|style|iframe)[^>]*>[^]*?<\/\1>/im, m => {
            let res = '';
            for (let i = 0; i < m.length; i += 1) {
                res += constants.INVISIBLE_SPACE;
            }
            return res;
        });
        while (pos > 0 && str[pos] === constants.INVISIBLE_SPACE) {
            pos--;
        }
        let start = pos;
        while (start > 0) {
            start--;
            if (str[start] === '<' &&
                str[start + 1] !== undefined &&
                str[start + 1].match(/[\w/]+/i)) {
                return start;
            }
            if (str[start] === '>') {
                return pos;
            }
        }
        return pos;
    }
    clnInv(str) {
        return str.replace(constants.INVISIBLE_SPACE_REG_EXP(), '');
    }
    onSelectAll(command) {
        var _a;
        if (command.toLowerCase() === 'selectall' &&
            this.j.getRealMode() === constants.MODE_SOURCE) {
            (_a = this.sourceEditor) === null || _a === void 0 ? void 0 : _a.selectAll();
            return false;
        }
    }
    getMirrorValue() {
        var _a;
        return ((_a = this.sourceEditor) === null || _a === void 0 ? void 0 : _a.getValue()) || '';
    }
    setMirrorValue(value) {
        var _a;
        (_a = this.sourceEditor) === null || _a === void 0 ? void 0 : _a.setValue(value);
    }
    setFocusToMirror() {
        var _a;
        (_a = this.sourceEditor) === null || _a === void 0 ? void 0 : _a.focus();
    }
    saveSelection() {
        if (this.j.getRealMode() === constants.MODE_WYSIWYG) {
            this.j.s.save();
            this.j.synchronizeValues();
            this.fromWYSIWYG(true);
        }
        else {
            if (this.j.o.editHTMLDocumentMode) {
                return;
            }
            const value = this.getMirrorValue();
            if (this.getSelectionStart() === this.getSelectionEnd()) {
                const marker = this.j.s.marker(true);
                const selectionStart = this.getNormalPosition(this.getSelectionStart(), this.getMirrorValue());
                this.setMirrorValue(value.substr(0, selectionStart) +
                    this.clnInv(marker.outerHTML) +
                    value.substr(selectionStart));
            }
            else {
                const markerStart = this.j.s.marker(true);
                const markerEnd = this.j.s.marker(false);
                const selectionStart = this.getNormalPosition(this.getSelectionStart(), value);
                const selectionEnd = this.getNormalPosition(this.getSelectionEnd(), value);
                this.setMirrorValue(value.substr(0, selectionStart) +
                    this.clnInv(markerStart.outerHTML) +
                    value.substr(selectionStart, selectionEnd - selectionStart) +
                    this.clnInv(markerEnd.outerHTML) +
                    value.substr(selectionEnd));
            }
            this.toWYSIWYG();
        }
    }
    removeSelection() {
        if (this.j.getRealMode() === constants.MODE_WYSIWYG) {
            this.__lock = true;
            this.j.s.restore();
            this.__lock = false;
            return;
        }
        let value = this.getMirrorValue();
        let selectionStart = 0, selectionEnd = 0;
        try {
            value = value
                .replace(/<span[^>]+data-jodit-selection_marker=(["'])start\1[^>]*>[<>]*?<\/span>/gim, this.tempMarkerStart)
                .replace(/<span[^>]+data-jodit-selection_marker=(["'])end\1[^>]*>[<>]*?<\/span>/gim, this.tempMarkerEnd);
            if (!this.j.o.editHTMLDocumentMode && this.j.o.beautifyHTML) {
                const html = this.j.e.fire('beautifyHTML', value);
                if ((0,helpers.isString)(html)) {
                    value = html;
                }
            }
            selectionStart = value.indexOf(this.tempMarkerStart);
            selectionEnd = selectionStart;
            value = value.replace(this.tempMarkerStartReg, '');
            if (selectionStart !== -1) {
                const selectionEndCursor = value.indexOf(this.tempMarkerEnd);
                if (selectionEndCursor !== -1) {
                    selectionEnd = selectionEndCursor;
                }
            }
            value = value.replace(this.tempMarkerEndReg, '');
        }
        finally {
            value = value
                .replace(this.tempMarkerEndReg, '')
                .replace(this.tempMarkerStartReg, '');
        }
        this.setMirrorValue(value);
        this.setMirrorSelectionRange(selectionStart, selectionEnd);
        this.toWYSIWYG();
        this.setFocusToMirror();
    }
    setMirrorSelectionRange(start, end) {
        var _a;
        (_a = this.sourceEditor) === null || _a === void 0 ? void 0 : _a.setSelectionRange(start, end);
    }
    onReadonlyReact() {
        var _a;
        (_a = this.sourceEditor) === null || _a === void 0 ? void 0 : _a.setReadOnly(this.j.o.readonly);
    }
    afterInit(editor) {
        this.mirrorContainer = editor.c.div('jodit-source');
        editor.workplace.appendChild(this.mirrorContainer);
        editor.e.on('afterAddPlace changePlace afterInit', () => {
            editor.workplace.appendChild(this.mirrorContainer);
        });
        this.sourceEditor = createSourceEditor('area', editor, this.mirrorContainer, this.toWYSIWYG, this.fromWYSIWYG);
        editor.e.on(editor.ow, 'keydown', (e) => {
            var _a;
            if (e.key === constants.KEY_ESC && ((_a = this.sourceEditor) === null || _a === void 0 ? void 0 : _a.isFocused)) {
                this.sourceEditor.blur();
            }
        });
        this.onReadonlyReact();
        editor.e
            .on('placeholder.source', (text) => {
            var _a;
            (_a = this.sourceEditor) === null || _a === void 0 ? void 0 : _a.setPlaceHolder(text);
        })
            .on('change.source', this.syncValueFromWYSIWYG)
            .on('beautifyHTML', html => html);
        if (editor.o.beautifyHTML) {
            const addEventListener = () => {
                var _a;
                const html_beautify = editor.ow.html_beautify;
                if (html_beautify && !editor.isInDestruct) {
                    (_a = editor.events) === null || _a === void 0 ? void 0 : _a.off('beautifyHTML').on('beautifyHTML', html => html_beautify(html));
                    return true;
                }
                return false;
            };
            if (!addEventListener()) {
                (0,helpers.loadNext)(editor, editor.o.beautifyHTMLCDNUrlsJS).then(addEventListener);
            }
        }
        this.syncValueFromWYSIWYG(true);
        this.initSourceEditor(editor);
    }
    syncValueFromWYSIWYG(force = false) {
        const editor = this.j;
        if (editor.getMode() === constants.MODE_SPLIT ||
            editor.getMode() === constants.MODE_SOURCE) {
            this.fromWYSIWYG(force);
        }
    }
    initSourceEditor(editor) {
        var _a;
        if (editor.o.sourceEditor !== 'area') {
            const sourceEditor = createSourceEditor(editor.o.sourceEditor, editor, this.mirrorContainer, this.toWYSIWYG, this.fromWYSIWYG);
            sourceEditor.onReadyAlways(() => {
                var _a, _b;
                (_a = this.sourceEditor) === null || _a === void 0 ? void 0 : _a.destruct();
                this.sourceEditor = sourceEditor;
                this.syncValueFromWYSIWYG(true);
                (_b = editor.events) === null || _b === void 0 ? void 0 : _b.fire('sourceEditorReady', editor);
            });
        }
        else {
            (_a = this.sourceEditor) === null || _a === void 0 ? void 0 : _a.onReadyAlways(() => {
                var _a;
                this.syncValueFromWYSIWYG(true);
                (_a = editor.events) === null || _a === void 0 ? void 0 : _a.fire('sourceEditorReady', editor);
            });
        }
    }
    beforeDestruct() {
        if (this.sourceEditor) {
            this.sourceEditor.destruct();
            delete this.sourceEditor;
        }
        dom_dom/* Dom.safeRemove */.i.safeRemove(this.mirrorContainer);
    }
}
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':insertHTML.source')
], source.prototype, "onInsertHTML", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], source.prototype, "fromWYSIWYG", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], source.prototype, "toWYSIWYG", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], source.prototype, "getNormalPosition", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':beforeCommand.source')
], source.prototype, "onSelectAll", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':beforeSetMode.source')
], source.prototype, "saveSelection", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':afterSetMode.source')
], source.prototype, "removeSelection", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], source.prototype, "setMirrorSelectionRange", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':readonly.source')
], source.prototype, "onReadonlyReact", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], source.prototype, "syncValueFromWYSIWYG", null);
global/* pluginSystem.add */.pw.add('source', source);

;// CONCATENATED MODULE: ./src/plugins/spellcheck/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


config/* Config.prototype.spellcheck */.D.prototype.spellcheck = false;
icon/* Icon.set */.J.set('spellcheck', __webpack_require__(69546));
config/* Config.prototype.controls.spellcheck */.D.prototype.controls.spellcheck = {
    isActive(e) {
        return e.o.spellcheck;
    },
    icon: __webpack_require__(69546),
    name: 'spellcheck',
    command: 'toggleSpellcheck',
    tooltip: 'Spellcheck'
};

;// CONCATENATED MODULE: ./src/plugins/spellcheck/spellcheck.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






class spellcheck extends core_plugin/* Plugin */.S {
    constructor(jodit) {
        super(jodit);
        this.buttons = [
            {
                group: 'state',
                name: 'spellcheck'
            }
        ];
        (0,global/* extendLang */.xl)(__webpack_require__(48390));
    }
    afterInit(jodit) {
        jodit.e.on('afterInit afterAddPlace prepareWYSIWYGEditor', this.toggleSpellcheck);
        this.toggleSpellcheck();
        jodit.registerCommand('toggleSpellcheck', () => {
            this.jodit.o.spellcheck = !this.jodit.o.spellcheck;
            this.toggleSpellcheck();
            this.j.e.fire('updateToolbar');
        });
    }
    toggleSpellcheck() {
        (0,utils/* attr */.Lj)(this.jodit.editor, 'spellcheck', this.jodit.o.spellcheck);
    }
    beforeDestruct(jodit) { }
}
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], spellcheck.prototype, "toggleSpellcheck", null);
global/* pluginSystem.add */.pw.add('spellcheck', spellcheck);

;// CONCATENATED MODULE: ./src/plugins/stat/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.showCharsCounter */.D.prototype.showCharsCounter = true;
config/* Config.prototype.countHTMLChars */.D.prototype.countHTMLChars = false;
config/* Config.prototype.showWordsCounter */.D.prototype.showWordsCounter = true;

;// CONCATENATED MODULE: ./src/plugins/stat/stat.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





class stat extends plugin_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.charCounter = null;
        this.wordCounter = null;
        this.reInit = () => {
            if (this.j.o.showCharsCounter && this.charCounter) {
                this.j.statusbar.append(this.charCounter, true);
            }
            if (this.j.o.showWordsCounter && this.wordCounter) {
                this.j.statusbar.append(this.wordCounter, true);
            }
            this.j.e.off('change keyup', this.calc).on('change keyup', this.calc);
            this.calc();
        };
        this.calc = this.j.async.throttle(() => {
            const text = this.j.text;
            if (this.j.o.showCharsCounter && this.charCounter) {
                const chars = this.j.o.countHTMLChars
                    ? this.j.value
                    : text.replace((0,constants.SPACE_REG_EXP)(), '');
                this.charCounter.textContent = this.j.i18n('Chars: %d', chars.length);
            }
            if (this.j.o.showWordsCounter && this.wordCounter) {
                this.wordCounter.textContent = this.j.i18n('Words: %d', text
                    .replace((0,constants.INVISIBLE_SPACE_REG_EXP)(), '')
                    .split((0,constants.SPACE_REG_EXP)())
                    .filter((e) => e.length).length);
            }
        }, this.j.defaultTimeout);
    }
    afterInit() {
        this.charCounter = this.j.c.span();
        this.wordCounter = this.j.c.span();
        this.j.e.on('afterInit changePlace afterAddPlace', this.reInit);
        this.reInit();
    }
    beforeDestruct() {
        dom_dom/* Dom.safeRemove */.i.safeRemove(this.charCounter);
        dom_dom/* Dom.safeRemove */.i.safeRemove(this.wordCounter);
        this.j.e.off('afterInit changePlace afterAddPlace', this.reInit);
        this.charCounter = null;
        this.wordCounter = null;
    }
}
global/* pluginSystem.add */.pw.add('stat', stat);

;// CONCATENATED MODULE: ./src/plugins/sticky/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.toolbarSticky */.D.prototype.toolbarSticky = true;
config/* Config.prototype.toolbarDisableStickyForMobile */.D.prototype.toolbarDisableStickyForMobile = true;
config/* Config.prototype.toolbarStickyOffset */.D.prototype.toolbarStickyOffset = 0;

;// CONCATENATED MODULE: ./src/plugins/sticky/sticky.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */









class sticky extends plugin_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.isToolbarSticked = false;
        this.createDummy = (toolbar) => {
            if (false) {}
        };
        this.addSticky = (toolbar) => {
            if (!this.isToolbarSticked) {
                this.createDummy(toolbar);
                this.j.container.classList.add('jodit_sticky');
                this.isToolbarSticked = true;
            }
            (0,helpers.css)(toolbar, {
                top: this.j.o.toolbarStickyOffset || null,
                width: this.j.container.offsetWidth - 2
            });
            if (false) {}
        };
        this.removeSticky = (toolbar) => {
            if (this.isToolbarSticked) {
                (0,helpers.css)(toolbar, {
                    width: '',
                    top: ''
                });
                this.j.container.classList.remove('jodit_sticky');
                this.isToolbarSticked = false;
            }
        };
    }
    afterInit(jodit) {
        jodit.e
            .on(jodit.ow, 'scroll.sticky wheel.sticky mousewheel.sticky resize.sticky', this.onScroll)
            .on('getStickyState.sticky', () => this.isToolbarSticked);
    }
    onScroll() {
        const { jodit } = this;
        const scrollWindowTop = jodit.ow.pageYOffset ||
            (jodit.od.documentElement &&
                jodit.od.documentElement.scrollTop) ||
            0, offsetEditor = (0,helpers.offset)(jodit.container, jodit, jodit.od, true), doSticky = jodit.getMode() === constants.MODE_WYSIWYG &&
            scrollWindowTop + jodit.o.toolbarStickyOffset >
                offsetEditor.top &&
            scrollWindowTop + jodit.o.toolbarStickyOffset <
                offsetEditor.top + offsetEditor.height &&
            !(jodit.o.toolbarDisableStickyForMobile && this.isMobile());
        if (jodit.o.toolbarSticky &&
            jodit.o.toolbar === true &&
            this.isToolbarSticked !== doSticky) {
            const container = jodit.toolbarContainer;
            if (container) {
                doSticky
                    ? this.addSticky(container)
                    : this.removeSticky(container);
            }
            jodit.e.fire('toggleSticky', doSticky);
        }
    }
    isMobile() {
        return (this.j &&
            this.j.options &&
            this.j.container &&
            this.j.o.sizeSM >= this.j.container.offsetWidth);
    }
    beforeDestruct(jodit) {
        this.dummyBox && dom_dom/* Dom.safeRemove */.i.safeRemove(this.dummyBox);
        jodit.e
            .off(jodit.ow, 'scroll.sticky wheel.sticky mousewheel.sticky resize.sticky', this.onScroll)
            .off('.sticky');
    }
}
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.throttle)()
], sticky.prototype, "onScroll", null);
global/* pluginSystem.add */.pw.add('sticky', sticky);

;// CONCATENATED MODULE: ./src/plugins/symbols/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


config/* Config.prototype.usePopupForSpecialCharacters */.D.prototype.usePopupForSpecialCharacters = false;
config/* Config.prototype.specialCharacters */.D.prototype.specialCharacters = [
    '!',
    '&quot;',
    '#',
    '$',
    '%',
    '&amp;',
    "'",
    '(',
    ')',
    '*',
    '+',
    '-',
    '.',
    '/',
    '0',
    '1',
    '2',
    '3',
    '4',
    '5',
    '6',
    '7',
    '8',
    '9',
    ':',
    ';',
    '&lt;',
    '=',
    '&gt;',
    '?',
    '@',
    'A',
    'B',
    'C',
    'D',
    'E',
    'F',
    'G',
    'H',
    'I',
    'J',
    'K',
    'L',
    'M',
    'N',
    'O',
    'P',
    'Q',
    'R',
    'S',
    'T',
    'U',
    'V',
    'W',
    'X',
    'Y',
    'Z',
    '[',
    ']',
    '^',
    '_',
    '`',
    'a',
    'b',
    'c',
    'd',
    'e',
    'f',
    'g',
    'h',
    'i',
    'j',
    'k',
    'l',
    'm',
    'n',
    'o',
    'p',
    'q',
    'r',
    's',
    't',
    'u',
    'v',
    'w',
    'x',
    'y',
    'z',
    '{',
    '|',
    '}',
    '~',
    '&euro;',
    '&lsquo;',
    '&rsquo;',
    '&ldquo;',
    '&rdquo;',
    '&ndash;',
    '&mdash;',
    '&iexcl;',
    '&cent;',
    '&pound;',
    '&curren;',
    '&yen;',
    '&brvbar;',
    '&sect;',
    '&uml;',
    '&copy;',
    '&ordf;',
    '&laquo;',
    '&raquo;',
    '&not;',
    '&reg;',
    '&macr;',
    '&deg;',
    '&sup2;',
    '&sup3;',
    '&acute;',
    '&micro;',
    '&para;',
    '&middot;',
    '&cedil;',
    '&sup1;',
    '&ordm;',
    '&frac14;',
    '&frac12;',
    '&frac34;',
    '&iquest;',
    '&Agrave;',
    '&Aacute;',
    '&Acirc;',
    '&Atilde;',
    '&Auml;',
    '&Aring;',
    '&AElig;',
    '&Ccedil;',
    '&Egrave;',
    '&Eacute;',
    '&Ecirc;',
    '&Euml;',
    '&Igrave;',
    '&Iacute;',
    '&Icirc;',
    '&Iuml;',
    '&ETH;',
    '&Ntilde;',
    '&Ograve;',
    '&Oacute;',
    '&Ocirc;',
    '&Otilde;',
    '&Ouml;',
    '&times;',
    '&Oslash;',
    '&Ugrave;',
    '&Uacute;',
    '&Ucirc;',
    '&Uuml;',
    '&Yacute;',
    '&THORN;',
    '&szlig;',
    '&agrave;',
    '&aacute;',
    '&acirc;',
    '&atilde;',
    '&auml;',
    '&aring;',
    '&aelig;',
    '&ccedil;',
    '&egrave;',
    '&eacute;',
    '&ecirc;',
    '&euml;',
    '&igrave;',
    '&iacute;',
    '&icirc;',
    '&iuml;',
    '&eth;',
    '&ntilde;',
    '&ograve;',
    '&oacute;',
    '&ocirc;',
    '&otilde;',
    '&ouml;',
    '&divide;',
    '&oslash;',
    '&ugrave;',
    '&uacute;',
    '&ucirc;',
    '&uuml;',
    '&yacute;',
    '&thorn;',
    '&yuml;',
    '&OElig;',
    '&oelig;',
    '&#372;',
    '&#374',
    '&#373',
    '&#375;',
    '&sbquo;',
    '&#8219;',
    '&bdquo;',
    '&hellip;',
    '&trade;',
    '&#9658;',
    '&bull;',
    '&rarr;',
    '&rArr;',
    '&hArr;',
    '&diams;',
    '&asymp;'
];
icon/* Icon.set */.J.set('symbols', __webpack_require__(43158));
config/* Config.prototype.controls.symbols */.D.prototype.controls.symbols = {
    hotkeys: ['ctrl+shift+i', 'cmd+shift+i'],
    tooltip: 'Insert Special Character',
    popup: (editor, current, control, close) => {
        const container = editor.e.fire('generateSpecialCharactersTable.symbols');
        if (container) {
            if (editor.o.usePopupForSpecialCharacters) {
                const box = editor.c.div();
                box.classList.add('jodit-symbols');
                box.appendChild(container);
                editor.e.on(container, 'close_dialog', close);
                return box;
            }
            else {
                editor
                    .alert(container, 'Select Special Character', undefined, 'jodit-symbols')
                    .bindDestruct(editor);
                const a = container.querySelector('a');
                a && a.focus();
            }
        }
    }
};

;// CONCATENATED MODULE: ./src/plugins/symbols/symbols.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







class symbols extends plugin_plugin/* Plugin */.S {
    constructor(jodit) {
        super(jodit);
        this.buttons = [
            {
                name: 'symbols',
                group: 'insert'
            }
        ];
        this.countInRow = 17;
        (0,global/* extendLang */.xl)(__webpack_require__(74604));
    }
    afterInit(jodit) {
        jodit.e.on('generateSpecialCharactersTable.symbols', () => {
            const container = jodit.c.fromHTML(`<div class="jodit-symbols__container">
						<div class="jodit-symbols__container_table">
							<table class="jodit-symbols__table"><tbody></tbody></table>
						</div>
						<div class="jodit-symbols__container_preview">
							<div class="jodit-symbols__preview"></div>
						</div>
					</div>`), preview = container.querySelector('.jodit-symbols__preview'), table = container.querySelector('table'), body = table.tBodies[0], chars = [];
            for (let i = 0; i < jodit.o.specialCharacters.length;) {
                const tr = jodit.c.element('tr');
                for (let j = 0; j < this.countInRow && i < jodit.o.specialCharacters.length; j += 1, i += 1) {
                    const td = jodit.c.element('td'), a = jodit.c.fromHTML(`<a
									data-index="${i}"
									data-index-j="${j}"
									role="option"
									tabindex="-1"
							>${jodit.o.specialCharacters[i]}</a>`);
                    chars.push(a);
                    td.appendChild(a);
                    tr.appendChild(td);
                }
                body.appendChild(tr);
            }
            const self = this;
            jodit.e
                .on(chars, 'focus', function () {
                preview.innerHTML = this.innerHTML;
            })
                .on(chars, 'mousedown', function (e) {
                if (dom_dom/* Dom.isTag */.i.isTag(this, 'a')) {
                    jodit.s.focus();
                    jodit.s.insertHTML(this.innerHTML);
                    jodit.e.fire(this, 'close_dialog');
                    e && e.preventDefault();
                    e && e.stopImmediatePropagation();
                }
            })
                .on(chars, 'mouseenter', function () {
                if (dom_dom/* Dom.isTag */.i.isTag(this, 'a')) {
                    this.focus();
                }
            })
                .on(chars, 'keydown', (e) => {
                const target = e.target;
                if (dom_dom/* Dom.isTag */.i.isTag(target, 'a')) {
                    const index = parseInt((0,helpers_utils/* attr */.Lj)(target, '-index') || '0', 10), jIndex = parseInt((0,helpers_utils/* attr */.Lj)(target, 'data-index-j') || '0', 10);
                    let newIndex;
                    switch (e.key) {
                        case constants.KEY_UP:
                        case constants.KEY_DOWN:
                            newIndex =
                                e.key === constants.KEY_UP
                                    ? index - self.countInRow
                                    : index + self.countInRow;
                            if (chars[newIndex] === undefined) {
                                newIndex =
                                    e.key === constants.KEY_UP
                                        ? Math.floor(chars.length /
                                            self.countInRow) *
                                            self.countInRow +
                                            jIndex
                                        : jIndex;
                                if (newIndex > chars.length - 1) {
                                    newIndex -= self.countInRow;
                                }
                            }
                            chars[newIndex] && chars[newIndex].focus();
                            break;
                        case constants.KEY_RIGHT:
                        case constants.KEY_LEFT:
                            newIndex =
                                e.key === constants.KEY_LEFT ? index - 1 : index + 1;
                            if (chars[newIndex] === undefined) {
                                newIndex =
                                    e.key === constants.KEY_LEFT
                                        ? chars.length - 1
                                        : 0;
                            }
                            chars[newIndex] && chars[newIndex].focus();
                            break;
                        case constants.KEY_ENTER:
                            jodit.e.fire(target, 'mousedown');
                            e.stopImmediatePropagation();
                            e.preventDefault();
                            break;
                    }
                }
            });
            return container;
        });
    }
    beforeDestruct(jodit) {
        jodit.e.off('generateSpecialCharactersTable.symbols');
    }
}
global/* pluginSystem.add */.pw.add('symbols', symbols);

;// CONCATENATED MODULE: ./src/plugins/tab/cases/on-tab-inside-li.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function onTabInsideLi(jodit) {
    if (!jodit.o.tab.tabInsideLiInsertNewList || !jodit.s.isCollapsed()) {
        return false;
    }
    const fake = jodit.createInside.fake();
    jodit.s.insertNode(fake);
    const li = dom_dom/* Dom.closest */.i.closest(fake, 'li', jodit.editor);
    if (li &&
        jodit.s.cursorOnTheLeft(li) &&
        dom_dom/* Dom.isTag */.i.isTag(li.previousElementSibling, 'li')) {
        const list = dom_dom/* Dom.closest */.i.closest(li, ['ol', 'ul'], jodit.editor);
        if (list) {
            const newList = jodit.createInside.element(list.tagName);
            const previousLi = li.previousElementSibling;
            newList.appendChild(li);
            previousLi.appendChild(newList);
            jodit.s.setCursorAfter(fake);
            dom_dom/* Dom.safeRemove */.i.safeRemove(fake);
            return true;
        }
    }
    dom_dom/* Dom.safeRemove */.i.safeRemove(fake);
    return false;
}

;// CONCATENATED MODULE: ./src/plugins/tab/cases/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


;// CONCATENATED MODULE: ./src/plugins/tab/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.tab */.D.prototype.tab = {
    tabInsideLiInsertNewList: true
};

;// CONCATENATED MODULE: ./src/plugins/tab/tab.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







class tab extends core_plugin/* Plugin */.S {
    afterInit(jodit) { }
    onTab(event) {
        if (event.key === constants.KEY_TAB && onTabInsideLi(this.j)) {
            return false;
        }
    }
    beforeDestruct(jodit) { }
}
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':keydown.tab')
], tab.prototype, "onTab", null);
global/* pluginSystem.add */.pw.add('tab', tab);

;// CONCATENATED MODULE: ./src/plugins/table/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





config/* Config.prototype.table */.D.prototype.table = {
    selectionCellStyle: 'border: 1px double #1e88e5 !important;',
    useExtraClassesOptions: false
};
icon/* Icon.set */.J.set('table', __webpack_require__(51716));
config/* Config.prototype.controls.table */.D.prototype.controls.table = {
    data: {
        cols: 10,
        rows: 10,
        classList: {
            'table table-bordered': 'Bootstrap Bordered',
            'table table-striped': 'Bootstrap Striped',
            'table table-dark': 'Bootstrap Dark'
        }
    },
    popup: (editor, current, control, close, button) => {
        const default_rows_count = control.data && control.data.rows ? control.data.rows : 10, default_cols_count = control.data && control.data.cols ? control.data.cols : 10;
        const generateExtraClasses = () => {
            if (!editor.o.table.useExtraClassesOptions) {
                return '';
            }
            const out = [];
            if (control.data) {
                const classList = control.data.classList;
                Object.keys(classList).forEach((classes) => {
                    out.push(`<label class="jodit_vertical_middle"><input class="jodit-checkbox" value="${classes}" type="checkbox"/>${classList[classes]}</label>`);
                });
            }
            return out.join('');
        };
        const form = editor.c.fromHTML('<form class="jodit-form jodit-form__inserter">' +
            '<div class="jodit-form__table-creator-box">' +
            '<div class="jodit-form__container"></div>' +
            '<div class="jodit-form__options">' +
            generateExtraClasses() +
            '</div>' +
            '</div>' +
            '<label class="jodit-form__center">' +
            '<span>1</span> &times; <span>1</span>' +
            '</label>' +
            '</form>'), rows = form.querySelectorAll('span')[0], cols = form.querySelectorAll('span')[1], blocksContainer = form.querySelector('.jodit-form__container'), options = form.querySelector('.jodit-form__options'), cells = [];
        const cnt = default_rows_count * default_cols_count;
        for (let i = 0; i < cnt; i += 1) {
            if (!cells[i]) {
                cells.push(editor.c.element('span', {
                    dataIndex: i
                }));
            }
        }
        const mouseenter = (e, index) => {
            const dv = e.target;
            if (!dom/* Dom.isTag */.i.isTag(dv, 'span')) {
                return;
            }
            const k = index === undefined || isNaN(index)
                ? parseInt((0,helpers_utils/* attr */.Lj)(dv, '-index') || '0', 10)
                : index || 0;
            const rows_count = Math.ceil((k + 1) / default_cols_count), cols_count = (k % default_cols_count) + 1;
            for (let i = 0; i < cells.length; i += 1) {
                if (cols_count >= (i % default_cols_count) + 1 &&
                    rows_count >= Math.ceil((i + 1) / default_cols_count)) {
                    cells[i].className = 'jodit_hovered';
                }
                else {
                    cells[i].className = '';
                }
            }
            cols.textContent = cols_count.toString();
            rows.textContent = rows_count.toString();
        };
        editor.e
            .on(blocksContainer, 'mousemove', mouseenter)
            .on(blocksContainer, 'touchstart mousedown', (e) => {
            const dv = e.target;
            e.preventDefault();
            e.stopImmediatePropagation();
            if (!dom/* Dom.isTag */.i.isTag(dv, 'span')) {
                return;
            }
            const k = parseInt((0,helpers_utils/* attr */.Lj)(dv, '-index') || '0', 10);
            const rows_count = Math.ceil((k + 1) / default_cols_count), cols_count = (k % default_cols_count) + 1;
            const crt = editor.createInside, tbody = crt.element('tbody'), table = crt.element('table');
            table.appendChild(tbody);
            let first_td = null, tr, td;
            for (let i = 1; i <= rows_count; i += 1) {
                tr = crt.element('tr');
                for (let j = 1; j <= cols_count; j += 1) {
                    td = crt.element('td');
                    if (!first_td) {
                        first_td = td;
                    }
                    (0,helpers.css)(td, 'width', (100 / cols_count).toFixed(4) + '%');
                    td.appendChild(crt.element('br'));
                    tr.appendChild(crt.text('\n'));
                    tr.appendChild(crt.text('\t'));
                    tr.appendChild(td);
                }
                tbody.appendChild(crt.text('\n'));
                tbody.appendChild(tr);
            }
            (0,helpers.$$)('input[type=checkbox]:checked', options).forEach((input) => {
                input.value
                    .split(/[\s]+/)
                    .forEach((className) => {
                    table.classList.add(className);
                });
            });
            if (editor.editor.firstChild) {
                editor.s.insertNode(crt.text('\n'), false, false);
            }
            editor.s.insertNode(table, false);
            if (first_td) {
                editor.s.setCursorIn(first_td);
                (0,helpers.scrollIntoViewIfNeeded)(first_td, editor.editor, editor.ed);
            }
            close();
        });
        if (button && button.parentElement) {
            for (let i = 0; i < default_rows_count; i += 1) {
                const row = editor.c.div();
                for (let j = 0; j < default_cols_count; j += 1) {
                    row.appendChild(cells[i * default_cols_count + j]);
                }
                blocksContainer.appendChild(row);
            }
            if (cells[0]) {
                cells[0].className = 'hovered';
            }
        }
        return form;
    },
    tooltip: 'Insert table'
};

;// CONCATENATED MODULE: ./src/plugins/table/table.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



function table(editor) {
    editor.registerButton({
        name: 'table',
        group: 'insert'
    });
}
global/* pluginSystem.add */.pw.add('table', table);

// EXTERNAL MODULE: ./src/modules/table/table.ts
var table_table = __webpack_require__(28314);
;// CONCATENATED MODULE: ./src/plugins/table-keyboard-navigation/table-keyboard-navigation.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




function tableKeyboardNavigation(editor) {
    editor.e
        .off('.tableKeyboardNavigation')
        .on('keydown.tableKeyboardNavigation', (event) => {
        let current, block;
        if (event.key === constants.KEY_TAB ||
            event.key === constants.KEY_LEFT ||
            event.key === constants.KEY_RIGHT ||
            event.key === constants.KEY_UP ||
            event.key === constants.KEY_DOWN) {
            current = editor.s.current();
            block = dom_dom/* Dom.up */.i.up(current, (elm) => elm &&
                elm.nodeName &&
                /^td|th$/i.test(elm.nodeName), editor.editor);
            if (!block) {
                return;
            }
            const range = editor.s.range;
            if (event.key !== constants.KEY_TAB && current !== block) {
                if (((event.key === constants.KEY_LEFT ||
                    event.key === constants.KEY_UP) &&
                    (dom_dom/* Dom.prev */.i.prev(current, (elm) => event.key === constants.KEY_UP
                        ? dom_dom/* Dom.isTag */.i.isTag(elm, 'br')
                        : Boolean(elm), block) ||
                        (event.key !== constants.KEY_UP &&
                            dom_dom/* Dom.isText */.i.isText(current) &&
                            range.startOffset !== 0))) ||
                    ((event.key === constants.KEY_RIGHT ||
                        event.key === constants.KEY_DOWN) &&
                        (dom_dom/* Dom.next */.i.next(current, (elm) => event.key === constants.KEY_DOWN
                            ? dom_dom/* Dom.isTag */.i.isTag(elm, 'br')
                            : Boolean(elm), block) ||
                            (event.key !== constants.KEY_DOWN &&
                                dom_dom/* Dom.isText */.i.isText(current) &&
                                current.nodeValue &&
                                range.startOffset !==
                                    current.nodeValue.length)))) {
                    return;
                }
            }
        }
        else {
            return;
        }
        const table = dom_dom/* Dom.up */.i.up(block, (elm) => elm && /^table$/i.test(elm.nodeName), editor.editor);
        let next = null;
        switch (event.key) {
            case constants.KEY_TAB:
            case constants.KEY_LEFT: {
                const sibling = event.key === constants.KEY_LEFT || event.shiftKey
                    ? 'prev'
                    : 'next';
                next = dom_dom/* Dom */.i[sibling](block, (elm) => elm &&
                    /^td|th$/i.test(elm.tagName), table);
                if (!next) {
                    table_table/* Table.appendRow */.i.appendRow(table, sibling === 'next'
                        ? false
                        : table.querySelector('tr'), sibling === 'next', editor.createInside);
                    next = dom_dom/* Dom */.i[sibling](block, dom_dom/* Dom.isCell */.i.isCell, table);
                }
                break;
            }
            case constants.KEY_UP:
            case constants.KEY_DOWN:
                {
                    let i = 0, j = 0;
                    const matrix = table_table/* Table.formalMatrix */.i.formalMatrix(table, (elm, _i, _j) => {
                        if (elm === block) {
                            i = _i;
                            j = _j;
                        }
                    });
                    if (event.key === constants.KEY_UP) {
                        if (matrix[i - 1] !== undefined) {
                            next = matrix[i - 1][j];
                        }
                    }
                    else {
                        if (matrix[i + 1] !== undefined) {
                            next = matrix[i + 1][j];
                        }
                    }
                }
                break;
        }
        if (next) {
            if (!next.firstChild) {
                const first = editor.createInside.element('br');
                next.appendChild(first);
                editor.s.setCursorBefore(first);
            }
            else {
                if (event.key === constants.KEY_TAB) {
                    editor.s.select(next, true);
                }
                else {
                    editor.s.setCursorIn(next, event.key === constants.KEY_RIGHT ||
                        event.key === constants.KEY_DOWN);
                }
            }
            return false;
        }
    });
}
global/* pluginSystem.add */.pw.add('tableKeyboardNavigation', tableKeyboardNavigation);

;// CONCATENATED MODULE: ./src/plugins/video/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






icon/* Icon.set */.J.set('video', __webpack_require__(49222));
config/* Config.prototype.controls.video */.D.prototype.controls.video = {
    popup: (editor, current, control, close) => {
        const formLink = new ui_form/* UIForm */.x4(editor, [
            new ui_form/* UIBlock */.eC(editor, [
                new ui_form/* UIInput */.u3(editor, {
                    name: 'url',
                    required: true,
                    label: 'URL',
                    placeholder: 'https://',
                    validators: ['url']
                })
            ]),
            new ui_form/* UIBlock */.eC(editor, [
                (0,ui_button/* Button */.zx)(editor, '', 'Insert', 'primary').onAction(() => formLink.submit())
            ])
        ]), formCode = new ui_form/* UIForm */.x4(editor, [
            new ui_form/* UIBlock */.eC(editor, [
                new ui_form/* UITextArea */.GJ(editor, {
                    name: 'code',
                    required: true,
                    label: 'Embed code'
                })
            ]),
            new ui_form/* UIBlock */.eC(editor, [
                (0,ui_button/* Button */.zx)(editor, '', 'Insert', 'primary').onAction(() => formCode.submit())
            ])
        ]), tabs = [], insertCode = (code) => {
            editor.s.restore();
            editor.s.insertHTML(code);
            close();
        };
        editor.s.save();
        tabs.push({
            icon: 'link',
            name: 'Link',
            content: formLink.container
        }, {
            icon: 'source',
            name: 'Code',
            content: formCode.container
        });
        formLink.onSubmit(data => {
            insertCode((0,helpers.convertMediaUrlToVideoEmbed)(data.url));
        });
        formCode.onSubmit(data => {
            insertCode(data.code);
        });
        return (0,widget/* TabsWidget */.IL)(editor, tabs);
    },
    tags: ['iframe'],
    tooltip: 'Insert youtube/vimeo video'
};

;// CONCATENATED MODULE: ./src/plugins/video/video.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function video(editor) {
    editor.registerButton({
        name: 'video',
        group: 'media'
    });
}
global/* pluginSystem.add */.pw.add('video', video);

;// CONCATENATED MODULE: ./src/plugins/wrap-nodes/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.wrapNodes */.D.prototype.wrapNodes = {
    exclude: ['hr', 'style', 'br']
};

;// CONCATENATED MODULE: ./src/plugins/wrap-nodes/wrap-nodes.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







class wrapNodes extends core_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.isSuitableStart = (n) => (dom/* Dom.isText */.i.isText(n) && (0,is_string/* isString */.H)(n.nodeValue) && /[^\s]/.test(n.nodeValue)) ||
            (this.isNotClosed(n) && !dom/* Dom.isTemporary */.i.isTemporary(n));
        this.isSuitable = (n) => dom/* Dom.isText */.i.isText(n) || this.isNotClosed(n);
        this.isNotClosed = (n) => dom/* Dom.isElement */.i.isElement(n) &&
            !(dom/* Dom.isBlock */.i.isBlock(n) || dom/* Dom.isTag */.i.isTag(n, this.j.o.wrapNodes.exclude));
    }
    afterInit(jodit) {
        if (jodit.o.enter.toLowerCase() === 'br') {
            return;
        }
        jodit.e
            .on('drop.wtn focus.wtn keydown.wtn mousedown.wtn', this.preprocessInput, {
            top: true
        })
            .on('afterInit.wtn postProcessSetEditorValue.wtn', this.postProcessSetEditorValue);
    }
    beforeDestruct(jodit) {
        jodit.e.off('.wtn');
    }
    postProcessSetEditorValue() {
        const { jodit } = this;
        if (!jodit.isEditorMode()) {
            return;
        }
        let child = jodit.editor.firstChild, isChanged = false;
        while (child) {
            child = this.checkAloneListLeaf(child, jodit);
            if (this.isSuitableStart(child)) {
                if (!isChanged) {
                    jodit.s.save();
                }
                isChanged = true;
                const box = jodit.createInside.element(jodit.o.enter);
                dom/* Dom.before */.i.before(child, box);
                while (child && this.isSuitable(child)) {
                    const next = child.nextSibling;
                    box.appendChild(child);
                    child = next;
                }
                box.normalize();
                child = box;
            }
            child = child && child.nextSibling;
        }
        if (isChanged) {
            jodit.s.restore();
            if (jodit.e.current === 'afterInit') {
                jodit.e.fire('internalChange');
            }
        }
    }
    checkAloneListLeaf(child, jodit) {
        let result = child;
        let next = child;
        do {
            if (dom/* Dom.isElement */.i.isElement(next) &&
                dom/* Dom.isTag */.i.isTag(next, 'li') &&
                !dom/* Dom.isTag */.i.isTag(next.parentElement, ['ul', 'ol'])) {
                const nextChild = dom/* Dom.findNotEmptySibling */.i.findNotEmptySibling(next, false);
                if (dom/* Dom.isTag */.i.isTag(result, 'ul')) {
                    result.appendChild(next);
                }
                else {
                    result = dom/* Dom.wrap */.i.wrap(next, 'ul', jodit.createInside);
                }
                next = nextChild;
            }
            else {
                break;
            }
        } while (next);
        return result;
    }
    preprocessInput() {
        const { jodit } = this;
        if (!jodit.isEditorMode() || jodit.editor.firstChild) {
            return;
        }
        const box = jodit.createInside.element(jodit.o.enter);
        const br = jodit.createInside.element('br');
        dom/* Dom.append */.i.append(box, br);
        dom/* Dom.append */.i.append(jodit.editor, box);
        jodit.s.setCursorBefore(br);
    }
}
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], wrapNodes.prototype, "postProcessSetEditorValue", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], wrapNodes.prototype, "preprocessInput", null);
global/* pluginSystem.add */.pw.add('wrapNodes', wrapNodes);

// EXTERNAL MODULE: ./src/core/decorators/watch/watch.ts
var watch = __webpack_require__(44101);
;// CONCATENATED MODULE: ./src/plugins/dtd/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.dtd */.D.prototype.dtd = {
    removeExtraBr: true,
    checkBlockNesting: true,
    blockLimits: {
        article: 1,
        aside: 1,
        audio: 1,
        body: 1,
        caption: 1,
        details: 1,
        dir: 1,
        div: 1,
        dl: 1,
        fieldset: 1,
        figcaption: 1,
        figure: 1,
        footer: 1,
        form: 1,
        header: 1,
        hgroup: 1,
        main: 1,
        menu: 1,
        nav: 1,
        ol: 1,
        section: 1,
        table: 1,
        td: 1,
        th: 1,
        tr: 1,
        ul: 1,
        video: 1
    }
};

;// CONCATENATED MODULE: ./src/plugins/dtd/before-insert/check-block-nesting.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function checkBlockNesting(jodit, node) {
    if (dom_dom/* Dom.isFragment */.i.isFragment(node)) {
        node = node.firstChild;
    }
    if (jodit.o.dtd.checkBlockNesting && dom_dom/* Dom.isBlock */.i.isBlock(node)) {
        const parent = dom_dom/* Dom.furthest */.i.furthest(jodit.s.current(), dom_dom/* Dom.isBlock */.i.isBlock, jodit.editor);
        if (parent && !jodit.o.dtd.blockLimits[parent.tagName.toLowerCase()]) {
            jodit.s.setCursorAfter(parent);
            if (dom_dom/* Dom.isEmpty */.i.isEmpty(parent)) {
                dom_dom/* Dom.safeRemove */.i.safeRemove(parent);
            }
        }
    }
}

;// CONCATENATED MODULE: ./src/plugins/dtd/before-insert/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


;// CONCATENATED MODULE: ./src/plugins/dtd/after-insert/remove-extra-br.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function removeExtraBr(jodit, node) {
    if (!jodit.o.dtd.removeExtraBr || dom_dom/* Dom.isTag */.i.isTag(node, 'br')) {
        return;
    }
    const parent = dom_dom/* Dom.furthest */.i.furthest(node, dom_dom/* Dom.isBlock */.i.isBlock, jodit.editor);
    if (parent && !dom_dom/* Dom.isTag */.i.isTag(parent, ['table', 'pre', 'blockquote', 'code'])) {
        const br = dom_dom/* Dom.isTag */.i.isTag(node, 'br')
            ? node
            : dom_dom/* Dom.findNotEmptySibling */.i.findNotEmptySibling(node, false);
        if (!dom_dom/* Dom.isTag */.i.isTag(br, 'br')) {
            return;
        }
        jodit.s.setCursorBefore(br);
        dom_dom/* Dom.safeRemove */.i.safeRemove(br);
    }
}

;// CONCATENATED MODULE: ./src/plugins/dtd/after-insert/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


;// CONCATENATED MODULE: ./src/plugins/dtd/dtd.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







class dtd extends core_plugin/* Plugin */.S {
    afterInit(jodit) { }
    beforeDestruct(jodit) { }
    __onBeforeInsertNode(node) {
        const casesKeys = Object.keys(before_insert_namespaceObject);
        casesKeys.forEach(key => {
            before_insert_namespaceObject[key](this.j, node);
        });
    }
    __onAfterInsertNode(node) {
        const casesKeys = Object.keys(after_insert_namespaceObject);
        casesKeys.forEach(key => {
            after_insert_namespaceObject[key](this.j, node);
        });
    }
}
(0,tslib_es6/* __decorate */.gn)([
    (0,watch/* watch */.YP)(':beforeInsertNode')
], dtd.prototype, "__onBeforeInsertNode", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,watch/* watch */.YP)(':afterInsertNode')
], dtd.prototype, "__onAfterInsertNode", null);
global/* pluginSystem.add */.pw.add('dtd', dtd);

// EXTERNAL MODULE: ./src/modules/context-menu/context-menu.ts
var context_menu = __webpack_require__(73511);
;// CONCATENATED MODULE: ./src/plugins/xpath/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.showXPathInStatusbar */.D.prototype.showXPathInStatusbar = true;

;// CONCATENATED MODULE: ./src/plugins/xpath/xpath.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */









class xpath extends core_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.onContext = (bindElement, event) => {
            if (!this.menu) {
                this.menu = new context_menu/* ContextMenu */.x(this.j);
            }
            this.menu.show(event.clientX, event.clientY, [
                {
                    icon: 'bin',
                    title: bindElement === this.j.editor ? 'Clear' : 'Remove',
                    exec: () => {
                        if (bindElement !== this.j.editor) {
                            dom/* Dom.safeRemove */.i.safeRemove(bindElement);
                        }
                        else {
                            this.j.value = '';
                        }
                        this.j.synchronizeValues();
                    }
                },
                {
                    icon: 'select-all',
                    title: 'Select',
                    exec: () => {
                        this.j.s.select(bindElement);
                    }
                }
            ]);
            return false;
        };
        this.onSelectPath = (bindElement, event) => {
            this.j.s.focus();
            const path = (0,helpers.attr)(event.target, '-path') || '/';
            if (path === '/') {
                this.j.execCommand('selectall');
                return false;
            }
            try {
                const elm = this.j.ed
                    .evaluate(path, this.j.editor, null, XPathResult.ANY_TYPE, null)
                    .iterateNext();
                if (elm) {
                    this.j.s.select(elm);
                    return false;
                }
            }
            catch (_a) { }
            this.j.s.select(bindElement);
            return false;
        };
        this.tpl = (bindElement, path, name, title) => {
            const item = this.j.c.fromHTML(`<span class="jodit-xpath__item"><a role="button" data-path="${path}" title="${title}" tabindex="-1"'>${(0,helpers.trim)(name)}</a></span>`);
            const a = item.firstChild;
            this.j.e
                .on(a, 'click', this.onSelectPath.bind(this, bindElement))
                .on(a, 'contextmenu', this.onContext.bind(this, bindElement));
            return item;
        };
        this.removeSelectAll = () => {
            if (this.selectAllButton) {
                this.selectAllButton.destruct();
                delete this.selectAllButton;
            }
        };
        this.appendSelectAll = () => {
            this.removeSelectAll();
            this.selectAllButton = (0,factory/* makeButton */.g)(this.j, {
                name: 'selectall',
                ...this.j.o.controls.selectall
            });
            this.selectAllButton.state.size = 'tiny';
            this.container &&
                this.container.insertBefore(this.selectAllButton.container, this.container.firstChild);
        };
        this.calcPathImd = () => {
            if (this.isDestructed) {
                return;
            }
            const current = this.j.s.current();
            if (this.container) {
                this.container.innerHTML = constants.INVISIBLE_SPACE;
            }
            if (current) {
                let name, xpth, li;
                dom/* Dom.up */.i.up(current, (elm) => {
                    if (elm && this.j.editor !== elm && !dom/* Dom.isText */.i.isText(elm)) {
                        name = elm.nodeName.toLowerCase();
                        xpth = (0,helpers.getXPathByElement)(elm, this.j.editor).replace(/^\//, '');
                        li = this.tpl(elm, xpth, name, this.j.i18n('Select %s', name));
                        this.container &&
                            this.container.insertBefore(li, this.container.firstChild);
                    }
                }, this.j.editor);
            }
            this.appendSelectAll();
        };
        this.calcPath = this.j.async.debounce(this.calcPathImd, this.j.defaultTimeout * 2);
    }
    afterInit() {
        if (this.j.o.showXPathInStatusbar) {
            this.container = this.j.c.div('jodit-xpath');
            this.j.e
                .off('.xpath')
                .on('mouseup.xpath change.xpath keydown.xpath changeSelection.xpath', this.calcPath)
                .on('afterSetMode.xpath afterInit.xpath changePlace.xpath', () => {
                if (!this.j.o.showXPathInStatusbar || !this.container) {
                    return;
                }
                this.j.statusbar.append(this.container);
                if (this.j.getRealMode() === constants.MODE_WYSIWYG) {
                    this.calcPath();
                }
                else {
                    if (this.container) {
                        this.container.innerHTML = constants.INVISIBLE_SPACE;
                    }
                    this.appendSelectAll();
                }
            });
            this.calcPath();
        }
    }
    beforeDestruct() {
        if (this.j && this.j.events) {
            this.j.e.off('.xpath');
        }
        this.removeSelectAll();
        this.menu && this.menu.destruct();
        dom/* Dom.safeRemove */.i.safeRemove(this.container);
        delete this.menu;
        delete this.container;
    }
}
global/* pluginSystem.add */.pw.add('xpath', xpath);

// EXTERNAL MODULE: ./src/plugins/emoji/emoji.ts + 1 modules
var emoji = __webpack_require__(73837);
;// CONCATENATED MODULE: ./src/plugins/gif/gif.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






icon/* Icon.set */.J.set('gif', __webpack_require__(93368));
config/* Config.prototype.controls.gif */.D.prototype.controls.gif = {
    popup: (editor, current, self, close) => {
        let sourceImage = null;
        if (current &&
            !dom/* Dom.isText */.i.isText(current) &&
            dom/* Dom.isHTMLElement */.i.isHTMLElement(current) &&
            (dom/* Dom.isTag */.i.isTag(current, 'img') || (0,helpers.$$)('img', current).length)) {
            sourceImage = dom/* Dom.isTag */.i.isTag(current, 'img')
                ? current
                : (0,helpers.$$)('img', current)[0];
        }
        editor.s.save();
        return (0,widget/* FileSelectorWidget */.ov)(editor, {
            filebrowser: (data) => {
                editor.s.restore();
                data.files &&
                    data.files.forEach(file => editor.s.insertImage(data.baseurl + file, null, editor.o.imageDefaultWidth));
                close();
            },
            upload: true,
            url: async (url, text) => {
                editor.s.restore();
                if (/^[a-z\d_-]+(\.[a-z\d_-]+)+/i.test(url)) {
                    url = '//' + url;
                }
                const image = sourceImage || editor.createInside.element('img');
                image.setAttribute('src', url);
                image.setAttribute('alt', text);
                if (!sourceImage) {
                    await editor.s.insertImage(image, null, editor.o.imageDefaultWidth);
                }
                close();
            }
        }, sourceImage, close);
    },
    tags: ['img'],
    tooltip: 'Insert Image'
};
function gif(editor) {
    editor.registerButton({
        name: 'gif',
        group: 'media'
    });
}
global/* pluginSystem.add */.pw.add('gif', gif);

;// CONCATENATED MODULE: ./src/plugins/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */































































;// CONCATENATED MODULE: ./src/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

if (false) {}







Object.keys(constants).forEach((key) => {
    Jodit[key] = constants[key];
});
const esFilter = (key) => key !== '__esModule';
Object.keys(icons_namespaceObject)
    .filter(esFilter)
    .forEach((key) => {
    modules.Icon.set(key.replace('_', '-'), icons_namespaceObject[key]);
});
Object.keys(modules)
    .filter(esFilter)
    .forEach((key) => {
    Jodit.modules[key] = modules[key];
});
Object.keys(decorators)
    .filter(esFilter)
    .forEach((key) => {
    Jodit.decorators[key] = decorators[key];
});
['Confirm', 'Alert', 'Prompt'].forEach((key) => {
    Jodit[key] = modules[key];
});
Object.keys(langs)
    .filter(esFilter)
    .forEach((key) => {
    Jodit.lang[key] = langs[key];
});



/***/ }),

/***/ 73511:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "x": function() { return /* binding */ ContextMenu; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(20255);
/* harmony import */ var jodit_core_ui_popup__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(990);
/* harmony import */ var jodit_core_ui_button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(17460);
/* harmony import */ var jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(99160);
/* harmony import */ var jodit_core_decorators_component_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(99205);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






let ContextMenu = class ContextMenu extends jodit_core_ui_popup__WEBPACK_IMPORTED_MODULE_0__/* .Popup */ .G {
    className() {
        return 'ContextMenu';
    }
    show(x, y, actions) {
        const self = this, content = this.j.c.div(this.getFullElName('actions'));
        if (!(0,jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_2__/* .isArray */ .kJ)(actions)) {
            return;
        }
        actions.forEach(item => {
            if (!item) {
                return;
            }
            const action = (0,jodit_core_ui_button__WEBPACK_IMPORTED_MODULE_1__/* .Button */ .zx)(this.jodit, item.icon || 'empty', item.title);
            this.jodit && action.setParentView(this.jodit);
            action.setMod('context', 'menu');
            action.onAction((e) => {
                var _a;
                (_a = item.exec) === null || _a === void 0 ? void 0 : _a.call(self, e);
                self.close();
                return false;
            });
            content.appendChild(action.container);
        });
        this.setContent(content).open(() => ({ left: x, top: y, width: 0, height: 0 }), true);
    }
};
ContextMenu = (0,tslib__WEBPACK_IMPORTED_MODULE_3__/* .__decorate */ .gn)([
    jodit_core_decorators_component_component__WEBPACK_IMPORTED_MODULE_4__/* .component */ .w
], ContextMenu);



/***/ }),

/***/ 5204:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "V": function() { return /* binding */ Dialog; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(20255);
/* harmony import */ var jodit_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(27537);
/* harmony import */ var jodit_core_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10063);
/* harmony import */ var jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(52607);
/* harmony import */ var jodit_core_view_view_with_toolbar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(62322);
/* harmony import */ var jodit_core_dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(94522);
/* harmony import */ var jodit_core_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(26655);
/* harmony import */ var jodit_core_global__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(58299);
/* harmony import */ var jodit_core_decorators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(11169);
/* harmony import */ var jodit_core_view_view__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(23967);
/* harmony import */ var jodit_core_ui__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(41685);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */












jodit_config__WEBPACK_IMPORTED_MODULE_0__/* .Config.prototype.dialog */ .D.prototype.dialog = {
    namespace: '',
    extraButtons: [],
    resizable: true,
    draggable: true,
    buttons: ['dialog.close'],
    removeButtons: []
};
jodit_config__WEBPACK_IMPORTED_MODULE_0__/* .Config.prototype.controls.dialog */ .D.prototype.controls.dialog = {
    close: {
        icon: 'cancel',
        exec: dialog => {
            dialog.close();
        }
    }
};
let Dialog = class Dialog extends jodit_core_view_view_with_toolbar__WEBPACK_IMPORTED_MODULE_3__/* .ViewWithToolbar */ .C {
    constructor(options) {
        super(options);
        this.destroyAfterClose = false;
        this.moved = false;
        this.resizable = false;
        this.draggable = false;
        this.startX = 0;
        this.startY = 0;
        this.startPoint = { x: 0, y: 0, w: 0, h: 0 };
        this.lockSelect = () => {
            this.setMod('moved', true);
        };
        this.unlockSelect = () => {
            this.setMod('moved', false);
        };
        this.onResize = () => {
            if (this.options &&
                this.o.resizable &&
                !this.moved &&
                this.isOpened &&
                !this.offsetX &&
                !this.offsetY) {
                this.setPosition();
            }
        };
        this.isModal = false;
        this.isOpened = false;
        const self = this;
        self.options = (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.ConfigProto)(options !== null && options !== void 0 ? options : {}, (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.ConfigProto)({
            toolbarButtonSize: 'middle'
        }, (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.ConfigProto)(jodit_config__WEBPACK_IMPORTED_MODULE_0__/* .Config.prototype.dialog */ .D.prototype.dialog, jodit_core_view_view__WEBPACK_IMPORTED_MODULE_8__/* .View.defaultOptions */ .G.defaultOptions)));
        jodit_core_dom__WEBPACK_IMPORTED_MODULE_4__/* .Dom.safeRemove */ .i.safeRemove(self.container);
        const n = this.getFullElName.bind(this);
        self.container = this.c.fromHTML(`<div style="z-index:${self.o.zIndex}" class="jodit jodit-dialog ${this.componentName}">
				<div class="${n('overlay')}"></div>
				<div class="${this.getFullElName('panel')}">
					<div class="${n('header')}">
						<div class="${n('header-title')}"></div>
						<div class="${n('header-toolbar')}"></div>
					</div>
					<div class="${n('content')}"></div>
					<div class="${n('footer')}"></div>
					<div class="${n('resizer')}">${jodit_core_ui__WEBPACK_IMPORTED_MODULE_9__/* .Icon.get */ .JO.get('resize_handler')}</div>
				</div>
			</div>`);
        (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.attr)(self.container, 'role', 'dialog');
        Object.defineProperty(self.container, 'component', {
            value: this
        });
        self.setMod('theme', self.o.theme || 'default').setMod('resizable', Boolean(self.o.resizable));
        const dialog = self.getElm('panel');
        (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.assert)(dialog != null, 'Panel element does not exist');
        const resizer = self.getElm('resizer');
        (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.assert)(resizer != null, 'Resizer element does not exist');
        const dialogbox_header = self.getElm('header-title');
        (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.assert)(dialogbox_header != null, 'header-title element does not exist');
        const dialogbox_content = self.getElm('content');
        (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.assert)(dialogbox_content != null, 'Content element does not exist');
        const dialogbox_footer = self.getElm('footer');
        (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.assert)(dialogbox_footer != null, 'Footer element does not exist');
        const dialogbox_toolbar = self.getElm('header-toolbar');
        (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.assert)(dialogbox_toolbar != null, 'header-toolbar element does not exist');
        this.dialog = dialog;
        this.resizer = resizer;
        this.dialogbox_header = dialogbox_header;
        this.dialogbox_content = dialogbox_content;
        this.dialogbox_footer = dialogbox_footer;
        this.dialogbox_toolbar = dialogbox_toolbar;
        (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.css)(self.dialog, {
            maxWidth: self.options.maxWidth,
            minHeight: self.options.minHeight,
            minWidth: self.options.minWidth
        });
        const headerBox = self.getElm('header');
        headerBox &&
            self.e.on(headerBox, 'pointerdown touchstart', self.onHeaderMouseDown);
        self.e.on(self.resizer, 'mousedown touchstart', self.onResizerMouseDown);
        const fullSize = jodit_core_global__WEBPACK_IMPORTED_MODULE_6__/* .pluginSystem.get */ .pw.get('fullsize');
        (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.isFunction)(fullSize) && fullSize(self);
        this.e
            .on(self.container, 'close_dialog', self.close)
            .on(this.ow, 'keydown', this.onEsc)
            .on(this.ow, 'resize', this.onResize);
    }
    className() {
        return 'Dialog';
    }
    get destination() {
        var _a;
        return ((_a = this.o.shadowRoot) !== null && _a !== void 0 ? _a : this.od.body);
    }
    setElements(root, elements) {
        const elements_list = [];
        (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.asArray)(elements).forEach((elm) => {
            if ((0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.isArray)(elm)) {
                const div = this.c.div(this.getFullElName('column'));
                elements_list.push(div);
                root.appendChild(div);
                return this.setElements(div, elm);
            }
            let element;
            if ((0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.isString)(elm)) {
                element = this.c.fromHTML(elm);
            }
            else {
                element = (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.hasContainer)(elm) ? elm.container : elm;
            }
            elements_list.push(element);
            if (element.parentNode !== root) {
                root.appendChild(element);
            }
        });
        (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.toArray)(root.childNodes).forEach((elm) => {
            if (elements_list.indexOf(elm) === -1) {
                root.removeChild(elm);
            }
        });
    }
    onMouseUp() {
        if (this.draggable || this.resizable) {
            this.removeGlobalResizeListeners();
            this.draggable = false;
            this.resizable = false;
            this.unlockSelect();
            if (this.e) {
                this.removeGlobalResizeListeners();
                this.e.fire(this, 'endResize endMove');
            }
        }
    }
    onHeaderMouseDown(e) {
        const target = e.target;
        if (!this.o.draggable ||
            (target && target.nodeName.match(/^(INPUT|SELECT)$/))) {
            return;
        }
        this.draggable = true;
        this.startX = e.clientX;
        this.startY = e.clientY;
        this.startPoint.x = (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.css)(this.dialog, 'left');
        this.startPoint.y = (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.css)(this.dialog, 'top');
        this.setMaxZIndex();
        if (e.cancelable) {
            e.preventDefault();
        }
        this.lockSelect();
        this.addGlobalResizeListeners();
        if (this.e) {
            this.e.fire(this, 'startMove');
        }
    }
    onMouseMove(e) {
        if (this.draggable && this.o.draggable) {
            this.setPosition(this.startPoint.x + e.clientX - this.startX, this.startPoint.y + e.clientY - this.startY);
            if (this.e) {
                this.e.fire(this, 'move', e.clientX - this.startX, e.clientY - this.startY);
            }
            e.stopImmediatePropagation();
        }
        if (this.resizable && this.o.resizable) {
            this.setSize(this.startPoint.w + e.clientX - this.startX, this.startPoint.h + e.clientY - this.startY);
            if (this.e) {
                this.e.fire(this, 'resizeDialog', e.clientX - this.startX, e.clientY - this.startY);
            }
        }
    }
    onEsc(e) {
        if (this.isOpened &&
            e.key === jodit_core_constants__WEBPACK_IMPORTED_MODULE_1__.KEY_ESC &&
            this.getMod('static') !== true) {
            const me = this.getMaxZIndexDialog();
            if (me) {
                me.close();
            }
            else {
                this.close();
            }
            e.stopImmediatePropagation();
        }
    }
    onResizerMouseDown(e) {
        this.resizable = true;
        this.startX = e.clientX;
        this.startY = e.clientY;
        this.startPoint.w = this.dialog.offsetWidth;
        this.startPoint.h = this.dialog.offsetHeight;
        this.lockSelect();
        this.addGlobalResizeListeners();
        if (this.e) {
            this.e.fire(this, 'startResize');
        }
    }
    addGlobalResizeListeners() {
        const self = this;
        self.e
            .on(self.ow, 'pointermove touchmove', self.onMouseMove)
            .on(self.ow, 'pointerup touchend', self.onMouseUp);
    }
    removeGlobalResizeListeners() {
        const self = this;
        self.e
            .off(self.ow, 'mousemove pointermove', self.onMouseMove)
            .off(self.ow, 'mouseup pointerup', self.onMouseUp);
    }
    setSize(w, h) {
        if (w == null) {
            w = this.dialog.offsetWidth;
        }
        if (h == null) {
            h = this.dialog.offsetHeight;
        }
        (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.css)(this.dialog, {
            width: w,
            height: h
        });
        return this;
    }
    calcAutoSize() {
        this.setSize('auto', 'auto');
        this.setSize();
        return this;
    }
    setPosition(x, y) {
        const w = this.ow.innerWidth, h = this.ow.innerHeight;
        let left = w / 2 - this.dialog.offsetWidth / 2, top = h / 2 - this.dialog.offsetHeight / 2;
        if (left < 0) {
            left = 0;
        }
        if (top < 0) {
            top = 0;
        }
        if (x !== undefined && y !== undefined) {
            this.offsetX = x;
            this.offsetY = y;
            this.moved = Math.abs(x - left) > 100 || Math.abs(y - top) > 100;
        }
        this.dialog.style.left = (x || left) + 'px';
        this.dialog.style.top = (y || top) + 'px';
        return this;
    }
    setHeader(content) {
        this.setElements(this.dialogbox_header, content);
        return this;
    }
    setContent(content) {
        this.setElements(this.dialogbox_content, content);
        return this;
    }
    setFooter(content) {
        this.setElements(this.dialogbox_footer, content);
        this.setMod('footer', Boolean(content));
        return this;
    }
    getZIndex() {
        return parseInt((0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.css)(this.container, 'zIndex'), 10) || 0;
    }
    getMaxZIndexDialog() {
        let maxZi = 0, dlg, zIndex, res = this;
        (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.$$)('.jodit-dialog', this.destination).forEach((dialog) => {
            dlg = dialog.component;
            zIndex = parseInt((0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.css)(dialog, 'zIndex'), 10);
            if (dlg.isOpened && !isNaN(zIndex) && zIndex > maxZi) {
                res = dlg;
                maxZi = zIndex;
            }
        });
        return res;
    }
    setMaxZIndex() {
        let maxZIndex = 20000004, zIndex = 0;
        (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.$$)('.jodit-dialog', this.destination).forEach(dialog => {
            zIndex = parseInt((0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.css)(dialog, 'zIndex'), 10);
            maxZIndex = Math.max(isNaN(zIndex) ? 0 : zIndex, maxZIndex);
        });
        this.container.style.zIndex = (maxZIndex + 1).toString();
    }
    toggleFullSize(isFullSize) {
        if ((0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.isVoid)(isFullSize)) {
            isFullSize = !this.getMod('fullsize');
        }
        this.setMod('fullsize', isFullSize);
        super.toggleFullSize(isFullSize);
    }
    open(contentOrClose, titleOrModal, destroyAfterClose, modal) {
        jodit_core_global__WEBPACK_IMPORTED_MODULE_6__/* .eventEmitter.fire */ .TB.fire('closeAllPopups hideHelpers');
        if (this.e.fire(this, 'beforeOpen') === false) {
            return this;
        }
        if ((0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.isBoolean)(contentOrClose)) {
            destroyAfterClose = contentOrClose;
        }
        if ((0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.isBoolean)(titleOrModal)) {
            modal = titleOrModal;
        }
        this.destroyAfterClose = destroyAfterClose === true;
        const content = (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.isBoolean)(contentOrClose) ? undefined : contentOrClose;
        const title = (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.isBoolean)(titleOrModal) ? undefined : titleOrModal;
        if (title !== undefined) {
            this.setHeader(title);
        }
        if (content) {
            this.setContent(content);
        }
        this.setMod('active', true);
        this.isOpened = true;
        this.setModal(modal);
        this.destination.appendChild(this.container);
        this.setPosition(this.offsetX, this.offsetY);
        this.setMaxZIndex();
        if (this.o.fullsize) {
            this.toggleFullSize(true);
        }
        this.e.fire('afterOpen', this);
        return this;
    }
    setModal(modal) {
        this.isModal = Boolean(modal);
        this.setMod('modal', this.isModal);
        return this;
    }
    close() {
        if (this.isDestructed ||
            !this.isOpened ||
            this.getMod('static') === true) {
            return this;
        }
        if (this.e.fire('beforeClose', this) === false) {
            return this;
        }
        this.setMod('active', false);
        this.isOpened = false;
        if (this.isFullSize) {
            this.toggleFullSize(false);
        }
        jodit_core_dom__WEBPACK_IMPORTED_MODULE_4__/* .Dom.safeRemove */ .i.safeRemove(this.container);
        this.removeGlobalResizeListeners();
        if (this.destroyAfterClose) {
            this.destruct();
        }
        this.e.fire(this, 'afterClose');
        this.e.fire(this.ow, 'joditCloseDialog');
        return this;
    }
    buildToolbar() {
        this.o.buttons &&
            this.toolbar
                .build((0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.splitArray)(this.o.buttons))
                .setMod('mode', 'header')
                .appendTo(this.dialogbox_toolbar);
    }
    destruct() {
        if (this.isInDestruct) {
            return;
        }
        this.setStatus(jodit_core_component__WEBPACK_IMPORTED_MODULE_5__/* .STATUSES.beforeDestruct */ .n$.beforeDestruct);
        if (this.isOpened) {
            this.close();
        }
        if (this.events) {
            this.removeGlobalResizeListeners();
            this.events
                .off(this.container, 'close_dialog', self.close)
                .off(this.ow, 'keydown', this.onEsc)
                .off(this.ow, 'resize', this.onResize);
        }
        super.destruct();
    }
};
(0,tslib__WEBPACK_IMPORTED_MODULE_10__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_7__.autobind
], Dialog.prototype, "onMouseUp", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_10__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_7__.autobind
], Dialog.prototype, "onHeaderMouseDown", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_10__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_7__.autobind
], Dialog.prototype, "onMouseMove", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_10__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_7__.autobind
], Dialog.prototype, "onEsc", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_10__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_7__.autobind
], Dialog.prototype, "onResizerMouseDown", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_10__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_7__.autobind
], Dialog.prototype, "close", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_10__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_7__.hook)('ready')
], Dialog.prototype, "buildToolbar", null);
Dialog = (0,tslib__WEBPACK_IMPORTED_MODULE_10__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_7__.component
], Dialog);



/***/ }),

/***/ 91419:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "bZ": function() { return /* reexport */ Alert; },
  "I4": function() { return /* reexport */ Confirm; },
  "Vq": function() { return /* reexport */ dialog_dialog/* Dialog */.V; },
  "NL": function() { return /* reexport */ Prompt; }
});

// EXTERNAL MODULE: ./src/modules/dialog/dialog.ts
var dialog_dialog = __webpack_require__(5204);
// EXTERNAL MODULE: ./src/core/helpers/index.ts + 14 modules
var helpers = __webpack_require__(52607);
// EXTERNAL MODULE: ./src/core/dom/index.ts
var dom = __webpack_require__(94522);
// EXTERNAL MODULE: ./src/core/ui/index.ts + 2 modules
var ui = __webpack_require__(41685);
;// CONCATENATED MODULE: ./src/modules/dialog/alert.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




function Alert(msg, title, callback, className = 'jodit-dialog_alert') {
    if ((0,helpers.isFunction)(title)) {
        callback = title;
        title = undefined;
    }
    const dialog = this instanceof dialog_dialog/* Dialog */.V ? this : new dialog_dialog/* Dialog */.V(), container = dialog.c.div(className), okButton = (0,ui/* Button */.zx)(dialog, 'ok', 'Ok');
    (0,helpers.asArray)(msg).forEach(oneMessage => {
        container.appendChild(dom/* Dom.isNode */.i.isNode(oneMessage) ? oneMessage : dialog.c.fromHTML(oneMessage));
    });
    okButton.onAction(() => {
        if (!callback || !(0,helpers.isFunction)(callback) || callback(dialog) !== false) {
            dialog.close();
        }
    });
    dialog.setFooter([okButton]);
    dialog.open(container, title || '&nbsp;', true, true);
    okButton.focus();
    return dialog;
}

;// CONCATENATED MODULE: ./src/modules/dialog/prompt.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



function Prompt(msg, title, callback, placeholder, defaultValue) {
    const dialog = this instanceof dialog_dialog/* Dialog */.V ? this : new dialog_dialog/* Dialog */.V(), cancelButton = (0,ui/* Button */.zx)(dialog, 'cancel', 'Cancel'), okButton = (0,ui/* Button */.zx)(dialog, 'ok', 'Ok'), form = dialog.c.element('form', {
        class: 'jodit-dialog_prompt'
    }), inputElement = dialog.c.element('input', {
        autofocus: true,
        class: 'jodit-input'
    }), labelElement = dialog.c.element('label');
    if ((0,helpers.isFunction)(title)) {
        callback = title;
        title = undefined;
    }
    if (placeholder) {
        (0,helpers.attr)(inputElement, 'placeholder', placeholder);
    }
    labelElement.appendChild(dialog.c.text(msg));
    form.appendChild(labelElement);
    form.appendChild(inputElement);
    cancelButton.onAction(dialog.close);
    const onclick = () => {
        if (!callback ||
            !(0,helpers.isFunction)(callback) ||
            callback(inputElement.value) !== false) {
            dialog.close();
        }
    };
    okButton.onAction(onclick);
    dialog.e.on(form, 'submit', () => {
        onclick();
        return false;
    });
    dialog.setFooter([okButton, cancelButton]);
    dialog.open(form, title || '&nbsp;', true, true);
    inputElement.focus();
    if (defaultValue !== undefined && defaultValue.length) {
        inputElement.value = defaultValue;
        inputElement.select();
    }
    return dialog;
}

// EXTERNAL MODULE: ./src/core/helpers/checker/is-function.ts
var is_function = __webpack_require__(84121);
// EXTERNAL MODULE: ./src/core/ui/button/button/button.ts
var button_button = __webpack_require__(15327);
;// CONCATENATED MODULE: ./src/modules/dialog/confirm.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



function Confirm(msg, title, callback) {
    const dialog = this instanceof dialog_dialog/* Dialog */.V ? this : new dialog_dialog/* Dialog */.V(), $div = dialog.c.fromHTML('<form class="jodit-dialog_prompt"></form>'), $label = dialog.c.element('label');
    if ((0,is_function/* isFunction */.m)(title)) {
        callback = title;
        title = undefined;
    }
    $label.appendChild(dialog.c.fromHTML(msg));
    $div.appendChild($label);
    const action = (yes) => () => {
        if (!callback || callback(yes) !== false) {
            dialog.close();
        }
    };
    const $cancel = (0,button_button/* Button */.zx)(dialog, 'cancel', 'Cancel');
    const $ok = (0,button_button/* Button */.zx)(dialog, 'ok', 'Yes');
    $cancel.onAction(action(false));
    $ok.onAction(action(true));
    dialog.e.on($div, 'submit', () => {
        action(true)();
        return false;
    });
    dialog.setFooter([$ok, $cancel]);
    dialog.open($div, title || '&nbsp;', true, true);
    $ok.focus();
    return dialog;
}

;// CONCATENATED MODULE: ./src/modules/dialog/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






/***/ }),

/***/ 47713:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": function() { return /* binding */ FileBrowserItem; }
/* harmony export */ });
/* harmony import */ var jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52607);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

class FileBrowserItem {
    constructor(data) {
        this.data = data;
        Object.keys(data).forEach(key => {
            this[key] = data[key];
        });
    }
    static create(data) {
        if (data instanceof FileBrowserItem) {
            return data;
        }
        return new FileBrowserItem(data);
    }
    get path() {
        return (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.normalizePath)(this.data.source.path ? this.data.source.path + '/' : '/');
    }
    get imageURL() {
        const timestamp = new Date().getTime().toString(), { thumbIsAbsolute, source, thumb, file } = this.data, path = thumb || file;
        return thumbIsAbsolute && path
            ? path
            : (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.normalizeUrl)(source.baseurl, source.path, path || '') +
                '?_tmst=' +
                timestamp;
    }
    get fileURL() {
        let { name } = this.data;
        const { file, fileIsAbsolute, source } = this.data;
        if (file !== undefined) {
            name = file;
        }
        return fileIsAbsolute && name
            ? name
            : (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.normalizeUrl)(source.baseurl, source.path, name || '');
    }
    get time() {
        const { changed } = this.data;
        return ((changed &&
            (typeof changed === 'number'
                ? new Date(changed).toLocaleString()
                : changed)) ||
            '');
    }
    get uniqueHashKey() {
        const data = this.data;
        let key = [
            data.sourceName,
            data.name,
            data.file,
            this.time,
            data.thumb
        ].join('_');
        key = key.toLowerCase().replace(/[^0-9a-z\-.]/g, '-');
        return key;
    }
    toJSON() {
        return this.data;
    }
}


/***/ }),

/***/ 94079:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "J": function() { return /* binding */ DEFAULT_SOURCE_NAME; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(20255);
/* harmony import */ var jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52607);
/* harmony import */ var jodit_core_request__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(71347);
/* harmony import */ var jodit_core_decorators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(11169);
/* harmony import */ var jodit_modules_file_browser_builders_item__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(47713);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





const DEFAULT_SOURCE_NAME = 'default';
const possibleRules = (/* unused pure expression or super */ null && ([
    'allowFiles',
    'allowFileMove',
    'allowFileUpload',
    'allowFileUploadRemote',
    'allowFileRemove',
    'allowFileRename',
    'allowFolders',
    'allowFolderMove',
    'allowFolderCreate',
    'allowFolderRemove',
    'allowFolderRename',
    'allowImageResize',
    'allowImageCrop'
]));
let DataProvider = class DataProvider {
    constructor(parent, options) {
        this.parent = parent;
        this.options = options;
        this.__currentPermissions = null;
        this.ajaxInstances = new Map();
        this.progressHandler = (ignore) => { };
    }
    get o() {
        return this.options;
    }
    get(name) {
        const ai = this.ajaxInstances;
        if (ai.has(name)) {
            const ajax = ai.get(name);
            ajax === null || ajax === void 0 ? void 0 : ajax.abort();
            ai.delete(name);
        }
        const opts = (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.ConfigProto)(this.options[name] !== undefined
            ? this.options[name]
            : {}, (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.ConfigProto)({
            onProgress: this.progressHandler
        }, this.o.ajax));
        if (opts.prepareData) {
            opts.data = opts.prepareData.call(this, opts.data);
        }
        const ajax = new jodit_core_request__WEBPACK_IMPORTED_MODULE_1__/* .Ajax */ .t(this.parent, opts);
        ai.set(name, ajax);
        const promise = ajax.send();
        promise
            .finally(() => {
            ajax.destruct();
            ai.delete(name);
            this.progressHandler(100);
        })
            .catch(() => null);
        return promise
            .then(resp => resp.json())
            .then(resp => {
            if (resp && !this.isSuccess(resp)) {
                throw new Error(this.getMessage(resp));
            }
            return resp;
        });
    }
    onProgress(callback) {
        this.progressHandler = callback;
    }
    async permissions(path, source) {
        if (!this.o.permissions) {
            return null;
        }
        this.o.permissions.data.path = path;
        this.o.permissions.data.source = source;
        if (this.o.permissions.url) {
            return this.get('permissions').then(resp => {
                let process = this.o.permissions.process;
                if (!process) {
                    process = this.o.ajax.process;
                }
                if (process) {
                    const respData = process.call(self, resp);
                    if (respData.data.permissions) {
                        this.__currentPermissions = respData.data.permissions;
                    }
                }
                return this.__currentPermissions;
            });
        }
        return null;
    }
    canI(action) {
        const rule = 'allow' + action;
        if (false) {}
        return (this.__currentPermissions == null ||
            this.__currentPermissions[rule] === undefined ||
            this.__currentPermissions[rule]);
    }
    items(path, source, mods = {}) {
        const opt = this.options;
        if (!opt.items) {
            return Promise.reject('Set Items api options');
        }
        opt.items.data.path = path;
        opt.items.data.source = source;
        opt.items.data.mods = mods;
        return this.get('items').then(resp => {
            let process = this.o.items.process;
            if (!process) {
                process = this.o.ajax.process;
            }
            if (process) {
                resp = process.call(self, resp);
            }
            return this.generateItemsList(resp.data.sources, mods);
        });
    }
    generateItemsList(sources, mods = {}) {
        const elements = [];
        const canBeFile = (item) => !mods.onlyImages || item.isImage === undefined || item.isImage, inFilter = (item) => {
            var _a;
            return !((_a = mods.filterWord) === null || _a === void 0 ? void 0 : _a.length) ||
                this.o.filter === undefined ||
                this.o.filter(item, mods.filterWord);
        };
        sources.forEach(source => {
            if (source.files && source.files.length) {
                const { sort } = this.o;
                if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.isFunction)(sort) && mods.sortBy) {
                    source.files.sort((a, b) => sort(a, b, mods.sortBy));
                }
                source.files.forEach((item) => {
                    if (inFilter(item) && canBeFile(item)) {
                        elements.push(jodit_modules_file_browser_builders_item__WEBPACK_IMPORTED_MODULE_3__/* .FileBrowserItem.create */ .Z.create({
                            ...item,
                            sourceName: source.name,
                            source
                        }));
                    }
                });
            }
        });
        return elements;
    }
    async tree(path, source) {
        path = (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.normalizeRelativePath)(path);
        if (!this.o.folder) {
            return Promise.reject('Set Folder Api options');
        }
        await this.permissions(path, source);
        this.o.folder.data.path = path;
        this.o.folder.data.source = source;
        return this.get('folder').then(resp => {
            let process = this.o.folder.process;
            if (!process) {
                process = this.o.ajax.process;
            }
            if (process) {
                resp = process.call(self, resp);
            }
            return resp.data.sources;
        });
    }
    getPathByUrl(url) {
        (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.set)('options.getLocalFileByUrl.data.url', url, this);
        return this.get('getLocalFileByUrl').then(resp => {
            if (this.isSuccess(resp)) {
                return resp.data;
            }
            throw (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.error)(this.getMessage(resp));
        });
    }
    createFolder(name, path, source) {
        const { create } = this.o;
        if (!create) {
            throw (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.error)('Set Create api options');
        }
        create.data.source = source;
        create.data.path = path;
        create.data.name = name;
        return this.get('create').then(resp => {
            if (this.isSuccess(resp)) {
                return true;
            }
            throw (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.error)(this.getMessage(resp));
        });
    }
    move(filepath, path, source, isFile) {
        const mode = isFile
            ? 'fileMove'
            : 'folderMove';
        const option = this.options[mode];
        if (!option) {
            throw (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.error)('Set Move api options');
        }
        option.data.from = filepath;
        option.data.path = path;
        option.data.source = source;
        return this.get(mode).then(resp => {
            if (this.isSuccess(resp)) {
                return true;
            }
            throw (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.error)(this.getMessage(resp));
        });
    }
    remove(action, path, file, source) {
        const fr = this.o[action];
        if (!fr) {
            throw (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.error)(`Set "${action}" api options`);
        }
        fr.data.path = path;
        fr.data.name = file;
        fr.data.source = source;
        return this.get(action).then(resp => {
            if (fr.process) {
                resp = fr.process.call(this, resp);
            }
            return this.getMessage(resp);
        });
    }
    fileRemove(path, file, source) {
        return this.remove('fileRemove', path, file, source);
    }
    folderRemove(path, file, source) {
        return this.remove('folderRemove', path, file, source);
    }
    rename(action, path, name, newname, source) {
        const fr = this.o[action];
        if (!fr) {
            throw (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.error)(`Set "${action}" api options`);
        }
        fr.data.path = path;
        fr.data.name = name;
        fr.data.newname = newname;
        fr.data.source = source;
        return this.get(action).then(resp => {
            if (fr.process) {
                resp = fr.process.call(self, resp);
            }
            return this.getMessage(resp);
        });
    }
    folderRename(path, name, newname, source) {
        return this.rename('folderRename', path, name, newname, source);
    }
    fileRename(path, name, newname, source) {
        return this.rename('fileRename', path, name, newname, source);
    }
    changeImage(type, path, source, name, newname, box) {
        if (!this.o[type]) {
            this.o[type] = {
                data: {}
            };
        }
        const query = this.o[type];
        if (query.data === undefined) {
            query.data = {
                action: type
            };
        }
        query.data.newname = newname || name;
        if (box) {
            query.data.box = box;
        }
        query.data.path = path;
        query.data.name = name;
        query.data.source = source;
        return this.get(type).then(() => {
            return true;
        });
    }
    crop(path, source, name, newname, box) {
        return this.changeImage('crop', path, source, name, newname, box);
    }
    resize(path, source, name, newname, box) {
        return this.changeImage('resize', path, source, name, newname, box);
    }
    getMessage(resp) {
        return this.options.getMessage(resp);
    }
    isSuccess(resp) {
        return this.options.isSuccess(resp);
    }
    destruct() {
        this.ajaxInstances.forEach(a => a.destruct());
        this.ajaxInstances.clear();
    }
};
DataProvider = (0,tslib__WEBPACK_IMPORTED_MODULE_4__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_2__.autobind
], DataProvider);
/* harmony default export */ __webpack_exports__["Z"] = (DataProvider);


/***/ }),

/***/ 43708:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "L": function() { return /* binding */ makeContextMenu; },
/* harmony export */   "S": function() { return /* binding */ makeDataProvider; }
/* harmony export */ });
/* harmony import */ var _data_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(94079);
/* harmony import */ var _context_menu_context_menu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(73511);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function makeDataProvider(parent, options) {
    return new _data_provider__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z(parent, options);
}
function makeContextMenu(parent) {
    return new _context_menu_context_menu__WEBPACK_IMPORTED_MODULE_1__/* .ContextMenu */ .x(parent);
}


/***/ }),

/***/ 41405:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "f": function() { return /* reexport */ FileBrowser; },
  "F": function() { return /* reexport */ isFileBrowserFilesItem; }
});

// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(20255);
// EXTERNAL MODULE: ./src/config.ts
var config = __webpack_require__(27537);
// EXTERNAL MODULE: ./src/core/constants.ts
var constants = __webpack_require__(10063);
// EXTERNAL MODULE: ./src/core/storage/index.ts + 3 modules
var storage = __webpack_require__(55937);
// EXTERNAL MODULE: ./src/core/helpers/index.ts + 14 modules
var helpers = __webpack_require__(52607);
// EXTERNAL MODULE: ./src/core/dom/index.ts
var dom = __webpack_require__(94522);
// EXTERNAL MODULE: ./src/modules/file-browser/factories.ts
var factories = __webpack_require__(43708);
// EXTERNAL MODULE: ./src/core/helpers/normalize/index.ts + 8 modules
var normalize = __webpack_require__(7460);
// EXTERNAL MODULE: ./src/core/ui/index.ts + 2 modules
var ui = __webpack_require__(41685);
;// CONCATENATED MODULE: ./src/modules/file-browser/builders/elements-map.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const map = new WeakMap();
const elementsMap = (view) => {
    let result = map.get(view);
    if (!result) {
        result = {};
        map.set(view, result);
    }
    return result;
};

;// CONCATENATED MODULE: ./src/modules/file-browser/fetch/load-items.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function loadItems(fb) {
    fb.files.setMod('active', true);
    fb.files.setMod('loading', true);
    return fb.dataProvider
        .items(fb.state.currentPath, fb.state.currentSource, {
        sortBy: fb.state.sortBy,
        onlyImages: fb.state.onlyImages,
        filterWord: fb.state.filterWord
    })
        .then(resp => {
        if (resp) {
            fb.state.elements = resp;
            fb.state.activeElements = [];
        }
    })
        .catch(fb.status)
        .finally(() => fb.files.setMod('loading', false));
}

;// CONCATENATED MODULE: ./src/modules/file-browser/fetch/load-tree.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


async function loadTree(fb) {
    fb.tree.setMod('active', true);
    dom/* Dom.detach */.i.detach(fb.tree.container);
    const items = loadItems(fb);
    if (fb.o.showFoldersPanel) {
        fb.tree.setMod('loading', true);
        const tree = fb.dataProvider
            .tree(fb.state.currentPath, fb.state.currentSource)
            .then(resp => {
            fb.state.sources = resp;
        })
            .catch(fb.status)
            .finally(() => fb.tree.setMod('loading', false));
        return Promise.all([tree, items]);
    }
    fb.tree.setMod('active', false);
    return items;
}

;// CONCATENATED MODULE: ./src/modules/file-browser/listeners/state-listeners.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





const DEFAULT_SOURCE_NAME = 'default';
function stateListeners() {
    const elmMap = elementsMap(this);
    const { state, files, create, options } = this, getDomElement = (item) => {
        const key = item.uniqueHashKey;
        if (elmMap[key]) {
            return elmMap[key].elm;
        }
        const elm = create.fromHTML(options.getThumbTemplate.call(this, item, item.source, item.sourceName.toString()));
        elm.dataset.key = key;
        elmMap[key] = {
            item,
            elm
        };
        return elmMap[key].elm;
    };
    state
        .on(['change.currentPath', 'change.currentSource'], this.async.debounce(() => {
        if (this.o.saveStateInStorage &&
            this.o.saveStateInStorage.storeLastOpenedFolder) {
            this.storage
                .set('currentPath', this.state.currentPath)
                .set('currentSource', this.state.currentSource);
        }
        loadTree(this).catch(this.status);
    }, this.defaultTimeout))
        .on('beforeChange.activeElements', () => {
        state.activeElements.forEach(item => {
            const key = item.uniqueHashKey, { elm } = elmMap[key];
            elm &&
                elm.classList.remove(files.getFullElName('item', 'active', true));
        });
    })
        .on('change.activeElements', () => {
        this.e.fire('changeSelection');
        state.activeElements.forEach(item => {
            const key = item.uniqueHashKey, { elm } = elmMap[key];
            elm &&
                elm.classList.add(files.getFullElName('item', 'active', true));
        });
    })
        .on('change.view', () => {
        files.setMod('view', state.view);
        if (this.o.saveStateInStorage &&
            this.o.saveStateInStorage.storeView) {
            this.storage.set('view', state.view);
        }
    })
        .on('change.sortBy', () => {
        if (this.o.saveStateInStorage &&
            this.o.saveStateInStorage.storeSortBy) {
            this.storage.set('sortBy', state.sortBy);
        }
    })
        .on('change.elements', this.async.debounce(() => {
        dom/* Dom.detach */.i.detach(files.container);
        if (state.elements.length) {
            state.elements.forEach(item => {
                this.files.container.appendChild(getDomElement(item));
            });
        }
        else {
            files.container.appendChild(create.div(this.componentName + '_no-files_true', this.i18n('There are no files')));
        }
    }, this.defaultTimeout))
        .on('change.sources', this.async.debounce(() => {
        dom/* Dom.detach */.i.detach(this.tree.container);
        state.sources.forEach(source => {
            const sourceName = source.name;
            if (sourceName && sourceName !== DEFAULT_SOURCE_NAME) {
                this.tree.container.appendChild(create.div(this.tree.getFullElName('source-title'), sourceName));
            }
            source.folders.forEach((name) => {
                const folderElm = create.a(this.tree.getFullElName('item'), {
                    draggable: 'draggable',
                    href: '#',
                    'data-path': (0,normalize/* normalizePath */.AH)(source.path, name + '/'),
                    'data-name': name,
                    'data-source': sourceName,
                    'data-source-path': source.path
                }, create.span(this.tree.getFullElName('item-title'), name));
                const action = (actionName) => (e) => {
                    this.e.fire(`${actionName}.filebrowser`, {
                        name,
                        path: (0,normalize/* normalizePath */.AH)(source.path + '/'),
                        source: sourceName
                    });
                    e.stopPropagation();
                    e.preventDefault();
                };
                this.e.on(folderElm, 'click', action('openFolder'));
                this.tree.container.appendChild(folderElm);
                if (name === '..' || name === '.') {
                    return;
                }
                if (options.renameFolder &&
                    this.dataProvider.canI('FolderRename')) {
                    const btn = (0,ui/* Button */.zx)(this, {
                        icon: { name: 'pencil' },
                        name: 'rename',
                        tooltip: 'Rename',
                        size: 'tiny'
                    });
                    btn.onAction(action('renameFolder'));
                    folderElm.appendChild(btn.container);
                }
                if (options.deleteFolder &&
                    this.dataProvider.canI('FolderRemove')) {
                    const btn = (0,ui/* Button */.zx)(this, {
                        icon: { name: 'cancel' },
                        name: 'remove',
                        tooltip: 'Delete',
                        size: 'tiny'
                    });
                    btn.onAction(action('removeFolder'));
                    folderElm.appendChild(btn.container);
                }
            });
            if (options.createNewFolder &&
                this.dataProvider.canI('FolderCreate')) {
                const button = (0,ui/* Button */.zx)(this, 'plus', 'Add folder', 'secondary');
                button.onAction(() => {
                    this.e.fire('addFolder', {
                        path: (0,normalize/* normalizePath */.AH)(source.path + '/'),
                        source: sourceName
                    });
                });
                this.tree.append(button);
            }
        });
    }, this.defaultTimeout));
}

// EXTERNAL MODULE: ./src/modules/image-editor/image-editor.ts + 2 modules
var image_editor = __webpack_require__(21121);
;// CONCATENATED MODULE: ./src/modules/file-browser/fetch/delete-file.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
function deleteFile(fb, name, source) {
    return fb.dataProvider
        .fileRemove(fb.state.currentPath, name, source)
        .then(message => {
        fb.status(message || fb.i18n('File "%s" was deleted', name), true);
    })
        .catch(fb.status);
}

;// CONCATENATED MODULE: ./src/modules/file-browser/builders/context-menu.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */









const CLASS_PREVIEW = 'jodit-filebrowser-preview', preview_tpl_next = (next = 'next', right = 'right') => `<div class="${CLASS_PREVIEW}__navigation ${CLASS_PREVIEW}__navigation_arrow_${next}">` +
    '' +
    ui/* Icon.get */.JO.get('angle-' + right) +
    '</a>';
/* harmony default export */ var context_menu = ((self) => {
    if (!self.o.contextMenu) {
        return () => { };
    }
    const contextmenu = (0,factories/* makeContextMenu */.L)(self);
    return (e) => {
        const a = getItem(e.target, self.container);
        if (!a) {
            return;
        }
        let item = a;
        const opt = self.options, ga = (key) => (0,helpers.attr)(item, key) || '';
        self.async.setTimeout(() => {
            const selectedItem = elementToItem(a, elementsMap(self));
            if (!selectedItem) {
                return;
            }
            self.state.activeElements = [selectedItem];
            contextmenu.show(e.clientX, e.clientY, [
                ga('data-is-file') !== '1' &&
                    opt.editImage &&
                    (self.dataProvider.canI('ImageResize') ||
                        self.dataProvider.canI('ImageCrop'))
                    ? {
                        icon: 'pencil',
                        title: 'Edit',
                        exec: () => image_editor/* openImageEditor.call */.r.call(self, ga('href'), ga('data-name'), ga('data-path'), ga('data-source'))
                    }
                    : false,
                self.dataProvider.canI('FileRename')
                    ? {
                        icon: 'italic',
                        title: 'Rename',
                        exec: () => {
                            self.e.fire('fileRename.filebrowser', ga('data-name'), ga('data-path'), ga('data-source'));
                        }
                    }
                    : false,
                self.dataProvider.canI('FileRemove')
                    ? {
                        icon: 'bin',
                        title: 'Delete',
                        exec: async () => {
                            try {
                                await deleteFile(self, ga('data-name'), ga('data-source'));
                            }
                            catch (e) {
                                return self.status(e);
                            }
                            self.state.activeElements = [];
                            return loadTree(self).catch(self.status);
                        }
                    }
                    : false,
                opt.preview
                    ? {
                        icon: 'eye',
                        title: 'Preview',
                        exec: () => {
                            const preview = self.dlg({
                                buttons: ['fullsize', 'dialog.close']
                            }), temp_content = self.c.div(CLASS_PREVIEW, '<div class="jodit-icon_loader"></div>'), preview_box = self.c.div(CLASS_PREVIEW + '__box'), next = self.c.fromHTML(preview_tpl_next()), prev = self.c.fromHTML(preview_tpl_next('prev', 'left')), addLoadHandler = (src) => {
                                const image = self.c.element('img');
                                image.setAttribute('src', src);
                                const onload = () => {
                                    var _a;
                                    if (self.isInDestruct) {
                                        return;
                                    }
                                    self.e.off(image, 'load');
                                    dom/* Dom.detach */.i.detach(temp_content);
                                    if (opt.showPreviewNavigation) {
                                        if (dom/* Dom.prevWithClass */.i.prevWithClass(item, self.files.getFullElName('item'))) {
                                            temp_content.appendChild(prev);
                                        }
                                        if (dom/* Dom.nextWithClass */.i.nextWithClass(item, self.files.getFullElName('item'))) {
                                            temp_content.appendChild(next);
                                        }
                                    }
                                    temp_content.appendChild(preview_box);
                                    preview_box.appendChild(image);
                                    preview.setPosition();
                                    (_a = self === null || self === void 0 ? void 0 : self.events) === null || _a === void 0 ? void 0 : _a.fire('previewOpenedAndLoaded');
                                };
                                self.e.on(image, 'load', onload);
                                if (image.complete) {
                                    onload();
                                }
                            };
                            self.e.on([next, prev], 'click', function () {
                                if (this === next) {
                                    item = dom/* Dom.nextWithClass */.i.nextWithClass(item, self.files.getFullElName('item'));
                                }
                                else {
                                    item = dom/* Dom.prevWithClass */.i.prevWithClass(item, self.files.getFullElName('item'));
                                }
                                if (!item) {
                                    throw (0,helpers.error)('Need element');
                                }
                                dom/* Dom.detach */.i.detach(temp_content);
                                dom/* Dom.detach */.i.detach(preview_box);
                                temp_content.innerHTML =
                                    '<div class="jodit-icon_loader"></div>';
                                addLoadHandler(ga('href'));
                            });
                            self.e.on('beforeDestruct', () => {
                                preview.destruct();
                            });
                            preview.container.classList.add(CLASS_PREVIEW + '__dialog');
                            preview.setContent(temp_content);
                            preview.setPosition();
                            preview.open();
                            addLoadHandler(ga('href'));
                            self.events
                                .on('beforeDestruct', () => {
                                preview.destruct();
                            })
                                .fire('previewOpened');
                        }
                    }
                    : false,
                {
                    icon: 'upload',
                    title: 'Download',
                    exec: () => {
                        const url = ga('href');
                        if (url) {
                            self.ow.open(url);
                        }
                    }
                }
            ]);
        }, self.defaultTimeout);
        self.e
            .on('beforeClose', () => contextmenu.close())
            .on('beforeDestruct', () => contextmenu.destruct());
        e.stopPropagation();
        e.preventDefault();
        return false;
    };
});

;// CONCATENATED MODULE: ./src/modules/file-browser/listeners/native-listeners.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





const getItem = (node, root, tag = 'a') => dom/* Dom.closest */.i.closest(node, elm => dom/* Dom.isTag */.i.isTag(elm, tag), root);
const elementToItem = (elm, elementsMap) => {
    const { key } = elm.dataset, { item } = elementsMap[key || ''];
    return item;
};
function nativeListeners() {
    let dragElement = false;
    const elmMap = elementsMap(this);
    const self = this;
    self.e
        .on(self.tree.container, 'dragstart', (e) => {
        const a = getItem(e.target, self.container);
        if (!a) {
            return;
        }
        if (self.o.moveFolder) {
            dragElement = a;
        }
    })
        .on(self.tree.container, 'drop', (e) => {
        if ((self.o.moveFile || self.o.moveFolder) && dragElement) {
            let path = (0,helpers.attr)(dragElement, '-path') || '';
            if (!self.o.moveFolder &&
                dragElement.classList.contains(this.tree.getFullElName('item'))) {
                return false;
            }
            if (dragElement.classList.contains(this.files.getFullElName('item'))) {
                path += (0,helpers.attr)(dragElement, '-name');
                if (!self.o.moveFile) {
                    return false;
                }
            }
            const a = getItem(e.target, self.container);
            if (!a) {
                return;
            }
            self.dataProvider
                .move(path, (0,helpers.attr)(a, '-path') || '', (0,helpers.attr)(a, '-source') || '', dragElement.classList.contains(this.files.getFullElName('item')))
                .then(() => loadTree(this))
                .catch(self.status);
            dragElement = false;
        }
    })
        .on(self.files.container, 'contextmenu', context_menu(self))
        .on(self.files.container, 'click', (e) => {
        if (!(0,helpers.ctrlKey)(e)) {
            this.state.activeElements = [];
        }
    })
        .on(self.files.container, 'click', (e) => {
        const a = getItem(e.target, self.container);
        if (!a) {
            return;
        }
        const item = elementToItem(a, elmMap);
        if (!item) {
            return;
        }
        if (!(0,helpers.ctrlKey)(e)) {
            self.state.activeElements = [item];
        }
        else {
            self.state.activeElements = [
                ...self.state.activeElements,
                item
            ];
        }
        e.stopPropagation();
        return false;
    })
        .on(self.files.container, 'dragstart', (e) => {
        if (self.o.moveFile) {
            const a = getItem(e.target, self.container);
            if (!a) {
                return;
            }
            dragElement = a;
        }
    })
        .on(self.container, 'drop', (e) => e.preventDefault());
}

// EXTERNAL MODULE: ./src/core/helpers/checker/index.ts + 7 modules
var checker = __webpack_require__(99160);
// EXTERNAL MODULE: ./src/modules/file-browser/data-provider.ts
var data_provider = __webpack_require__(94079);
;// CONCATENATED MODULE: ./src/modules/file-browser/listeners/self-listeners.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







function selfListeners() {
    const state = this.state, dp = this.dataProvider, self = this;
    self.e
        .on('view.filebrowser', (view) => {
        if (view !== state.view) {
            state.view = view;
        }
    })
        .on('sort.filebrowser', (value) => {
        if (value !== state.sortBy) {
            state.sortBy = value;
            loadItems(self);
        }
    })
        .on('filter.filebrowser', (value) => {
        if (value !== state.filterWord) {
            state.filterWord = value;
            loadItems(self);
        }
    })
        .on('openFolder.filebrowser', (data) => {
        let path;
        if (data.name === '..') {
            path = data.path
                .split('/')
                .filter((p) => p.length)
                .slice(0, -1)
                .join('/');
        }
        else {
            path = (0,helpers.normalizePath)(data.path, data.name);
        }
        self.state.currentPath = path;
        self.state.currentSource =
            data.name === '.' ? data_provider/* DEFAULT_SOURCE_NAME */.J : data.source;
    })
        .on('removeFolder.filebrowser', (data) => {
        self.confirm('Are you sure?', 'Delete', (yes) => {
            if (yes) {
                dp.folderRemove(data.path, data.name, data.source)
                    .then(message => {
                    self.status(message, true);
                    return loadTree(self);
                })
                    .catch(self.status);
            }
        });
    })
        .on('renameFolder.filebrowser', (data) => {
        self.prompt('Enter new name', 'Rename', (newName) => {
            if (!(0,checker/* isValidName */.r1)(newName)) {
                self.status(self.i18n('Enter new name'));
                return false;
            }
            dp.folderRename(data.path, data.name, newName, data.source)
                .then(message => {
                self.state.activeElements = [];
                self.status(message, true);
                return loadTree(self);
            })
                .catch(self.status);
            return;
        }, 'type name', data.name);
    })
        .on('addFolder.filebrowser', (data) => {
        self.prompt('Enter Directory name', 'Create directory', (name) => {
            dp.createFolder(name, data.path, data.source)
                .then(() => loadTree(self))
                .catch(self.status);
        }, 'type name');
    })
        .on('fileRemove.filebrowser', () => {
        if (self.state.activeElements.length) {
            self.confirm('Are you sure?', '', (yes) => {
                if (yes) {
                    const promises = [];
                    self.state.activeElements.forEach(item => {
                        promises.push(deleteFile(self, item.file || item.name || '', item.sourceName));
                    });
                    self.state.activeElements = [];
                    Promise.all(promises).then(() => loadTree(self).catch(self.status), self.status);
                }
            });
        }
    })
        .on('edit.filebrowser', () => {
        if (self.state.activeElements.length === 1) {
            const [file] = this.state.activeElements;
            image_editor/* openImageEditor.call */.r.call(self, file.fileURL, file.file || '', file.path, file.sourceName);
        }
    })
        .on('fileRename.filebrowser', (name, path, source) => {
        if (self.state.activeElements.length === 1) {
            self.prompt('Enter new name', 'Rename', (newName) => {
                if (!(0,checker/* isValidName */.r1)(newName)) {
                    self.status(self.i18n('Enter new name'));
                    return false;
                }
                dp.fileRename(path, name, newName, source)
                    .then(message => {
                    self.state.activeElements = [];
                    self.status(message, true);
                    loadItems(self);
                })
                    .catch(self.status);
                return;
            }, 'type name', name);
        }
    })
        .on('update.filebrowser', () => {
        loadTree(this).then(this.status, this.status);
    });
}

// EXTERNAL MODULE: ./src/core/decorators/index.ts + 7 modules
var decorators = __webpack_require__(11169);
;// CONCATENATED MODULE: ./src/modules/file-browser/ui/files/files.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


class FileBrowserFiles extends ui/* UIGroup */.qe {
    className() {
        return 'FilebrowserFiles';
    }
}

;// CONCATENATED MODULE: ./src/modules/file-browser/ui/tree/tree.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


class FileBrowserTree extends ui/* UIGroup */.qe {
    className() {
        return 'FilebrowserTree';
    }
}

;// CONCATENATED MODULE: ./src/modules/file-browser/ui/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



// EXTERNAL MODULE: ./src/core/event-emitter/index.ts + 2 modules
var event_emitter = __webpack_require__(39266);
// EXTERNAL MODULE: ./src/core/component/index.ts + 1 modules
var component = __webpack_require__(26655);
// EXTERNAL MODULE: ./src/core/traits/index.ts + 3 modules
var traits = __webpack_require__(34821);
// EXTERNAL MODULE: ./src/core/view/view-with-toolbar.ts
var view_with_toolbar = __webpack_require__(62322);
// EXTERNAL MODULE: ./src/core/ui/form/inputs/file/file.ts
var file = __webpack_require__(65841);
// EXTERNAL MODULE: ./src/core/helpers/utils/human-size-to-bytes.ts
var human_size_to_bytes = __webpack_require__(52169);
;// CONCATENATED MODULE: ./src/modules/file-browser/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




config/* Config.prototype.filebrowser */.D.prototype.filebrowser = {
    namespace: '',
    extraButtons: [],
    filter(item, search) {
        search = search.toLowerCase();
        if ((0,checker/* isString */.HD)(item)) {
            return item.toLowerCase().indexOf(search) !== -1;
        }
        if ((0,checker/* isString */.HD)(item.name)) {
            return item.name.toLowerCase().indexOf(search) !== -1;
        }
        if ((0,checker/* isString */.HD)(item.file)) {
            return item.file.toLowerCase().indexOf(search) !== -1;
        }
        return true;
    },
    sortBy: 'changed-desc',
    sort(a, b, sortBy) {
        const [sortAttr, arrow] = sortBy.toLowerCase().split('-'), asc = arrow === 'asc';
        const compareStr = (f, s) => {
            if (f < s) {
                return asc ? -1 : 1;
            }
            if (f > s) {
                return asc ? 1 : -1;
            }
            return 0;
        };
        if ((0,checker/* isString */.HD)(a)) {
            return compareStr(a.toLowerCase(), b.toLowerCase());
        }
        if (a[sortAttr] === undefined || sortAttr === 'name') {
            if ((0,checker/* isString */.HD)(a.name)) {
                return compareStr(a.name.toLowerCase(), b.name.toLowerCase());
            }
            if ((0,checker/* isString */.HD)(a.file)) {
                return compareStr(a.file.toLowerCase(), b.file.toLowerCase());
            }
            return 0;
        }
        switch (sortAttr) {
            case 'changed': {
                const f = new Date(a.changed).getTime(), s = new Date(b.changed).getTime();
                return asc ? f - s : s - f;
            }
            case 'size': {
                const f = (0,human_size_to_bytes/* humanSizeToBytes */.w)(a.size), s = (0,human_size_to_bytes/* humanSizeToBytes */.w)(b.size);
                return asc ? f - s : s - f;
            }
        }
        return 0;
    },
    editImage: true,
    preview: true,
    showPreviewNavigation: true,
    showSelectButtonInPreview: true,
    contextMenu: true,
    howLongShowMsg: 3000,
    createNewFolder: true,
    deleteFolder: true,
    renameFolder: true,
    moveFolder: true,
    moveFile: true,
    showFoldersPanel: true,
    storeLastOpenedFolder: true,
    width: 859,
    height: 400,
    buttons: [
        'filebrowser.upload',
        'filebrowser.remove',
        'filebrowser.update',
        'filebrowser.select',
        'filebrowser.edit',
        '|',
        'filebrowser.tiles',
        'filebrowser.list',
        '|',
        'filebrowser.filter',
        '|',
        'filebrowser.sort'
    ],
    removeButtons: [],
    fullsize: false,
    showTooltip: true,
    view: null,
    isSuccess(resp) {
        return resp.success;
    },
    getMessage(resp) {
        return resp.data.messages !== undefined && (0,checker/* isArray */.kJ)(resp.data.messages)
            ? resp.data.messages.join(' ')
            : '';
    },
    showFileName: true,
    showFileSize: true,
    showFileChangeTime: true,
    saveStateInStorage: {
        storeLastOpenedFolder: true,
        storeView: true,
        storeSortBy: true
    },
    pixelOffsetLoadNewChunk: 200,
    getThumbTemplate(item, source, source_name) {
        const opt = this.options, IC = this.files.getFullElName('item'), showName = opt.showFileName, showSize = opt.showFileSize && item.size, showTime = opt.showFileChangeTime && item.time;
        let name = '';
        if (item.file !== undefined) {
            name = item.file;
        }
        const info = `<div class="${IC}-info">${showName ? `<span class="${IC}-info-filename">${name}</span>` : ''}${showSize
            ? `<span class="${IC}-info-filesize">${item.size}</span>`
            : ''}${showTime
            ? `<span class="${IC}-info-filechanged">${showTime}</span>`
            : ''}</div>`;
        return `<a
			data-jodit-filebrowser-item="true"
			data-is-file="${item.isImage ? 0 : 1}"
			draggable="true"
			class="${IC}"
			href="${item.fileURL}"
			data-source="${source_name}"
			data-path="${item.path}"
			data-name="${name}"
			title="${name}"
			data-url="${item.fileURL}">
				<img
					data-is-file="${item.isImage ? 0 : 1}"
					data-src="${item.fileURL}"
					src="${item.imageURL}"
					alt="${name}"
					loading="lazy"
				/>
				${showName || showSize || showTime ? info : ''}
			</a>`;
    },
    ajax: {
        ...config/* Config.prototype.defaultAjaxOptions */.D.prototype.defaultAjaxOptions,
        url: '',
        async: true,
        data: {},
        cache: true,
        contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
        method: 'POST',
        processData: true,
        dataType: 'json',
        headers: {},
        prepareData(data) {
            return data;
        },
        process(resp) {
            return resp;
        }
    },
    create: {
        data: { action: 'folderCreate' }
    },
    getLocalFileByUrl: {
        data: { action: 'getLocalFileByUrl' }
    },
    resize: {
        data: { action: 'imageResize' }
    },
    crop: {
        data: { action: 'imageCrop' }
    },
    fileMove: {
        data: { action: 'fileMove' }
    },
    folderMove: {
        data: { action: 'folderMove' }
    },
    fileRename: {
        data: { action: 'fileRename' }
    },
    folderRename: {
        data: { action: 'folderRename' }
    },
    fileRemove: {
        data: { action: 'fileRemove' }
    },
    folderRemove: {
        data: { action: 'folderRemove' }
    },
    items: {
        data: { action: 'files' }
    },
    folder: {
        data: { action: 'folders' }
    },
    permissions: {
        data: { action: 'permissions' }
    }
};
config/* Config.prototype.controls.filebrowser */.D.prototype.controls.filebrowser = {
    upload: {
        icon: 'plus',
        isInput: true,
        isDisabled: (browser) => !browser.dataProvider.canI('FileUpload'),
        getContent: (filebrowser) => {
            const btn = new file/* UIFileInput */.Z(filebrowser, {
                onlyImages: filebrowser.state.onlyImages
            });
            filebrowser.e.fire('bindUploader.filebrowser', btn.container);
            return btn.container;
        }
    },
    remove: {
        icon: 'bin',
        isDisabled: (browser) => {
            return (!browser.state.activeElements.length ||
                !browser.dataProvider.canI('FileRemove'));
        },
        exec: (editor) => {
            editor.e.fire('fileRemove.filebrowser');
        }
    },
    update: {
        exec: (editor) => {
            editor.e.fire('update.filebrowser');
        }
    },
    select: {
        icon: 'check',
        isDisabled: (browser) => !browser.state.activeElements.length,
        exec: (editor) => {
            editor.e.fire('select.filebrowser');
        }
    },
    edit: {
        icon: 'pencil',
        isDisabled: (browser) => {
            const selected = browser.state.activeElements;
            return (selected.length !== 1 ||
                !selected[0].isImage ||
                !(browser.dataProvider.canI('ImageCrop') ||
                    browser.dataProvider.canI('ImageResize')));
        },
        exec: editor => {
            editor.e.fire('edit.filebrowser');
        }
    },
    tiles: {
        icon: 'th',
        isActive: (filebrowser) => filebrowser.state.view === 'tiles',
        exec: (filebrowser) => {
            filebrowser.e.fire('view.filebrowser', 'tiles');
        }
    },
    list: {
        icon: 'th-list',
        isActive: (filebrowser) => filebrowser.state.view === 'list',
        exec: (filebrowser) => {
            filebrowser.e.fire('view.filebrowser', 'list');
        }
    },
    filter: {
        isInput: true,
        getContent: (filebrowser, _, b) => {
            const oldInput = b.container.querySelector('.jodit-input');
            if (oldInput) {
                return oldInput;
            }
            const input = filebrowser.c.element('input', {
                class: 'jodit-input',
                placeholder: filebrowser.i18n('Filter')
            });
            input.value = filebrowser.state.filterWord;
            filebrowser.e.on(input, 'keydown mousedown', filebrowser.async.debounce(() => {
                filebrowser.e.fire('filter.filebrowser', input.value);
            }, filebrowser.defaultTimeout));
            return input;
        }
    },
    sort: {
        isInput: true,
        getContent: (fb) => {
            const select = fb.c.fromHTML('<select class="jodit-input jodit-select">' +
                `<option value="changed-asc">${fb.i18n('Sort by changed')} (â¬)</option>` +
                `<option value="changed-desc">${fb.i18n('Sort by changed')} (â¬)</option>` +
                `<option value="name-asc">${fb.i18n('Sort by name')} (â¬)</option>` +
                `<option value="name-desc">${fb.i18n('Sort by name')} (â¬)</option>` +
                `<option value="size-asc">${fb.i18n('Sort by size')} (â¬)</option>` +
                `<option value="size-desc">${fb.i18n('Sort by size')} (â¬)</option>` +
                '</select>');
            select.value = fb.state.sortBy;
            fb.e
                .on('sort.filebrowser', (value) => {
                if (select.value !== value) {
                    select.value = value;
                }
            })
                .on(select, 'change', () => {
                fb.e.fire('sort.filebrowser', select.value);
            });
            return select;
        }
    }
};

;// CONCATENATED MODULE: ./src/modules/file-browser/file-browser.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





















let FileBrowser = class FileBrowser extends view_with_toolbar/* ViewWithToolbar */.C {
    constructor(options) {
        var _a;
        super(options);
        this.browser = this.c.div(this.componentName);
        this.status_line = this.c.div(this.getFullElName('status'));
        this.tree = new FileBrowserTree(this);
        this.files = new FileBrowserFiles(this);
        this.state = (0,event_emitter/* observable */.LO)({
            currentPath: '',
            currentSource: data_provider/* DEFAULT_SOURCE_NAME */.J,
            currentBaseUrl: '',
            activeElements: [],
            elements: [],
            messages: [],
            sources: [],
            view: 'tiles',
            sortBy: 'changed-desc',
            filterWord: '',
            onlyImages: false
        });
        this.errorHandler = (resp) => {
            if ((0,helpers.isAbort)(resp)) {
                return;
            }
            if (resp instanceof Error) {
                this.status(this.i18n(resp.message));
            }
            else {
                this.status(this.dataProvider.getMessage(resp));
            }
        };
        this.close = () => {
            this._dialog.close();
        };
        this.attachEvents(options);
        const self = this;
        self.options = (0,helpers.ConfigProto)(options || {}, config/* Config.defaultOptions.filebrowser */.D.defaultOptions.filebrowser);
        self.storage = storage/* Storage.makeStorage */.Ke.makeStorage(Boolean(this.o.saveStateInStorage), this.componentName);
        self.dataProvider = (0,factories/* makeDataProvider */.S)(self, self.options);
        self._dialog = this.dlg({
            minWidth: Math.min(700, screen.width),
            minHeight: 300,
            buttons: (_a = this.o.headerButtons) !== null && _a !== void 0 ? _a : ['fullsize', 'dialog.close']
        });
        this.proxyDialogEvents(self);
        self.browser.component = this;
        self.container = self.browser;
        if (self.o.showFoldersPanel) {
            self.browser.appendChild(self.tree.container);
        }
        self.browser.appendChild(self.files.container);
        self.browser.appendChild(self.status_line);
        selfListeners.call(self);
        nativeListeners.call(self);
        stateListeners.call(self);
        self._dialog.setSize(self.o.width, self.o.height);
        const keys = [
            'getLocalFileByUrl',
            'crop',
            'resize',
            'create',
            'fileMove',
            'folderMove',
            'fileRename',
            'folderRename',
            'fileRemove',
            'folderRemove',
            'folder',
            'items',
            'permissions'
        ];
        keys.forEach(key => {
            if (this.options[key] != null) {
                this.options[key] = (0,helpers.ConfigProto)(this.options[key], this.o.ajax);
            }
        });
        const { storeView, storeSortBy, storeLastOpenedFolder } = this.o
            .saveStateInStorage || {
            storeLastOpenedFolder: false,
            storeView: false,
            storeSortBy: false
        };
        const view = storeView && this.storage.get('view');
        if (view && this.o.view == null) {
            self.state.view = view === 'list' ? 'list' : 'tiles';
        }
        else {
            self.state.view = self.o.view === 'list' ? 'list' : 'tiles';
        }
        self.files.setMod('view', self.state.view);
        const sortBy = storeSortBy && self.storage.get('sortBy');
        if (sortBy) {
            const parts = sortBy.split('-');
            self.state.sortBy = ['changed', 'name', 'size'].includes(parts[0])
                ? sortBy
                : 'changed-desc';
        }
        else {
            self.state.sortBy = self.o.sortBy || 'changed-desc';
        }
        if (storeLastOpenedFolder) {
            const currentPath = self.storage.get('currentPath'), currentSource = self.storage.get('currentSource');
            self.state.currentPath = currentPath !== null && currentPath !== void 0 ? currentPath : '';
            self.state.currentSource = currentSource !== null && currentSource !== void 0 ? currentSource : '';
        }
        self.initUploader(self);
        self.setStatus(component/* STATUSES.ready */.n$.ready);
    }
    className() {
        return 'Filebrowser';
    }
    onSelect(callback) {
        return () => {
            if (this.state.activeElements.length) {
                const files = [];
                const isImages = [];
                this.state.activeElements.forEach(elm => {
                    const url = elm.fileURL;
                    if (url) {
                        files.push(url);
                        isImages.push(elm.isImage || false);
                    }
                });
                this.close();
                const data = {
                    baseurl: '',
                    files,
                    isImages
                };
                if ((0,helpers.isFunction)(callback)) {
                    callback(data);
                }
                this.close();
            }
            return false;
        };
    }
    get isOpened() {
        return this._dialog.isOpened && this.browser.style.display !== 'none';
    }
    status(message, success) {
        if (!message || (0,helpers.isAbort)(message)) {
            return;
        }
        if (!(0,helpers.isString)(message)) {
            message = message.message;
        }
        if (!(0,helpers.isString)(message) || !(0,helpers.trim)(message).length) {
            return;
        }
        this.message.message(message, success ? 'success' : 'error', this.o.howLongShowMsg);
    }
    open(callback = this.o
        .defaultCallback, onlyImages = false) {
        this.state.onlyImages = onlyImages;
        return this.async.promise((resolve, reject) => {
            var _a;
            if (!this.o.items || !this.o.items.url) {
                throw (0,helpers.error)('Need set options.filebrowser.ajax.url');
            }
            let localTimeout = 0;
            this.e
                .off(this.files.container, 'dblclick')
                .on(this.files.container, 'dblclick', this.onSelect(callback))
                .on(this.files.container, 'touchstart', () => {
                const now = new Date().getTime();
                if (now - localTimeout < constants.EMULATE_DBLCLICK_TIMEOUT) {
                    this.onSelect(callback)();
                }
                localTimeout = now;
            })
                .off('select.filebrowser')
                .on('select.filebrowser', this.onSelect(callback));
            const header = this.c.div();
            this.toolbar.build((_a = this.o.buttons) !== null && _a !== void 0 ? _a : []).appendTo(header);
            this._dialog.open(this.browser, header);
            this.e.fire('sort.filebrowser', this.state.sortBy);
            loadTree(this).then(resolve, reject);
        });
    }
    initUploader(editor) {
        var _a;
        const self = this, options = (_a = editor === null || editor === void 0 ? void 0 : editor.options) === null || _a === void 0 ? void 0 : _a.uploader, uploaderOptions = (0,helpers.ConfigProto)(options || {}, config/* Config.defaultOptions.uploader */.D.defaultOptions.uploader);
        const uploadHandler = () => loadItems(this);
        self.uploader = self.getInstance('Uploader', uploaderOptions);
        self.uploader
            .setPath(self.state.currentPath)
            .setSource(self.state.currentSource)
            .bind(self.browser, uploadHandler, self.errorHandler);
        this.state.on(['change.currentPath', 'change.currentSource'], () => {
            this.uploader
                .setPath(this.state.currentPath)
                .setSource(this.state.currentSource);
        });
        self.e.on('bindUploader.filebrowser', (button) => {
            self.uploader.bind(button, uploadHandler, self.errorHandler);
        });
    }
    proxyDialogEvents(self) {
        ['afterClose', 'beforeOpen'].forEach(proxyEvent => {
            self._dialog.events.on(self.dlg, proxyEvent, () => {
                this.e.fire(proxyEvent);
            });
        });
    }
    destruct() {
        if (this.isInDestruct) {
            return;
        }
        super.destruct();
        this._dialog.destruct();
        this.events && this.e.off('.filebrowser');
        this.uploader && this.uploader.destruct();
    }
};
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], FileBrowser.prototype, "status", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], FileBrowser.prototype, "open", null);
FileBrowser = (0,tslib_es6/* __decorate */.gn)([
    (0,decorators.derive)(traits/* Dlgs */.lf)
], FileBrowser);

function isFileBrowserFilesItem(target) {
    return (dom/* Dom.isElement */.i.isElement(target) &&
        target.classList.contains(FileBrowserFiles.prototype.getFullElName('item')));
}

;// CONCATENATED MODULE: ./src/modules/file-browser/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



/***/ }),

/***/ 21121:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "v": function() { return /* binding */ ImageEditor; },
  "r": function() { return /* binding */ openImageEditor; }
});

// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(20255);
// EXTERNAL MODULE: ./src/config.ts
var config = __webpack_require__(27537);
// EXTERNAL MODULE: ./src/core/component/index.ts + 1 modules
var component = __webpack_require__(26655);
// EXTERNAL MODULE: ./src/core/helpers/index.ts + 14 modules
var helpers = __webpack_require__(52607);
// EXTERNAL MODULE: ./src/core/dom/index.ts
var dom = __webpack_require__(94522);
// EXTERNAL MODULE: ./src/core/ui/button/index.ts + 2 modules
var ui_button = __webpack_require__(17460);
// EXTERNAL MODULE: ./src/core/ui/index.ts + 2 modules
var ui = __webpack_require__(41685);
;// CONCATENATED MODULE: ./src/modules/image-editor/templates/form.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

const jie = 'jodit-image-editor';
const gi = ui/* Icon.get.bind */.JO.get.bind(ui/* Icon */.JO);
const act = (el, className = 'jodti-image-editor_active') => el ? className : '';
const form_form = (editor, o) => {
    const i = editor.i18n.bind(editor);
    const switcher = (label, ref, active = true) => `<div class="jodit-form__group">
			<label>${i(label)}</label>

			<label class='jodit-switcher'>
				<input ${act(active, 'checked')} data-ref="${ref}" type="checkbox"/>
				<span class="jodit-switcher__slider"></span>
			</label>
	</div>`;
    return editor.create.fromHTML(`<form class="${jie} jodit-properties">
		<div class="jodit-grid jodit-grid_xs-column">
			<div class="jodit_col-lg-3-4 jodit_col-sm-5-5">
			${o.resize
        ? `<div class="${jie}__area ${jie}__area_resize ${jie}_active">
							<div data-ref="resizeBox" class="${jie}__box"></div>
							<div class="${jie}__resizer">
								<i class="jodit_bottomright"></i>
							</div>
						</div>`
        : ''}
			${o.crop
        ? `<div class="${jie}__area ${jie}__area_crop ${act(!o.resize)}">
							<div data-ref="cropBox" class="${jie}__box">
								<div class="${jie}__croper">
									<i class="jodit_bottomright"></i>
									<i class="${jie}__sizes"></i>
								</div>
							</div>
						</div>`
        : ''}
			</div>
			<div class="jodit_col-lg-1-4 jodit_col-sm-5-5">
			${o.resize
        ? `<div data-area="resize" class="${jie}__slider ${jie}_active">
							<div class="${jie}__slider-title">
								${gi('resize')}
								${i('Resize')}
							</div>
							<div class="${jie}__slider-content">
								<div class="jodit-form__group">
									<label>
										${i('Width')}
									</label>
									<input type="number" data-ref="widthInput" class="jodit-input"/>
								</div>
								<div class="jodit-form__group">
									<label>
										${i('Height')}
									</label>
									<input type="number" data-ref="heightInput" class="jodit-input"/>
								</div>
								${switcher('Keep Aspect Ratio', 'keepAspectRatioResize')}
							</div>
						</div>`
        : ''}
			${o.crop
        ? `<div data-area="crop" class="${jie}__slider ${act(!o.resize)}'">
							<div class="${jie}__slider-title">
								${gi('crop')}
								${i('Crop')}
							</div>
							<div class="${jie}__slider-content">
								${switcher('Keep Aspect Ratio', 'keepAspectRatioCrop')}
							</div>
						</div>`
        : ''}
			</div>
		</div>
	</form>`);
};

// EXTERNAL MODULE: ./src/core/decorators/index.ts + 7 modules
var decorators = __webpack_require__(11169);
// EXTERNAL MODULE: ./src/core/ui/icon.ts
var icon = __webpack_require__(76381);
;// CONCATENATED MODULE: ./src/modules/image-editor/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


config/* Config.prototype.imageeditor */.D.prototype.imageeditor = {
    min_width: 20,
    min_height: 20,
    closeAfterSave: false,
    width: '85%',
    height: '85%',
    crop: true,
    resize: true,
    resizeUseRatio: true,
    resizeMinWidth: 20,
    resizeMinHeight: 20,
    cropUseRatio: true,
    cropDefaultWidth: '70%',
    cropDefaultHeight: '70%'
};
icon/* Icon.set */.J.set('crop', __webpack_require__(3610)).set('resize', __webpack_require__(56170));

;// CONCATENATED MODULE: ./src/modules/image-editor/image-editor.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
var ImageEditor_1;










const image_editor_jie = 'jodit-image-editor';
const TABS = {
    resize: 'resize',
    crop: 'crop'
};
let ImageEditor = ImageEditor_1 = class ImageEditor extends component/* ViewComponent */.Hr {
    constructor(editor) {
        super(editor);
        this.resizeUseRatio = true;
        this.cropUseRatio = true;
        this.clicked = false;
        this.start_x = 0;
        this.start_y = 0;
        this.top_x = 0;
        this.top_y = 0;
        this.width = 0;
        this.height = 0;
        this.activeTab = TABS.resize;
        this.naturalWidth = 0;
        this.naturalHeight = 0;
        this.ratio = 0;
        this.new_h = 0;
        this.new_w = 0;
        this.diff_x = 0;
        this.diff_y = 0;
        this.cropBox = {
            x: 0,
            y: 0,
            w: 0,
            h: 0
        };
        this.resizeBox = {
            w: 0,
            h: 0
        };
        this.calcCropBox = () => {
            const node = this.crop_box.parentNode, w = node.offsetWidth * 0.8, h = node.offsetHeight * 0.8;
            let wn = w, hn = h;
            const { naturalWidth: nw, naturalHeight: nh } = this;
            if (w > nw && h > nh) {
                wn = nw;
                hn = nh;
            }
            else if (this.ratio > w / h) {
                wn = w;
                hn = nh * (w / nw);
            }
            else {
                wn = nw * (h / nh);
                hn = h;
            }
            (0,helpers.css)(this.crop_box, {
                width: wn,
                height: hn
            });
        };
        this.showCrop = () => {
            if (!this.cropImage) {
                return;
            }
            this.calcCropBox();
            const w = this.cropImage.offsetWidth ||
                this.image.offsetWidth ||
                this.image.naturalWidth;
            this.new_w = ImageEditor_1.calcValueByPercent(w, this.o.cropDefaultWidth);
            const h = this.cropImage.offsetHeight ||
                this.image.offsetHeight ||
                this.image.naturalHeight;
            if (this.cropUseRatio) {
                this.new_h = this.new_w / this.ratio;
            }
            else {
                this.new_h = ImageEditor_1.calcValueByPercent(h, this.o.cropDefaultHeight);
            }
            (0,helpers.css)(this.cropHandler, {
                backgroundImage: 'url(' + (0,helpers.attr)(this.cropImage, 'src') + ')',
                width: this.new_w,
                height: this.new_h,
                left: w / 2 - this.new_w / 2,
                top: h / 2 - this.new_h / 2
            });
            this.j.e.fire(this.cropHandler, 'updatesize');
        };
        this.updateCropBox = () => {
            if (!this.cropImage) {
                return;
            }
            const ratioX = this.cropImage.offsetWidth / this.naturalWidth, ratioY = this.cropImage.offsetHeight / this.naturalHeight;
            this.cropBox.x = (0,helpers.css)(this.cropHandler, 'left') / ratioX;
            this.cropBox.y = (0,helpers.css)(this.cropHandler, 'top') / ratioY;
            this.cropBox.w = this.cropHandler.offsetWidth / ratioX;
            this.cropBox.h = this.cropHandler.offsetHeight / ratioY;
            this.sizes.textContent =
                this.cropBox.w.toFixed(0) + 'x' + this.cropBox.h.toFixed(0);
        };
        this.updateResizeBox = () => {
            this.resizeBox.w = this.image.offsetWidth || this.naturalWidth;
            this.resizeBox.h = this.image.offsetHeight || this.naturalHeight;
        };
        this.setHandlers = () => {
            const self = this;
            const { widthInput, heightInput } = (0,helpers.refs)(this.editor);
            self.j.e
                .on([
                self.editor.querySelector('.jodit_bottomright'),
                self.cropHandler
            ], `mousedown.${image_editor_jie}`, this.onResizeHandleMouseDown)
                .on(this.j.ow, `resize.${image_editor_jie}`, () => {
                this.j.e.fire(self.resizeHandler, 'updatesize');
                self.showCrop();
                this.j.e.fire(self.cropHandler, 'updatesize');
            });
            self.j.e
                .on((0,helpers.toArray)(this.editor.querySelectorAll(`.${image_editor_jie}__slider-title`)), 'click', this.onTitleModeClick)
                .on([widthInput, heightInput], 'input', this.onChangeSizeInput);
            const { keepAspectRatioResize, keepAspectRatioCrop } = (0,helpers.refs)(this.editor);
            if (keepAspectRatioResize) {
                keepAspectRatioResize.addEventListener('change', () => {
                    this.resizeUseRatio = keepAspectRatioResize.checked;
                });
            }
            if (keepAspectRatioCrop) {
                keepAspectRatioCrop.addEventListener('change', () => {
                    this.cropUseRatio = keepAspectRatioCrop.checked;
                });
            }
            self.j.e
                .on(self.resizeHandler, 'updatesize', () => {
                (0,helpers.css)(self.resizeHandler, {
                    top: 0,
                    left: 0,
                    width: self.image.offsetWidth || self.naturalWidth,
                    height: self.image.offsetHeight || self.naturalHeight
                });
                this.updateResizeBox();
            })
                .on(self.cropHandler, 'updatesize', () => {
                if (!self.cropImage) {
                    return;
                }
                let new_x = (0,helpers.css)(self.cropHandler, 'left'), new_y = (0,helpers.css)(self.cropHandler, 'top'), new_width = self.cropHandler.offsetWidth, new_height = self.cropHandler.offsetHeight;
                if (new_x < 0) {
                    new_x = 0;
                }
                if (new_y < 0) {
                    new_y = 0;
                }
                if (new_x + new_width > self.cropImage.offsetWidth) {
                    new_width = self.cropImage.offsetWidth - new_x;
                    if (self.cropUseRatio) {
                        new_height = new_width / self.ratio;
                    }
                }
                if (new_y + new_height > self.cropImage.offsetHeight) {
                    new_height = self.cropImage.offsetHeight - new_y;
                    if (self.cropUseRatio) {
                        new_width = new_height * self.ratio;
                    }
                }
                (0,helpers.css)(self.cropHandler, {
                    width: new_width,
                    height: new_height,
                    left: new_x,
                    top: new_y,
                    backgroundPosition: -new_x - 1 + 'px ' + (-new_y - 1) + 'px',
                    backgroundSize: self.cropImage.offsetWidth +
                        'px ' +
                        self.cropImage.offsetHeight +
                        'px'
                });
                self.updateCropBox();
            });
            Object.values(self.buttons).forEach(button => {
                button.onAction(() => {
                    const data = {
                        action: self.activeTab,
                        box: self.activeTab === TABS.resize
                            ? self.resizeBox
                            : self.cropBox
                    };
                    switch (button) {
                        case self.buttons.saveas:
                            self.j.prompt('Enter new name', 'Save in new file', (name) => {
                                if (!(0,helpers.trim)(name)) {
                                    self.j.alert('The name should not be empty');
                                    return false;
                                }
                                self.onSave(name, data, self.hide, (e) => {
                                    self.j.alert(e.message);
                                });
                            });
                            break;
                        case self.buttons.save:
                            self.onSave(undefined, data, self.hide, (e) => {
                                self.j.alert(e.message);
                            });
                            break;
                        case self.buttons.reset:
                            if (self.activeTab === TABS.resize) {
                                (0,helpers.css)(self.image, {
                                    width: null,
                                    height: null
                                });
                                widthInput.value = self.naturalWidth.toString();
                                heightInput.value = self.naturalHeight.toString();
                                self.j.e.fire(self.resizeHandler, 'updatesize');
                            }
                            else {
                                self.showCrop();
                            }
                            break;
                    }
                });
            });
        };
        this.options =
            editor && editor.o && editor.o.imageeditor
                ? editor.o.imageeditor
                : config/* Config.defaultOptions.imageeditor */.D.defaultOptions.imageeditor;
        const o = this.options;
        this.resizeUseRatio = o.resizeUseRatio;
        this.cropUseRatio = o.cropUseRatio;
        this.buttons = {
            reset: (0,ui_button/* Button */.zx)(this.j, 'update', 'Reset'),
            save: (0,ui_button/* Button */.zx)(this.j, 'save', 'Save'),
            saveas: (0,ui_button/* Button */.zx)(this.j, 'save', 'Save as ...')
        };
        this.activeTab = o.resize ? TABS.resize : TABS.crop;
        this.editor = form_form(this.j, this.options);
        const { resizeBox, cropBox } = (0,helpers.refs)(this.editor);
        this.resize_box = resizeBox;
        this.crop_box = cropBox;
        this.sizes = this.editor.querySelector(`.${image_editor_jie}__area.${image_editor_jie}__area_crop .jodit-image-editor__sizes`);
        this.resizeHandler = this.editor.querySelector(`.${image_editor_jie}__resizer`);
        this.cropHandler = this.editor.querySelector(`.${image_editor_jie}__croper`);
        this._dialog = this.j.dlg({
            buttons: ['fullsize', 'dialog.close']
        });
        this._dialog.setContent(this.editor);
        this._dialog.setSize(this.o.width, this.o.height);
        this._dialog.setHeader([
            this.buttons.reset,
            this.buttons.save,
            this.buttons.saveas
        ]);
        this.setHandlers();
    }
    className() {
        return 'ImageEditor';
    }
    onTitleModeClick(e) {
        const self = this, title = e.target;
        const slide = title === null || title === void 0 ? void 0 : title.parentElement;
        if (!slide) {
            return;
        }
        (0,helpers.$$)(`.${image_editor_jie}__slider,.${image_editor_jie}__area`, self.editor).forEach(elm => elm.classList.remove(`${image_editor_jie}_active`));
        slide.classList.add(`${image_editor_jie}_active`);
        this.activeTab = (0,helpers.attr)(slide, '-area') || TABS.resize;
        const tab = self.editor.querySelector(`.${image_editor_jie}__area.${image_editor_jie}__area_` + self.activeTab);
        if (tab) {
            tab.classList.add(`${image_editor_jie}_active`);
        }
        if (self.activeTab === TABS.crop) {
            self.showCrop();
        }
    }
    onChangeSizeInput(e) {
        const self = this, input = e.target, { widthInput, heightInput } = (0,helpers.refs)(this.editor), isWidth = (0,helpers.attr)(input, 'data-ref') === 'widthInput', x = parseInt(input.value, 10), minX = isWidth ? self.o.min_width : self.o.min_height, minY = !isWidth ? self.o.min_width : self.o.min_height;
        let y;
        if (x > minX) {
            (0,helpers.css)(self.image, isWidth ? 'width' : 'height', x);
            if (self.resizeUseRatio) {
                y = isWidth
                    ? Math.round(x / self.ratio)
                    : Math.round(x * self.ratio);
                if (y > minY) {
                    (0,helpers.css)(self.image, !isWidth ? 'width' : 'height', y);
                    if (isWidth) {
                        heightInput.value = y.toString();
                    }
                    else {
                        widthInput.value = y.toString();
                    }
                }
            }
        }
        this.j.e.fire(self.resizeHandler, 'updatesize');
    }
    onResizeHandleMouseDown(e) {
        const self = this;
        self.target = e.target;
        e.preventDefault();
        e.stopImmediatePropagation();
        self.clicked = true;
        self.start_x = e.clientX;
        self.start_y = e.clientY;
        if (self.activeTab === TABS.crop) {
            self.top_x = (0,helpers.css)(self.cropHandler, 'left');
            self.top_y = (0,helpers.css)(self.cropHandler, 'top');
            self.width = self.cropHandler.offsetWidth;
            self.height = self.cropHandler.offsetHeight;
        }
        else {
            self.width = self.image.offsetWidth;
            self.height = self.image.offsetHeight;
        }
        self.j.e
            .on(this.j.ow, 'mousemove', this.onGlobalMouseMove)
            .one(this.j.ow, 'mouseup', this.onGlobalMouseUp);
    }
    onGlobalMouseUp(e) {
        if (this.clicked) {
            this.clicked = false;
            e.stopImmediatePropagation();
            this.j.e.off(this.j.ow, 'mousemove', this.onGlobalMouseMove);
        }
    }
    onGlobalMouseMove(e) {
        const self = this;
        if (!self.clicked) {
            return;
        }
        const { widthInput, heightInput } = (0,helpers.refs)(this.editor);
        self.diff_x = e.clientX - self.start_x;
        self.diff_y = e.clientY - self.start_y;
        if ((self.activeTab === TABS.resize && self.resizeUseRatio) ||
            (self.activeTab === TABS.crop && self.cropUseRatio)) {
            if (self.diff_x) {
                self.new_w = self.width + self.diff_x;
                self.new_h = Math.round(self.new_w / self.ratio);
            }
            else {
                self.new_h = self.height + self.diff_y;
                self.new_w = Math.round(self.new_h * self.ratio);
            }
        }
        else {
            self.new_w = self.width + self.diff_x;
            self.new_h = self.height + self.diff_y;
        }
        if (self.activeTab === TABS.resize) {
            if (self.new_w > self.o.resizeMinWidth) {
                (0,helpers.css)(self.image, 'width', self.new_w + 'px');
                widthInput.value = self.new_w.toString();
            }
            if (self.new_h > self.o.resizeMinHeight) {
                (0,helpers.css)(self.image, 'height', self.new_h + 'px');
                heightInput.value = self.new_h.toString();
            }
            this.j.e.fire(self.resizeHandler, 'updatesize');
        }
        else {
            if (self.target !== self.cropHandler) {
                if (self.top_x + self.new_w > self.cropImage.offsetWidth) {
                    self.new_w = self.cropImage.offsetWidth - self.top_x;
                }
                if (self.top_y + self.new_h > self.cropImage.offsetHeight) {
                    self.new_h = self.cropImage.offsetHeight - self.top_y;
                }
                (0,helpers.css)(self.cropHandler, {
                    width: self.new_w,
                    height: self.new_h
                });
            }
            else {
                if (self.top_x + self.diff_x + self.cropHandler.offsetWidth >
                    self.cropImage.offsetWidth) {
                    self.diff_x =
                        self.cropImage.offsetWidth -
                            self.top_x -
                            self.cropHandler.offsetWidth;
                }
                (0,helpers.css)(self.cropHandler, 'left', self.top_x + self.diff_x);
                if (self.top_y + self.diff_y + self.cropHandler.offsetHeight >
                    self.cropImage.offsetHeight) {
                    self.diff_y =
                        self.cropImage.offsetHeight -
                            self.top_y -
                            self.cropHandler.offsetHeight;
                }
                (0,helpers.css)(self.cropHandler, 'top', self.top_y + self.diff_y);
            }
            this.j.e.fire(self.cropHandler, 'updatesize');
        }
    }
    get o() {
        return this.options;
    }
    hide() {
        this._dialog.close();
    }
    open(url, save) {
        return this.j.async.promise((resolve) => {
            const timestamp = new Date().getTime();
            this.image = this.j.c.element('img');
            (0,helpers.$$)('img,.jodit-icon_loader', this.resize_box).forEach(dom/* Dom.safeRemove */.i.safeRemove);
            (0,helpers.$$)('img,.jodit-icon_loader', this.crop_box).forEach(dom/* Dom.safeRemove */.i.safeRemove);
            (0,helpers.css)(this.cropHandler, 'background', 'transparent');
            this.onSave = save;
            this.resize_box.appendChild(this.j.c.element('i', { class: 'jodit-icon_loader' }));
            this.crop_box.appendChild(this.j.c.element('i', { class: 'jodit-icon_loader' }));
            if (/\?/.test(url)) {
                url += '&_tst=' + timestamp;
            }
            else {
                url += '?_tst=' + timestamp;
            }
            this.image.setAttribute('src', url);
            this._dialog.open();
            const { widthInput, heightInput } = (0,helpers.refs)(this.editor);
            const onload = () => {
                if (this.isDestructed) {
                    return;
                }
                this.image.removeEventListener('load', onload);
                this.naturalWidth = this.image.naturalWidth;
                this.naturalHeight = this.image.naturalHeight;
                widthInput.value = this.naturalWidth.toString();
                heightInput.value = this.naturalHeight.toString();
                this.ratio = this.naturalWidth / this.naturalHeight;
                this.resize_box.appendChild(this.image);
                this.cropImage = this.image.cloneNode(true);
                this.crop_box.appendChild(this.cropImage);
                dom/* Dom.safeRemove.apply */.i.safeRemove.apply(null, (0,helpers.$$)('.jodit-icon_loader', this.editor));
                if (this.activeTab === TABS.crop) {
                    this.showCrop();
                }
                this.j.e.fire(this.resizeHandler, 'updatesize');
                this.j.e.fire(this.cropHandler, 'updatesize');
                this._dialog.setPosition();
                this.j.e.fire('afterImageEditor');
                resolve(this._dialog);
            };
            this.image.addEventListener('load', onload);
            if (this.image.complete) {
                onload();
            }
        });
    }
    destruct() {
        if (this.isDestructed) {
            return;
        }
        if (this._dialog && !this._dialog.isInDestruct) {
            this._dialog.destruct();
        }
        dom/* Dom.safeRemove */.i.safeRemove(this.editor);
        if (this.j.e) {
            this.j.e
                .off(this.j.ow, 'mousemove', this.onGlobalMouseMove)
                .off(this.j.ow, 'mouseup', this.onGlobalMouseUp)
                .off(this.ow, `.${image_editor_jie}`)
                .off(`.${image_editor_jie}`);
        }
        super.destruct();
    }
};
ImageEditor.calcValueByPercent = (value, percent) => {
    const percentStr = percent.toString();
    const valueNbr = parseFloat(value.toString());
    let match;
    match = /^[-+]?[0-9]+(px)?$/.exec(percentStr);
    if (match) {
        return parseInt(percentStr, 10);
    }
    match = /^([-+]?[0-9.]+)%$/.exec(percentStr);
    if (match) {
        return Math.round(valueNbr * (parseFloat(match[1]) / 100));
    }
    return valueNbr || 0;
};
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], ImageEditor.prototype, "onTitleModeClick", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.debounce)(),
    decorators.autobind
], ImageEditor.prototype, "onChangeSizeInput", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], ImageEditor.prototype, "onResizeHandleMouseDown", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], ImageEditor.prototype, "onGlobalMouseUp", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.throttle)(10)
], ImageEditor.prototype, "onGlobalMouseMove", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], ImageEditor.prototype, "hide", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], ImageEditor.prototype, "open", null);
ImageEditor = ImageEditor_1 = (0,tslib_es6/* __decorate */.gn)([
    decorators.component
], ImageEditor);

function openImageEditor(href, name, path, source, onSuccess, onFailed) {
    return this.getInstance('ImageEditor', this.o).open(href, (newname, box, success, failed) => (0,helpers.call)(box.action === 'resize'
        ? this.dataProvider.resize
        : this.dataProvider.crop, path, source, name, newname, box.box)
        .then(ok => {
        if (ok) {
            success();
            if (onSuccess) {
                onSuccess();
            }
        }
    })
        .catch(error => {
        failed(error);
        if (onFailed) {
            onFailed(error);
        }
    }));
}


/***/ }),

/***/ 81165:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Ajax": function() { return /* reexport */ core_request/* Ajax */.t; },
  "Alert": function() { return /* reexport */ dialog/* Alert */.bZ; },
  "Async": function() { return /* reexport */ core_async/* Async */.e; },
  "CommitStyle": function() { return /* reexport */ selection/* CommitStyle */.RP; },
  "Component": function() { return /* reexport */ component/* Component */.wA; },
  "Confirm": function() { return /* reexport */ dialog/* Confirm */.I4; },
  "ContextMenu": function() { return /* reexport */ context_menu/* ContextMenu */.x; },
  "Create": function() { return /* reexport */ Create; },
  "Dialog": function() { return /* reexport */ dialog/* Dialog */.Vq; },
  "Dom": function() { return /* reexport */ dom/* Dom */.i; },
  "EventEmitter": function() { return /* reexport */ event_emitter/* EventEmitter */.vp; },
  "EventHandlersStore": function() { return /* reexport */ event_emitter/* EventHandlersStore */.DG; },
  "Eventify": function() { return /* reexport */ event_emitter/* Eventify */.aN; },
  "FileBrowser": function() { return /* reexport */ file_browser/* FileBrowser */.f; },
  "Helpers": function() { return /* reexport */ helpers; },
  "History": function() { return /* reexport */ History; },
  "Icon": function() { return /* reexport */ ui/* Icon */.JO; },
  "ImageEditor": function() { return /* reexport */ image_editor/* ImageEditor */.v; },
  "LazyWalker": function() { return /* reexport */ dom/* LazyWalker */.b; },
  "Plugin": function() { return /* reexport */ core_plugin/* Plugin */.S; },
  "PluginSystem": function() { return /* reexport */ plugin_system/* PluginSystem */.h; },
  "Popup": function() { return /* reexport */ ui/* Popup */.GI; },
  "ProgressBar": function() { return /* reexport */ ui/* ProgressBar */.ko; },
  "Prompt": function() { return /* reexport */ dialog/* Prompt */.NL; },
  "Response": function() { return /* reexport */ core_request/* Response */.H; },
  "STATUSES": function() { return /* reexport */ component/* STATUSES */.n$; },
  "Select": function() { return /* reexport */ selection/* Select */.Ph; },
  "Snapshot": function() { return /* reexport */ Snapshot; },
  "StatusBar": function() { return /* reexport */ StatusBar; },
  "Table": function() { return /* reexport */ table/* Table */.i; },
  "ToolbarButton": function() { return /* reexport */ button_button/* ToolbarButton */.h; },
  "ToolbarCollection": function() { return /* reexport */ collection/* ToolbarCollection */.n; },
  "ToolbarContent": function() { return /* reexport */ content/* ToolbarContent */.c; },
  "ToolbarEditorCollection": function() { return /* reexport */ editor_collection/* ToolbarEditorCollection */.N; },
  "UIBlock": function() { return /* reexport */ ui/* UIBlock */.eC; },
  "UIButton": function() { return /* reexport */ ui/* UIButton */.y3; },
  "UICheckbox": function() { return /* reexport */ ui/* UICheckbox */.mA; },
  "UIElement": function() { return /* reexport */ ui/* UIElement */.u1; },
  "UIForm": function() { return /* reexport */ ui/* UIForm */.x4; },
  "UIGroup": function() { return /* reexport */ ui/* UIGroup */.qe; },
  "UIInput": function() { return /* reexport */ ui/* UIInput */.u3; },
  "UIList": function() { return /* reexport */ ui/* UIList */.bz; },
  "UIMessages": function() { return /* reexport */ messages/* UIMessages */.D; },
  "UISeparator": function() { return /* reexport */ ui/* UISeparator */.lU; },
  "UITextArea": function() { return /* reexport */ ui/* UITextArea */.GJ; },
  "Uploader": function() { return /* reexport */ Uploader; },
  "View": function() { return /* reexport */ view/* View */.G; },
  "ViewComponent": function() { return /* reexport */ component/* ViewComponent */.Hr; },
  "ViewWithToolbar": function() { return /* reexport */ view_with_toolbar/* ViewWithToolbar */.C; },
  "defaultNameSpace": function() { return /* reexport */ event_emitter/* defaultNameSpace */.rO; },
  "isFileBrowserFilesItem": function() { return /* reexport */ file_browser/* isFileBrowserFilesItem */.F; },
  "observable": function() { return /* reexport */ event_emitter/* observable */.LO; }
});

// EXTERNAL MODULE: ./src/core/event-emitter/index.ts + 2 modules
var event_emitter = __webpack_require__(39266);
// EXTERNAL MODULE: ./src/core/async/index.ts + 1 modules
var core_async = __webpack_require__(57389);
// EXTERNAL MODULE: ./src/core/request/index.ts
var core_request = __webpack_require__(71347);
// EXTERNAL MODULE: ./src/core/component/index.ts + 1 modules
var component = __webpack_require__(26655);
// EXTERNAL MODULE: ./src/modules/context-menu/context-menu.ts
var context_menu = __webpack_require__(73511);
// EXTERNAL MODULE: ./src/modules/dialog/index.ts + 3 modules
var dialog = __webpack_require__(91419);
// EXTERNAL MODULE: ./src/core/dom/index.ts
var dom = __webpack_require__(94522);
// EXTERNAL MODULE: ./src/core/plugin/index.ts
var core_plugin = __webpack_require__(35570);
// EXTERNAL MODULE: ./src/core/helpers/index.ts + 14 modules
var helpers = __webpack_require__(52607);
// EXTERNAL MODULE: ./src/core/constants.ts
var constants = __webpack_require__(10063);
;// CONCATENATED MODULE: ./src/core/create/create.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



class Create {
    constructor(document, createAttributes) {
        this.document = document;
        this.createAttributes = createAttributes;
    }
    get doc() {
        return (0,helpers.isFunction)(this.document) ? this.document() : this.document;
    }
    element(tagName, childrenOrAttributes, children) {
        const elm = this.doc.createElement(tagName.toLowerCase());
        this.applyCreateAttributes(elm);
        if (childrenOrAttributes) {
            if ((0,helpers.isPlainObject)(childrenOrAttributes)) {
                (0,helpers.attr)(elm, childrenOrAttributes);
            }
            else {
                children = childrenOrAttributes;
            }
        }
        if (children) {
            (0,helpers.asArray)(children).forEach((child) => elm.appendChild((0,helpers.isString)(child) ? this.fromHTML(child) : child));
        }
        return elm;
    }
    div(className, childrenOrAttributes, children) {
        const div = this.element('div', childrenOrAttributes, children);
        if (className) {
            div.className = className;
        }
        return div;
    }
    sandbox() {
        var _a;
        const iframe = this.element('iframe', { sandbox: 'allow-same-origin' });
        this.doc.body.appendChild(iframe);
        const doc = (_a = iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.document;
        (0,helpers.assert)(doc, 'iframe.contentWindow.document');
        doc.open();
        doc.write('<!DOCTYPE html><html><head></head><body></body></html>');
        doc.close();
        return doc.body;
    }
    span(className, childrenOrAttributes, children) {
        const span = this.element('span', childrenOrAttributes, children);
        if (className) {
            span.className = className;
        }
        return span;
    }
    a(className, childrenOrAttributes, children) {
        const a = this.element('a', childrenOrAttributes, children);
        if (className) {
            a.className = className;
        }
        return a;
    }
    text(value) {
        return this.doc.createTextNode(value);
    }
    fake() {
        return this.text(constants.INVISIBLE_SPACE);
    }
    fragment() {
        return this.doc.createDocumentFragment();
    }
    fromHTML(html, refsToggleElement) {
        const div = this.div();
        div.innerHTML = html.toString();
        const child = div.firstChild !== div.lastChild || !div.firstChild
            ? div
            : div.firstChild;
        dom/* Dom.safeRemove */.i.safeRemove(child);
        if (refsToggleElement) {
            const refElements = (0,helpers.refs)(child);
            Object.keys(refsToggleElement).forEach(key => {
                const elm = refElements[key];
                if (elm && refsToggleElement[key] === false) {
                    dom/* Dom.hide */.i.hide(elm);
                }
            });
        }
        return child;
    }
    applyCreateAttributes(elm) {
        if (this.createAttributes) {
            const ca = this.createAttributes;
            if (ca && ca[elm.tagName.toLowerCase()]) {
                const attrsOpt = ca[elm.tagName.toLowerCase()];
                if ((0,helpers.isFunction)(attrsOpt)) {
                    attrsOpt(elm);
                }
                else if ((0,helpers.isPlainObject)(attrsOpt)) {
                    (0,helpers.attr)(elm, attrsOpt);
                }
            }
        }
    }
}

;// CONCATENATED MODULE: ./src/core/create/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


// EXTERNAL MODULE: ./src/core/ui/index.ts + 2 modules
var ui = __webpack_require__(41685);
// EXTERNAL MODULE: ./src/core/view/view.ts
var view = __webpack_require__(23967);
// EXTERNAL MODULE: ./src/core/view/view-with-toolbar.ts
var view_with_toolbar = __webpack_require__(62322);
// EXTERNAL MODULE: ./src/modules/file-browser/index.ts + 13 modules
var file_browser = __webpack_require__(41405);
// EXTERNAL MODULE: ./src/modules/image-editor/image-editor.ts + 2 modules
var image_editor = __webpack_require__(21121);
// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(20255);
// EXTERNAL MODULE: ./src/config.ts
var config = __webpack_require__(27537);
;// CONCATENATED MODULE: ./src/modules/history/snapshot.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


class Snapshot extends component/* ViewComponent */.Hr {
    constructor() {
        super(...arguments);
        this.isBlocked = false;
    }
    className() {
        return 'Snapshot';
    }
    static equal(first, second) {
        return (first.html === second.html &&
            JSON.stringify(first.range) === JSON.stringify(second.range));
    }
    static countNodesBeforeInParent(elm) {
        if (!elm.parentNode) {
            return 0;
        }
        const elms = elm.parentNode.childNodes;
        let count = 0, last = null, j;
        for (j = 0; j < elms.length; j += 1) {
            if (last &&
                !(dom/* Dom.isText */.i.isText(elms[j]) && elms[j].textContent === '') &&
                !(dom/* Dom.isText */.i.isText(last) && dom/* Dom.isText */.i.isText(elms[j]))) {
                count += 1;
            }
            if (elms[j] === elm) {
                return count;
            }
            last = elms[j];
        }
        return 0;
    }
    static strokeOffset(elm, offset) {
        while (dom/* Dom.isText */.i.isText(elm)) {
            elm = elm.previousSibling;
            if (dom/* Dom.isText */.i.isText(elm) && elm.textContent != null) {
                offset += elm.textContent.length;
            }
        }
        return offset;
    }
    calcHierarchyLadder(elm) {
        const counts = [];
        if (!elm || !elm.parentNode || !dom/* Dom.isOrContains */.i.isOrContains(this.j.editor, elm)) {
            return [];
        }
        while (elm && elm !== this.j.editor) {
            if (elm) {
                counts.push(Snapshot.countNodesBeforeInParent(elm));
            }
            elm = elm.parentNode;
        }
        return counts.reverse();
    }
    getElementByLadder(ladder) {
        let n = this.j.editor, i;
        for (i = 0; n && i < ladder.length; i += 1) {
            n = n.childNodes[ladder[i]];
        }
        return n;
    }
    make() {
        const snapshot = {
            html: '',
            range: {
                startContainer: [],
                startOffset: 0,
                endContainer: [],
                endOffset: 0
            }
        };
        snapshot.html = this.removeJoditSelection(this.j.getNativeEditorValue());
        const sel = this.j.s.sel;
        if (sel && sel.rangeCount) {
            const range = sel.getRangeAt(0), startContainer = this.calcHierarchyLadder(range.startContainer), endContainer = this.calcHierarchyLadder(range.endContainer);
            let startOffset = Snapshot.strokeOffset(range.startContainer, range.startOffset), endOffset = Snapshot.strokeOffset(range.endContainer, range.endOffset);
            if (!startContainer.length &&
                range.startContainer !== this.j.editor) {
                startOffset = 0;
            }
            if (!endContainer.length && range.endContainer !== this.j.editor) {
                endOffset = 0;
            }
            snapshot.range = {
                startContainer,
                startOffset,
                endContainer,
                endOffset
            };
        }
        return snapshot;
    }
    restore(snapshot) {
        this.isBlocked = true;
        const scroll = this.storeScrollState();
        const value = this.j.getNativeEditorValue();
        if (value !== snapshot.html) {
            this.j.value = snapshot.html;
        }
        this.restoreOnlySelection(snapshot);
        this.restoreScrollState(scroll);
        this.isBlocked = false;
    }
    storeScrollState() {
        return [this.j.ow.scrollY, this.j.editor.scrollTop];
    }
    restoreScrollState(scrolls) {
        const { j } = this, { ow } = j;
        ow.scrollTo(ow.scrollX, scrolls[0]);
        j.editor.scrollTop = scrolls[1];
    }
    restoreOnlySelection(snapshot) {
        try {
            if (snapshot.range) {
                const range = this.j.ed.createRange();
                range.setStart(this.getElementByLadder(snapshot.range.startContainer), snapshot.range.startOffset);
                range.setEnd(this.getElementByLadder(snapshot.range.endContainer), snapshot.range.endOffset);
                this.j.s.selectRange(range);
            }
        }
        catch (__ignore) {
            this.j.editor.lastChild &&
                this.j.s.setCursorAfter(this.j.editor.lastChild);
            if (false) {}
        }
    }
    destruct() {
        this.isBlocked = false;
        super.destruct();
    }
    removeJoditSelection(nativeEditorValue) {
        return nativeEditorValue.replace(/<span[^>]*jodit-selection_marker[^>]*><\/span>/g, '');
    }
}

;// CONCATENATED MODULE: ./src/modules/history/stack.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
class Stack {
    constructor(size) {
        this.size = size;
        this.commands = [];
        this.stackPosition = -1;
    }
    get length() {
        return this.commands.length;
    }
    clearRedo() {
        this.commands.length = this.stackPosition + 1;
    }
    clear() {
        this.commands.length = 0;
        this.stackPosition = -1;
    }
    push(command) {
        this.clearRedo();
        this.commands.push(command);
        this.stackPosition += 1;
        if (this.commands.length > this.size) {
            this.commands.shift();
            this.stackPosition -= 1;
        }
    }
    replace(command) {
        this.commands[this.stackPosition] = command;
    }
    current() {
        return this.commands[this.stackPosition];
    }
    undo() {
        if (this.canUndo()) {
            if (this.commands[this.stackPosition]) {
                this.commands[this.stackPosition].undo();
            }
            this.stackPosition -= 1;
            return true;
        }
        return false;
    }
    redo() {
        if (this.canRedo()) {
            this.stackPosition += 1;
            if (this.commands[this.stackPosition]) {
                this.commands[this.stackPosition].redo();
            }
            return true;
        }
        return false;
    }
    canUndo() {
        return this.stackPosition >= 0;
    }
    canRedo() {
        return this.stackPosition < this.commands.length - 1;
    }
}

;// CONCATENATED MODULE: ./src/modules/history/command.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
class Command {
    constructor(oldValue, newValue, history, tick) {
        this.oldValue = oldValue;
        this.newValue = newValue;
        this.history = history;
        this.tick = tick;
    }
    undo() {
        this.history.snapshot.restore(this.oldValue);
    }
    redo() {
        this.history.snapshot.restore(this.newValue);
    }
}

// EXTERNAL MODULE: ./src/core/decorators/index.ts + 7 modules
var decorators = __webpack_require__(11169);
;// CONCATENATED MODULE: ./src/modules/history/history.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







config/* Config.prototype.history */.D.prototype.history = {
    enable: true,
    maxHistoryLength: Infinity,
    timeout: 1000
};
config/* Config.prototype.observer */.D.prototype.observer = config/* Config.prototype.history */.D.prototype.history;
class History extends component/* ViewComponent */.Hr {
    constructor(editor, stack = new Stack(editor.o.history.maxHistoryLength), snapshot = new Snapshot(editor)) {
        super(editor);
        this.updateTick = 0;
        this.stack = stack;
        this.snapshot = snapshot;
        if (editor.o.history.enable) {
            editor.e.on('afterAddPlace.history', () => {
                if (this.isInDestruct) {
                    return;
                }
                this.startValue = this.snapshot.make();
                editor.events
                    .on('internalChange internalUpdate', () => {
                    this.startValue = this.snapshot.make();
                })
                    .on(editor.editor, [
                    'changeSelection',
                    'selectionstart',
                    'selectionchange',
                    'mousedown',
                    'mouseup',
                    'keydown',
                    'keyup'
                ]
                    .map(f => f + '.history')
                    .join(' '), () => {
                    if (this.startValue.html ===
                        this.j.getNativeEditorValue()) {
                        this.startValue = this.snapshot.make();
                    }
                })
                    .on(this, 'change.history', this.onChange);
            });
        }
    }
    className() {
        return 'History';
    }
    get startValue() {
        return this.__startValue;
    }
    set startValue(value) {
        this.__startValue = value;
    }
    upTick() {
        this.updateTick += 1;
    }
    onChange() {
        this.processChanges();
    }
    processChanges() {
        if (this.snapshot.isBlocked) {
            return;
        }
        this.updateStack();
    }
    updateStack(replace = false) {
        const newValue = this.snapshot.make();
        if (!Snapshot.equal(newValue, this.startValue)) {
            const newCommand = new Command(this.startValue, newValue, this, this.updateTick);
            if (replace) {
                const command = this.stack.current();
                if (command && this.updateTick === command.tick) {
                    this.stack.replace(newCommand);
                }
            }
            else {
                this.stack.push(newCommand);
            }
            this.startValue = newValue;
            this.fireChangeStack();
        }
    }
    redo() {
        if (this.stack.redo()) {
            this.startValue = this.snapshot.make();
            this.fireChangeStack();
        }
    }
    canRedo() {
        return this.stack.canRedo();
    }
    undo() {
        if (this.stack.undo()) {
            this.startValue = this.snapshot.make();
            this.fireChangeStack();
        }
    }
    canUndo() {
        return this.stack.canUndo();
    }
    clear() {
        this.startValue = this.snapshot.make();
        this.stack.clear();
        this.fireChangeStack();
    }
    get length() {
        return this.stack.length;
    }
    fireChangeStack() {
        var _a;
        this.j && !this.j.isInDestruct && ((_a = this.j.events) === null || _a === void 0 ? void 0 : _a.fire('changeStack'));
    }
    destruct() {
        if (this.isInDestruct) {
            return;
        }
        if (this.j.events) {
            this.j.e.off('.history');
        }
        this.snapshot.destruct();
        super.destruct();
    }
}
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.debounce)()
], History.prototype, "onChange", null);

// EXTERNAL MODULE: ./src/core/selection/index.ts + 19 modules
var selection = __webpack_require__(96811);
// EXTERNAL MODULE: ./src/core/traits/index.ts + 3 modules
var traits = __webpack_require__(34821);
;// CONCATENATED MODULE: ./src/modules/status-bar/status-bar.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






let StatusBar = class StatusBar extends component/* ViewComponent */.Hr {
    constructor(jodit, target) {
        super(jodit);
        this.target = target;
        this.mods = {};
        this.container = jodit.c.div('jodit-status-bar');
        target.appendChild(this.container);
        this.hide();
    }
    className() {
        return 'StatusBar';
    }
    hide() {
        this.container.classList.add('jodit_hidden');
    }
    show() {
        this.container.classList.remove('jodit_hidden');
    }
    get isShown() {
        return !this.container.classList.contains('jodit_hidden');
    }
    getHeight() {
        var _a, _b;
        return (_b = (_a = this.container) === null || _a === void 0 ? void 0 : _a.offsetHeight) !== null && _b !== void 0 ? _b : 0;
    }
    findEmpty(inTheRight = false) {
        const items = this.getElms(inTheRight ? 'item-right' : 'item');
        for (let i = 0; i < items.length; i += 1) {
            if (!items[i].innerHTML.trim().length) {
                return items[i];
            }
        }
        return;
    }
    append(child, inTheRight = false) {
        var _a;
        const wrapper = this.findEmpty(inTheRight) ||
            this.j.c.div(this.getFullElName('item'));
        if (inTheRight) {
            wrapper.classList.add(this.getFullElName('item-right'));
        }
        wrapper.appendChild(child);
        (_a = this.container) === null || _a === void 0 ? void 0 : _a.appendChild(wrapper);
        if (this.j.o.statusbar) {
            this.show();
        }
        this.j.e.fire('resize');
    }
    destruct() {
        if (this.isInDestruct) {
            return;
        }
        this.setStatus(component/* STATUSES.beforeDestruct */.n$.beforeDestruct);
        dom/* Dom.safeRemove */.i.safeRemove(this.container);
        super.destruct();
    }
};
StatusBar = (0,tslib_es6/* __decorate */.gn)([
    decorators.component,
    (0,decorators.derive)(traits/* Mods */.$t, traits/* Elms */.Fx)
], StatusBar);


// EXTERNAL MODULE: ./src/modules/table/table.ts
var table = __webpack_require__(28314);
// EXTERNAL MODULE: ./src/modules/toolbar/collection/editor-collection.ts
var editor_collection = __webpack_require__(19843);
// EXTERNAL MODULE: ./src/modules/toolbar/collection/collection.ts
var collection = __webpack_require__(39697);
// EXTERNAL MODULE: ./src/modules/toolbar/button/button.ts
var button_button = __webpack_require__(7708);
// EXTERNAL MODULE: ./src/modules/toolbar/button/content.ts
var content = __webpack_require__(74979);
;// CONCATENATED MODULE: ./src/modules/toolbar/button/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



// EXTERNAL MODULE: ./src/core/global.ts
var global = __webpack_require__(58299);
;// CONCATENATED MODULE: ./src/modules/uploader/helpers/process-old-browser-drag.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





function processOldBrowserDrag(self, cData, handlerSuccess, handlerError, onFinally) {
    if (cData && (!cData.types.length || cData.types[0] !== TEXT_PLAIN)) {
        const div = self.j.c.div('', {
            tabindex: -1,
            style: 'left: -9999px; top: 0; width: 0; height: 100%;line-height: 140%; ' +
                'overflow: hidden; position: fixed; z-index: 2147483647; word-break: break-all;',
            contenteditable: true
        });
        getContainer(self.j, self.constructor).appendChild(div);
        const selection = isJoditObject(self.j) ? self.j.s.save() : null, restore = () => selection && isJoditObject(self.j) && self.j.s.restore();
        div.focus();
        self.j.async.setTimeout(() => {
            const child = div.firstChild;
            Dom.safeRemove(div);
            if (child && child.hasAttribute('src')) {
                const src = attr(child, 'src') || '';
                restore();
                sendFiles(self, [dataURItoBlob(src)], handlerSuccess, handlerError).finally(onFinally);
            }
        }, self.j.defaultTimeout);
    }
}

;// CONCATENATED MODULE: ./src/modules/uploader/helpers/build-data.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function buildData(uploader, data) {
    if ((0,helpers.isFunction)(uploader.o.buildData)) {
        return uploader.o.buildData.call(uploader, data);
    }
    const FD = uploader.ow.FormData;
    if (FD !== undefined) {
        if (data instanceof FD) {
            return data;
        }
        if ((0,helpers.isString)(data)) {
            return data;
        }
        const newData = new FD();
        Object.keys(data).forEach(key => {
            newData.append(key, data[key]);
        });
        return newData;
    }
    return data;
}

;// CONCATENATED MODULE: ./src/modules/uploader/helpers/send.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



const ajaxInstances = new WeakMap();
function send(uploader, data) {
    const requestData = buildData(uploader, data);
    const sendData = (request) => {
        const ajax = new core_request/* Ajax */.t(uploader.j, {
            xhr: () => {
                const xhr = new XMLHttpRequest();
                if (uploader.j.ow.FormData !== undefined &&
                    xhr.upload) {
                    uploader.j.progressbar.show().progress(10);
                    xhr.upload.addEventListener('progress', evt => {
                        if (evt.lengthComputable) {
                            let percentComplete = evt.loaded / evt.total;
                            percentComplete *= 100;
                            console.log('progress', percentComplete);
                            uploader.j.progressbar
                                .show()
                                .progress(percentComplete);
                            if (percentComplete >= 100) {
                                uploader.j.progressbar.hide();
                            }
                        }
                    }, false);
                }
                else {
                    uploader.j.progressbar.hide();
                }
                return xhr;
            },
            method: uploader.o.method || 'POST',
            data: request,
            url: (0,helpers.isFunction)(uploader.o.url)
                ? uploader.o.url(request)
                : uploader.o.url,
            headers: uploader.o.headers,
            queryBuild: uploader.o.queryBuild,
            contentType: uploader.o.contentType.call(uploader, request),
            dataType: uploader.o.format || 'json',
            withCredentials: uploader.o.withCredentials || false
        });
        let instances = ajaxInstances.get(uploader);
        if (!instances) {
            instances = new Set();
            ajaxInstances.set(uploader, instances);
        }
        instances.add(ajax);
        return ajax
            .send()
            .then(resp => resp.json())
            .catch(error => {
            uploader.o.error.call(uploader, error);
        })
            .finally(() => {
            instances === null || instances === void 0 ? void 0 : instances.delete(ajax);
        });
    };
    if ((0,helpers.isPromise)(requestData)) {
        return requestData.then(sendData).catch(error => {
            uploader.o.error.call(uploader, error);
        });
    }
    return sendData(requestData);
}

;// CONCATENATED MODULE: ./src/modules/uploader/helpers/send-files.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


function send_files_sendFiles(uploader, files, handlerSuccess, handlerError, process) {
    if (!files) {
        return Promise.reject((0,helpers.error)('Need files'));
    }
    const { o } = uploader;
    let fileList = (0,helpers.toArray)(files);
    if (!fileList.length) {
        return Promise.reject((0,helpers.error)('Need files'));
    }
    const promises = [];
    if (o.insertImageAsBase64URI) {
        let file, i;
        for (i = 0; i < fileList.length; i += 1) {
            file = fileList[i];
            if (file && file.type) {
                const mime = file.type.match(/\/([a-z0-9]+)/i);
                const extension = mime[1] ? mime[1].toLowerCase() : '';
                if (o.imagesExtensions.includes(extension)) {
                    const reader = new FileReader();
                    promises.push(uploader.j.async.promise((resolve, reject) => {
                        reader.onerror = reject;
                        reader.onloadend = () => {
                            const resp = {
                                baseurl: '',
                                files: [reader.result],
                                isImages: [true]
                            };
                            const handler = (0,helpers.isFunction)(handlerSuccess)
                                ? handlerSuccess
                                : o.defaultHandlerSuccess;
                            handler.call(uploader, resp);
                            resolve(resp);
                        };
                        reader.readAsDataURL(file);
                    }));
                    fileList[i] = null;
                }
            }
        }
    }
    fileList = fileList.filter(a => a);
    if (fileList.length) {
        const form = new FormData();
        form.append(o.pathVariableName, uploader.path);
        form.append('source', uploader.source);
        let file;
        for (let i = 0; i < fileList.length; i += 1) {
            file = fileList[i];
            if (file) {
                const hasRealExtension = /\.[\d\w]+$/.test(file.name);
                const mime = file.type.match(/\/([a-z0-9]+)/i);
                const extension = mime && mime[1] ? mime[1].toLowerCase() : '';
                let newName = fileList[i].name ||
                    Math.random().toString().replace('.', '');
                if (!hasRealExtension && extension) {
                    let extForReg = extension;
                    if (['jpeg', 'jpg'].includes(extForReg)) {
                        extForReg = 'jpeg|jpg';
                    }
                    const reEnd = new RegExp('.(' + extForReg + ')$', 'i');
                    if (!reEnd.test(newName)) {
                        newName += '.' + extension;
                    }
                }
                const [key, iFile, name] = o.processFileName.call(uploader, o.filesVariableName(i), fileList[i], newName);
                form.append(key, iFile, name);
            }
        }
        if (process) {
            process(form);
        }
        if (o.data && (0,helpers.isPlainObject)(o.data)) {
            Object.keys(o.data).forEach((key) => {
                form.append(key, o.data[key]);
            });
        }
        o.prepareData.call(uploader, form);
        promises.push(send(uploader, form)
            .then(resp => {
            if (o.isSuccess.call(uploader, resp)) {
                const handler = (0,helpers.isFunction)(handlerSuccess)
                    ? handlerSuccess
                    : o.defaultHandlerSuccess;
                handler.call(uploader, o.process.call(uploader, resp));
                return resp;
            }
            const handler = (0,helpers.isFunction)(handlerError)
                ? handlerError
                : o.defaultHandlerError;
            handler.call(uploader, (0,helpers.error)(o.getMessage.call(uploader, resp)));
            return resp;
        })
            .then(() => {
            uploader.j.events && uploader.j.e.fire('filesWereUploaded');
        }));
    }
    return Promise.all(promises);
}

;// CONCATENATED MODULE: ./src/modules/uploader/helpers/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





function hasFiles(data) {
    return Boolean(data && data.files && data.files.length > 0);
}
function hasItems(data) {
    return Boolean(data && data.items && data.items.length > 0);
}

// EXTERNAL MODULE: ./src/core/helpers/checker/is-array.ts
var is_array = __webpack_require__(2555);
// EXTERNAL MODULE: ./src/core/helpers/checker/is-jodit-object.ts
var is_jodit_object = __webpack_require__(47442);
;// CONCATENATED MODULE: ./src/modules/uploader/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



config/* Config.prototype.enableDragAndDropFileToEditor */.D.prototype.enableDragAndDropFileToEditor = true;
config/* Config.prototype.uploader */.D.prototype.uploader = {
    url: '',
    insertImageAsBase64URI: false,
    imagesExtensions: ['jpg', 'png', 'jpeg', 'gif'],
    headers: null,
    data: null,
    filesVariableName(i) {
        return `files[${i}]`;
    },
    withCredentials: false,
    pathVariableName: 'path',
    format: 'json',
    method: 'POST',
    prepareData(formData) {
        return formData;
    },
    isSuccess(resp) {
        return resp.success;
    },
    getMessage(resp) {
        return resp.data.messages !== undefined && (0,is_array/* isArray */.k)(resp.data.messages)
            ? resp.data.messages.join(' ')
            : '';
    },
    processFileName(key, file, name) {
        return [key, file, name];
    },
    process(resp) {
        return resp.data;
    },
    error(e) {
        this.j.e.fire('errorMessage', e.message, 'error', 4000);
    },
    getDisplayName(baseurl, filename) {
        return baseurl + filename;
    },
    defaultHandlerSuccess(resp) {
        const j = this.j || this;
        if (!(0,is_jodit_object/* isJoditObject */.Z)(j)) {
            return;
        }
        if (resp.files && resp.files.length) {
            resp.files.forEach((filename, index) => {
                const [tagName, attr] = resp.isImages && resp.isImages[index]
                    ? ['img', 'src']
                    : ['a', 'href'];
                const elm = j.createInside.element(tagName);
                elm.setAttribute(attr, resp.baseurl + filename);
                if (tagName === 'a') {
                    elm.textContent = j.o.uploader.getDisplayName.call(this, resp.baseurl, filename);
                }
                if (tagName === 'img') {
                    j.s.insertImage(elm, null, j.o.imageDefaultWidth);
                }
                else {
                    j.s.insertNode(elm);
                }
            });
        }
    },
    defaultHandlerError(e) {
        this.j.e.fire('errorMessage', e.message);
    },
    contentType(requestData) {
        return this.ow.FormData !== undefined &&
            typeof requestData !== 'string'
            ? false
            : 'application/x-www-form-urlencoded; charset=UTF-8';
    }
};

;// CONCATENATED MODULE: ./src/modules/uploader/uploader.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







class Uploader extends component/* ViewComponent */.Hr {
    constructor(editor, options) {
        super(editor);
        this.path = '';
        this.source = 'default';
        this.options = (0,helpers.ConfigProto)(options || {}, (0,helpers.ConfigProto)(config/* Config.defaultOptions.uploader */.D.defaultOptions.uploader, (0,helpers.isJoditObject)(editor) ? editor.o.uploader : {}));
    }
    get j() {
        return this.jodit;
    }
    className() {
        return 'Uploader';
    }
    get o() {
        return this.options;
    }
    setPath(path) {
        this.path = path;
        return this;
    }
    setSource(source) {
        this.source = source;
        return this;
    }
    bind(form, handlerSuccess, handlerError) {
        const onFinally = () => {
            form.classList.remove('jodit_drag_hover');
        };
        const self = this, onPaste = (e) => {
            let i, file, extension;
            const cData = e.clipboardData;
            const process = (formdata) => {
                if (file) {
                    formdata.append('extension', extension);
                    formdata.append('mimetype', file.type);
                }
            };
            if (!constants.IS_IE && hasFiles(cData)) {
                send_files_sendFiles(self, cData.files, handlerSuccess, handlerError).finally(onFinally);
                return false;
            }
            if (constants.IS_IE && !true) {}
            if (hasItems(cData)) {
                const { items } = cData;
                for (i = 0; i < items.length; i += 1) {
                    if (items[i].kind === 'file' &&
                        items[i].type === 'image/png') {
                        file = items[i].getAsFile();
                        if (file) {
                            const mime = file.type.match(/\/([a-z0-9]+)/i);
                            extension = mime[1]
                                ? mime[1].toLowerCase()
                                : '';
                            send_files_sendFiles(self, [file], handlerSuccess, handlerError, process).finally(onFinally);
                        }
                        e.preventDefault();
                        break;
                    }
                }
            }
        };
        if (self.j && self.j.editor !== form) {
            self.j.e.on(form, 'paste', onPaste);
        }
        else {
            self.j.e.on('beforePaste', onPaste);
        }
        this.attachEvents(form, handlerSuccess, handlerError, onFinally);
    }
    attachEvents(form, handlerSuccess, handlerError, onFinally) {
        const self = this;
        self.j.e
            .on(form, 'dragend dragover dragenter dragleave drop', (e) => {
            e.preventDefault();
        })
            .on(form, 'dragover', (event) => {
            if (hasFiles(event.dataTransfer) ||
                hasItems(event.dataTransfer)) {
                form.classList.add('jodit_drag_hover');
                event.preventDefault();
            }
        })
            .on(form, 'dragend dragleave', (event) => {
            form.classList.remove('jodit_drag_hover');
            if (hasFiles(event.dataTransfer)) {
                event.preventDefault();
            }
        })
            .on(form, 'drop', (event) => {
            form.classList.remove('jodit_drag_hover');
            if (hasFiles(event.dataTransfer)) {
                event.preventDefault();
                event.stopImmediatePropagation();
                send_files_sendFiles(self, event.dataTransfer.files, handlerSuccess, handlerError).finally(onFinally);
            }
        });
        const inputFile = form.querySelector('input[type=file]');
        if (inputFile) {
            self.j.e.on(inputFile, 'change', () => {
                send_files_sendFiles(self, inputFile.files, handlerSuccess, handlerError)
                    .then(() => {
                    inputFile.value = '';
                    if (!/safari/i.test(navigator.userAgent)) {
                        inputFile.type = '';
                        inputFile.type = 'file';
                    }
                })
                    .finally(onFinally);
            });
        }
    }
    uploadRemoteImage(url, handlerSuccess, handlerError) {
        const uploader = this, { o } = uploader;
        const handlerE = (0,helpers.isFunction)(handlerError)
            ? handlerError
            : o.defaultHandlerError;
        send(uploader, {
            action: 'fileUploadRemote',
            url
        })
            .then(resp => {
            if (o.isSuccess.call(uploader, resp)) {
                const handler = (0,helpers.isFunction)(handlerSuccess)
                    ? handlerSuccess
                    : o.defaultHandlerSuccess;
                handler.call(uploader, o.process.call(uploader, resp));
                return;
            }
            handlerE.call(uploader, (0,helpers.error)(o.getMessage.call(uploader, resp)));
        })
            .catch(e => handlerE.call(uploader, e));
    }
    destruct() {
        this.setStatus(component/* STATUSES.beforeDestruct */.n$.beforeDestruct);
        const instances = ajaxInstances.get(this);
        if (instances) {
            instances.forEach(ajax => {
                try {
                    ajax.destruct();
                }
                catch (_a) { }
            });
            instances.clear();
        }
        super.destruct();
    }
}

// EXTERNAL MODULE: ./src/modules/messages/messages.ts + 1 modules
var messages = __webpack_require__(99186);
// EXTERNAL MODULE: ./src/core/plugin/plugin-system.ts
var plugin_system = __webpack_require__(58153);
;// CONCATENATED MODULE: ./src/modules/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





























/***/ }),

/***/ 99186:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "D": function() { return /* binding */ UIMessages; }
});

// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(20255);
// EXTERNAL MODULE: ./src/core/helpers/utils/css.ts
var css = __webpack_require__(56672);
// EXTERNAL MODULE: ./src/core/ui/group/group.ts
var group = __webpack_require__(90181);
// EXTERNAL MODULE: ./src/core/decorators/component/component.ts
var component = __webpack_require__(99205);
// EXTERNAL MODULE: ./src/core/decorators/watch/watch.ts
var watch = __webpack_require__(44101);
// EXTERNAL MODULE: ./src/core/helpers/index.ts + 14 modules
var helpers = __webpack_require__(52607);
// EXTERNAL MODULE: ./src/core/ui/index.ts + 2 modules
var ui = __webpack_require__(41685);
;// CONCATENATED MODULE: ./src/modules/messages/message.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



let UIMessage = class UIMessage extends ui/* UIElement */.u1 {
    className() {
        return 'UIMessage';
    }
    constructor(jodit, options) {
        super(jodit);
        this.setMod('active', true);
        this.setMod('variant', options.variant);
        this.container.textContent = options.text;
    }
};
UIMessage = (0,tslib_es6/* __decorate */.gn)([
    component/* component */.w
], UIMessage);


;// CONCATENATED MODULE: ./src/modules/messages/messages.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */








let UIMessages = class UIMessages extends group/* UIGroup */.q {
    constructor(jodit, options = {
        defaultTimeout: 3000,
        defaultOffset: 5
    }) {
        super(jodit);
        this.options = options;
        this.__messages = new Set();
    }
    className() {
        return 'UIMessages';
    }
    info(text, timeout) {
        this.__message(text, 'info', timeout);
    }
    success(text, timeout) {
        this.__message(text, 'success', timeout);
    }
    error(text, timeout) {
        this.__message(text, 'error', timeout);
    }
    message(text, variant, timeout) {
        this.__message(text, variant, timeout);
    }
    __message(text, variant = 'info', timeout) {
        const key = text + ':' + variant;
        if (this.__messages.has(key)) {
            this.async.updateTimeout(key, timeout || this.options.defaultTimeout);
            return;
        }
        const jodit = this.j;
        if ((0,helpers.isJoditObject)(jodit)) {
            jodit.workplace.appendChild(this.container);
        }
        else {
            jodit.container.appendChild(this.container);
        }
        const msg = new UIMessage(this.j, { text, variant });
        this.append(msg);
        this.__calcOffsets();
        this.__messages.add(key);
        const remove = this.__getRemoveCallback(msg, key);
        this.j.e.on(msg.container, 'pointerdown', remove);
        this.async.setTimeout(remove, {
            label: key,
            timeout: timeout || this.options.defaultTimeout
        });
    }
    __getRemoveCallback(msg, key) {
        const remove = (e) => {
            e && e.preventDefault();
            if (msg.isInDestruct) {
                return;
            }
            this.async.clearTimeout(key);
            this.j.e.off(msg.container, 'pointerdown', remove);
            this.__messages.delete(key);
            msg.setMod('active', false);
            this.async.setTimeout(() => {
                this.remove(msg);
                msg.destruct();
                this.__calcOffsets();
            }, 300);
        };
        return remove;
    }
    __calcOffsets() {
        let height = 5;
        this.elements.forEach(elm => {
            (0,css/* css */.i)(elm.container, 'bottom', height + 'px');
            height += elm.container.offsetHeight + this.options.defaultOffset;
        });
    }
};
(0,tslib_es6/* __decorate */.gn)([
    (0,watch/* watch */.YP)(':errorMessage')
], UIMessages.prototype, "__message", null);
UIMessages = (0,tslib_es6/* __decorate */.gn)([
    component/* component */.w
], UIMessages);



/***/ }),

/***/ 28314:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "i": function() { return /* binding */ Table; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(20255);
/* harmony import */ var jodit_core_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10063);
/* harmony import */ var jodit_core_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(94522);
/* harmony import */ var jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(52607);
/* harmony import */ var jodit_core_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(26655);
/* harmony import */ var jodit_core_global__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(58299);
/* harmony import */ var jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(11169);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */







const markedValue = new WeakMap();
class Table extends jodit_core_component__WEBPACK_IMPORTED_MODULE_3__/* .ViewComponent */ .Hr {
    constructor() {
        super(...arguments);
        this.selected = new Set();
    }
    className() {
        return 'Table';
    }
    recalculateStyles() {
        const style = (0,jodit_core_global__WEBPACK_IMPORTED_MODULE_4__/* .getContainer */ .ZO)(this.j, Table, 'style', true);
        const selectors = [];
        this.selected.forEach(td => {
            const selector = (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.cssPath)(td);
            selector && selectors.push(selector);
        });
        style.innerHTML = selectors.length
            ? selectors.join(',') +
                `{${this.jodit.options.table.selectionCellStyle}}`
            : '';
    }
    addSelection(td) {
        this.selected.add(td);
        this.recalculateStyles();
        const table = jodit_core_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.closest */ .i.closest(td, 'table', this.j.editor);
        if (table) {
            const cells = Table.selectedByTable.get(table) || new Set();
            cells.add(td);
            Table.selectedByTable.set(table, cells);
        }
    }
    removeSelection(td) {
        this.selected.delete(td);
        this.recalculateStyles();
        const table = jodit_core_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.closest */ .i.closest(td, 'table', this.j.editor);
        if (table) {
            const cells = Table.selectedByTable.get(table);
            if (cells) {
                cells.delete(td);
                if (!cells.size) {
                    Table.selectedByTable.delete(table);
                }
            }
        }
    }
    getAllSelectedCells() {
        return (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.toArray)(this.selected);
    }
    static getSelectedCellsByTable(table) {
        const cells = Table.selectedByTable.get(table);
        return cells ? (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.toArray)(cells) : [];
    }
    destruct() {
        this.selected.clear();
        return super.destruct();
    }
    static getRowsCount(table) {
        return table.rows.length;
    }
    static getColumnsCount(table) {
        const matrix = Table.formalMatrix(table);
        return matrix.reduce((max_count, cells) => Math.max(max_count, cells.length), 0);
    }
    static formalMatrix(table, callback) {
        const matrix = [[]];
        const rows = (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.toArray)(table.rows);
        const setCell = (cell, i) => {
            if (matrix[i] === undefined) {
                matrix[i] = [];
            }
            const colSpan = cell.colSpan, rowSpan = cell.rowSpan;
            let column, row, currentColumn = 0;
            while (matrix[i][currentColumn]) {
                currentColumn += 1;
            }
            for (row = 0; row < rowSpan; row += 1) {
                for (column = 0; column < colSpan; column += 1) {
                    if (matrix[i + row] === undefined) {
                        matrix[i + row] = [];
                    }
                    if (callback &&
                        callback(cell, i + row, currentColumn + column, colSpan, rowSpan) === false) {
                        return false;
                    }
                    matrix[i + row][currentColumn + column] = cell;
                }
            }
        };
        for (let i = 0; i < rows.length; i += 1) {
            const cells = (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.toArray)(rows[i].cells);
            for (let j = 0; j < cells.length; j += 1) {
                if (setCell(cells[j], i) === false) {
                    return matrix;
                }
            }
        }
        return matrix;
    }
    static formalCoordinate(table, cell, max = false) {
        let i = 0, j = 0, width = 1, height = 1;
        Table.formalMatrix(table, (td, ii, jj, colSpan, rowSpan) => {
            if (cell === td) {
                i = ii;
                j = jj;
                width = colSpan || 1;
                height = rowSpan || 1;
                if (max) {
                    j += (colSpan || 1) - 1;
                    i += (rowSpan || 1) - 1;
                }
                return false;
            }
        });
        return [i, j, width, height];
    }
    static appendRow(table, line, after, create) {
        var _a;
        let row;
        if (!line) {
            const columnsCount = Table.getColumnsCount(table);
            row = create.element('tr');
            for (let j = 0; j < columnsCount; j += 1) {
                row.appendChild(create.element('td'));
            }
        }
        else {
            row = line.cloneNode(true);
            (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.$$)('td,th', line).forEach(cell => {
                const rowspan = (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.attr)(cell, 'rowspan');
                if (rowspan && parseInt(rowspan, 10) > 1) {
                    const newRowSpan = parseInt(rowspan, 10) - 1;
                    (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.attr)(cell, 'rowspan', newRowSpan > 1 ? newRowSpan : null);
                }
            });
            (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.$$)('td,th', row).forEach(cell => {
                cell.innerHTML = '';
            });
        }
        if (after && line && line.nextSibling) {
            line.parentNode &&
                line.parentNode.insertBefore(row, line.nextSibling);
        }
        else if (!after && line) {
            line.parentNode && line.parentNode.insertBefore(row, line);
        }
        else {
            (((_a = table.getElementsByTagName('tbody')) === null || _a === void 0 ? void 0 : _a[0]) || table).appendChild(row);
        }
    }
    static removeRow(table, rowIndex) {
        const box = Table.formalMatrix(table);
        let dec;
        const row = table.rows[rowIndex];
        box[rowIndex].forEach((cell, j) => {
            dec = false;
            if (rowIndex - 1 >= 0 && box[rowIndex - 1][j] === cell) {
                dec = true;
            }
            else if (box[rowIndex + 1] && box[rowIndex + 1][j] === cell) {
                if (cell.parentNode === row && cell.parentNode.nextSibling) {
                    dec = true;
                    let nextCell = j + 1;
                    while (box[rowIndex + 1][nextCell] === cell) {
                        nextCell += 1;
                    }
                    const nextRow = jodit_core_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.next */ .i.next(cell.parentNode, elm => jodit_core_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.isTag */ .i.isTag(elm, 'tr'), table);
                    if (nextRow) {
                        if (box[rowIndex + 1][nextCell]) {
                            nextRow.insertBefore(cell, box[rowIndex + 1][nextCell]);
                        }
                        else {
                            nextRow.appendChild(cell);
                        }
                    }
                }
            }
            else {
                jodit_core_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.safeRemove */ .i.safeRemove(cell);
            }
            if (dec &&
                (cell.parentNode === row || cell !== box[rowIndex][j - 1])) {
                const rowSpan = cell.rowSpan;
                (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.attr)(cell, 'rowspan', rowSpan - 1 > 1 ? rowSpan - 1 : null);
            }
        });
        jodit_core_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.safeRemove */ .i.safeRemove(row);
    }
    static appendColumn(table, j, after, create) {
        const box = Table.formalMatrix(table);
        let i;
        if (j === undefined || j < 0) {
            j = Table.getColumnsCount(table) - 1;
        }
        for (i = 0; i < box.length; i += 1) {
            const cell = create.element('td');
            const td = box[i][j];
            let added = false;
            if (after) {
                if ((box[i] && td && j + 1 >= box[i].length) ||
                    td !== box[i][j + 1]) {
                    if (td.nextSibling) {
                        jodit_core_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.before */ .i.before(td.nextSibling, cell);
                    }
                    else {
                        td.parentNode && td.parentNode.appendChild(cell);
                    }
                    added = true;
                }
            }
            else {
                if (j - 1 < 0 ||
                    (box[i][j] !== box[i][j - 1] && box[i][j].parentNode)) {
                    jodit_core_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.before */ .i.before(box[i][j], cell);
                    added = true;
                }
            }
            if (!added) {
                (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.attr)(box[i][j], 'colspan', parseInt((0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.attr)(box[i][j], 'colspan') || '1', 10) + 1);
            }
        }
    }
    static removeColumn(table, j) {
        const box = Table.formalMatrix(table);
        let dec;
        box.forEach((cells, i) => {
            const td = cells[j];
            dec = false;
            if (j - 1 >= 0 && box[i][j - 1] === td) {
                dec = true;
            }
            else if (j + 1 < cells.length && box[i][j + 1] === td) {
                dec = true;
            }
            else {
                jodit_core_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.safeRemove */ .i.safeRemove(td);
            }
            if (dec && (i - 1 < 0 || td !== box[i - 1][j])) {
                const colSpan = td.colSpan;
                (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.attr)(td, 'colspan', colSpan - 1 > 1 ? (colSpan - 1).toString() : null);
            }
        });
    }
    static getSelectedBound(table, selectedCells) {
        const bound = [
            [Infinity, Infinity],
            [0, 0]
        ];
        const box = Table.formalMatrix(table);
        let i, j, k;
        for (i = 0; i < box.length; i += 1) {
            for (j = 0; box[i] && j < box[i].length; j += 1) {
                if (selectedCells.includes(box[i][j])) {
                    bound[0][0] = Math.min(i, bound[0][0]);
                    bound[0][1] = Math.min(j, bound[0][1]);
                    bound[1][0] = Math.max(i, bound[1][0]);
                    bound[1][1] = Math.max(j, bound[1][1]);
                }
            }
        }
        for (i = bound[0][0]; i <= bound[1][0]; i += 1) {
            for (k = 1, j = bound[0][1]; j <= bound[1][1]; j += 1) {
                while (box[i] && box[i][j - k] && box[i][j] === box[i][j - k]) {
                    bound[0][1] = Math.min(j - k, bound[0][1]);
                    bound[1][1] = Math.max(j - k, bound[1][1]);
                    k += 1;
                }
                k = 1;
                while (box[i] && box[i][j + k] && box[i][j] === box[i][j + k]) {
                    bound[0][1] = Math.min(j + k, bound[0][1]);
                    bound[1][1] = Math.max(j + k, bound[1][1]);
                    k += 1;
                }
                k = 1;
                while (box[i - k] && box[i][j] === box[i - k][j]) {
                    bound[0][0] = Math.min(i - k, bound[0][0]);
                    bound[1][0] = Math.max(i - k, bound[1][0]);
                    k += 1;
                }
                k = 1;
                while (box[i + k] && box[i][j] === box[i + k][j]) {
                    bound[0][0] = Math.min(i + k, bound[0][0]);
                    bound[1][0] = Math.max(i + k, bound[1][0]);
                    k += 1;
                }
            }
        }
        return bound;
    }
    static normalizeTable(table) {
        let i, j, min, not;
        const __marked = [], box = Table.formalMatrix(table);
        for (j = 0; j < box[0].length; j += 1) {
            min = 1000000;
            not = false;
            for (i = 0; i < box.length; i += 1) {
                if (box[i][j] === undefined) {
                    continue;
                }
                if (box[i][j].colSpan < 2) {
                    not = true;
                    break;
                }
                min = Math.min(min, box[i][j].colSpan);
            }
            if (!not) {
                for (i = 0; i < box.length; i += 1) {
                    if (box[i][j] === undefined) {
                        continue;
                    }
                    Table.mark(box[i][j], 'colspan', box[i][j].colSpan - min + 1, __marked);
                }
            }
        }
        for (i = 0; i < box.length; i += 1) {
            min = 1000000;
            not = false;
            for (j = 0; j < box[i].length; j += 1) {
                if (box[i][j] === undefined) {
                    continue;
                }
                if (box[i][j].rowSpan < 2) {
                    not = true;
                    break;
                }
                min = Math.min(min, box[i][j].rowSpan);
            }
            if (!not) {
                for (j = 0; j < box[i].length; j += 1) {
                    if (box[i][j] === undefined) {
                        continue;
                    }
                    Table.mark(box[i][j], 'rowspan', box[i][j].rowSpan - min + 1, __marked);
                }
            }
        }
        for (i = 0; i < box.length; i += 1) {
            for (j = 0; j < box[i].length; j += 1) {
                if (box[i][j] === undefined) {
                    continue;
                }
                if (box[i][j].hasAttribute('rowspan') &&
                    box[i][j].rowSpan === 1) {
                    (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.attr)(box[i][j], 'rowspan', null);
                }
                if (box[i][j].hasAttribute('colspan') &&
                    box[i][j].colSpan === 1) {
                    (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.attr)(box[i][j], 'colspan', null);
                }
                if (box[i][j].hasAttribute('class') &&
                    !(0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.attr)(box[i][j], 'class')) {
                    (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.attr)(box[i][j], 'class', null);
                }
            }
        }
        Table.unmark(__marked);
    }
    static mergeSelected(table, jodit) {
        const html = [], bound = Table.getSelectedBound(table, Table.getSelectedCellsByTable(table));
        let w = 0, first = null, first_j = 0, td, cols = 0, rows = 0;
        const alreadyMerged = new Set(), __marked = [];
        if (bound && (bound[0][0] - bound[1][0] || bound[0][1] - bound[1][1])) {
            Table.formalMatrix(table, (cell, i, j, cs, rs) => {
                if (i >= bound[0][0] && i <= bound[1][0]) {
                    if (j >= bound[0][1] && j <= bound[1][1]) {
                        td = cell;
                        if (alreadyMerged.has(td)) {
                            return;
                        }
                        alreadyMerged.add(td);
                        if (i === bound[0][0] && td.style.width) {
                            w += td.offsetWidth;
                        }
                        if ((0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.trim)(cell.innerHTML.replace(/<br(\/)?>/g, '')) !== '') {
                            html.push(cell.innerHTML);
                        }
                        if (cs > 1) {
                            cols += cs - 1;
                        }
                        if (rs > 1) {
                            rows += rs - 1;
                        }
                        if (!first) {
                            first = cell;
                            first_j = j;
                        }
                        else {
                            Table.mark(td, 'remove', 1, __marked);
                            instance(jodit).removeSelection(td);
                        }
                    }
                }
            });
            cols = bound[1][1] - bound[0][1] + 1;
            rows = bound[1][0] - bound[0][0] + 1;
            if (first) {
                if (cols > 1) {
                    Table.mark(first, 'colspan', cols, __marked);
                }
                if (rows > 1) {
                    Table.mark(first, 'rowspan', rows, __marked);
                }
                if (w) {
                    Table.mark(first, 'width', ((w / table.offsetWidth) * 100).toFixed(jodit_core_constants__WEBPACK_IMPORTED_MODULE_0__.ACCURACY) + '%', __marked);
                    if (first_j) {
                        Table.setColumnWidthByDelta(table, first_j, 0, true, __marked);
                    }
                }
                first.innerHTML = html.join('<br/>');
                instance(jodit).addSelection(first);
                alreadyMerged.delete(first);
                Table.unmark(__marked);
                Table.normalizeTable(table);
                (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.toArray)(table.rows).forEach((tr, index) => {
                    if (!tr.cells.length) {
                        jodit_core_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.safeRemove */ .i.safeRemove(tr);
                    }
                });
            }
        }
    }
    static splitHorizontal(table, jodit) {
        let coord, td, tr, parent, after;
        const __marked = [];
        Table.getSelectedCellsByTable(table).forEach((cell) => {
            td = jodit.createInside.element('td');
            td.appendChild(jodit.createInside.element('br'));
            tr = jodit.createInside.element('tr');
            coord = Table.formalCoordinate(table, cell);
            if (cell.rowSpan < 2) {
                Table.formalMatrix(table, (tdElm, i, j) => {
                    if (coord[0] === i &&
                        coord[1] !== j &&
                        tdElm !== cell) {
                        Table.mark(tdElm, 'rowspan', tdElm.rowSpan + 1, __marked);
                    }
                });
                jodit_core_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.after */ .i.after(jodit_core_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.closest */ .i.closest(cell, 'tr', table), tr);
                tr.appendChild(td);
            }
            else {
                Table.mark(cell, 'rowspan', cell.rowSpan - 1, __marked);
                Table.formalMatrix(table, (tdElm, i, j) => {
                    if (i > coord[0] &&
                        i < coord[0] + cell.rowSpan &&
                        coord[1] > j &&
                        tdElm.parentNode
                            .rowIndex === i) {
                        after = tdElm;
                    }
                    if (coord[0] < i && tdElm === cell) {
                        parent = table.rows[i];
                    }
                });
                if (after) {
                    jodit_core_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.after */ .i.after(after, td);
                }
                else {
                    parent.insertBefore(td, parent.firstChild);
                }
            }
            if (cell.colSpan > 1) {
                Table.mark(td, 'colspan', cell.colSpan, __marked);
            }
            Table.unmark(__marked);
            instance(jodit).removeSelection(cell);
        });
        this.normalizeTable(table);
    }
    static splitVertical(table, jodit) {
        let coord, td, percentage;
        const __marked = [];
        Table.getSelectedCellsByTable(table).forEach(cell => {
            coord = Table.formalCoordinate(table, cell);
            if (cell.colSpan < 2) {
                Table.formalMatrix(table, (tdElm, i, j) => {
                    if (coord[1] === j && coord[0] !== i && tdElm !== cell) {
                        Table.mark(tdElm, 'colspan', tdElm.colSpan + 1, __marked);
                    }
                });
            }
            else {
                Table.mark(cell, 'colspan', cell.colSpan - 1, __marked);
            }
            td = jodit.createInside.element('td');
            td.appendChild(jodit.createInside.element('br'));
            if (cell.rowSpan > 1) {
                Table.mark(td, 'rowspan', cell.rowSpan, __marked);
            }
            const oldWidth = cell.offsetWidth;
            jodit_core_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.after */ .i.after(cell, td);
            percentage = oldWidth / table.offsetWidth / 2;
            Table.mark(cell, 'width', (percentage * 100).toFixed(jodit_core_constants__WEBPACK_IMPORTED_MODULE_0__.ACCURACY) + '%', __marked);
            Table.mark(td, 'width', (percentage * 100).toFixed(jodit_core_constants__WEBPACK_IMPORTED_MODULE_0__.ACCURACY) + '%', __marked);
            Table.unmark(__marked);
            instance(jodit).removeSelection(cell);
        });
        Table.normalizeTable(table);
    }
    static setColumnWidthByDelta(table, column, delta, noUnmark, marked) {
        const box = Table.formalMatrix(table);
        let clearWidthIndex = 0;
        for (let i = 0; i < box.length; i += 1) {
            const cell = box[i][column];
            if (cell.colSpan > 1 && box.length > 1) {
                continue;
            }
            const w = cell.offsetWidth;
            const percent = ((w + delta) / table.offsetWidth) * 100;
            Table.mark(cell, 'width', percent.toFixed(jodit_core_constants__WEBPACK_IMPORTED_MODULE_0__.ACCURACY) + '%', marked);
            clearWidthIndex = i;
            break;
        }
        for (let i = clearWidthIndex + 1; i < box.length; i += 1) {
            const cell = box[i][column];
            Table.mark(cell, 'width', null, marked);
        }
        if (!noUnmark) {
            Table.unmark(marked);
        }
    }
    static mark(cell, key, value, marked) {
        var _a;
        marked.push(cell);
        const dict = (_a = markedValue.get(cell)) !== null && _a !== void 0 ? _a : {};
        dict[key] = value === undefined ? 1 : value;
        markedValue.set(cell, dict);
    }
    static unmark(marked) {
        marked.forEach(cell => {
            const dict = markedValue.get(cell);
            if (dict) {
                Object.keys(dict).forEach((key) => {
                    const value = dict[key];
                    switch (key) {
                        case 'remove':
                            jodit_core_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.safeRemove */ .i.safeRemove(cell);
                            break;
                        case 'rowspan':
                            (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.attr)(cell, 'rowspan', (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.isNumber)(value) && value > 1 ? value : null);
                            break;
                        case 'colspan':
                            (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.attr)(cell, 'colspan', (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.isNumber)(value) && value > 1 ? value : null);
                            break;
                        case 'width':
                            if (value == null) {
                                cell.style.removeProperty('width');
                                if (!(0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.attr)(cell, 'style')) {
                                    (0,jodit_core_helpers___WEBPACK_IMPORTED_MODULE_2__.attr)(cell, 'style', null);
                                }
                            }
                            else {
                                cell.style.width = value.toString();
                            }
                            break;
                    }
                    delete dict[key];
                });
                markedValue.delete(cell);
            }
        });
    }
}
Table.selectedByTable = new WeakMap();
(0,tslib__WEBPACK_IMPORTED_MODULE_6__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_5__.debounce)()
], Table.prototype, "recalculateStyles", null);
const instance = (j) => j.getInstance('Table', j.o);


/***/ }),

/***/ 7708:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "h": function() { return /* binding */ ToolbarButton; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(20255);
/* harmony import */ var jodit_core_ui_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(17460);
/* harmony import */ var jodit_core_decorators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(11169);
/* harmony import */ var jodit_core_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(94522);
/* harmony import */ var jodit_core_ui_popup_popup__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(26322);
/* harmony import */ var jodit_modules_toolbar_factory__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(42701);
/* harmony import */ var jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(52607);
/* harmony import */ var jodit_core_ui_icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(76381);
/* harmony import */ var jodit_modules_toolbar_collection_collection__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(39697);
/* harmony import */ var jodit_core_component_statuses__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(10799);
/* harmony import */ var jodit_core_ui_helpers_get_control_type__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(13214);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */












let ToolbarButton = class ToolbarButton extends jodit_core_ui_button__WEBPACK_IMPORTED_MODULE_0__/* .UIButton */ .y3 {
    constructor(jodit, control, target = null) {
        super(jodit);
        this.control = control;
        this.target = target;
        this.state = {
            ...(0,jodit_core_ui_button__WEBPACK_IMPORTED_MODULE_0__/* .UIButtonState */ .Yc)(),
            theme: 'toolbar',
            currentValue: '',
            hasTrigger: false
        };
        this.openedPopup = null;
        jodit.e.on([this.button, this.trigger], 'mousedown', (e) => e.preventDefault());
        this.onAction(this.onClick);
        this.hookStatus(jodit_core_component_statuses__WEBPACK_IMPORTED_MODULE_8__/* .STATUSES.ready */ .n.ready, () => {
            this.initFromControl();
            this.initTooltip();
            this.update();
        });
        if (control.mods) {
            Object.keys(control.mods).forEach(mod => {
                control.mods && this.setMod(mod, control.mods[mod]);
            });
        }
    }
    className() {
        return 'ToolbarButton';
    }
    get toolbar() {
        return this.closest(jodit_modules_toolbar_collection_collection__WEBPACK_IMPORTED_MODULE_7__/* .ToolbarCollection */ .n);
    }
    get button() {
        return this.container.querySelector(`button.${this.componentName}__button`);
    }
    update() {
        const { control, state } = this, tc = this.closest(jodit_modules_toolbar_collection_collection__WEBPACK_IMPORTED_MODULE_7__/* .ToolbarCollection */ .n);
        state.disabled = this.calculateDisabledStatus(tc);
        state.activated = this.calculateActivatedStatus(tc);
        if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.isFunction)(control.update) && tc) {
            control.update(this, tc.jodit);
        }
        super.update();
    }
    calculateActivatedStatus(tc) {
        if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.isJoditObject)(this.j) && !this.j.editorIsActive) {
            return false;
        }
        if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.isFunction)(this.control.isActive) &&
            this.control.isActive(this.j, this.control, this)) {
            return true;
        }
        return Boolean(tc && tc.shouldBeActive(this));
    }
    calculateDisabledStatus(tc) {
        if (this.j.o.disabled) {
            return true;
        }
        if (this.j.o.readonly &&
            (!this.j.o.activeButtonsInReadOnly ||
                !this.j.o.activeButtonsInReadOnly.includes(this.control.name))) {
            return true;
        }
        if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.isFunction)(this.control.isDisabled) &&
            this.control.isDisabled(this.j, this.control, this)) {
            return true;
        }
        return Boolean(tc && tc.shouldBeDisabled(this));
    }
    onChangeActivated() {
        (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.attr)(this.button, 'aria-pressed', this.state.activated);
        super.onChangeActivated();
    }
    onChangeText() {
        if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.isFunction)(this.control.template)) {
            this.text.innerHTML = this.control.template(this.j, this.control.name, this.j.i18n(this.state.text));
        }
        else {
            super.onChangeText();
        }
        this.setMod('text-icons', Boolean(this.text.innerText.trim().length));
    }
    onChangeTabIndex() {
        (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.attr)(this.button, 'tabindex', this.state.tabIndex);
    }
    onChangeTooltip() {
        (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.attr)(this.button, 'aria-label', this.state.tooltip);
        super.onChangeTooltip();
    }
    createContainer() {
        const cn = this.componentName;
        const container = this.j.c.span(cn);
        const button = super.createContainer();
        (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.attr)(container, 'role', 'listitem');
        button.classList.remove(cn);
        button.classList.add(cn + '__button');
        Object.defineProperty(button, 'component', {
            value: this
        });
        container.appendChild(button);
        this.trigger = this.j.c.fromHTML(`<span role="trigger" class="${cn}__trigger">${jodit_core_ui_icon__WEBPACK_IMPORTED_MODULE_6__/* .Icon.get */ .J.get('chevron')}</span>`);
        return container;
    }
    focus() {
        var _a;
        (_a = this.container.querySelector('button')) === null || _a === void 0 ? void 0 : _a.focus();
    }
    onChangeHasTrigger() {
        if (this.state.hasTrigger) {
            this.container.appendChild(this.trigger);
        }
        else {
            jodit_core_dom__WEBPACK_IMPORTED_MODULE_2__/* .Dom.safeRemove */ .i.safeRemove(this.trigger);
        }
        this.setMod('with-trigger', this.state.hasTrigger || null);
    }
    onChangeDisabled() {
        const dsb = this.state.disabled ? 'disabled' : null;
        (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.attr)(this.trigger, 'disabled', dsb);
        (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.attr)(this.button, 'disabled', dsb);
        (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.attr)(this.container, 'disabled', dsb);
    }
    initTooltip() {
        if (!this.j.o.textIcons &&
            this.j.o.showTooltip &&
            !this.j.o.useNativeTooltip) {
            this.j.e
                .off(this.container, 'mouseenter mouseleave')
                .on(this.container, 'mousemove', (e) => {
                if (!this.state.tooltip) {
                    return;
                }
                !this.state.disabled &&
                    this.j.e.fire('delayShowTooltip', () => ({
                        x: e.clientX + 10,
                        y: e.clientY + 10
                    }), this.state.tooltip);
            })
                .on(this.container, 'mouseleave', () => {
                this.j.e.fire('hideTooltip');
            });
        }
    }
    initFromControl() {
        var _a;
        const { control: ctr, state } = this;
        this.updateSize();
        state.name = ctr.name;
        const { textIcons } = this.j.o;
        if (textIcons === true ||
            ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.isFunction)(textIcons) && textIcons(ctr.name)) ||
            ctr.template) {
            state.icon = (0,jodit_core_ui_button__WEBPACK_IMPORTED_MODULE_0__/* .UIButtonState */ .Yc)().icon;
            state.text = ctr.text || ctr.name;
        }
        else {
            if (ctr.iconURL) {
                state.icon.iconURL = ctr.iconURL;
            }
            else {
                const name = ctr.icon || ctr.name;
                state.icon.name =
                    jodit_core_ui_icon__WEBPACK_IMPORTED_MODULE_6__/* .Icon.exists */ .J.exists(name) || ((_a = this.j.o.extraIcons) === null || _a === void 0 ? void 0 : _a[name])
                        ? name
                        : '';
            }
            if (!ctr.iconURL && !state.icon.name) {
                state.text = ctr.text || ctr.name;
            }
        }
        if (ctr.tooltip) {
            state.tooltip = this.j.i18n((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.isFunction)(ctr.tooltip)
                ? ctr.tooltip(this.j, ctr, this)
                : ctr.tooltip);
        }
        state.hasTrigger = Boolean(ctr.list || (ctr.popup && ctr.exec));
    }
    onTriggerClick(e) {
        var _a, _b, _c;
        if (this.openedPopup) {
            this.closePopup();
            return;
        }
        const { control: ctr } = this;
        e.buffer = {
            actionTrigger: this
        };
        if (ctr.list) {
            return this.openControlList(ctr);
        }
        if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.isFunction)(ctr.popup)) {
            const popup = this.openPopup();
            popup.parentElement = this;
            if (this.j.e.fire((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.camelCase)(`before-${ctr.name}-open-popup`), this.target, ctr, popup) !== false) {
                const target = (_c = (_b = (_a = this.toolbar) === null || _a === void 0 ? void 0 : _a.getTarget(this)) !== null && _b !== void 0 ? _b : this.target) !== null && _c !== void 0 ? _c : null;
                const elm = ctr.popup(this.j, target, ctr, this.closePopup, this);
                if (elm) {
                    popup
                        .setContent((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.isString)(elm) ? this.j.c.fromHTML(elm) : elm)
                        .open(() => (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.position)(this.container), false, this.j.o.allowTabNavigation
                        ? this.container
                        : undefined);
                }
            }
            this.j.e.fire((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.camelCase)(`after-${ctr.name}-open-popup`), popup.container);
        }
    }
    openControlList(control) {
        var _a;
        const controls = (_a = this.jodit.options.controls) !== null && _a !== void 0 ? _a : {}, getControl = (key) => (0,jodit_core_ui_helpers_get_control_type__WEBPACK_IMPORTED_MODULE_9__/* .findControlType */ .z)(key, controls);
        const list = control.list, menu = this.openPopup(), toolbar = (0,jodit_modules_toolbar_factory__WEBPACK_IMPORTED_MODULE_4__/* .makeCollection */ .R)(this.j);
        menu.parentElement = this;
        toolbar.parentElement = menu;
        toolbar.mode = 'vertical';
        const getButton = (key, value) => {
            if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.isString)(value) && getControl(value)) {
                return {
                    name: value.toString(),
                    ...getControl(value)
                };
            }
            if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.isString)(key) && getControl(key)) {
                return {
                    name: key.toString(),
                    ...getControl(key),
                    ...(typeof value === 'object' ? value : {})
                };
            }
            const { childTemplate } = control;
            const childControl = {
                name: key.toString(),
                template: childTemplate &&
                    ((j, k, v) => childTemplate(j, k, v, this)),
                exec: control.exec,
                data: control.data,
                command: control.command,
                isActive: control.isChildActive,
                isDisabled: control.isChildDisabled,
                mode: control.mode,
                args: [...(control.args ? control.args : []), key, value]
            };
            if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.isString)(value)) {
                childControl.text = value;
            }
            return childControl;
        };
        toolbar.build((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.isArray)(list)
            ? list.map(getButton)
            : (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.keys)(list, false).map(key => getButton(key, list[key])), this.target);
        menu.setContent(toolbar.container).open(() => (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.position)(this.container), false, this.j.o.allowTabNavigation ? this.container : undefined);
        this.state.activated = true;
    }
    onOutsideClick(e) {
        if (!this.openedPopup) {
            return;
        }
        if (!e ||
            !jodit_core_dom__WEBPACK_IMPORTED_MODULE_2__/* .Dom.isNode */ .i.isNode(e.target) ||
            (!jodit_core_dom__WEBPACK_IMPORTED_MODULE_2__/* .Dom.isOrContains */ .i.isOrContains(this.container, e.target) &&
                !this.openedPopup.isOwnClick(e))) {
            this.closePopup();
        }
    }
    openPopup() {
        this.closePopup();
        this.openedPopup = new jodit_core_ui_popup_popup__WEBPACK_IMPORTED_MODULE_3__/* .Popup */ .G(this.j, false);
        this.j.e
            .on(this.ow, 'mousedown touchstart', this.onOutsideClick)
            .on('escape closeAllPopups', this.onOutsideClick);
        return this.openedPopup;
    }
    closePopup() {
        if (this.openedPopup) {
            this.j.e
                .off(this.ow, 'mousedown touchstart', this.onOutsideClick)
                .off('escape closeAllPopups', this.onOutsideClick);
            this.state.activated = false;
            this.openedPopup.close();
            this.openedPopup.destruct();
            this.openedPopup = null;
        }
    }
    onClick(originalEvent) {
        var _a, _b, _c, _d, _e, _f, _g;
        const { control: ctr } = this;
        if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.isFunction)(ctr.exec)) {
            const target = (_c = (_b = (_a = this.toolbar) === null || _a === void 0 ? void 0 : _a.getTarget(this)) !== null && _b !== void 0 ? _b : this.target) !== null && _c !== void 0 ? _c : null;
            const result = ctr.exec(this.j, target, {
                control: ctr,
                originalEvent,
                button: this
            });
            if (result !== false && result !== true) {
                (_e = (_d = this.j) === null || _d === void 0 ? void 0 : _d.e) === null || _e === void 0 ? void 0 : _e.fire('synchro');
                if (this.parentElement) {
                    this.parentElement.update();
                }
                (_g = (_f = this.j) === null || _f === void 0 ? void 0 : _f.e) === null || _g === void 0 ? void 0 : _g.fire('closeAllPopups afterExec');
            }
            if (result !== false) {
                return;
            }
        }
        if (ctr.list) {
            return this.openControlList(ctr);
        }
        if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.isFunction)(ctr.popup)) {
            return this.onTriggerClick(originalEvent);
        }
        if (ctr.command || ctr.name) {
            (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.call)((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_5__.isJoditObject)(this.j)
                ? this.j.execCommand.bind(this.j)
                : this.j.od.execCommand.bind(this.j.od), ctr.command || ctr.name, false, ctr.args && ctr.args[0]);
            this.j.e.fire('closeAllPopups');
        }
    }
    destruct() {
        this.closePopup();
        return super.destruct();
    }
};
(0,tslib__WEBPACK_IMPORTED_MODULE_10__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_1__.watch)('state.tooltip')
], ToolbarButton.prototype, "onChangeTooltip", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_10__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_1__.watch)('state.hasTrigger')
], ToolbarButton.prototype, "onChangeHasTrigger", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_10__/* .__decorate */ .gn)([
    (0,jodit_core_decorators__WEBPACK_IMPORTED_MODULE_1__.watch)('trigger:click')
], ToolbarButton.prototype, "onTriggerClick", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_10__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_1__.autobind
], ToolbarButton.prototype, "onOutsideClick", null);
(0,tslib__WEBPACK_IMPORTED_MODULE_10__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_1__.autobind
], ToolbarButton.prototype, "closePopup", null);
ToolbarButton = (0,tslib__WEBPACK_IMPORTED_MODULE_10__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_1__.component
], ToolbarButton);



/***/ }),

/***/ 74979:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c": function() { return /* binding */ ToolbarContent; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(20255);
/* harmony import */ var jodit_core_ui_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(17460);
/* harmony import */ var jodit_core_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(94522);
/* harmony import */ var jodit_core_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(52607);
/* harmony import */ var jodit_core_decorators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(11169);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






let ToolbarContent = class ToolbarContent extends jodit_core_ui_button__WEBPACK_IMPORTED_MODULE_0__/* .UIButton */ .y3 {
    constructor(jodit, control, target = null) {
        super(jodit);
        this.control = control;
        this.target = target;
        this.container.classList.add(`${this.componentName}_${this.clearName(control.name)}`);
        (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_2__.attr)(this.container, 'role', 'content');
    }
    className() {
        return 'ToolbarContent';
    }
    update() {
        const content = this.control.getContent(this.j, this.control, this);
        if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_2__.isString)(content) || content.parentNode !== this.container) {
            jodit_core_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.detach */ .i.detach(this.container);
            this.container.appendChild((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_2__.isString)(content) ? this.j.create.fromHTML(content) : content);
        }
        super.update();
    }
    createContainer() {
        return this.j.c.span(this.componentName);
    }
};
ToolbarContent = (0,tslib__WEBPACK_IMPORTED_MODULE_4__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_3__.component
], ToolbarContent);



/***/ }),

/***/ 39697:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "n": function() { return /* binding */ ToolbarCollection; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(20255);
/* harmony import */ var jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52607);
/* harmony import */ var jodit_core_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(41685);
/* harmony import */ var _factory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(42701);
/* harmony import */ var jodit_core_decorators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(11169);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






let ToolbarCollection = class ToolbarCollection extends jodit_core_ui__WEBPACK_IMPORTED_MODULE_1__/* .UIList */ .bz {
    constructor(jodit) {
        super(jodit);
        this.listenEvents = 'updateToolbar changeStack mousedown mouseup keydown change afterInit readonly afterResize ' +
            'selectionchange changeSelection focus afterSetMode touchstart focus blur';
        this.update = this.j.async.debounce(this.immediateUpdate, () => this.j.defaultTimeout);
        this.__tooltip = null;
        this.initEvents();
        this.__tooltip = jodit_core_ui__WEBPACK_IMPORTED_MODULE_1__/* .UITooltip.make */ .Ne.make(jodit);
    }
    className() {
        return 'ToolbarCollection';
    }
    get firstButton() {
        const [button] = this.buttons;
        return button || null;
    }
    makeButton(control, target = null) {
        return (0,_factory__WEBPACK_IMPORTED_MODULE_2__/* .makeButton */ .g)(this.j, control, target);
    }
    shouldBeActive(button) {
        return undefined;
    }
    shouldBeDisabled(button) {
        return undefined;
    }
    getTarget(button) {
        return button.target || null;
    }
    immediateUpdate() {
        if (this.isDestructed || this.j.isLocked) {
            return;
        }
        super.update();
        this.j.e.fire('afterUpdateToolbar');
    }
    setDirection(direction) {
        this.container.style.direction = direction;
        this.container.setAttribute('dir', direction);
    }
    initEvents() {
        this.j.e
            .on(this.listenEvents, this.update)
            .on('afterSetMode focus', this.immediateUpdate);
    }
    hide() {
        this.container.remove();
    }
    show() {
        this.appendTo(this.j.toolbarContainer);
    }
    showInline(bound) {
        throw (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.error)('The method is not implemented for this class.');
    }
    build(items, target = null) {
        const itemsWithGroupps = this.j.e.fire('beforeToolbarBuild', items);
        if (itemsWithGroupps) {
            items = itemsWithGroupps;
        }
        super.build(items, target);
        return this;
    }
    destruct() {
        var _a;
        if (this.isDestructed) {
            return;
        }
        (_a = this.__tooltip) === null || _a === void 0 ? void 0 : _a.destruct();
        this.j.e
            .off(this.listenEvents, this.update)
            .off('afterSetMode focus', this.immediateUpdate);
        super.destruct();
    }
};
(0,tslib__WEBPACK_IMPORTED_MODULE_4__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_3__.autobind
], ToolbarCollection.prototype, "immediateUpdate", null);
ToolbarCollection = (0,tslib__WEBPACK_IMPORTED_MODULE_4__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_3__.component
], ToolbarCollection);



/***/ }),

/***/ 19843:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "N": function() { return /* binding */ ToolbarEditorCollection; }
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(20255);
/* harmony import */ var _collection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(39697);
/* harmony import */ var jodit_core_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10063);
/* harmony import */ var jodit_core_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(94522);
/* harmony import */ var jodit_core_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(52607);
/* harmony import */ var jodit_core_decorators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(11169);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */






let ToolbarEditorCollection = class ToolbarEditorCollection extends _collection__WEBPACK_IMPORTED_MODULE_0__/* .ToolbarCollection */ .n {
    constructor(jodit) {
        super(jodit);
        this.checkActiveStatus = (cssObject, node) => {
            let matches = 0, total = 0;
            Object.keys(cssObject).forEach((cssProperty) => {
                const cssValue = cssObject[cssProperty];
                if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_3__.isFunction)(cssValue)) {
                    if (cssValue(this.j, (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_3__.css)(node, cssProperty).toString())) {
                        matches += 1;
                    }
                }
                else {
                    if (cssValue.indexOf((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_3__.css)(node, cssProperty).toString()) !== -1) {
                        matches += 1;
                    }
                }
                total += 1;
            });
            return total === matches;
        };
        this.prependInvisibleInput(this.container);
    }
    className() {
        return 'ToolbarEditorCollection';
    }
    shouldBeDisabled(button) {
        const disabled = super.shouldBeDisabled(button);
        if (disabled !== undefined) {
            return disabled;
        }
        const mode = button.control.mode === undefined
            ? jodit_core_constants__WEBPACK_IMPORTED_MODULE_1__.MODE_WYSIWYG
            : button.control.mode;
        return !(mode === jodit_core_constants__WEBPACK_IMPORTED_MODULE_1__.MODE_SPLIT || mode === this.j.getRealMode());
    }
    shouldBeActive(button) {
        const active = super.shouldBeActive(button);
        if (active !== undefined) {
            return active;
        }
        const element = this.j.selection ? this.j.s.current() : null;
        if (!element) {
            return false;
        }
        let elm;
        if (button.control.tags) {
            const tags = button.control.tags;
            elm = element;
            if (jodit_core_dom__WEBPACK_IMPORTED_MODULE_2__/* .Dom.up */ .i.up(elm, (node) => {
                if (node &&
                    tags.indexOf(node.nodeName.toLowerCase()) !== -1) {
                    return true;
                }
            }, this.j.editor)) {
                return true;
            }
        }
        if (button.control.css) {
            const css = button.control.css;
            elm = element;
            if (jodit_core_dom__WEBPACK_IMPORTED_MODULE_2__/* .Dom.up */ .i.up(elm, (node) => {
                if (node && !jodit_core_dom__WEBPACK_IMPORTED_MODULE_2__/* .Dom.isText */ .i.isText(node)) {
                    return this.checkActiveStatus(css, node);
                }
            }, this.j.editor)) {
                return true;
            }
        }
        return false;
    }
    getTarget(button) {
        return button.target || this.j.s.current() || null;
    }
    prependInvisibleInput(container) {
        const input = this.j.create.element('input', {
            tabIndex: -1,
            disabled: true,
            style: 'width: 0; height:0; position: absolute; visibility: hidden;'
        });
        jodit_core_dom__WEBPACK_IMPORTED_MODULE_2__/* .Dom.appendChildFirst */ .i.appendChildFirst(container, input);
    }
    showInline(bound) {
        this.jodit.e.fire('showInlineToolbar', bound);
    }
    hide() {
        this.jodit.e.fire('hidePopup');
        super.hide();
        this.jodit.e.fire('toggleToolbar');
    }
    show() {
        super.show();
        this.jodit.e.fire('toggleToolbar');
    }
};
ToolbarEditorCollection = (0,tslib__WEBPACK_IMPORTED_MODULE_5__/* .__decorate */ .gn)([
    jodit_core_decorators__WEBPACK_IMPORTED_MODULE_4__.component
], ToolbarEditorCollection);



/***/ }),

/***/ 42701:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "R": function() { return /* binding */ makeCollection; },
/* harmony export */   "g": function() { return /* binding */ makeButton; }
/* harmony export */ });
/* harmony import */ var jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52607);
/* harmony import */ var _collection_collection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(39697);
/* harmony import */ var _collection_editor_collection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(19843);
/* harmony import */ var _button_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7708);
/* harmony import */ var _button_content__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(74979);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





function makeCollection(jodit, parentElement) {
    const collection = (0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.isJoditObject)(jodit)
        ? new _collection_editor_collection__WEBPACK_IMPORTED_MODULE_2__/* .ToolbarEditorCollection */ .N(jodit)
        : new _collection_collection__WEBPACK_IMPORTED_MODULE_1__/* .ToolbarCollection */ .n(jodit);
    if (jodit.o.textIcons) {
        collection.container.classList.add('jodit_text_icons');
    }
    if (parentElement) {
        collection.parentElement = parentElement;
    }
    if (jodit.o.toolbarButtonSize) {
        collection.buttonSize = jodit.o.toolbarButtonSize;
    }
    return collection;
}
function makeButton(jodit, control, target = null) {
    if ((0,jodit_core_helpers__WEBPACK_IMPORTED_MODULE_0__.isFunction)(control.getContent)) {
        return new _button_content__WEBPACK_IMPORTED_MODULE_4__/* .ToolbarContent */ .c(jodit, control, target);
    }
    const button = new _button_button__WEBPACK_IMPORTED_MODULE_3__/* .ToolbarButton */ .h(jodit, control, target);
    button.state.tabIndex = jodit.o.allowTabNavigation ? 0 : -1;
    return button;
}


/***/ }),

/***/ 60537:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "YW": function() { return /* reexport */ ColorPickerWidget; },
  "ov": function() { return /* reexport */ FileSelectorWidget; },
  "IL": function() { return /* reexport */ TabsWidget; }
});

// EXTERNAL MODULE: ./src/core/helpers/index.ts + 14 modules
var helpers = __webpack_require__(52607);
// EXTERNAL MODULE: ./src/core/ui/index.ts + 2 modules
var ui = __webpack_require__(41685);
// EXTERNAL MODULE: ./src/core/dom/index.ts
var dom = __webpack_require__(94522);
;// CONCATENATED MODULE: ./src/modules/widget/color-picker/color-picker.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




ui/* Icon.set */.JO.set('palette', __webpack_require__(95331));
const ColorPickerWidget = (editor, callback, coldColor) => {
    const cn = 'jodit-color-picker', valueHex = (0,helpers.normalizeColor)(coldColor), form = editor.c.div(cn), iconPalette = editor.o.textIcons
        ? `<span>${editor.i18n('palette')}</span>`
        : ui/* Icon.get */.JO.get('palette'), eachColor = (colors) => {
        const stack = [];
        if ((0,helpers.isPlainObject)(colors)) {
            Object.keys(colors).forEach(key => {
                stack.push(`<div class="${cn}__group ${cn}__group-${key}">`);
                stack.push(eachColor(colors[key]));
                stack.push('</div>');
            });
        }
        else if ((0,helpers.isArray)(colors)) {
            colors.forEach(color => {
                stack.push(`<span class='${cn}__color-item ${valueHex === color
                    ? cn + '__color-item_active_true'
                    : ''}' title="${color}" style="background-color:${color}" data-color="${color}"></span>`);
            });
        }
        return stack.join('');
    };
    form.appendChild(editor.c.fromHTML(`<div class="${cn}__groups">${eachColor(editor.o.colors)}</div>`));
    form.appendChild(editor.c.fromHTML(`<div data-ref="extra" class="${cn}__extra"></div>`));
    const { extra } = (0,helpers.refs)(form);
    if (editor.o.showBrowserColorPicker && (0,helpers.hasBrowserColorPicker)()) {
        extra.appendChild(editor.c.fromHTML(`<div class="${cn}__native">${iconPalette}<input type="color" value="#ffffff"/></div>`));
        editor.e.on(form, 'change', (e) => {
            e.stopPropagation();
            const target = e.target;
            if (!target || !target.tagName || !dom/* Dom.isTag */.i.isTag(target, 'input')) {
                return;
            }
            const color = target.value || '';
            if ((0,helpers.isFunction)(callback)) {
                callback(color);
            }
            e.preventDefault();
        });
    }
    editor.e.on(form, 'mousedown touchend', (e) => {
        e.stopPropagation();
        e.preventDefault();
        let target = e.target;
        if ((!target ||
            !target.tagName ||
            dom/* Dom.isTag */.i.isTag(target, 'svg') ||
            dom/* Dom.isTag */.i.isTag(target, 'path')) &&
            target.parentNode) {
            target = dom/* Dom.closest */.i.closest(target.parentNode, 'span', editor.editor);
        }
        if (!dom/* Dom.isTag */.i.isTag(target, 'span') ||
            !target.classList.contains(cn + '__color-item')) {
            return;
        }
        const color = (0,helpers.attr)(target, '-color') || '';
        if (callback && (0,helpers.isFunction)(callback)) {
            callback(color);
        }
    });
    editor.e.fire('afterGenerateColorPicker', form, extra, callback, valueHex);
    return form;
};

// EXTERNAL MODULE: ./src/core/component/index.ts + 1 modules
var component = __webpack_require__(26655);
;// CONCATENATED MODULE: ./src/modules/widget/tabs/tabs.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




const TabsWidget = (jodit, tabs, state) => {
    const box = jodit.c.div('jodit-tabs'), tabBox = jodit.c.div('jodit-tabs__wrapper'), buttons = jodit.c.div('jodit-tabs__buttons'), nameToTab = {}, buttonList = [];
    let firstTab = '', tabCount = 0;
    box.appendChild(buttons);
    box.appendChild(tabBox);
    const setActive = (tab) => {
        if (!nameToTab[tab]) {
            return;
        }
        buttonList.forEach(b => {
            b.state.activated = false;
        });
        (0,helpers.$$)('.jodit-tab', tabBox).forEach(a => {
            a.classList.remove('jodit-tab_active');
        });
        nameToTab[tab].button.state.activated = true;
        nameToTab[tab].tab.classList.add('jodit-tab_active');
    };
    tabs.forEach(({ icon, name, content }) => {
        const tab = jodit.c.div('jodit-tab'), button = (0,ui/* Button */.zx)(jodit, icon || name, name);
        jodit.e.on(button.container, 'mousedown', (e) => e.preventDefault());
        if (!firstTab) {
            firstTab = name;
        }
        buttons.appendChild(button.container);
        buttonList.push(button);
        button.container.classList.add('jodit-tabs__button', 'jodit-tabs__button_columns_' + tabs.length);
        if (!(0,helpers.isFunction)(content)) {
            tab.appendChild(component/* Component.isInstanceOf */.wA.isInstanceOf(content, ui/* UIElement */.u1)
                ? content.container
                : content);
        }
        else {
            tab.appendChild(jodit.c.div('jodit-tab_empty'));
        }
        tabBox.appendChild(tab);
        button.onAction(() => {
            setActive(name);
            if ((0,helpers.isFunction)(content)) {
                content.call(jodit);
            }
            if (state) {
                state.__activeTab = name;
            }
            return false;
        });
        nameToTab[name] = {
            button,
            tab
        };
        tabCount += 1;
    });
    if (!tabCount) {
        return box;
    }
    (0,helpers.$$)('a', buttons).forEach(a => {
        a.style.width = (100 / tabCount).toFixed(10) + '%';
    });
    const tab = !state || !state.__activeTab || !nameToTab[state.__activeTab]
        ? firstTab
        : state.__activeTab;
    setActive(tab);
    if (state) {
        let __activeTab = state.__activeTab;
        Object.defineProperty(state, '__activeTab', {
            configurable: true,
            enumerable: false,
            get() {
                return __activeTab;
            },
            set(value) {
                __activeTab = value;
                setActive(value);
            }
        });
    }
    return box;
};

;// CONCATENATED MODULE: ./src/modules/widget/file-selector/file-selector.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




const FileSelectorWidget = (editor, callbacks, elm, close, isImage = true) => {
    let currentImage;
    const tabs = [];
    if (callbacks.upload &&
        editor.o.uploader &&
        (editor.o.uploader.url || editor.o.uploader.insertImageAsBase64URI)) {
        const dragBox = editor.c.fromHTML('<div class="jodit-drag-and-drop__file-box">' +
            `<strong>${editor.i18n(isImage ? 'Drop image' : 'Drop file')}</strong>` +
            `<span><br>${editor.i18n('or click')}</span>` +
            `<input type="file" accept="${isImage ? 'image/*' : '*'}" tabindex="-1" dir="auto" multiple=""/>` +
            '</div>');
        editor.uploader.bind(dragBox, resp => {
            const handler = (0,helpers.isFunction)(callbacks.upload)
                ? callbacks.upload
                : editor.o.uploader.defaultHandlerSuccess;
            if ((0,helpers.isFunction)(handler)) {
                handler.call(editor, resp);
            }
            editor.e.fire('closeAllPopups');
        }, error => {
            editor.e.fire('errorMessage', error.message);
            editor.e.fire('closeAllPopups');
        });
        tabs.push({
            icon: 'upload',
            name: 'Upload',
            content: dragBox
        });
    }
    if (callbacks.filebrowser) {
        if (editor.o.filebrowser.ajax.url || editor.o.filebrowser.items.url) {
            tabs.push({
                icon: 'folder',
                name: 'Browse',
                content: () => {
                    close && close();
                    if (callbacks.filebrowser) {
                        editor.filebrowser.open(callbacks.filebrowser, isImage);
                    }
                }
            });
        }
    }
    if (callbacks.url) {
        const button = new ui/* UIButton */.y3(editor, {
            type: 'submit',
            variant: 'primary',
            text: 'Insert'
        }), form = new ui/* UIForm */.x4(editor, [
            new ui/* UIInput */.u3(editor, {
                required: true,
                label: 'URL',
                name: 'url',
                type: 'text',
                placeholder: 'https://'
            }),
            new ui/* UIInput */.u3(editor, {
                name: 'text',
                label: 'Alternative text'
            }),
            new ui/* UIBlock */.eC(editor, [button])
        ]);
        currentImage = null;
        if (elm &&
            !dom/* Dom.isText */.i.isText(elm) &&
            (dom/* Dom.isTag */.i.isTag(elm, 'img') || (0,helpers.$$)('img', elm).length)) {
            currentImage = elm.tagName === 'IMG' ? elm : (0,helpers.$$)('img', elm)[0];
            (0,helpers.val)(form.container, 'input[name=url]', (0,helpers.attr)(currentImage, 'src'));
            (0,helpers.val)(form.container, 'input[name=text]', (0,helpers.attr)(currentImage, 'alt'));
            button.state.text = 'Update';
        }
        if (elm && dom/* Dom.isTag */.i.isTag(elm, 'a')) {
            (0,helpers.val)(form.container, 'input[name=url]', (0,helpers.attr)(elm, 'href'));
            (0,helpers.val)(form.container, 'input[name=text]', (0,helpers.attr)(elm, 'title'));
            button.state.text = 'Update';
        }
        form.onSubmit(data => {
            if ((0,helpers.isFunction)(callbacks.url)) {
                callbacks.url.call(editor, data.url, data.text);
            }
        });
        tabs.push({
            icon: 'link',
            name: 'URL',
            content: form.container
        });
    }
    return TabsWidget(editor, tabs);
};

;// CONCATENATED MODULE: ./src/modules/widget/index.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */





/***/ }),

/***/ 53914:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ar": function() { return /* binding */ ar; },
/* harmony export */   "cs_cz": function() { return /* binding */ cs_cz; },
/* harmony export */   "de": function() { return /* binding */ de; },
/* harmony export */   "es": function() { return /* binding */ es; },
/* harmony export */   "fa": function() { return /* binding */ fa; },
/* harmony export */   "fr": function() { return /* binding */ fr; },
/* harmony export */   "he": function() { return /* binding */ he; },
/* harmony export */   "hu": function() { return /* binding */ hu; },
/* harmony export */   "id": function() { return /* binding */ id; },
/* harmony export */   "it": function() { return /* binding */ it; },
/* harmony export */   "ja": function() { return /* binding */ ja; },
/* harmony export */   "ko": function() { return /* binding */ ko; },
/* harmony export */   "nl": function() { return /* binding */ nl; },
/* harmony export */   "pl": function() { return /* binding */ pl; },
/* harmony export */   "pt_br": function() { return /* binding */ pt_br; },
/* harmony export */   "ru": function() { return /* binding */ ru; },
/* harmony export */   "tr": function() { return /* binding */ tr; },
/* harmony export */   "zh_cn": function() { return /* binding */ zh_cn; },
/* harmony export */   "zh_tw": function() { return /* binding */ zh_tw; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const ar = __webpack_require__(80078);
const cs_cz = __webpack_require__(16986);
const de = __webpack_require__(59347);
const es = __webpack_require__(63640);
const fa = __webpack_require__(53434);
const fr = __webpack_require__(85638);
const he = __webpack_require__(31743);
const hu = __webpack_require__(66219);
const id = __webpack_require__(50331);
const it = __webpack_require__(25582);
const ja = __webpack_require__(82066);
const ko = __webpack_require__(71925);
const nl = __webpack_require__(65274);
const pl = __webpack_require__(58548);
const pt_br = __webpack_require__(82958);
const ru = __webpack_require__(52315);
const tr = __webpack_require__(87727);
const zh_cn = __webpack_require__(9396);
const zh_tw = __webpack_require__(28765);



/***/ }),

/***/ 73837:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "emoji": function() { return /* binding */ emoji; }
});

// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(20255);
// EXTERNAL MODULE: ./src/core/plugin/index.ts
var core_plugin = __webpack_require__(35570);
// EXTERNAL MODULE: ./src/config.ts
var config = __webpack_require__(27537);
// EXTERNAL MODULE: ./src/core/ui/index.ts + 2 modules
var ui = __webpack_require__(41685);
// EXTERNAL MODULE: ./src/core/helpers/index.ts + 14 modules
var helpers = __webpack_require__(52607);
// EXTERNAL MODULE: ./src/core/decorators/index.ts + 7 modules
var decorators = __webpack_require__(11169);
// EXTERNAL MODULE: ./src/modules/index.ts + 15 modules
var modules = __webpack_require__(81165);
;// CONCATENATED MODULE: ./src/plugins/emoji/ui/emoji.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
var Emoji_1;






let Emoji = Emoji_1 = class Emoji extends ui/* UIElement */.u1 {
    constructor(jodit, onInsert) {
        super(jodit);
        this.onInsert = onInsert;
        this.recent = [];
        this.map = {};
        this.activeIndex = 0;
        this.cache = {};
        this.setMod('loading', true);
        (async () => {
            this.data = await jodit.o.emoji.data();
            this.setMod('loading', false);
            this.data.emoji.forEach((e) => {
                const emoji = Emoji_1.normalizeEmoji(e);
                this.map[emoji.emoji] = emoji;
            });
            this.setItems(this.defaultList);
            modules.Dom.append(this.categories, this.generateCategoriesList(this.data.categories));
            this.setActiveCategory(0);
        })();
    }
    className() {
        return 'Emoji';
    }
    get defaultList() {
        return this.recent.concat(this.data.emoji);
    }
    reset() {
        this.input.nativeInput.value = '';
        this.setItems(this.defaultList);
        this.setActiveCategory(0);
    }
    setItems(items) {
        this.list.scrollTo(0, 0);
        modules.Dom.detach(this.list);
        modules.Dom.append(this.list, this.generateEmojiList(items, this.data.categories));
    }
    createContainer(options) {
        const container = this.j.c.div('jodit-emoji');
        this.input = new ui/* UIInput */.u3(this.j, {
            name: 'search',
            icon: 'search',
            autocomplete: false,
            clearButton: true,
            placeholder: 'Search emoji'
        });
        this.input.container.classList.add(this.getFullElName('input'));
        this.categories = this.j.c.div(this.getFullElName('categories'));
        this.list = this.j.c.div(this.getFullElName('emojis'));
        const navigateContainer = this.j.c.div(this.getFullElName('navigate'));
        modules.Dom.append(navigateContainer, [this.categories, this.input.container]);
        modules.Dom.append(container, [navigateContainer, this.list]);
        return container;
    }
    static getInstance(jodit, onInsert) {
        if (!this.__instance) {
            this.__instance = new Emoji_1(jodit, onInsert);
        }
        this.__instance.onInsert = onInsert;
        if (this.__instance.data) {
            this.__instance.reset();
        }
        return this.__instance;
    }
    setActiveCategory(index, scrollIntoView = false) {
        const cats = this.getElms('category'), oldActive = cats[this.activeIndex];
        if (!cats[index]) {
            index = cats.length - 1;
        }
        const newActive = cats[index];
        const activeClass = this.getFullElName('category', 'active', true);
        if (oldActive) {
            oldActive.classList.remove(activeClass);
        }
        if (newActive) {
            newActive.classList.add(activeClass);
        }
        if (scrollIntoView) {
            const titles = this.getElms('category-title');
            titles[index].scrollIntoView();
        }
        this.activeIndex = index;
    }
    generateCategoriesList(categories) {
        return categories.map((cat, i) => this.j.c.div(this.getFullElName('category'), {
            'data-index': i,
            title: cat,
            style: {
                width: 100 / categories.length + '%'
            }
        }));
    }
    generateEmojiList(emojis, categories) {
        let currentCategory = '';
        return emojis.reduce((acc, emoji, i) => {
            var _a, _b;
            emoji = Emoji_1.normalizeEmoji(emoji);
            if (categories[emoji.category] !== currentCategory) {
                currentCategory = categories[emoji.category];
                const category = (_a = this.cache[currentCategory]) !== null && _a !== void 0 ? _a : this.j.c.div(this.getFullElName('category-title'), currentCategory ? this.j.i18n(currentCategory) : '');
                this.cache[currentCategory] = category;
                acc.push(category);
            }
            const elm = (_b = this.cache[emoji.emoji + emoji.category]) !== null && _b !== void 0 ? _b : this.j.c.div(this.getFullElName('emoji'), { 'data-id': i, 'data-value': emoji.emoji }, emoji.emoji);
            this.cache[emoji.emoji + emoji.category] = elm;
            acc.push(elm);
            return acc;
        }, []);
    }
    static isShortCat(emoji) {
        return emoji && (0,helpers.isString)(emoji.e);
    }
    static normalizeEmoji(emoji) {
        if (Emoji_1.isShortCat(emoji)) {
            return {
                emoji: emoji.e,
                description: emoji.d,
                category: emoji.c,
                aliases: emoji.a,
                tags: emoji.t
            };
        }
        return emoji;
    }
    onInsertCode(code) {
        this.onInsert(code);
        const emoji = this.map[code];
        if (emoji) {
            const newRecent = [...this.recent];
            const index = newRecent.findIndex((e) => e.emoji === code);
            if (index !== -1) {
                newRecent.splice(index, 1);
            }
            newRecent.unshift({
                ...emoji,
                category: -1
            });
            this.recent = newRecent;
        }
    }
    onScrollList() {
        const scrollTop = this.list.scrollTop, titles = this.getElms('category-title');
        let active = 0;
        titles.forEach((title, index) => {
            const pos = title.offsetTop - this.list.offsetTop - 20;
            if (scrollTop > pos) {
                active = index;
            }
        });
        this.setActiveCategory(active);
    }
    onClickCategory(e) {
        this.clearFilter();
        const target = e.target;
        if (target.classList.contains(this.getFullElName('category'))) {
            this.setActiveCategory(parseInt((0,helpers.attr)(target, '-index') || '0', 10) || 0, true);
        }
    }
    onClickItem(e) {
        const target = e.target;
        if (target.classList.contains(this.getFullElName('emoji'))) {
            const key = (0,helpers.attr)(target, '-value') || '';
            if (key) {
                this.onInsertCode(key);
            }
        }
        e.preventDefault();
    }
    onInputFilter() {
        const value = this.input.value.toLowerCase();
        if (!value.length) {
            return this.setItems(this.defaultList);
        }
        this.setItems(this.defaultList.filter((e) => {
            var _a, _b, _c;
            const emoji = Emoji_1.normalizeEmoji(e);
            return (((_a = emoji.description) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(value)) ||
                ((_b = emoji.tags) === null || _b === void 0 ? void 0 : _b.join(' ').toLowerCase().includes(value)) ||
                ((_c = emoji.aliases) === null || _c === void 0 ? void 0 : _c.join(' ').toLowerCase().includes(value)));
        }));
    }
    clearFilter() {
        if (this.input.nativeInput.value.length) {
            this.reset();
        }
    }
    onReady() {
        this.j.e
            .on(this.input.nativeInput, 'input', this.onInputFilter)
            .on(this.categories, 'click', this.onClickCategory)
            .on(this.list, 'scroll', this.onScrollList)
            .on(this.list, 'mousedown touchstart', this.onClickItem);
    }
    destruct() {
        Emoji_1.__instance = null;
        this.input.destruct();
        return super.destruct();
    }
};
(0,tslib_es6/* __decorate */.gn)([
    decorators.persistent
], Emoji.prototype, "recent", void 0);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.throttle)()
], Emoji.prototype, "onScrollList", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], Emoji.prototype, "onClickCategory", null);
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], Emoji.prototype, "onClickItem", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.debounce)()
], Emoji.prototype, "onInputFilter", null);
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.hook)('ready')
], Emoji.prototype, "onReady", null);
Emoji = Emoji_1 = (0,tslib_es6/* __decorate */.gn)([
    decorators.component
], Emoji);


// EXTERNAL MODULE: ./src/index.ts + 157 modules
var src = __webpack_require__(33594);
;// CONCATENATED MODULE: ./src/plugins/emoji/emoji.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */







config/* Config.prototype.emoji */.D.prototype.emoji = {
    data: () => __webpack_require__(23106),
    enableAutoComplete: true,
    recentCountLimit: 10
};
config/* Config.prototype.controls.emoji */.D.prototype.controls.emoji = {
    tooltip: 'Insert Emoji',
    icon: __webpack_require__(25410),
    popup: (editor, _, _1, close) => {
        editor.s.save();
        const box = Emoji.getInstance(editor, (code) => {
            editor.s.restore();
            editor.s.insertNode(editor.createInside.text(code), true);
            close();
        });
        editor.e.one('beforePopupClose', () => {
            editor.s.restore();
        });
        return box.container;
    }
};
class emoji extends core_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.requires = ['autocomplete', 'license'];
        this.hasStyle = !src.Jodit.fatMode;
        this.buttons = [
            {
                name: 'emoji',
                group: 'insert'
            }
        ];
    }
    async afterInit(jodit) {
        const data = await jodit.o.emoji.data();
        if (jodit.isInDestruct) {
            return;
        }
        this.data = {
            ...data,
            emoji: data.emoji.map(Emoji.normalizeEmoji)
        };
        if (jodit.o.emoji.enableAutoComplete) {
            jodit.e.fire('registerAutocompleteSource', this.onAutoComplete);
        }
        jodit.async.requestIdleCallback(() => {
            Emoji.getInstance(jodit, () => { });
        });
    }
    onAutoComplete(query) {
        if (query.length > 2 && query[0] === ':') {
            query = query.substr(1).toLowerCase();
            if ((0,helpers.trim)(query).length) {
                return this.data.emoji
                    .filter((e) => { var _a; return ((_a = e.description) === null || _a === void 0 ? void 0 : _a.indexOf(query)) === 0; })
                    .sort((a, b) => a.description.indexOf(query) -
                    b.description.indexOf(query))
                    .map((e) => ({
                    title: `${e.emoji} ${e.description}`,
                    value: e.emoji
                }));
            }
        }
        return [];
    }
    beforeDestruct(jodit) { }
}
(0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], emoji.prototype, "onAutoComplete", null);
src.Jodit.plugins.add('emoji', emoji);


/***/ }),

/***/ 58169:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11358);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

/* harmony default export */ __webpack_exports__["Z"] = ([
    {
        name: 'eye',
        tooltip: 'Open link',
        exec: (editor, current) => {
            const href = (0,jodit_core_helpers_utils__WEBPACK_IMPORTED_MODULE_0__/* .attr */ .Lj)(current, 'href');
            if (current && href) {
                editor.ow.open(href);
            }
        }
    },
    {
        name: 'link',
        tooltip: 'Edit link',
        icon: 'pencil'
    },
    'unlink',
    'brush',
    'file'
]);


/***/ }),

/***/ 40373:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99160);
/* harmony import */ var jodit_core_helpers_utils_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(56672);
/* harmony import */ var jodit_modules_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60537);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */



const cmd = (control) => control.args && (0,jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__/* .isString */ .HD)(control.args[0])
    ? control.args[0].toLowerCase()
    : '';
/* harmony default export */ __webpack_exports__["Z"] = ([
    {
        name: 'brush',
        popup: (editor, _, _1, close) => {
            if (!(0,jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__/* .isJoditObject */ .Zu)(editor)) {
                return;
            }
            const tableModule = editor.getInstance('Table', editor.o), selected = tableModule.getAllSelectedCells();
            if (!selected.length) {
                return false;
            }
            const makeColorPicker = (key) => (0,jodit_modules_widget__WEBPACK_IMPORTED_MODULE_1__/* .ColorPickerWidget */ .YW)(editor, (value) => {
                selected.forEach(cell => {
                    (0,jodit_core_helpers_utils_css__WEBPACK_IMPORTED_MODULE_2__/* .css */ .i)(cell, key, value);
                });
                editor.lock();
                editor.synchronizeValues();
                close();
                editor.unlock();
            }, (0,jodit_core_helpers_utils_css__WEBPACK_IMPORTED_MODULE_2__/* .css */ .i)(selected[0], key));
            return (0,jodit_modules_widget__WEBPACK_IMPORTED_MODULE_1__/* .TabsWidget */ .IL)(editor, [
                {
                    name: 'Background',
                    content: makeColorPicker('background-color')
                },
                { name: 'Text', content: makeColorPicker('color') },
                { name: 'Border', content: makeColorPicker('border-color') }
            ]);
        },
        tooltip: 'Background'
    },
    {
        name: 'valign',
        list: ['Top', 'Middle', 'Bottom', 'Normal'],
        childTemplate: (_, __, value) => value,
        exec: (editor, table, { control }) => {
            const command = cmd(control);
            editor
                .getInstance('Table', editor.o)
                .getAllSelectedCells()
                .forEach((cell) => {
                (0,jodit_core_helpers_utils_css__WEBPACK_IMPORTED_MODULE_2__/* .css */ .i)(cell, 'vertical-align', command === 'normal' ? '' : command);
            });
        },
        tooltip: 'Vertical align'
    },
    {
        name: 'splitv',
        list: {
            tablesplitv: 'Split vertical',
            tablesplitg: 'Split horizontal'
        },
        tooltip: 'Split'
    },
    {
        name: 'align',
        icon: 'left'
    },
    '\n',
    {
        name: 'merge',
        command: 'tablemerge',
        tooltip: 'Merge'
    },
    {
        name: 'addcolumn',
        list: {
            tableaddcolumnbefore: 'Insert column before',
            tableaddcolumnafter: 'Insert column after'
        },
        exec: (editor, table, { control }) => {
            if (!(0,jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__/* .isJoditObject */ .Zu)(editor)) {
                return;
            }
            const command = cmd(control);
            editor.execCommand(command, false, table);
        },
        tooltip: 'Add column'
    },
    {
        name: 'addrow',
        list: {
            tableaddrowbefore: 'Insert row above',
            tableaddrowafter: 'Insert row below'
        },
        exec: (editor, table, { control }) => {
            if (!(0,jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__/* .isJoditObject */ .Zu)(editor)) {
                return;
            }
            const command = cmd(control);
            editor.execCommand(command, false, table);
        },
        tooltip: 'Add row'
    },
    {
        name: 'delete',
        icon: 'bin',
        list: {
            tablebin: 'Delete table',
            tablebinrow: 'Delete row',
            tablebincolumn: 'Delete column',
            tableempty: 'Empty cell'
        },
        exec: (editor, table, { control }) => {
            if (!(0,jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__/* .isJoditObject */ .Zu)(editor)) {
                return;
            }
            const command = cmd(control);
            editor.execCommand(command, false, table);
            editor.e.fire('hidePopup');
        },
        tooltip: 'Delete'
    }
]);


/***/ }),

/***/ 21651:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _img__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(92534);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

/* harmony default export */ __webpack_exports__["Z"] = ([
    {
        name: 'bin',
        tooltip: 'Delete',
        exec: (editor, image) => {
            image && editor.s.removeNode(image);
        }
    },
    _img__WEBPACK_IMPORTED_MODULE_0__/* .align */ .A
]);


/***/ }),

/***/ 92534:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "A": function() { return /* binding */ align; }
/* harmony export */ });
/* harmony import */ var jodit_core_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(94522);
/* harmony import */ var jodit_core_helpers_checker_is_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(40607);
/* harmony import */ var jodit_core_helpers_utils_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(56672);
/* harmony import */ var jodit_core_helpers_utils_align__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(49359);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




const align = {
    name: 'left',
    childTemplate: (_, __, value) => value,
    list: ['Left', 'Right', 'Center', 'Normal'],
    exec: (editor, elm, { control }) => {
        if (!jodit_core_dom__WEBPACK_IMPORTED_MODULE_0__/* .Dom.isTag */ .i.isTag(elm, ['img', 'jodit', 'jodit-media'])) {
            return;
        }
        const command = control.args && (0,jodit_core_helpers_checker_is_string__WEBPACK_IMPORTED_MODULE_2__/* .isString */ .H)(control.args[0])
            ? control.args[0].toLowerCase()
            : '';
        if (!command) {
            return false;
        }
        (0,jodit_core_helpers_utils_align__WEBPACK_IMPORTED_MODULE_1__/* .hAlignElement */ .zC)(elm, command);
        if (jodit_core_dom__WEBPACK_IMPORTED_MODULE_0__/* .Dom.isTag */ .i.isTag(elm, ['jodit', 'jodit-media']) && elm.firstElementChild) {
            (0,jodit_core_helpers_utils_align__WEBPACK_IMPORTED_MODULE_1__/* .hAlignElement */ .zC)(elm.firstElementChild, command);
        }
        editor.synchronizeValues();
        editor.e.fire('recalcPositionPopup');
    },
    tooltip: 'Horizontal align'
};
/* harmony default export */ __webpack_exports__["Z"] = ([
    {
        name: 'delete',
        icon: 'bin',
        tooltip: 'Delete',
        exec: (editor, image) => {
            image && editor.s.removeNode(image);
        }
    },
    {
        name: 'pencil',
        exec(editor, current) {
            const tagName = current.tagName.toLowerCase();
            if (tagName === 'img') {
                editor.e.fire('openImageProperties', current);
            }
        },
        tooltip: 'Edit'
    },
    {
        name: 'valign',
        list: ['Top', 'Middle', 'Bottom', 'Normal'],
        tooltip: 'Vertical align',
        exec: (editor, image, { control }) => {
            if (!jodit_core_dom__WEBPACK_IMPORTED_MODULE_0__/* .Dom.isTag */ .i.isTag(image, 'img')) {
                return;
            }
            const command = control.args && (0,jodit_core_helpers_checker_is_string__WEBPACK_IMPORTED_MODULE_2__/* .isString */ .H)(control.args[0])
                ? control.args[0].toLowerCase()
                : '';
            if (!command) {
                return false;
            }
            (0,jodit_core_helpers_utils_css__WEBPACK_IMPORTED_MODULE_3__/* .css */ .i)(image, 'vertical-align', command === 'normal' ? '' : command);
            editor.e.fire('recalcPositionPopup');
        }
    },
    align
]);


/***/ }),

/***/ 25328:
/***/ (function(__unused_webpack_module, __webpack_exports__) {

"use strict";
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
/* harmony default export */ __webpack_exports__["Z"] = ([
    'bold',
    'italic',
    '|',
    'ul',
    'ol',
    'eraser',
    '|',
    'fontsize',
    'brush',
    'paragraph',
    '---',
    'image',
    'table',
    '\n',
    'link',
    '|',
    'align',
    '|',
    'undo',
    'redo',
    '|',
    'copyformat',
    'fullsize',
    '---',
    'dots'
]);


/***/ }),

/***/ 52279:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ar": function() { return /* binding */ ar; },
/* harmony export */   "cs_cz": function() { return /* binding */ cs_cz; },
/* harmony export */   "de": function() { return /* binding */ de; },
/* harmony export */   "es": function() { return /* binding */ es; },
/* harmony export */   "fa": function() { return /* binding */ fa; },
/* harmony export */   "fr": function() { return /* binding */ fr; },
/* harmony export */   "he": function() { return /* binding */ he; },
/* harmony export */   "hu": function() { return /* binding */ hu; },
/* harmony export */   "id": function() { return /* binding */ id; },
/* harmony export */   "it": function() { return /* binding */ it; },
/* harmony export */   "ja": function() { return /* binding */ ja; },
/* harmony export */   "ko": function() { return /* binding */ ko; },
/* harmony export */   "nl": function() { return /* binding */ nl; },
/* harmony export */   "pl": function() { return /* binding */ pl; },
/* harmony export */   "pt_br": function() { return /* binding */ pt_br; },
/* harmony export */   "ru": function() { return /* binding */ ru; },
/* harmony export */   "tr": function() { return /* binding */ tr; },
/* harmony export */   "zh_cn": function() { return /* binding */ zh_cn; },
/* harmony export */   "zh_tw": function() { return /* binding */ zh_tw; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const ar = __webpack_require__(47762);
const cs_cz = __webpack_require__(97495);
const de = __webpack_require__(80131);
const es = __webpack_require__(1201);
const fa = __webpack_require__(89912);
const fr = __webpack_require__(3405);
const he = __webpack_require__(14129);
const hu = __webpack_require__(93729);
const id = __webpack_require__(16106);
const it = __webpack_require__(89690);
const ja = __webpack_require__(33216);
const ko = __webpack_require__(17282);
const nl = __webpack_require__(91761);
const pl = __webpack_require__(61675);
const pt_br = __webpack_require__(69709);
const ru = __webpack_require__(82591);
const tr = __webpack_require__(87649);
const zh_cn = __webpack_require__(60268);
const zh_tw = __webpack_require__(58214);



/***/ }),

/***/ 57128:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "PasteFromWordPro": function() { return /* binding */ PasteFromWordPro; },
  "pasteFromWord": function() { return /* binding */ pasteFromWord; }
});

// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(20255);
// EXTERNAL MODULE: ./src/index.ts + 157 modules
var src = __webpack_require__(33594);
// EXTERNAL MODULE: ./src/core/constants.ts
var constants = __webpack_require__(10063);
;// CONCATENATED MODULE: ./src/plugins/paste-from-word/helpers/helpers.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */
function calcMarginParts(margin) {
    if (!margin) {
        return [0, 0, 0, 0];
    }
    const widths = margin.match(/(0|auto|(-?[.\d]+(?:\w+|%)))/g) || ['0px'];
    switch (widths.length) {
        case 2:
            return [0, 1, 0, 1].map((index) => widths[index]);
        case 3:
            return [0, 1, 2, 1].map((index) => widths[index]);
        case 4:
            return [0, 1, 2, 3].map((index) => widths[index]);
        default:
            return [0, 0, 0, 0].map((index) => widths[index]);
    }
}
let fakeMeasureBox;
function convertUnitToPx(unit) {
    if (typeof unit === 'number') {
        return unit;
    }
    if (/%$/.test(unit)) {
        return 0;
    }
    if (!fakeMeasureBox) {
        fakeMeasureBox = document.createElement('div');
        Object.assign(fakeMeasureBox.style, {
            position: 'absolute',
            left: '-9999px',
            top: '-9999px',
            margin: '0',
            padding: '0',
            border: '0'
        });
        document.body.append(fakeMeasureBox);
        setTimeout(() => {
            fakeMeasureBox === null || fakeMeasureBox === void 0 ? void 0 : fakeMeasureBox.remove();
            fakeMeasureBox = null;
        });
    }
    const isNegative = parseFloat(unit) < 0;
    if (isNegative) {
        unit = unit.replace('-', '');
    }
    fakeMeasureBox.style.width = unit;
    const result = fakeMeasureBox.clientWidth;
    if (isNegative) {
        return -result;
    }
    return result;
}
function realPixelIndent(element) {
    const { style } = element;
    let marginSplit = [0, 0, 0, 0];
    const marginKeys = style.keys.filter((k) => /margin/.test(k));
    const maxMarginLeftIndex = Math.max(marginKeys.indexOf('margin-left'), marginKeys.indexOf('margin'));
    const marginKey = maxMarginLeftIndex > 0 ? marginKeys[maxMarginLeftIndex] : 'margin-left';
    let marginLeft;
    if (marginKey === 'margin') {
        const margin = style.get('margin');
        marginSplit = calcMarginParts(margin);
        marginLeft = marginSplit[3] || 0;
    }
    else {
        marginLeft = style.get(marginKey) || 0;
    }
    return convertUnitToPx(marginLeft);
}
function calcStartBySymbol(symbol) {
    if (/\d.\d/.test(symbol)) {
        return symbol.split('.').pop() || null;
    }
    if (/^\d/.test(symbol)) {
        return (parseInt(symbol, 10) || 1).toString();
    }
    return null;
}

// EXTERNAL MODULE: ./src/core/helpers/index.ts + 14 modules
var helpers = __webpack_require__(52607);
// EXTERNAL MODULE: ./src/core/dom/index.ts
var dom = __webpack_require__(94522);
;// CONCATENATED MODULE: ./src/plugins/paste-from-word/element/render.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */

function html(elm, filter = () => true, removeEmpty = true, allowedStyleProps) {
    switch (true) {
        case elm.isComment:
        case elm.isText: {
            if (!filter(elm)) {
                return '';
            }
            const { nodeValue } = elm.attributes;
            return elm.isComment ? `<!--${nodeValue}-->` : nodeValue;
        }
        case elm.isElement: {
            const { attributes } = elm, innerContent = innerHTML(elm, filter, removeEmpty, allowedStyleProps);
            if (!elm.attributes['jd-safe'] &&
                removeEmpty &&
                innerContent.replace(/[\n\t]/g, '').length === 0 &&
                !elm.isSingle) {
                return '';
            }
            const attrsList = Object.keys(attributes)
                .map((key) => {
                if (key === 'style' ||
                    attributes[key] == null ||
                    /^jd-/.test(key)) {
                    return '';
                }
                return `${key}="${htmlEntity(attributes[key])}"`;
            })
                .filter(Boolean);
            const { str: styleStr } = elm.style;
            const styles = htmlEntity(styleStr((key) => keyInList(key, allowedStyleProps)));
            if (styles) {
                attrsList.push(`style="${styles}"`);
            }
            if (removeEmpty &&
                attrsList.length === 0 &&
                ['span', 'a'].includes(elm.name)) {
                return innerContent;
            }
            const attrs = attrsList.length ? ' ' + attrsList.join(' ') : '';
            if (!filter(elm)) {
                return innerContent;
            }
            return elm.isSingle
                ? `<${elm.name}${attrs}/>`
                : `<${elm.name}${attrs}>${innerContent}</${elm.name}>`;
        }
        default:
            if (false) {}
    }
    return '';
}
function keyInList(key, list) {
    var _a;
    if (!list) {
        return true;
    }
    if (keyInList.cache.has(list)) {
        const isAllow = (_a = keyInList.cache.get(list)) === null || _a === void 0 ? void 0 : _a.get(key);
        if ((0,helpers.isBoolean)(isAllow)) {
            return isAllow;
        }
    }
    const isAllow = list.some((allow) => new RegExp(allow).test(key));
    const map = keyInList.cache.get(list) || new Map();
    map.set(key, isAllow);
    keyInList.cache.set(list, map);
    return isAllow;
}
keyInList.cache = new WeakMap();
function innerHTML(elm, filter = () => true, removeEmpty = true, allowedStyleProps) {
    let result = elm
        .map((e) => html(e, filter, removeEmpty, allowedStyleProps))
        .join('');
    if (elm.name === 'p' && (0,helpers.trim)(result).length === 0) {
        result = '&nbsp;';
    }
    return result;
}
function htmlEntity(str) {
    return str.toString().replace(/"/g, '&quot;');
}

;// CONCATENATED MODULE: ./src/plugins/paste-from-word/constants.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */
const LEVEL_KEY = 'jd-list-level';
const TYPE_KEY = 'jd-list-type';
const STYLE_KEY = 'jd-list-style-type';
const STYLE_VALID_KEY = 'data-list-style-type';
const STYLE_CSS_KEY = 'list-style-type';
const listStyleMap = {
    'Â·': 'disc',
    o: 'circle',
    'Â§': 'square',
    '[ivx]': 'lower-roman',
    '[IVX]': 'upper-roman',
    '[a-z]': 'lower-alpha',
    '[A-Z]': 'upper-alpha',
    '\\d': 'decimal'
};

;// CONCATENATED MODULE: ./src/plugins/paste-from-word/element/checkers.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */


function isList(elm) {
    return Boolean(elm && (elm.name === 'ol' || elm.name === 'ul'));
}
function isLeaf(elm) {
    return Boolean(elm && elm.name === 'li');
}
function isPseudoLeaf(elm) {
    return ((elm.name !== 'li' &&
        /mso-list:\s*l\d+ level\d+ lfo\d+/i.test(elm.attributes.style)) ||
        (/msolistparagraph/i.test(elm.attributes.class) &&
            Boolean(elm.find((c) => c.isComment && html(c).includes('supportLists'))
                .length)));
}
function isSameType(leaf, list) {
    const listType = leaf.attributes[TYPE_KEY];
    const listStyle = leaf.attributes[STYLE_KEY];
    return !(list.name !== listType ||
        list.attributes[STYLE_KEY] !== listStyle ||
        leaf.attributes[LEVEL_KEY] !== list.attributes[LEVEL_KEY]);
}

// EXTERNAL MODULE: ./src/core/decorators/index.ts + 7 modules
var decorators = __webpack_require__(11169);
;// CONCATENATED MODULE: ./src/plugins/paste-from-word/element/style.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */




let Style = class Style {
    constructor(str) {
        this._data = readStyles(str);
    }
    get keys() {
        return Object.keys(this._data);
    }
    forEach(f) {
        this.keys.forEach((key) => f(key));
    }
    clear() {
        this._data = {};
    }
    set(key, value) {
        this._data[key] = value;
    }
    get(key) {
        var _a;
        return (_a = this._data[key]) !== null && _a !== void 0 ? _a : null;
    }
    has(key) {
        return this._data[key] !== undefined;
    }
    add(key, value) {
        this._data = readStyles(this.str() + ';' + `${key}:${value}`);
        return this;
    }
    str(filter = (k) => true) {
        const styleKeys = Object.keys(this._data).filter((key) => key &&
            !/^mso-/.test(key) &&
            filter(key) &&
            this.get(key) != null);
        const n = (v) => {
            if ((0,helpers.isString)(v)) {
                return /^0[a-z]+$/i.test(v) ? '0' : v;
            }
            return v.toString();
        };
        ['padding', 'margin'].forEach((key) => {
            if (this._data[key]) {
                const indexMain = styleKeys.indexOf(key);
                const margins = calcMarginParts(this._data[key]);
                ['top', 'right', 'bottom', 'left'].forEach((side, index) => {
                    const name = `${key}-${side}`;
                    if (this._data[name] !== undefined &&
                        (styleKeys.indexOf(name) < indexMain ||
                            n(margins[index]) === n(this._data[name]))) {
                        styleKeys.indexOf(name) !== -1 &&
                            styleKeys.splice(styleKeys.indexOf(name), 1);
                    }
                });
            }
        });
        if (styleKeys.length) {
            return styleKeys
                .map((key) => `${(0,helpers.kebabCase)(key)}:${this.get(key)}`)
                .join(';');
        }
        return '';
    }
};
Style = (0,tslib_es6/* __decorate */.gn)([
    decorators.autobind
], Style);

function readStyles(style) {
    return uniqueMax((style !== null && style !== void 0 ? style : '')
        .replace(/&quot;/g, '"')
        .split(';')
        .filter(Boolean)
        .map((s) => (0,helpers.trim)(s).split(':').map(helpers.trim))).reduce((acc, [key, value]) => {
        if (key && value) {
            acc[key] = value;
        }
        return acc;
    }, {});
}
function uniqueMax(array) {
    const keys = {};
    const result = [];
    for (let i = array.length - 1; i >= 0; i -= 1) {
        const key = array[i][0];
        if (keys[key]) {
            continue;
        }
        keys[key] = true;
        result.unshift(array[i]);
    }
    return result;
}

;// CONCATENATED MODULE: ./src/plugins/paste-from-word/element/element.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */





const singleTags = new Set(constants.INSEPARABLE_TAGS);
class JElement {
    constructor(node, parent) {
        this.parent = parent;
        this.name = node.nodeName.toLowerCase();
        this.type = node.nodeType;
        this.attributes = readAttributes(node);
        this.style = new Style(this.attributes.style);
        this.children = [];
        node.childNodes.forEach((node) => this.children.push(JElement.make(node, this)));
    }
    get isText() {
        return this.type === Node.TEXT_NODE;
    }
    get isElement() {
        return this.type === Node.ELEMENT_NODE;
    }
    get isComment() {
        return this.type === Node.COMMENT_NODE;
    }
    get isSingle() {
        return singleTags.has(this.name);
    }
    get length() {
        return this.children.length;
    }
    static make(node, parent = null) {
        return new JElement(node, parent);
    }
    wrap(tag) {
        var _a;
        (0,helpers.assert)(this.parent != null, "You can't wrap the root element");
        const wrapper = JElement.make(document.createElement(tag), this.parent);
        const index = (_a = this.parent.children.indexOf(this)) !== null && _a !== void 0 ? _a : -1;
        if (index === -1) {
            this.parent.append(wrapper);
        }
        else {
            this.parent.children[index] = wrapper;
        }
        wrapper.append(this);
        return wrapper;
    }
    append(child) {
        (0,helpers.assert)(child !== this, 'Forbidden to add to yourself');
        child.remove();
        this.children.push(child);
        child.parent = this;
        return this;
    }
    get previousElement() {
        if (!this.parent) {
            return null;
        }
        const { children } = this.parent, index = children.indexOf(this);
        if (index !== -1) {
            for (let i = index - 1; i >= 0; i -= 1) {
                if (children[i].isElement) {
                    return children[i];
                }
            }
        }
        return null;
    }
    get lastElement() {
        const { children } = this;
        for (let i = children.length - 1; i >= 0; i -= 1) {
            if (children[i].isElement) {
                return children[i];
            }
        }
        return null;
    }
    get previous() {
        var _a, _b, _c;
        return (_c = (_a = this.sibling(false)) !== null && _a !== void 0 ? _a : (_b = this.parent) === null || _b === void 0 ? void 0 : _b.previous) !== null && _c !== void 0 ? _c : null;
    }
    get next() {
        var _a, _b, _c;
        return (_c = (_a = this.sibling(true)) !== null && _a !== void 0 ? _a : (_b = this.parent) === null || _b === void 0 ? void 0 : _b.next) !== null && _c !== void 0 ? _c : null;
    }
    sibling(next) {
        if (!this.parent) {
            return null;
        }
        const { children } = this.parent, index = children.indexOf(this);
        if (index !== -1 && children[index + (next ? 1 : -1)]) {
            return children[index + (next ? 1 : -1)];
        }
        return null;
    }
    forEach(callbackFn, recursion = false) {
        const children = [...this.children];
        for (const child of children) {
            if (callbackFn(child) === false) {
                return false;
            }
            if (recursion && child.forEach(callbackFn, true) === false) {
                return false;
            }
        }
    }
    find(predicate, recursion = true) {
        const result = [];
        this.forEach((elm) => {
            if (predicate(elm)) {
                result.push(elm);
            }
        }, recursion);
        return result;
    }
    map(callbackFn) {
        return this.children.map(callbackFn);
    }
    remove() {
        var _a, _b;
        const index = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.indexOf(this);
        if (index != null && index !== -1) {
            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.splice(index, 1);
        }
        return this;
    }
    textBetween(start, end) {
        let startFound = false;
        const result = [];
        this.forEach((node) => {
            if (!startFound && start(node)) {
                startFound = true;
            }
            if (startFound && node.isText) {
                result.push(html(node));
            }
            if (startFound && end(node)) {
                return false;
            }
        }, true);
        return result.join('');
    }
}
function readAttributes(node) {
    const result = {};
    if (dom/* Dom.isElement */.i.isElement(node)) {
        for (let i = 0, attrs = node.attributes; i < attrs.length; i += 1) {
            result[attrs[i].name] = attrs[i].value;
        }
    }
    else {
        result['nodeValue'] = node.nodeValue;
    }
    return result;
}

;// CONCATENATED MODULE: ./src/plugins/paste-from-word/element/index.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */




;// CONCATENATED MODULE: ./src/plugins/paste-from-word/cases/convert-to-list.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */




function convertToList(elm) {
    var _a;
    if (isPseudoLeaf(elm)) {
        elm.name = 'li';
        elm.style.set('text-indent', null);
        const symbol = getSymbol(elm), listType = /[\da-np-zA-NP-Z].?/.test(symbol) ? 'ol' : 'ul', listStyle = defineOrderedListStyle(symbol, listType);
        elm.attributes[TYPE_KEY] = listType;
        elm.attributes[STYLE_KEY] = listStyle;
        calcListLevels(elm);
        moveUp(elm);
        const { parent } = elm;
        if (!isList(parent) || !isSameType(elm, parent)) {
            const newList = wrapInNewList(elm, listType, symbol, listStyle);
            if (isList(parent)) {
                newList.remove();
                (_a = parent.lastElement) === null || _a === void 0 ? void 0 : _a.append(newList);
            }
            return elm;
        }
    }
    return elm;
}
function moveUp(leaf) {
    while (leaf) {
        const prev = leaf.previousElement;
        if (!(isLeaf(prev) || isList(prev))) {
            break;
        }
        if (isLeaf(prev)) {
            if (leaf.attributes[LEVEL_KEY] < prev.attributes[LEVEL_KEY]) {
                break;
            }
            if (leaf.attributes[LEVEL_KEY] === prev.attributes[LEVEL_KEY] &&
                leaf.parent &&
                isSameType(leaf, leaf.parent)) {
                break;
            }
            prev.append(leaf);
            continue;
        }
        const list = prev;
        if (leaf.attributes[LEVEL_KEY] < list.attributes[LEVEL_KEY]) {
            break;
        }
        if (leaf.attributes[LEVEL_KEY] === list.attributes[LEVEL_KEY] &&
            !isSameType(leaf, list)) {
            break;
        }
        list.append(leaf);
    }
}
function removeRedundancyStyle(newList) {
    var _a;
    if (isList(newList) &&
        ((_a = newList.parent) === null || _a === void 0 ? void 0 : _a.name) !== 'li' &&
        (newList.style.get(STYLE_CSS_KEY) === 'disc' ||
            newList.style.get(STYLE_CSS_KEY) === 'decimal')) {
        newList.style.set(STYLE_CSS_KEY, null);
    }
}
function defineOrderedListStyle(symbol, listType) {
    for (const reg in listStyleMap) {
        if (RegExp(reg).test(symbol)) {
            return listStyleMap[reg];
        }
    }
    return listType === 'ol' ? 'decimal' : 'disc';
}
const getSymbol = (elm) => elm
    .textBetween((n) => n.isComment && /\[if.*supportLists.*]/.test(html(n)), (n) => n.isComment && /\[endif]/.test(html(n)))
    .replace(/&nbsp;/g, '')
    .replace((0,constants.SPACE_REG_EXP)(), '');
function wrapInNewList(elm, listType, symbol, listStyle) {
    const newList = elm.wrap(listType);
    newList.attributes['start'] = calcStartBySymbol(symbol);
    newList.attributes[LEVEL_KEY] = elm.attributes[LEVEL_KEY];
    newList.attributes[STYLE_KEY] = elm.attributes[STYLE_KEY];
    newList.attributes[STYLE_VALID_KEY] = elm.attributes[STYLE_KEY];
    newList.style.set(STYLE_CSS_KEY, listStyle);
    removeRedundancyStyle(newList);
    return newList;
}

;// CONCATENATED MODULE: ./src/plugins/paste-from-word/cases/clear-attributes.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */
const extraAttributes = [
    'cellspacing',
    'cellpadding',
    'border',
    'v:shapes',
    'o:spid'
];
function clearAttributes(elm) {
    if (/^OLE_LINK\d+$/.test(elm.attributes.name)) {
        elm.attributes.name = null;
        if (elm.length === 0) {
            elm.remove();
            return null;
        }
    }
    if (elm.attributes.name === '_GoBack') {
        elm.attributes.name = null;
    }
    for (const attr of extraAttributes) {
        if (elm.attributes[attr]) {
            elm.attributes[attr] = null;
        }
    }
    return elm;
}

;// CONCATENATED MODULE: ./src/plugins/paste-from-word/cases/remove-extra-tags.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */
const extraTags = new Set([
    'o:p',
    'xml',
    'script',
    'meta',
    'link',
    'v:imagedata',
    'style'
]);
function removeExtraTags(elm) {
    if (elm.style.get('display') === 'none') {
        elm.remove();
        return null;
    }
    if (elm.length === 0 && elm.name === 'span') {
        elm.remove();
        return null;
    }
    if (extraTags.has(elm.name)) {
        elm.remove();
        return null;
    }
    return elm;
}

;// CONCATENATED MODULE: ./src/plugins/paste-from-word/cases/replace-old-tags.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */
const REPLACE_OLD_TAGS = {
    i: 'em',
    b: 'strong'
};
function replaceOldTags(elm) {
    const { name } = elm;
    if (name in REPLACE_OLD_TAGS) {
        elm.name = REPLACE_OLD_TAGS[name];
    }
    return elm;
}

;// CONCATENATED MODULE: ./src/plugins/paste-from-word/cases/remove-inside-comment.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */

let inComment = 0;
function removeInsideComment(elm) {
    if (elm.isComment && /\[if.*(supportLists|gte vml).*]/.test(html(elm))) {
        inComment++;
        elm.remove();
    }
    if (elm.isComment && inComment > 0 && html(elm).includes('[endif]')) {
        inComment = inComment > 0 ? inComment - 1 : 0;
        elm.remove();
    }
    if (inComment) {
        if (elm.isText ||
            (elm.name === 'img' &&
                (!elm.attributes.src || /^file:/.test(elm.attributes.src)))) {
            elm.remove();
            return null;
        }
    }
    return elm;
}

;// CONCATENATED MODULE: ./src/plugins/paste-from-word/cases/convert-style-unit-to-pixels.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */

const convertStyleUnitToPixels = (elm, { jodit }) => {
    if (!jodit.o.pasteFromWord.convertUnitsToPixel) {
        return elm;
    }
    const { style } = elm;
    style.forEach((key) => {
        const v = style.get(key);
        if (v) {
            style.set(key, v
                .toString()
                .replace(/\d+(\.\d+)?(pt|cm)/g, (match) => convertUnitToPx(match) + 'px'));
        }
    });
    return elm;
};

// EXTERNAL MODULE: ./src/core/helpers/string/trim.ts
var trim = __webpack_require__(50106);
;// CONCATENATED MODULE: ./src/plugins/paste-from-word/cases/clear-class-name.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */

const clearClassName = (elm) => {
    if (elm.attributes.class) {
        elm.attributes.class = elm.attributes.class.replace(/(el\d+)|(font\d+)|msonormal|msolistparagraph\w*/gi, '');
        if (!(0,trim/* trim */.f)(elm.attributes.class)) {
            elm.attributes.class = null;
        }
    }
    return elm;
};

;// CONCATENATED MODULE: ./src/plugins/paste-from-word/cases/process-links.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */
const processLinks = (elm, ctx) => {
    var _a;
    const links = (_a = ctx.links) !== null && _a !== void 0 ? _a : {};
    if (elm.attributes.href && elm.attributes.href.match(/#.+$/)) {
        const name = elm.attributes.href.match(/#(.+)$/)[1];
        links[name] = elm;
    }
    if (elm.attributes.name && links[elm.attributes.name]) {
        const link = links[elm.attributes.name];
        link.attributes.href = link.attributes.href.replace(/.*#(.*)$/, '#$1');
    }
    ctx.links = links;
    return elm;
};

;// CONCATENATED MODULE: ./src/plugins/paste-from-word/cases/normalize-image-props.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */
const normalizeImageProps = (elm) => {
    if (!elm.isElement) {
        return elm;
    }
    if (elm.name === 'img') {
        if (elm.attributes.align) {
            elm.style.add('float', elm.attributes.align);
            elm.attributes.align = null;
        }
        if (elm.attributes.hspace) {
            elm.style.add('marginLeft', elm.attributes.hspace + 'px');
            elm.style.add('marginRight', elm.attributes.hspace + 'px');
            elm.attributes.hspace = null;
        }
    }
    return elm;
};

;// CONCATENATED MODULE: ./src/plugins/paste-from-word/cases/table.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */
const removeWidthFromTableCell = (elm) => {
    if (elm.attributes.width && (elm.name === 'th' || elm.name === 'td')) {
        elm.attributes.width = null;
    }
    return elm;
};

;// CONCATENATED MODULE: ./src/plugins/paste-from-word/cases/mark-page-break.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */
const markPageBreakElements = (elm) => {
    if ((elm.isElement && elm.style.get('page-break-before') === 'always') ||
        elm.style.get('break-before') === 'page') {
        elm.attributes['jd-safe'] = true;
        elm.style.add('page-break-before', 'always');
        if (elm.isSingle) {
            elm.name = 'div';
        }
    }
    return elm;
};

;// CONCATENATED MODULE: ./src/plugins/paste-from-word/cases/process-image.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */

const processImage = (elm, ctx) => {
    var _a;
    if (ctx.rtf &&
        elm.name === '#comment' &&
        elm.attributes.nodeValue &&
        elm.attributes.nodeValue.indexOf('<v:shape') !== -1) {
        if (!ctx.shapes) {
            ctx.shapes = {};
        }
        const elms = ctx.jodit.create.fromHTML(elm.attributes.nodeValue);
        (0,helpers.toArray)(elms.getElementsByTagName('v:shape')).forEach((e) => {
            ctx.shapes[e.id] = e.getAttribute('o:spid');
        });
        return elm;
    }
    if (elm.name !== 'img') {
        return elm;
    }
    if (ctx.rtf && elm.attributes['v:shapes']) {
        const spid = (_a = ctx.shapes) === null || _a === void 0 ? void 0 : _a[elm.attributes['v:shapes']];
        if (spid) {
            if (!ctx.imageMap) {
                ctx.imageMap = {};
                parseImages(ctx.rtf, 'i', '\\shppict', ctx.imageMap);
                parseImages(ctx.rtf, 's', '\\shp{', ctx.imageMap);
            }
            const a = ctx.imageMap[spid.substring(7)];
            if (a) {
                const base = [], parsedD = a.hex.match(/[0-9a-f]{2}/gi);
                if (parsedD) {
                    for (let i = 0; i < parsedD.length; i++) {
                        base.push(String.fromCharCode(parseInt(parsedD[i], 16)));
                    }
                    elm.attributes.src =
                        'data:' + a.type + ';base64,' + btoa(base.join(''));
                }
            }
        }
    }
    return elm;
};
function parseImages(rtf, prefix, separator, imageMap) {
    const parts = rtf.split(separator);
    for (const part of parts) {
        const shapes = part.split('shplid');
        if (1 < shapes.length) {
            const shape = shapes[1];
            let id = '';
            for (let i = 0; i < shape.length && !/[{ \r\n\\]/.test(shape[i]); i++) {
                id += shape[i];
            }
            const images = shape.split('bliptag');
            if (images && images.length < 2) {
                continue;
            }
            let format = null;
            if (images[0].indexOf('pngblip')) {
                format = 'image/png';
            }
            else if (images[0].indexOf('jpegblip') !== -1) {
                format = 'image/jpeg';
            }
            if (!format) {
                continue;
            }
            const endings = images[1].split('}');
            if (endings && endings.length < 2) {
                continue;
            }
            let result;
            if (2 < endings.length && endings[0].includes('blipuid')) {
                result = endings[1].split(' ');
            }
            else {
                result = endings[0].split(' ');
                if (result && result.length < 2) {
                    continue;
                }
                result.shift();
            }
            imageMap[prefix + id] = {
                hex: result.join(''),
                type: format
            };
        }
    }
}

;// CONCATENATED MODULE: ./src/plugins/paste-from-word/cases/clean-styles.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */
const forbiddenStyles = {
    'text-justify': ['inter-ideograph']
};
function cleanStyles(elm) {
    if (elm.isElement && elm.attributes.style) {
        Object.keys(forbiddenStyles).forEach((key) => {
            const values = forbiddenStyles[key];
            if (elm.style.has(key)) {
                if (values.includes(elm.style.get(key).toString())) {
                    elm.style.set(key, null);
                }
            }
        });
    }
    return elm;
}

;// CONCATENATED MODULE: ./src/plugins/paste-from-word/cases/index.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */













const cases = [
    processImage,
    markPageBreakElements,
    removeExtraTags,
    replaceOldTags,
    clearAttributes,
    convertToList,
    processLinks,
    removeInsideComment,
    convertStyleUnitToPixels,
    clearClassName,
    normalizeImageProps,
    removeWidthFromTableCell,
    cleanStyles
];

;// CONCATENATED MODULE: ./src/plugins/paste-from-word/helpers/transform-word-to-html.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */



function transformWordToHtml(jodit, body, removeStyles, rtf) {
    const ctx = {
        jodit,
        rtf
    };
    body.forEach(function eachElm(elm) {
        if (!elm) {
            return;
        }
        for (const fn of cases) {
            elm = fn(elm, ctx);
            if (elm == null) {
                break;
            }
        }
        elm === null || elm === void 0 ? void 0 : elm.forEach(eachElm);
    });
    if (removeStyles) {
        body.forEach((elm) => {
            elm.style.clear();
        }, true);
    }
    return (0,trim/* trim */.f)(innerHTML(body, (elm) => !elm.isComment, true, jodit.o.pasteFromWord.allowedStyleProps));
}

;// CONCATENATED MODULE: ./src/plugins/paste-from-word/helpers/apply-styles-pro.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */




function applyStylesPro(jodit, html, removeStyles, rtf = '') {
    var _a, _b;
    const iframe = document.createElement('iframe');
    iframe.style.display = 'none';
    document.body.appendChild(iframe);
    try {
        const doc = (_a = iframe.contentDocument) !== null && _a !== void 0 ? _a : (_b = iframe.contentWindow) === null || _b === void 0 ? void 0 : _b.document;
        if (!doc) {
            return html;
        }
        doc.open();
        doc.write(html);
        doc.close();
        const JDS = 'jd-style';
        for (let i = 0; i < doc.styleSheets.length; i += 1) {
            try {
                const rules = doc.styleSheets[i]
                    .cssRules;
                for (let idx = 0; idx < rules.length; idx += 1) {
                    if (!rules[idx].selectorText) {
                        continue;
                    }
                    (0,helpers.$$)(rules[idx].selectorText, doc.body).forEach((elm) => {
                        if (!(0,helpers.attr)(elm, JDS)) {
                            (0,helpers.attr)(elm, JDS, (0,helpers.attr)(elm, 'style') || '');
                            (0,helpers.attr)(elm, 'style', '');
                        }
                        (0,helpers.attr)(elm, 'style', `${(0,helpers.attr)(elm, 'style')};${rules[idx].style.cssText}`);
                    });
                }
            }
            catch (e) { }
        }
        (0,helpers.$$)(`[${JDS}]`, doc.body).forEach((elm) => {
            (0,helpers.attr)(elm, 'style', `${(0,helpers.attr)(elm, 'style')};${(0,helpers.attr)(elm, JDS)}`);
        });
        console.log(doc.body.innerHTML, JElement.make(doc.body));
        return transformWordToHtml(jodit, JElement.make(doc.body), removeStyles, rtf);
    }
    finally {
        dom/* Dom.safeRemove */.i.safeRemove(iframe);
    }
    return html;
}

;// CONCATENATED MODULE: ./src/plugins/paste-from-word/helpers/calc-list-levels.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */



function calcListLevels(item) {
    if (item.attributes[LEVEL_KEY] !== undefined) {
        return;
    }
    const indents = [realPixelIndent(item)], items = [item];
    let next = item.next;
    while (next) {
        if (next.isElement &&
            !next.attributes[LEVEL_KEY] &&
            isPseudoLeaf(next)) {
            const indent = realPixelIndent(next);
            if (indent) {
                indents.push(indent);
                items.push(next);
            }
        }
        next = next.next;
    }
    const minIndent = Math.min(...indents.filter((val) => val > 0));
    let levels = indents.map((val) => Math.ceil(val / 10));
    if (levels.indexOf(0) !== -1) {
        levels = levels.map((val) => val + 1);
    }
    items.forEach((curItem, index) => {
        curItem.attributes[LEVEL_KEY] = levels[index];
        curItem.style.add('margin-left', `${Math.max(realPixelIndent(curItem) -
            ((levels[index] * 10) / minIndent) * 40, 0)}px`);
    });
}

;// CONCATENATED MODULE: ./src/plugins/paste-from-word/helpers/index.ts
/*!
 * Jodit Editor PRO (https://xdsoft.net/jodit/)
 * See LICENSE.md in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net/jodit/pro/
 */





// EXTERNAL MODULE: ./src/config.ts
var config = __webpack_require__(27537);
;// CONCATENATED MODULE: ./src/plugins/paste-from-word/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */


config/* Config.prototype.askBeforePasteFromWord */.D.prototype.askBeforePasteFromWord = false;
config/* Config.prototype.processPasteFromWord */.D.prototype.processPasteFromWord = false;
config/* Config.prototype.defaultActionOnPasteFromWord */.D.prototype.defaultActionOnPasteFromWord = null;
config/* Config.prototype.pasteFromWordActionList */.D.prototype.pasteFromWordActionList = [
    { value: constants.INSERT_AS_HTML, text: 'Keep' },
    { value: constants.INSERT_AS_TEXT, text: 'Clean' },
    { value: constants.INSERT_ONLY_TEXT, text: 'Insert only Text' }
];
config/* Config.prototype.pasteFromWord */.D.prototype.pasteFromWord = {
    enable: false,
    convertUnitsToPixel: false,
    allowedStyleProps: [
        'background',
        'background-color',
        'border',
        'border-.*',
        'color',
        'float',
        'font-family',
        'font-size',
        'font-style',
        'font-weight',
        'height',
        'line-height',
        'list-style-type',
        'margin',
        'margin-bottom',
        'margin-left',
        'margin-right',
        'margin-top',
        'padding',
        'text-align',
        'text-justify',
        'text-decoration',
        'text-indent',
        'vertical-align',
        'width'
    ]
};

// EXTERNAL MODULE: ./src/plugins/paste/helpers.ts
var paste_helpers = __webpack_require__(23063);
// EXTERNAL MODULE: ./src/core/plugin/index.ts
var core_plugin = __webpack_require__(35570);
;// CONCATENATED MODULE: ./src/plugins/paste-from-word/paste-from-word.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */









class pasteFromWord extends core_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.requires = ['paste'];
    }
    afterInit(jodit) { }
    beforeDestruct(jodit) { }
    processWordHTML(e, text, texts) {
        const { j } = this, { processPasteFromWord, askBeforePasteFromWord, defaultActionOnPasteFromWord, defaultActionOnPaste, pasteFromWordActionList } = j.o;
        if (processPasteFromWord && (0,helpers.isHtmlFromWord)(text)) {
            if (askBeforePasteFromWord) {
                (0,paste_helpers/* askInsertTypeDialog */.$t)(j, 'The pasted content is coming from a Microsoft Word/Excel document. ' +
                    'Do you want to keep the format or clean it up?', 'Word Paste Detected', insertType => {
                    this.insertFromWordByType(e, text, insertType, texts);
                }, pasteFromWordActionList);
            }
            else {
                this.insertFromWordByType(e, text, defaultActionOnPasteFromWord || defaultActionOnPaste, texts);
            }
            return true;
        }
        return false;
    }
    insertFromWordByType(e, html, insertType, texts) {
        var _a;
        switch (insertType) {
            case constants.INSERT_AS_HTML: {
                html = (0,helpers.applyStyles)(html);
                const value = (_a = this.j.events) === null || _a === void 0 ? void 0 : _a.fire('beautifyHTML', html);
                if ((0,helpers.isString)(value)) {
                    html = value;
                }
                break;
            }
            case constants.INSERT_AS_TEXT: {
                html = (0,helpers.cleanFromWord)(html);
                break;
            }
            case constants.INSERT_ONLY_TEXT: {
                html = (0,helpers.stripTags)((0,helpers.cleanFromWord)(html));
                break;
            }
        }
        (0,paste_helpers/* pasteInsertHtml */.kU)(e, this.j, html);
    }
}
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.watch)(':processHTML')
], pasteFromWord.prototype, "processWordHTML", null);
class PasteFromWordPro extends pasteFromWord {
    insertFromWordByType(e, html, insertType, texts) {
        var _a;
        if (this.j.o.pasteFromWord.enable &&
            (insertType === constants.INSERT_AS_HTML || insertType === constants.INSERT_AS_TEXT)) {
            html = applyStylesPro(this.j, html, insertType === constants.INSERT_AS_TEXT, texts.rtf);
            if (this.j.o.beautifyHTML) {
                const value = (_a = this.j.events) === null || _a === void 0 ? void 0 : _a.fire('beautifyHTML', html);
                if ((0,helpers.isString)(value)) {
                    html = value;
                }
            }
            (0,paste_helpers/* pasteInsertHtml */.kU)(e, this.j, html);
            return;
        }
        return super.insertFromWordByType(e, html, insertType, texts);
    }
}
src.Jodit.plugins.remove('pasteFromWord');
src.Jodit.plugins.add('pasteFromWordPro', PasteFromWordPro);


/***/ }),

/***/ 23063:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$t": function() { return /* binding */ askInsertTypeDialog; },
/* harmony export */   "ZH": function() { return /* binding */ getAllTypes; },
/* harmony export */   "kU": function() { return /* binding */ pasteInsertHtml; }
/* harmony export */ });
/* harmony import */ var jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99160);
/* harmony import */ var jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(43887);
/* harmony import */ var jodit_core_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(10063);
/* harmony import */ var jodit_core_ui_button_button_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(15327);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */




function removeExtraFragments(html) {
    html = html.replace(/<meta[^>]+?>/g, '');
    const start = html.search(/<!--StartFragment-->/i);
    if (start !== -1) {
        html = html.substring(start + 20);
    }
    const end = html.search(/<!--EndFragment-->/i);
    if (end !== -1) {
        html = html.substring(0, end);
    }
    return html;
}
function isDragEvent(e) {
    return Boolean(e && e.type === 'drop');
}
function pasteInsertHtml(e, editor, html) {
    if (editor.isInDestruct) {
        return;
    }
    if (isDragEvent(e)) {
        editor.s.insertCursorAtPoint(e.clientX, e.clientY);
    }
    const result = editor.e.fire('beforePasteInsert', html);
    if (!(0,jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__/* .isVoid */ .nj)(result) &&
        ((0,jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__/* .isString */ .HD)(result) || (0,jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__/* .isNumber */ .hj)(result) || jodit_core_dom_dom__WEBPACK_IMPORTED_MODULE_1__/* .Dom.isNode */ .i.isNode(result))) {
        html = result;
    }
    if ((0,jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__/* .isString */ .HD)(html)) {
        html = removeExtraFragments(html);
    }
    editor.s.insertHTML(html);
}
function getAllTypes(dt) {
    const types = dt.types;
    let types_str = '';
    if ((0,jodit_core_helpers_checker__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(types) ||
        {}.toString.call(types) === '[object DOMStringList]') {
        for (let i = 0; i < types.length; i += 1) {
            types_str += types[i] + ';';
        }
    }
    else {
        types_str = (types || jodit_core_constants__WEBPACK_IMPORTED_MODULE_2__.TEXT_PLAIN).toString() + ';';
    }
    return types_str;
}
function askInsertTypeDialog(jodit, msg, title, callback, buttonList) {
    if (jodit.e.fire('beforeOpenPasteDialog', msg, title, callback, buttonList) === false) {
        return;
    }
    const dialog = jodit.confirm(`<div style="word-break: normal; white-space: normal">${jodit.i18n(msg)}</div>`, jodit.i18n(title));
    const buttons = buttonList.map(({ text, value }) => (0,jodit_core_ui_button_button_button__WEBPACK_IMPORTED_MODULE_3__/* .Button */ .zx)(jodit, {
        text,
        name: text.toLowerCase(),
        tabIndex: 0
    }).onAction(() => {
        dialog.close();
        callback(value);
    }));
    dialog.e.one(dialog, 'afterClose', () => {
        if (!jodit.s.isFocused()) {
            jodit.s.focus();
        }
    });
    const cancel = (0,jodit_core_ui_button_button_button__WEBPACK_IMPORTED_MODULE_3__/* .Button */ .zx)(jodit, {
        text: 'Cancel',
        tabIndex: 0
    }).onAction(() => {
        dialog.close();
    });
    dialog.setFooter([...buttons, cancel]);
    buttons[0].focus();
    buttons[0].state.variant = 'primary';
    jodit.e.fire('afterOpenPasteDialog', dialog, msg, title, callback, buttonList);
    return dialog;
}


/***/ }),

/***/ 43257:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "u": function() { return /* binding */ isEditorEmpty; }
});

// UNUSED EXPORTS: placeholder

// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js
var tslib_es6 = __webpack_require__(20255);
// EXTERNAL MODULE: ./src/core/constants.ts
var constants = __webpack_require__(10063);
// EXTERNAL MODULE: ./src/core/helpers/index.ts + 14 modules
var helpers = __webpack_require__(52607);
// EXTERNAL MODULE: ./src/core/dom/index.ts
var dom = __webpack_require__(94522);
// EXTERNAL MODULE: ./src/core/plugin/plugin.ts
var plugin_plugin = __webpack_require__(73177);
// EXTERNAL MODULE: ./src/core/decorators/index.ts + 7 modules
var decorators = __webpack_require__(11169);
// EXTERNAL MODULE: ./src/core/selection/index.ts + 19 modules
var selection = __webpack_require__(96811);
// EXTERNAL MODULE: ./src/core/global.ts
var global = __webpack_require__(58299);
// EXTERNAL MODULE: ./src/config.ts
var config = __webpack_require__(27537);
;// CONCATENATED MODULE: ./src/plugins/placeholder/config.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

config/* Config.prototype.showPlaceholder */.D.prototype.showPlaceholder = true;
config/* Config.prototype.placeholder */.D.prototype.placeholder = '';
config/* Config.prototype.useInputsPlaceholder */.D.prototype.useInputsPlaceholder = true;

;// CONCATENATED MODULE: ./src/plugins/placeholder/placeholder.ts
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */











function isEditorEmpty(root) {
    if (!root.firstChild) {
        return true;
    }
    const first = root.firstChild;
    if (constants.MAY_BE_REMOVED_WITH_KEY.test(first.nodeName) ||
        /^(TABLE)$/i.test(first.nodeName)) {
        return false;
    }
    const next = dom/* Dom.next */.i.next(first, node => node && !dom/* Dom.isEmptyTextNode */.i.isEmptyTextNode(node), root);
    if (dom/* Dom.isText */.i.isText(first) && !next) {
        return dom/* Dom.isEmptyTextNode */.i.isEmptyTextNode(first);
    }
    return (!next &&
        dom/* Dom.each */.i.each(first, elm => !dom/* Dom.isTag */.i.isTag(elm, ['ul', 'li', 'ol']) &&
            (dom/* Dom.isEmpty */.i.isEmpty(elm) || dom/* Dom.isTag */.i.isTag(elm, 'br'))));
}
class placeholder extends plugin_plugin/* Plugin */.S {
    constructor() {
        super(...arguments);
        this.addNativeListeners = () => {
            this.j.e
                .off(this.j.editor, 'input.placeholder keydown.placeholder')
                .on(this.j.editor, 'input.placeholder keydown.placeholder', this.toggle);
        };
        this.addEvents = () => {
            const editor = this.j;
            if (editor.o.useInputsPlaceholder &&
                editor.element.hasAttribute('placeholder')) {
                this.placeholderElm.innerHTML =
                    (0,helpers.attr)(editor.element, 'placeholder') || '';
            }
            editor.e.fire('placeholder', this.placeholderElm.innerHTML);
            editor.e
                .off('.placeholder')
                .on('changePlace.placeholder', this.addNativeListeners)
                .on('change.placeholder focus.placeholder keyup.placeholder mouseup.placeholder keydown.placeholder ' +
                'mousedown.placeholder afterSetMode.placeholder changePlace.placeholder', this.toggle)
                .on(window, 'load', this.toggle);
            this.addNativeListeners();
            this.toggle();
        };
    }
    afterInit(editor) {
        if (!editor.o.showPlaceholder) {
            return;
        }
        this.placeholderElm = editor.c.fromHTML(`<span data-ref="placeholder" style="display: none;" class="jodit-placeholder">${editor.i18n(editor.o.placeholder)}</span>`);
        if (editor.o.direction === 'rtl') {
            this.placeholderElm.style.right = '0px';
            this.placeholderElm.style.direction = 'rtl';
        }
        editor.e
            .on('readonly', (isReadOnly) => {
            if (isReadOnly) {
                this.hide();
            }
            else {
                this.toggle();
            }
        })
            .on('changePlace', this.addEvents);
        this.addEvents();
    }
    show() {
        const editor = this.j;
        if (editor.o.readonly) {
            return;
        }
        let marginTop = 0, marginLeft = 0;
        const current = editor.s.current(), wrapper = (current && dom/* Dom.closest */.i.closest(current, dom/* Dom.isBlock */.i.isBlock, editor.editor)) ||
            editor.editor;
        const style = editor.ew.getComputedStyle(wrapper);
        editor.workplace.appendChild(this.placeholderElm);
        const { firstChild } = editor.editor;
        if (dom/* Dom.isElement */.i.isElement(firstChild) && !selection/* Select.isMarker */.Ph.isMarker(firstChild)) {
            const style2 = editor.ew.getComputedStyle(firstChild);
            marginTop = parseInt(style2.getPropertyValue('margin-top'), 10);
            marginLeft = parseInt(style2.getPropertyValue('margin-left'), 10);
            this.placeholderElm.style.fontSize =
                parseInt(style2.getPropertyValue('font-size'), 10) + 'px';
            this.placeholderElm.style.lineHeight =
                style2.getPropertyValue('line-height');
        }
        else {
            this.placeholderElm.style.fontSize =
                parseInt(style.getPropertyValue('font-size'), 10) + 'px';
            this.placeholderElm.style.lineHeight =
                style.getPropertyValue('line-height');
        }
        (0,helpers.css)(this.placeholderElm, {
            display: 'block',
            textAlign: style.getPropertyValue('text-align'),
            marginTop: Math.max(parseInt(style.getPropertyValue('margin-top'), 10), marginTop),
            marginLeft: Math.max(parseInt(style.getPropertyValue('margin-left'), 10), marginLeft)
        });
    }
    hide() {
        dom/* Dom.safeRemove */.i.safeRemove(this.placeholderElm);
    }
    toggle() {
        const editor = this.j;
        if (!editor.editor || editor.isInDestruct) {
            return;
        }
        if (editor.getRealMode() !== constants.MODE_WYSIWYG) {
            this.hide();
            return;
        }
        if (!isEditorEmpty(editor.editor)) {
            this.hide();
        }
        else {
            this.show();
        }
    }
    beforeDestruct(jodit) {
        this.hide();
        jodit.e.off('.placeholder').off(window, 'load', this.toggle);
    }
}
(0,tslib_es6/* __decorate */.gn)([
    (0,decorators.debounce)(ctx => ctx.defaultTimeout / 10, true)
], placeholder.prototype, "toggle", null);
global/* pluginSystem.add */.pw.add('placeholder', placeholder);


/***/ }),

/***/ 28895:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": function() { return /* binding */ generateCriticalCSS; }
/* harmony export */ });
/* harmony import */ var jodit_core_helpers_array_to_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(42464);
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

function generateCriticalCSS(jodit) {
    const getMatchedCSSRules = (el, css = el.ownerDocument.styleSheets) => {
        const rules = (0,jodit_core_helpers_array_to_array__WEBPACK_IMPORTED_MODULE_0__/* .toArray */ .q)(css)
            .map(s => {
            try {
                return (0,jodit_core_helpers_array_to_array__WEBPACK_IMPORTED_MODULE_0__/* .toArray */ .q)(s.cssRules);
            }
            catch (_a) { }
            return [];
        })
            .flat();
        return rules.filter((r) => {
            try {
                return Boolean(r && el.matches(r.selectorText));
            }
            catch (_a) { }
            return false;
        });
    };
    class CSSCriticalPath {
        constructor(w, d, opts) {
            this.css = {};
            const opt = opts || {};
            const pushCSS = (r) => {
                const selectorText = r.selectorText
                    .split(',')
                    .map(a => a.trim())
                    .sort()
                    .join(',');
                if (Boolean(this.css[selectorText]) === false) {
                    this.css[selectorText] = {};
                }
                const styles = r.style.cssText.split(/;(?![A-Za-z0-9])/);
                for (let i = 0; i < styles.length; i++) {
                    if (!styles[i]) {
                        continue;
                    }
                    const pair = styles[i].split(':');
                    pair[0] = pair[0].trim();
                    pair[1] = pair[1].trim();
                    this.css[selectorText][pair[0]] = pair[1].replace(/var\(([^)]+)\)/g, (varValue, key) => {
                        const [name, def] = key.split(',');
                        return (jodit.ew
                            .getComputedStyle(jodit.editor)
                            .getPropertyValue(name.trim()) ||
                            def ||
                            varValue).trim();
                    });
                }
            };
            const parseTree = () => {
                const height = w.innerHeight;
                const walker = d.createTreeWalker(jodit.editor, NodeFilter.SHOW_ELEMENT, () => NodeFilter.FILTER_ACCEPT);
                while (walker.nextNode()) {
                    const node = walker.currentNode;
                    const rect = node.getBoundingClientRect();
                    if (rect.top < height || opt.scanFullPage) {
                        const rules = getMatchedCSSRules(node);
                        if (rules) {
                            for (let r = 0; r < rules.length; r++) {
                                pushCSS(rules[r]);
                            }
                        }
                    }
                }
            };
            parseTree();
        }
        generateCSS() {
            let finalCSS = '';
            for (const k in this.css) {
                if (/:not\(/.test(k)) {
                    continue;
                }
                finalCSS += k + ' { ';
                for (const j in this.css[k]) {
                    finalCSS += j + ': ' + this.css[k][j] + '; ';
                }
                finalCSS += '}\n';
            }
            return finalCSS;
        }
    }
    try {
        const cp = new CSSCriticalPath(jodit.ew, jodit.ed, {
            scanFullPage: true
        });
        return cp.generateCSS();
    }
    catch (_a) { }
    return '';
}


/***/ }),

/***/ 48390:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ar": function() { return /* binding */ ar; },
/* harmony export */   "cs_cz": function() { return /* binding */ cs_cz; },
/* harmony export */   "de": function() { return /* binding */ de; },
/* harmony export */   "es": function() { return /* binding */ es; },
/* harmony export */   "fa": function() { return /* binding */ fa; },
/* harmony export */   "fr": function() { return /* binding */ fr; },
/* harmony export */   "he": function() { return /* binding */ he; },
/* harmony export */   "hu": function() { return /* binding */ hu; },
/* harmony export */   "id": function() { return /* binding */ id; },
/* harmony export */   "it": function() { return /* binding */ it; },
/* harmony export */   "ja": function() { return /* binding */ ja; },
/* harmony export */   "ko": function() { return /* binding */ ko; },
/* harmony export */   "nl": function() { return /* binding */ nl; },
/* harmony export */   "pl": function() { return /* binding */ pl; },
/* harmony export */   "pt_br": function() { return /* binding */ pt_br; },
/* harmony export */   "ru": function() { return /* binding */ ru; },
/* harmony export */   "tr": function() { return /* binding */ tr; },
/* harmony export */   "zh_cn": function() { return /* binding */ zh_cn; },
/* harmony export */   "zh_tw": function() { return /* binding */ zh_tw; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const ar = __webpack_require__(5586);
const cs_cz = __webpack_require__(66023);
const de = __webpack_require__(65860);
const es = __webpack_require__(86055);
const fa = __webpack_require__(50037);
const fr = __webpack_require__(7118);
const he = __webpack_require__(30298);
const hu = __webpack_require__(52107);
const id = __webpack_require__(31240);
const it = __webpack_require__(4101);
const ja = __webpack_require__(69286);
const ko = __webpack_require__(13402);
const nl = __webpack_require__(89574);
const pl = __webpack_require__(63630);
const pt_br = __webpack_require__(72212);
const ru = __webpack_require__(82570);
const tr = __webpack_require__(19323);
const zh_cn = __webpack_require__(50279);
const zh_tw = __webpack_require__(98364);



/***/ }),

/***/ 74604:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ar": function() { return /* binding */ ar; },
/* harmony export */   "cs_cz": function() { return /* binding */ cs_cz; },
/* harmony export */   "de": function() { return /* binding */ de; },
/* harmony export */   "es": function() { return /* binding */ es; },
/* harmony export */   "fa": function() { return /* binding */ fa; },
/* harmony export */   "fr": function() { return /* binding */ fr; },
/* harmony export */   "he": function() { return /* binding */ he; },
/* harmony export */   "hu": function() { return /* binding */ hu; },
/* harmony export */   "id": function() { return /* binding */ id; },
/* harmony export */   "it": function() { return /* binding */ it; },
/* harmony export */   "ja": function() { return /* binding */ ja; },
/* harmony export */   "ko": function() { return /* binding */ ko; },
/* harmony export */   "nl": function() { return /* binding */ nl; },
/* harmony export */   "pl": function() { return /* binding */ pl; },
/* harmony export */   "pt_br": function() { return /* binding */ pt_br; },
/* harmony export */   "ru": function() { return /* binding */ ru; },
/* harmony export */   "tr": function() { return /* binding */ tr; },
/* harmony export */   "zh_cn": function() { return /* binding */ zh_cn; },
/* harmony export */   "zh_tw": function() { return /* binding */ zh_tw; }
/* harmony export */ });
/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */
const ar = __webpack_require__(54261);
const cs_cz = __webpack_require__(60425);
const de = __webpack_require__(7057);
const es = __webpack_require__(48356);
const fa = __webpack_require__(11428);
const fr = __webpack_require__(29084);
const he = __webpack_require__(22876);
const hu = __webpack_require__(20890);
const id = __webpack_require__(75987);
const it = __webpack_require__(60379);
const ja = __webpack_require__(99950);
const ko = __webpack_require__(60934);
const nl = __webpack_require__(21994);
const pl = __webpack_require__(38128);
const pt_br = __webpack_require__(71515);
const ru = __webpack_require__(58194);
const tr = __webpack_require__(65802);
const zh_cn = __webpack_require__(86628);
const zh_tw = __webpack_require__(32210);



/***/ }),

/***/ 80078:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'copy-format': 'ÙØ³Ø® Ø§ÙØªÙØ³ÙÙ'
};


/***/ }),

/***/ 16986:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'copy-format': 'KopÃ­rovat formÃ¡t'
};


/***/ }),

/***/ 59347:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'copy-format': 'Format kopierenÑ'
};


/***/ }),

/***/ 63640:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'copy-format': 'Copiar formato'
};


/***/ }),

/***/ 53434:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'copy-format': 'Ú©Ù¾Û Ú©Ø±Ø¯Ù ÙØ§ÙØ¨'
};


/***/ }),

/***/ 85638:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'copy-format': 'Format de copie'
};


/***/ }),

/***/ 31743:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'copy-format': '××¢×ª×§ ×¢××¦××'
};


/***/ }),

/***/ 66219:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'copy-format': 'FormÃ¡tum mÃ¡solÃ¡s'
};


/***/ }),

/***/ 50331:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'copy-format': 'salin format'
};


/***/ }),

/***/ 25582:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'copy-format': 'Copia il formato'
};


/***/ }),

/***/ 82066:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'copy-format': 'copyformat'
};


/***/ }),

/***/ 71925:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'copy-format': 'ë³µì¬ íì'
};


/***/ }),

/***/ 65274:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'copy-format': 'opmaak kopiÃ«ren'
};


/***/ }),

/***/ 58548:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'copy-format': 'format kopii'
};


/***/ }),

/***/ 82958:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'copy-format': 'Copiar formato'
};


/***/ }),

/***/ 52315:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'copy-format': 'ÐÐ¾Ð¿Ð¸ÑÐ¾Ð²Ð°ÑÑ ÑÐ¾ÑÐ¼Ð°Ñ'
};


/***/ }),

/***/ 87727:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'copy-format': 'Kopyalama BiÃ§imi'
};


/***/ }),

/***/ 9396:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'copy-format': 'å¤å¶æ ¼å¼'
};


/***/ }),

/***/ 28765:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'copy-format': 'è¤è£½æ ¼å¼'
};


/***/ }),

/***/ 47762:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'Line height': 'Ø§Ø±ØªÙØ§Ø¹ Ø§ÙØ®Ø·'
};


/***/ }),

/***/ 97495:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'Line height': 'VÃ½Å¡ka ÄÃ¡ry'
};


/***/ }),

/***/ 80131:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'Line height': 'ZeilenhÃ¶he'
};


/***/ }),

/***/ 1201:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'Line height': 'Altura de la lÃ­nea'
};


/***/ }),

/***/ 89912:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'Line height': 'Ø§Ø±ØªÙØ§Ø¹ Ø®Ø·'
};


/***/ }),

/***/ 3405:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'Line height': 'Hauteur de ligne'
};


/***/ }),

/***/ 14129:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'Line height': '×××× ×©××¨×'
};


/***/ }),

/***/ 93729:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'Line height': 'Vonal magassÃ¡ga'
};


/***/ }),

/***/ 16106:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'Line height': 'Tinggi baris'
};


/***/ }),

/***/ 89690:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'Line height': 'Altezza linea'
};


/***/ }),

/***/ 33216:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'Line height': 'ã©ã¤ã³ã®é«ã'
};


/***/ }),

/***/ 17282:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'Line height': 'ì  ëì´'
};


/***/ }),

/***/ 91761:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'Line height': 'Lijnhoogte'
};


/***/ }),

/***/ 61675:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'Line height': 'WysokoÅÄ linii'
};


/***/ }),

/***/ 69709:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'Line height': 'Altura da linha'
};


/***/ }),

/***/ 82591:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'Line height': 'ÐÑÑÐ¾ÑÐ° Ð»Ð¸Ð½Ð¸Ð¸'
};


/***/ }),

/***/ 87649:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'Line height': 'Ãizgi yÃ¼ksekliÄi'
};


/***/ }),

/***/ 60268:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'Line height': 'çº¿é«'
};


/***/ }),

/***/ 58214:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	'Line height': 'à¸à¸§à¸²à¸¡à¸ªà¸¹à¸à¹à¸ªà¹à¸'
};


/***/ }),

/***/ 5586:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	Spellcheck: 'Ø§ÙØªØ¯ÙÙÙ Ø§ÙØ¥ÙÙØ§Ø¦Ù'
};


/***/ }),

/***/ 66023:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	Spellcheck: 'Kontrola pravopisu'
};


/***/ }),

/***/ 65860:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	Spellcheck: 'RechtschreibprÃ¼fung'
};


/***/ }),

/***/ 86055:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	Spellcheck: 'CorrecciÃ³n ortogrÃ¡fica'
};


/***/ }),

/***/ 50037:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	Spellcheck: 'ØºÙØ·ÛØ§Ø¨Û Ø§ÙÙØ§ÛÛ'
};


/***/ }),

/***/ 7118:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	Spellcheck: 'VÃ©rification Orthographique'
};


/***/ }),

/***/ 30298:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	Spellcheck: '××××§×ª ××××ª'
};


/***/ }),

/***/ 52107:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	Spellcheck: 'HelyesÃ­rÃ¡s-ellenÅrzÃ©s'
};


/***/ }),

/***/ 31240:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	Spellcheck: 'Spellchecking'
};


/***/ }),

/***/ 4101:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	Spellcheck: 'Controllo ortografico'
};


/***/ }),

/***/ 69286:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	Spellcheck: 'ã¹ãã«ãã§ãã¯'
};


/***/ }),

/***/ 13402:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	Spellcheck: 'ë§ì¶¤ë² ê²ì¬'
};


/***/ }),

/***/ 89574:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	Spellcheck: 'Spellingcontrole'
};


/***/ }),

/***/ 63630:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	Spellcheck: 'Sprawdzanie pisowni'
};


/***/ }),

/***/ 72212:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	Spellcheck: 'VerificaÃ§Ã£o ortogrÃ¡fica'
};


/***/ }),

/***/ 82570:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	Spellcheck: 'ÐÑÐ¾Ð²ÐµÑÐºÐ° Ð¾ÑÑÐ¾Ð³ÑÐ°ÑÐ¸Ð¸'
};


/***/ }),

/***/ 19323:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	Spellcheck: 'YazÄ±m denetimi'
};


/***/ }),

/***/ 50279:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	Spellcheck: 'æ¼åæ£æ¥'
};


/***/ }),

/***/ 98364:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	Spellcheck: 'à¸ªà¸°à¸à¸à¸à¸³'
};


/***/ }),

/***/ 54261:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	symbols: 'Ø±ÙØ²'
};


/***/ }),

/***/ 60425:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	symbols: 'symbol'
};


/***/ }),

/***/ 7057:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	symbols: 'Symbol'
};


/***/ }),

/***/ 48356:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	symbols: 'SÃ­mbolo'
};


/***/ }),

/***/ 11428:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	symbols: 'Ø³ÙØ¨Ù'
};


/***/ }),

/***/ 29084:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	symbols: 'caractÃ¨re'
};


/***/ }),

/***/ 22876:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	symbols: '×ª× ×××××'
};


/***/ }),

/***/ 20890:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	symbols: 'SzimbÃ³lum'
};


/***/ }),

/***/ 75987:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	symbols: 'simbol'
};


/***/ }),

/***/ 60379:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	symbols: 'Simbolo'
};


/***/ }),

/***/ 99950:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	symbols: 'symbol'
};


/***/ }),

/***/ 60934:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	symbols: 'ê¸°í¸'
};


/***/ }),

/***/ 21994:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	symbols: 'symbool'
};


/***/ }),

/***/ 38128:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	symbols: 'symbol'
};


/***/ }),

/***/ 71515:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	symbols: 'SÃ­mbolo'
};


/***/ }),

/***/ 58194:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	symbols: 'ÑÐ¸Ð¼Ð²Ð¾Ð»'
};


/***/ }),

/***/ 65802:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	symbols: 'Sembol'
};


/***/ }),

/***/ 86628:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	symbols: 'ç¬¦å·'
};


/***/ }),

/***/ 32210:
/***/ (function(module) {

/*!
 * Jodit Editor (https://xdsoft.net/jodit/)
 * Released under MIT see LICENSE.txt in the project root for license information.
 * Copyright (c) 2013-2022 Valeriy Chupurnov. All rights reserved. https://xdsoft.net
 */

module.exports = {
	symbols: 'ç¬¦è'
};


/***/ }),

/***/ 23106:
/***/ (function(module) {

"use strict";
module.exports = JSON.parse('{"categories":["Smileys & Emotion","People & Body","Animals & Nature","Food & Drink","Travel & Places","Activities","Objects","Symbols","Flags"],"emoji":[{"e":"ð","d":"grinning face","c":0,"a":["grinning"],"t":["smile","happy"]},{"e":"ð","d":"grinning face with big eyes","c":0,"a":["smiley"],"t":["happy","joy","haha"]},{"e":"ð","d":"grinning face with smiling eyes","c":0,"a":["smile"],"t":["happy","joy","laugh","pleased"]},{"e":"ð","d":"beaming face with smiling eyes","c":0,"a":["grin"]},{"e":"ð","d":"grinning squinting face","c":0,"a":["laughing","satisfied"],"t":["happy","haha"]},{"e":"ð","d":"grinning face with sweat","c":0,"a":["sweat_smile"],"t":["hot"]},{"e":"ð¤£","d":"rolling on the floor laughing","c":0,"a":["rofl"],"t":["lol","laughing"]},{"e":"ð","d":"face with tears of joy","c":0,"a":["joy"],"t":["tears"]},{"e":"ð","d":"slightly smiling face","c":0,"a":["slightly_smiling_face"]},{"e":"ð","d":"upside-down face","c":0,"a":["upside_down_face"]},{"e":"ð","d":"winking face","c":0,"a":["wink"],"t":["flirt"]},{"e":"ð","d":"smiling face with smiling eyes","c":0,"a":["blush"],"t":["proud"]},{"e":"ð","d":"smiling face with halo","c":0,"a":["innocent"],"t":["angel"]},{"e":"ð¥°","d":"smiling face with hearts","c":0,"a":["smiling_face_with_three_hearts"],"t":["love"]},{"e":"ð","d":"smiling face with heart-eyes","c":0,"a":["heart_eyes"],"t":["love","crush"]},{"e":"ð¤©","d":"star-struck","c":0,"a":["star_struck"],"t":["eyes"]},{"e":"ð","d":"face blowing a kiss","c":0,"a":["kissing_heart"],"t":["flirt"]},{"e":"ð","d":"kissing face","c":0,"a":["kissing"]},{"e":"âºï¸","d":"smiling face","c":0,"a":["relaxed"],"t":["blush","pleased"]},{"e":"ð","d":"kissing face with closed eyes","c":0,"a":["kissing_closed_eyes"]},{"e":"ð","d":"kissing face with smiling eyes","c":0,"a":["kissing_smiling_eyes"]},{"e":"ð¥²","d":"smiling face with tear","c":0,"a":["smiling_face_with_tear"]},{"e":"ð","d":"face savoring food","c":0,"a":["yum"],"t":["tongue","lick"]},{"e":"ð","d":"face with tongue","c":0,"a":["stuck_out_tongue"]},{"e":"ð","d":"winking face with tongue","c":0,"a":["stuck_out_tongue_winking_eye"],"t":["prank","silly"]},{"e":"ð¤ª","d":"zany face","c":0,"a":["zany_face"],"t":["goofy","wacky"]},{"e":"ð","d":"squinting face with tongue","c":0,"a":["stuck_out_tongue_closed_eyes"],"t":["prank"]},{"e":"ð¤","d":"money-mouth face","c":0,"a":["money_mouth_face"],"t":["rich"]},{"e":"ð¤","d":"hugging face","c":0,"a":["hugs"]},{"e":"ð¤­","d":"face with hand over mouth","c":0,"a":["hand_over_mouth"],"t":["quiet","whoops"]},{"e":"ð¤«","d":"shushing face","c":0,"a":["shushing_face"],"t":["silence","quiet"]},{"e":"ð¤","d":"thinking face","c":0,"a":["thinking"]},{"e":"ð¤","d":"zipper-mouth face","c":0,"a":["zipper_mouth_face"],"t":["silence","hush"]},{"e":"ð¤¨","d":"face with raised eyebrow","c":0,"a":["raised_eyebrow"],"t":["suspicious"]},{"e":"ð","d":"neutral face","c":0,"a":["neutral_face"],"t":["meh"]},{"e":"ð","d":"expressionless face","c":0,"a":["expressionless"]},{"e":"ð¶","d":"face without mouth","c":0,"a":["no_mouth"],"t":["mute","silence"]},{"e":"ð","d":"smirking face","c":0,"a":["smirk"],"t":["smug"]},{"e":"ð","d":"unamused face","c":0,"a":["unamused"],"t":["meh"]},{"e":"ð","d":"face with rolling eyes","c":0,"a":["roll_eyes"]},{"e":"ð¬","d":"grimacing face","c":0,"a":["grimacing"]},{"e":"ð¤¥","d":"lying face","c":0,"a":["lying_face"],"t":["liar"]},{"e":"ð","d":"relieved face","c":0,"a":["relieved"],"t":["whew"]},{"e":"ð","d":"pensive face","c":0,"a":["pensive"]},{"e":"ðª","d":"sleepy face","c":0,"a":["sleepy"],"t":["tired"]},{"e":"ð¤¤","d":"drooling face","c":0,"a":["drooling_face"]},{"e":"ð´","d":"sleeping face","c":0,"a":["sleeping"],"t":["zzz"]},{"e":"ð·","d":"face with medical mask","c":0,"a":["mask"],"t":["sick","ill"]},{"e":"ð¤","d":"face with thermometer","c":0,"a":["face_with_thermometer"],"t":["sick"]},{"e":"ð¤","d":"face with head-bandage","c":0,"a":["face_with_head_bandage"],"t":["hurt"]},{"e":"ð¤¢","d":"nauseated face","c":0,"a":["nauseated_face"],"t":["sick","barf","disgusted"]},{"e":"ð¤®","d":"face vomiting","c":0,"a":["vomiting_face"],"t":["barf","sick"]},{"e":"ð¤§","d":"sneezing face","c":0,"a":["sneezing_face"],"t":["achoo","sick"]},{"e":"ð¥µ","d":"hot face","c":0,"a":["hot_face"],"t":["heat","sweating"]},{"e":"ð¥¶","d":"cold face","c":0,"a":["cold_face"],"t":["freezing","ice"]},{"e":"ð¥´","d":"woozy face","c":0,"a":["woozy_face"],"t":["groggy"]},{"e":"ðµ","d":"dizzy face","c":0,"a":["dizzy_face"]},{"e":"ð¤¯","d":"exploding head","c":0,"a":["exploding_head"],"t":["mind","blown"]},{"e":"ð¤ ","d":"cowboy hat face","c":0,"a":["cowboy_hat_face"]},{"e":"ð¥³","d":"partying face","c":0,"a":["partying_face"],"t":["celebration","birthday"]},{"e":"ð¥¸","d":"disguised face","c":0,"a":["disguised_face"]},{"e":"ð","d":"smiling face with sunglasses","c":0,"a":["sunglasses"],"t":["cool"]},{"e":"ð¤","d":"nerd face","c":0,"a":["nerd_face"],"t":["geek","glasses"]},{"e":"ð§","d":"face with monocle","c":0,"a":["monocle_face"]},{"e":"ð","d":"confused face","c":0,"a":["confused"]},{"e":"ð","d":"worried face","c":0,"a":["worried"],"t":["nervous"]},{"e":"ð","d":"slightly frowning face","c":0,"a":["slightly_frowning_face"]},{"e":"â¹ï¸","d":"frowning face","c":0,"a":["frowning_face"]},{"e":"ð®","d":"face with open mouth","c":0,"a":["open_mouth"],"t":["surprise","impressed","wow"]},{"e":"ð¯","d":"hushed face","c":0,"a":["hushed"],"t":["silence","speechless"]},{"e":"ð²","d":"astonished face","c":0,"a":["astonished"],"t":["amazed","gasp"]},{"e":"ð³","d":"flushed face","c":0,"a":["flushed"]},{"e":"ð¥º","d":"pleading face","c":0,"a":["pleading_face"],"t":["puppy","eyes"]},{"e":"ð¦","d":"frowning face with open mouth","c":0,"a":["frowning"]},{"e":"ð§","d":"anguished face","c":0,"a":["anguished"],"t":["stunned"]},{"e":"ð¨","d":"fearful face","c":0,"a":["fearful"],"t":["scared","shocked","oops"]},{"e":"ð°","d":"anxious face with sweat","c":0,"a":["cold_sweat"],"t":["nervous"]},{"e":"ð¥","d":"sad but relieved face","c":0,"a":["disappointed_relieved"],"t":["phew","sweat","nervous"]},{"e":"ð¢","d":"crying face","c":0,"a":["cry"],"t":["sad","tear"]},{"e":"ð­","d":"loudly crying face","c":0,"a":["sob"],"t":["sad","cry","bawling"]},{"e":"ð±","d":"face screaming in fear","c":0,"a":["scream"],"t":["horror","shocked"]},{"e":"ð","d":"confounded face","c":0,"a":["confounded"]},{"e":"ð£","d":"persevering face","c":0,"a":["persevere"],"t":["struggling"]},{"e":"ð","d":"disappointed face","c":0,"a":["disappointed"],"t":["sad"]},{"e":"ð","d":"downcast face with sweat","c":0,"a":["sweat"]},{"e":"ð©","d":"weary face","c":0,"a":["weary"],"t":["tired"]},{"e":"ð«","d":"tired face","c":0,"a":["tired_face"],"t":["upset","whine"]},{"e":"ð¥±","d":"yawning face","c":0,"a":["yawning_face"]},{"e":"ð¤","d":"face with steam from nose","c":0,"a":["triumph"],"t":["smug"]},{"e":"ð¡","d":"pouting face","c":0,"a":["rage","pout"],"t":["angry"]},{"e":"ð ","d":"angry face","c":0,"a":["angry"],"t":["mad","annoyed"]},{"e":"ð¤¬","d":"face with symbols on mouth","c":0,"a":["cursing_face"],"t":["foul"]},{"e":"ð","d":"smiling face with horns","c":0,"a":["smiling_imp"],"t":["devil","evil","horns"]},{"e":"ð¿","d":"angry face with horns","c":0,"a":["imp"],"t":["angry","devil","evil","horns"]},{"e":"ð","d":"skull","c":0,"a":["skull"],"t":["dead","danger","poison"]},{"e":"â ï¸","d":"skull and crossbones","c":0,"a":["skull_and_crossbones"],"t":["danger","pirate"]},{"e":"ð©","d":"pile of poo","c":0,"a":["hankey","poop","shit"],"t":["crap"]},{"e":"ð¤¡","d":"clown face","c":0,"a":["clown_face"]},{"e":"ð¹","d":"ogre","c":0,"a":["japanese_ogre"],"t":["monster"]},{"e":"ðº","d":"goblin","c":0,"a":["japanese_goblin"]},{"e":"ð»","d":"ghost","c":0,"a":["ghost"],"t":["halloween"]},{"e":"ð½","d":"alien","c":0,"a":["alien"],"t":["ufo"]},{"e":"ð¾","d":"alien monster","c":0,"a":["space_invader"],"t":["game","retro"]},{"e":"ð¤","d":"robot","c":0,"a":["robot"]},{"e":"ðº","d":"grinning cat","c":0,"a":["smiley_cat"]},{"e":"ð¸","d":"grinning cat with smiling eyes","c":0,"a":["smile_cat"]},{"e":"ð¹","d":"cat with tears of joy","c":0,"a":["joy_cat"]},{"e":"ð»","d":"smiling cat with heart-eyes","c":0,"a":["heart_eyes_cat"]},{"e":"ð¼","d":"cat with wry smile","c":0,"a":["smirk_cat"]},{"e":"ð½","d":"kissing cat","c":0,"a":["kissing_cat"]},{"e":"ð","d":"weary cat","c":0,"a":["scream_cat"],"t":["horror"]},{"e":"ð¿","d":"crying cat","c":0,"a":["crying_cat_face"],"t":["sad","tear"]},{"e":"ð¾","d":"pouting cat","c":0,"a":["pouting_cat"]},{"e":"ð","d":"see-no-evil monkey","c":0,"a":["see_no_evil"],"t":["monkey","blind","ignore"]},{"e":"ð","d":"hear-no-evil monkey","c":0,"a":["hear_no_evil"],"t":["monkey","deaf"]},{"e":"ð","d":"speak-no-evil monkey","c":0,"a":["speak_no_evil"],"t":["monkey","mute","hush"]},{"e":"ð","d":"kiss mark","c":0,"a":["kiss"],"t":["lipstick"]},{"e":"ð","d":"love letter","c":0,"a":["love_letter"],"t":["email","envelope"]},{"e":"ð","d":"heart with arrow","c":0,"a":["cupid"],"t":["love","heart"]},{"e":"ð","d":"heart with ribbon","c":0,"a":["gift_heart"],"t":["chocolates"]},{"e":"ð","d":"sparkling heart","c":0,"a":["sparkling_heart"]},{"e":"ð","d":"growing heart","c":0,"a":["heartpulse"]},{"e":"ð","d":"beating heart","c":0,"a":["heartbeat"]},{"e":"ð","d":"revolving hearts","c":0,"a":["revolving_hearts"]},{"e":"ð","d":"two hearts","c":0,"a":["two_hearts"]},{"e":"ð","d":"heart decoration","c":0,"a":["heart_decoration"]},{"e":"â£ï¸","d":"heart exclamation","c":0,"a":["heavy_heart_exclamation"]},{"e":"ð","d":"broken heart","c":0,"a":["broken_heart"]},{"e":"â¤ï¸","d":"red heart","c":0,"a":["heart"],"t":["love"]},{"e":"ð§¡","d":"orange heart","c":0,"a":["orange_heart"]},{"e":"ð","d":"yellow heart","c":0,"a":["yellow_heart"]},{"e":"ð","d":"green heart","c":0,"a":["green_heart"]},{"e":"ð","d":"blue heart","c":0,"a":["blue_heart"]},{"e":"ð","d":"purple heart","c":0,"a":["purple_heart"]},{"e":"ð¤","d":"brown heart","c":0,"a":["brown_heart"]},{"e":"ð¤","d":"black heart","c":0,"a":["black_heart"]},{"e":"ð¤","d":"white heart","c":0,"a":["white_heart"]},{"e":"ð¯","d":"hundred points","c":0,"a":["100"],"t":["score","perfect"]},{"e":"ð¢","d":"anger symbol","c":0,"a":["anger"],"t":["angry"]},{"e":"ð¥","d":"collision","c":0,"a":["boom","collision"],"t":["explode"]},{"e":"ð«","d":"dizzy","c":0,"a":["dizzy"],"t":["star"]},{"e":"ð¦","d":"sweat droplets","c":0,"a":["sweat_drops"],"t":["water","workout"]},{"e":"ð¨","d":"dashing away","c":0,"a":["dash"],"t":["wind","blow","fast"]},{"e":"ð³ï¸","d":"hole","c":0,"a":["hole"]},{"e":"ð£","d":"bomb","c":0,"a":["bomb"],"t":["boom"]},{"e":"ð¬","d":"speech balloon","c":0,"a":["speech_balloon"],"t":["comment"]},{"e":"ðï¸âð¨ï¸","d":"eye in speech bubble","c":0,"a":["eye_speech_bubble"]},{"e":"ð¨ï¸","d":"left speech bubble","c":0,"a":["left_speech_bubble"]},{"e":"ð¯ï¸","d":"right anger bubble","c":0,"a":["right_anger_bubble"]},{"e":"ð­","d":"thought balloon","c":0,"a":["thought_balloon"],"t":["thinking"]},{"e":"ð¤","d":"zzz","c":0,"a":["zzz"],"t":["sleeping"]},{"e":"ð","d":"waving hand","c":1,"a":["wave"],"t":["goodbye"]},{"e":"ð¤","d":"raised back of hand","c":1,"a":["raised_back_of_hand"]},{"e":"ðï¸","d":"hand with fingers splayed","c":1,"a":["raised_hand_with_fingers_splayed"]},{"e":"â","d":"raised hand","c":1,"a":["hand","raised_hand"],"t":["highfive","stop"]},{"e":"ð","d":"vulcan salute","c":1,"a":["vulcan_salute"],"t":["prosper","spock"]},{"e":"ð","d":"OK hand","c":1,"a":["ok_hand"]},{"e":"ð¤","d":"pinched fingers","c":1,"a":["pinched_fingers"]},{"e":"ð¤","d":"pinching hand","c":1,"a":["pinching_hand"]},{"e":"âï¸","d":"victory hand","c":1,"a":["v"],"t":["victory","peace"]},{"e":"ð¤","d":"crossed fingers","c":1,"a":["crossed_fingers"],"t":["luck","hopeful"]},{"e":"ð¤","d":"love-you gesture","c":1,"a":["love_you_gesture"]},{"e":"ð¤","d":"sign of the horns","c":1,"a":["metal"]},{"e":"ð¤","d":"call me hand","c":1,"a":["call_me_hand"]},{"e":"ð","d":"backhand index pointing left","c":1,"a":["point_left"]},{"e":"ð","d":"backhand index pointing right","c":1,"a":["point_right"]},{"e":"ð","d":"backhand index pointing up","c":1,"a":["point_up_2"]},{"e":"ð","d":"middle finger","c":1,"a":["middle_finger","fu"]},{"e":"ð","d":"backhand index pointing down","c":1,"a":["point_down"]},{"e":"âï¸","d":"index pointing up","c":1,"a":["point_up"]},{"e":"ð","d":"thumbs up","c":1,"a":["+1","thumbsup"],"t":["approve","ok"]},{"e":"ð","d":"thumbs down","c":1,"a":["-1","thumbsdown"],"t":["disapprove","bury"]},{"e":"â","d":"raised fist","c":1,"a":["fist_raised","fist"],"t":["power"]},{"e":"ð","d":"oncoming fist","c":1,"a":["fist_oncoming","facepunch","punch"],"t":["attack"]},{"e":"ð¤","d":"left-facing fist","c":1,"a":["fist_left"]},{"e":"ð¤","d":"right-facing fist","c":1,"a":["fist_right"]},{"e":"ð","d":"clapping hands","c":1,"a":["clap"],"t":["praise","applause"]},{"e":"ð","d":"raising hands","c":1,"a":["raised_hands"],"t":["hooray"]},{"e":"ð","d":"open hands","c":1,"a":["open_hands"]},{"e":"ð¤²","d":"palms up together","c":1,"a":["palms_up_together"]},{"e":"ð¤","d":"handshake","c":1,"a":["handshake"],"t":["deal"]},{"e":"ð","d":"folded hands","c":1,"a":["pray"],"t":["please","hope","wish"]},{"e":"âï¸","d":"writing hand","c":1,"a":["writing_hand"]},{"e":"ð","d":"nail polish","c":1,"a":["nail_care"],"t":["beauty","manicure"]},{"e":"ð¤³","d":"selfie","c":1,"a":["selfie"]},{"e":"ðª","d":"flexed biceps","c":1,"a":["muscle"],"t":["flex","bicep","strong","workout"]},{"e":"ð¦¾","d":"mechanical arm","c":1,"a":["mechanical_arm"]},{"e":"ð¦¿","d":"mechanical leg","c":1,"a":["mechanical_leg"]},{"e":"ð¦µ","d":"leg","c":1,"a":["leg"]},{"e":"ð¦¶","d":"foot","c":1,"a":["foot"]},{"e":"ð","d":"ear","c":1,"a":["ear"],"t":["hear","sound","listen"]},{"e":"ð¦»","d":"ear with hearing aid","c":1,"a":["ear_with_hearing_aid"]},{"e":"ð","d":"nose","c":1,"a":["nose"],"t":["smell"]},{"e":"ð§ ","d":"brain","c":1,"a":["brain"]},{"e":"ð«","d":"anatomical heart","c":1,"a":["anatomical_heart"]},{"e":"ð«","d":"lungs","c":1,"a":["lungs"]},{"e":"ð¦·","d":"tooth","c":1,"a":["tooth"]},{"e":"ð¦´","d":"bone","c":1,"a":["bone"]},{"e":"ð","d":"eyes","c":1,"a":["eyes"],"t":["look","see","watch"]},{"e":"ðï¸","d":"eye","c":1,"a":["eye"]},{"e":"ð","d":"tongue","c":1,"a":["tongue"],"t":["taste"]},{"e":"ð","d":"mouth","c":1,"a":["lips"],"t":["kiss"]},{"e":"ð¶","d":"baby","c":1,"a":["baby"],"t":["child","newborn"]},{"e":"ð§","d":"child","c":1,"a":["child"]},{"e":"ð¦","d":"boy","c":1,"a":["boy"],"t":["child"]},{"e":"ð§","d":"girl","c":1,"a":["girl"],"t":["child"]},{"e":"ð§","d":"person","c":1,"a":["adult"]},{"e":"ð±","d":"person: blond hair","c":1,"a":["blond_haired_person"]},{"e":"ð¨","d":"man","c":1,"a":["man"],"t":["mustache","father","dad"]},{"e":"ð§","d":"man: beard","c":1,"a":["bearded_person"]},{"e":"ð¨âð¦°","d":"man: red hair","c":1,"a":["red_haired_man"]},{"e":"ð¨âð¦±","d":"man: curly hair","c":1,"a":["curly_haired_man"]},{"e":"ð¨âð¦³","d":"man: white hair","c":1,"a":["white_haired_man"]},{"e":"ð¨âð¦²","d":"man: bald","c":1,"a":["bald_man"]},{"e":"ð©","d":"woman","c":1,"a":["woman"],"t":["girls"]},{"e":"ð©âð¦°","d":"woman: red hair","c":1,"a":["red_haired_woman"]},{"e":"ð§âð¦°","d":"person: red hair","c":1,"a":["person_red_hair"]},{"e":"ð©âð¦±","d":"woman: curly hair","c":1,"a":["curly_haired_woman"]},{"e":"ð§âð¦±","d":"person: curly hair","c":1,"a":["person_curly_hair"]},{"e":"ð©âð¦³","d":"woman: white hair","c":1,"a":["white_haired_woman"]},{"e":"ð§âð¦³","d":"person: white hair","c":1,"a":["person_white_hair"]},{"e":"ð©âð¦²","d":"woman: bald","c":1,"a":["bald_woman"]},{"e":"ð§âð¦²","d":"person: bald","c":1,"a":["person_bald"]},{"e":"ð±ââï¸","d":"woman: blond hair","c":1,"a":["blond_haired_woman","blonde_woman"]},{"e":"ð±ââï¸","d":"man: blond hair","c":1,"a":["blond_haired_man"]},{"e":"ð§","d":"older person","c":1,"a":["older_adult"]},{"e":"ð´","d":"old man","c":1,"a":["older_man"]},{"e":"ðµ","d":"old woman","c":1,"a":["older_woman"]},{"e":"ð","d":"person frowning","c":1,"a":["frowning_person"]},{"e":"ðââï¸","d":"man frowning","c":1,"a":["frowning_man"]},{"e":"ðââï¸","d":"woman frowning","c":1,"a":["frowning_woman"]},{"e":"ð","d":"person pouting","c":1,"a":["pouting_face"]},{"e":"ðââï¸","d":"man pouting","c":1,"a":["pouting_man"]},{"e":"ðââï¸","d":"woman pouting","c":1,"a":["pouting_woman"]},{"e":"ð","d":"person gesturing NO","c":1,"a":["no_good"],"t":["stop","halt","denied"]},{"e":"ðââï¸","d":"man gesturing NO","c":1,"a":["no_good_man","ng_man"],"t":["stop","halt","denied"]},{"e":"ðââï¸","d":"woman gesturing NO","c":1,"a":["no_good_woman","ng_woman"],"t":["stop","halt","denied"]},{"e":"ð","d":"person gesturing OK","c":1,"a":["ok_person"]},{"e":"ðââï¸","d":"man gesturing OK","c":1,"a":["ok_man"]},{"e":"ðââï¸","d":"woman gesturing OK","c":1,"a":["ok_woman"]},{"e":"ð","d":"person tipping hand","c":1,"a":["tipping_hand_person","information_desk_person"]},{"e":"ðââï¸","d":"man tipping hand","c":1,"a":["tipping_hand_man","sassy_man"],"t":["information"]},{"e":"ðââï¸","d":"woman tipping hand","c":1,"a":["tipping_hand_woman","sassy_woman"],"t":["information"]},{"e":"ð","d":"person raising hand","c":1,"a":["raising_hand"]},{"e":"ðââï¸","d":"man raising hand","c":1,"a":["raising_hand_man"]},{"e":"ðââï¸","d":"woman raising hand","c":1,"a":["raising_hand_woman"]},{"e":"ð§","d":"deaf person","c":1,"a":["deaf_person"]},{"e":"ð§ââï¸","d":"deaf man","c":1,"a":["deaf_man"]},{"e":"ð§ââï¸","d":"deaf woman","c":1,"a":["deaf_woman"]},{"e":"ð","d":"person bowing","c":1,"a":["bow"],"t":["respect","thanks"]},{"e":"ðââï¸","d":"man bowing","c":1,"a":["bowing_man"],"t":["respect","thanks"]},{"e":"ðââï¸","d":"woman bowing","c":1,"a":["bowing_woman"],"t":["respect","thanks"]},{"e":"ð¤¦","d":"person facepalming","c":1,"a":["facepalm"]},{"e":"ð¤¦ââï¸","d":"man facepalming","c":1,"a":["man_facepalming"]},{"e":"ð¤¦ââï¸","d":"woman facepalming","c":1,"a":["woman_facepalming"]},{"e":"ð¤·","d":"person shrugging","c":1,"a":["shrug"]},{"e":"ð¤·ââï¸","d":"man shrugging","c":1,"a":["man_shrugging"]},{"e":"ð¤·ââï¸","d":"woman shrugging","c":1,"a":["woman_shrugging"]},{"e":"ð§âï¿½ï¿½ï¸","d":"health worker","c":1,"a":["health_worker"]},{"e":"ð¨ââï¸","d":"man health worker","c":1,"a":["man_health_worker"],"t":["doctor","nurse"]},{"e":"ð©ââï¸","d":"woman health worker","c":1,"a":["woman_health_worker"],"t":["doctor","nurse"]},{"e":"ð§âð","d":"student","c":1,"a":["student"]},{"e":"ð¨âð","d":"man student","c":1,"a":["man_student"],"t":["graduation"]},{"e":"ð©âð","d":"woman student","c":1,"a":["woman_student"],"t":["graduation"]},{"e":"ð§âð«","d":"teacher","c":1,"a":["teacher"]},{"e":"ð¨âð«","d":"man teacher","c":1,"a":["man_teacher"],"t":["school","professor"]},{"e":"ð©âð«","d":"woman teacher","c":1,"a":["woman_teacher"],"t":["school","professor"]},{"e":"ð§ââï¸","d":"judge","c":1,"a":["judge"]},{"e":"ð¨ââï¸","d":"man judge","c":1,"a":["man_judge"],"t":["justice"]},{"e":"ð©ââï¸","d":"woman judge","c":1,"a":["woman_judge"],"t":["justice"]},{"e":"ð§âð¾","d":"farmer","c":1,"a":["farmer"]},{"e":"ð¨âð¾","d":"man farmer","c":1,"a":["man_farmer"]},{"e":"ð©âð¾","d":"woman farmer","c":1,"a":["woman_farmer"]},{"e":"ð§âð³","d":"cook","c":1,"a":["cook"]},{"e":"ð¨âð³","d":"man cook","c":1,"a":["man_cook"],"t":["chef"]},{"e":"ð©âð³","d":"woman cook","c":1,"a":["woman_cook"],"t":["chef"]},{"e":"ð§âð§","d":"mechanic","c":1,"a":["mechanic"]},{"e":"ð¨âð§","d":"man mechanic","c":1,"a":["man_mechanic"]},{"e":"ð©âð§","d":"woman mechanic","c":1,"a":["woman_mechanic"]},{"e":"ð§âð­","d":"factory worker","c":1,"a":["factory_worker"]},{"e":"ð¨âï¿½ï¿½ï¿½","d":"man factory worker","c":1,"a":["man_factory_worker"]},{"e":"ð©âð­","d":"woman factory worker","c":1,"a":["woman_factory_worker"]},{"e":"ð§âð¼","d":"office worker","c":1,"a":["office_worker"]},{"e":"ð¨âð¼","d":"man office worker","c":1,"a":["man_office_worker"],"t":["business"]},{"e":"ð©âð¼","d":"woman office worker","c":1,"a":["woman_office_worker"],"t":["business"]},{"e":"ð§âð¬","d":"scientist","c":1,"a":["scientist"]},{"e":"ð¨âð¬","d":"man scientist","c":1,"a":["man_scientist"],"t":["research"]},{"e":"ð©âð¬","d":"woman scientist","c":1,"a":["woman_scientist"],"t":["research"]},{"e":"ð§âð»","d":"technologist","c":1,"a":["technologist"]},{"e":"ð¨âð»","d":"man technologist","c":1,"a":["man_technologist"],"t":["coder"]},{"e":"ð©âð»","d":"woman technologist","c":1,"a":["woman_technologist"],"t":["coder"]},{"e":"ð§âð¤","d":"singer","c":1,"a":["singer"]},{"e":"ð¨âð¤","d":"man singer","c":1,"a":["man_singer"],"t":["rockstar"]},{"e":"ð©âð¤","d":"woman singer","c":1,"a":["woman_singer"],"t":["rockstar"]},{"e":"ð§âð¨","d":"artist","c":1,"a":["artist"]},{"e":"ð¨âð¨","d":"man artist","c":1,"a":["man_artist"],"t":["painter"]},{"e":"ð©âð¨","d":"woman artist","c":1,"a":["woman_artist"],"t":["painter"]},{"e":"ð§ââï¸","d":"pilot","c":1,"a":["pilot"]},{"e":"ð¨ââï¸","d":"man pilot","c":1,"a":["man_pilot"]},{"e":"ð©ââï¸","d":"woman pilot","c":1,"a":["woman_pilot"]},{"e":"ð§âð","d":"astronaut","c":1,"a":["astronaut"]},{"e":"ð¨âð","d":"man astronaut","c":1,"a":["man_astronaut"],"t":["space"]},{"e":"ð©âð","d":"woman astronaut","c":1,"a":["woman_astronaut"],"t":["space"]},{"e":"ð§âð","d":"firefighter","c":1,"a":["firefighter"]},{"e":"ð¨âð","d":"man firefighter","c":1,"a":["man_firefighter"]},{"e":"ð©âð","d":"woman firefighter","c":1,"a":["woman_firefighter"]},{"e":"ð®","d":"police officer","c":1,"a":["police_officer","cop"],"t":["law"]},{"e":"ð®ââï¸","d":"man police officer","c":1,"a":["policeman"],"t":["law","cop"]},{"e":"ð®ââï¸","d":"woman police officer","c":1,"a":["policewoman"],"t":["law","cop"]},{"e":"ðµï¸","d":"detective","c":1,"a":["detective"],"t":["sleuth"]},{"e":"ðµï¸ââï¸","d":"man detective","c":1,"a":["male_detective"],"t":["sleuth"]},{"e":"ðµï¸ââï¸","d":"woman detective","c":1,"a":["female_detective"],"t":["sleuth"]},{"e":"ð","d":"guard","c":1,"a":["guard"]},{"e":"ðââï¸","d":"man guard","c":1,"a":["guardsman"]},{"e":"ðââï¸","d":"woman guard","c":1,"a":["guardswoman"]},{"e":"ð¥·","d":"ninja","c":1,"a":["ninja"]},{"e":"ð·","d":"construction worker","c":1,"a":["construction_worker"],"t":["helmet"]},{"e":"ð·ââï¸","d":"man construction worker","c":1,"a":["construction_worker_man"],"t":["helmet"]},{"e":"ð·ââï¸","d":"woman construction worker","c":1,"a":["construction_worker_woman"],"t":["helmet"]},{"e":"ð¤´","d":"prince","c":1,"a":["prince"],"t":["crown","royal"]},{"e":"ð¸","d":"princess","c":1,"a":["princess"],"t":["crown","royal"]},{"e":"ð³","d":"person wearing turban","c":1,"a":["person_with_turban"]},{"e":"ð³ââï¸","d":"man wearing turban","c":1,"a":["man_with_turban"]},{"e":"ð³ââï¸","d":"woman wearing turban","c":1,"a":["woman_with_turban"]},{"e":"ð²","d":"person with skullcap","c":1,"a":["man_with_gua_pi_mao"]},{"e":"ð§","d":"woman with headscarf","c":1,"a":["woman_with_headscarf"],"t":["hijab"]},{"e":"ð¤µ","d":"person in tuxedo","c":1,"a":["person_in_tuxedo"],"t":["groom","marriage","wedding"]},{"e":"ð¤µââï¸","d":"man in tuxedo","c":1,"a":["man_in_tuxedo"]},{"e":"ð¤µââï¸","d":"woman in tuxedo","c":1,"a":["woman_in_tuxedo"]},{"e":"ð°","d":"person with veil","c":1,"a":["person_with_veil"],"t":["marriage","wedding"]},{"e":"ð°ââï¸","d":"man with veil","c":1,"a":["man_with_veil"]},{"e":"ð°ââï¸","d":"woman with veil","c":1,"a":["woman_with_veil","bride_with_veil"]},{"e":"ð¤°","d":"pregnant woman","c":1,"a":["pregnant_woman"]},{"e":"ð¤±","d":"breast-feeding","c":1,"a":["breast_feeding"],"t":["nursing"]},{"e":"ð©âð¼","d":"woman feeding baby","c":1,"a":["woman_feeding_baby"]},{"e":"ð¨âð¼","d":"man feeding baby","c":1,"a":["man_feeding_baby"]},{"e":"ð§âð¼","d":"person feeding baby","c":1,"a":["person_feeding_baby"]},{"e":"ð¼","d":"baby angel","c":1,"a":["angel"]},{"e":"ð","d":"Santa Claus","c":1,"a":["santa"],"t":["christmas"]},{"e":"ð¤¶","d":"Mrs. Claus","c":1,"a":["mrs_claus"],"t":["santa"]},{"e":"ð§âð","d":"mx claus","c":1,"a":["mx_claus"]},{"e":"ð¦¸","d":"superhero","c":1,"a":["superhero"]},{"e":"ð¦¸ââï¸","d":"man superhero","c":1,"a":["superhero_man"]},{"e":"ð¦¸ââï¸","d":"woman superhero","c":1,"a":["superhero_woman"]},{"e":"ð¦¹","d":"supervillain","c":1,"a":["supervillain"]},{"e":"ð¦¹ââï¸","d":"man supervillain","c":1,"a":["supervillain_man"]},{"e":"ð¦¹ââï¸","d":"woman supervillain","c":1,"a":["supervillain_woman"]},{"e":"ð§","d":"mage","c":1,"a":["mage"],"t":["wizard"]},{"e":"ð§ââï¸","d":"man mage","c":1,"a":["mage_man"],"t":["wizard"]},{"e":"ð§ââï¸","d":"woman mage","c":1,"a":["mage_woman"],"t":["wizard"]},{"e":"ð§","d":"fairy","c":1,"a":["fairy"]},{"e":"ð§ââï¸","d":"man fairy","c":1,"a":["fairy_man"]},{"e":"ð§ââï¸","d":"woman fairy","c":1,"a":["fairy_woman"]},{"e":"ð§","d":"vampire","c":1,"a":["vampire"]},{"e":"ð§ââï¸","d":"man vampire","c":1,"a":["vampire_man"]},{"e":"ð§ââï¸","d":"woman vampire","c":1,"a":["vampire_woman"]},{"e":"ð§","d":"merperson","c":1,"a":["merperson"]},{"e":"ð§ââï¸","d":"merman","c":1,"a":["merman"]},{"e":"ð§ââï¸","d":"mermaid","c":1,"a":["mermaid"]},{"e":"ð§","d":"elf","c":1,"a":["elf"]},{"e":"ð§ââï¸","d":"man elf","c":1,"a":["elf_man"]},{"e":"ð§ââï¸","d":"woman elf","c":1,"a":["elf_woman"]},{"e":"ð§","d":"genie","c":1,"a":["genie"]},{"e":"ð§ââï¸","d":"man genie","c":1,"a":["genie_man"]},{"e":"ð§ââï¸","d":"woman genie","c":1,"a":["genie_woman"]},{"e":"ð§","d":"zombie","c":1,"a":["zombie"]},{"e":"ð§ââï¸","d":"man zombie","c":1,"a":["zombie_man"]},{"e":"ð§ââï¸","d":"woman zombie","c":1,"a":["zombie_woman"]},{"e":"ð","d":"person getting massage","c":1,"a":["massage"],"t":["spa"]},{"e":"ðââï¸","d":"man getting massage","c":1,"a":["massage_man"],"t":["spa"]},{"e":"ðââï¸","d":"woman getting massage","c":1,"a":["massage_woman"],"t":["spa"]},{"e":"ð","d":"person getting haircut","c":1,"a":["haircut"],"t":["beauty"]},{"e":"ðââï¸","d":"man getting haircut","c":1,"a":["haircut_man"]},{"e":"ðââï¸","d":"woman getting haircut","c":1,"a":["haircut_woman"]},{"e":"ð¶","d":"person walking","c":1,"a":["walking"]},{"e":"ð¶ââï¸","d":"man walking","c":1,"a":["walking_man"]},{"e":"ð¶ââï¸","d":"woman walking","c":1,"a":["walking_woman"]},{"e":"ð§","d":"person standing","c":1,"a":["standing_person"]},{"e":"ð§ââï¸","d":"man standing","c":1,"a":["standing_man"]},{"e":"ð§ââï¸","d":"woman standing","c":1,"a":["standing_woman"]},{"e":"ð§","d":"person kneeling","c":1,"a":["kneeling_person"]},{"e":"ð§ââï¸","d":"man kneeling","c":1,"a":["kneeling_man"]},{"e":"ð§ââï¸","d":"woman kneeling","c":1,"a":["kneeling_woman"]},{"e":"ð§âð¦¯","d":"person with white cane","c":1,"a":["person_with_probing_cane"]},{"e":"ð¨âð¦¯","d":"man with white cane","c":1,"a":["man_with_probing_cane"]},{"e":"ð©âð¦¯","d":"woman with white cane","c":1,"a":["woman_with_probing_cane"]},{"e":"ð§âð¦¼","d":"person in motorized wheelchair","c":1,"a":["person_in_motorized_wheelchair"]},{"e":"ð¨âð¦¼","d":"man in motorized wheelchair","c":1,"a":["man_in_motorized_wheelchair"]},{"e":"ð©âð¦¼","d":"woman in motorized wheelchair","c":1,"a":["woman_in_motorized_wheelchair"]},{"e":"ð§âð¦½","d":"person in manual wheelchair","c":1,"a":["person_in_manual_wheelchair"]},{"e":"ï¿½ï¿½ï¿½ï¿½âð¦½","d":"man in manual wheelchair","c":1,"a":["man_in_manual_wheelchair"]},{"e":"ð©âð¦½","d":"woman in manual wheelchair","c":1,"a":["woman_in_manual_wheelchair"]},{"e":"ð","d":"person running","c":1,"a":["runner","running"],"t":["exercise","workout","marathon"]},{"e":"ðââï¸","d":"man running","c":1,"a":["running_man"],"t":["exercise","workout","marathon"]},{"e":"ðââï¸","d":"woman running","c":1,"a":["running_woman"],"t":["exercise","workout","marathon"]},{"e":"ð","d":"woman dancing","c":1,"a":["woman_dancing","dancer"],"t":["dress"]},{"e":"ðº","d":"man dancing","c":1,"a":["man_dancing"],"t":["dancer"]},{"e":"ð´ï¸","d":"person in suit levitating","c":1,"a":["business_suit_levitating"]},{"e":"ð¯","d":"people with bunny ears","c":1,"a":["dancers"],"t":["bunny"]},{"e":"ð¯ââï¸","d":"men with bunny ears","c":1,"a":["dancing_men"],"t":["bunny"]},{"e":"ð¯ââï¸","d":"women with bunny ears","c":1,"a":["dancing_women"],"t":["bunny"]},{"e":"ð§","d":"person in steamy room","c":1,"a":["sauna_person"],"t":["steamy"]},{"e":"ð§ââï¸","d":"man in steamy room","c":1,"a":["sauna_man"],"t":["steamy"]},{"e":"ð§ââï¸","d":"woman in steamy room","c":1,"a":["sauna_woman"],"t":["steamy"]},{"e":"ð§","d":"person climbing","c":1,"a":["climbing"],"t":["bouldering"]},{"e":"ð§ââï¸","d":"man climbing","c":1,"a":["climbing_man"],"t":["bouldering"]},{"e":"ð§ââï¸","d":"woman climbing","c":1,"a":["climbing_woman"],"t":["bouldering"]},{"e":"ð¤º","d":"person fencing","c":1,"a":["person_fencing"]},{"e":"ð","d":"horse racing","c":1,"a":["horse_racing"]},{"e":"â·ï¸","d":"skier","c":1,"a":["skier"]},{"e":"ð","d":"snowboarder","c":1,"a":["snowboarder"]},{"e":"ðï¸","d":"person golfing","c":1,"a":["golfing"]},{"e":"ðï¸ââï¸","d":"man golfing","c":1,"a":["golfing_man"]},{"e":"ðï¸ââï¸","d":"woman golfing","c":1,"a":["golfing_woman"]},{"e":"ð","d":"person surfing","c":1,"a":["surfer"]},{"e":"ðââï¸","d":"man surfing","c":1,"a":["surfing_man"]},{"e":"ðââï¸","d":"woman surfing","c":1,"a":["surfing_woman"]},{"e":"ð£","d":"person rowing boat","c":1,"a":["rowboat"]},{"e":"ð£ââï¸","d":"man rowing boat","c":1,"a":["rowing_man"]},{"e":"ð£ââï¸","d":"woman rowing boat","c":1,"a":["rowing_woman"]},{"e":"ð","d":"person swimming","c":1,"a":["swimmer"]},{"e":"ðââï¸","d":"man swimming","c":1,"a":["swimming_man"]},{"e":"ðââï¸","d":"woman swimming","c":1,"a":["swimming_woman"]},{"e":"â¹ï¸","d":"person bouncing ball","c":1,"a":["bouncing_ball_person"],"t":["basketball"]},{"e":"â¹ï¸ââï¸","d":"man bouncing ball","c":1,"a":["bouncing_ball_man","basketball_man"]},{"e":"â¹ï¸ââï¸","d":"woman bouncing ball","c":1,"a":["bouncing_ball_woman","basketball_woman"]},{"e":"ðï¸","d":"person lifting weights","c":1,"a":["weight_lifting"],"t":["gym","workout"]},{"e":"ðï¸ââï¸","d":"man lifting weights","c":1,"a":["weight_lifting_man"],"t":["gym","workout"]},{"e":"ðï¸ââï¸","d":"woman lifting weights","c":1,"a":["weight_lifting_woman"],"t":["gym","workout"]},{"e":"ð´","d":"person biking","c":1,"a":["bicyclist"]},{"e":"ð´ââï¸","d":"man biking","c":1,"a":["biking_man"]},{"e":"ð´ââï¸","d":"woman biking","c":1,"a":["biking_woman"]},{"e":"ðµ","d":"person mountain biking","c":1,"a":["mountain_bicyclist"]},{"e":"ðµââï¸","d":"man mountain biking","c":1,"a":["mountain_biking_man"]},{"e":"ðµââï¸","d":"woman mountain biking","c":1,"a":["mountain_biking_woman"]},{"e":"ð¤¸","d":"person cartwheeling","c":1,"a":["cartwheeling"]},{"e":"ð¤¸ââï¸","d":"man cartwheeling","c":1,"a":["man_cartwheeling"]},{"e":"ð¤¸ââï¸","d":"woman cartwheeling","c":1,"a":["woman_cartwheeling"]},{"e":"ð¤¼","d":"people wrestling","c":1,"a":["wrestling"]},{"e":"ð¤¼ââï¸","d":"men wrestling","c":1,"a":["men_wrestling"]},{"e":"ð¤¼ââï¸","d":"women wrestling","c":1,"a":["women_wrestling"]},{"e":"ð¤½","d":"person playing water polo","c":1,"a":["water_polo"]},{"e":"ð¤½ââï¸","d":"man playing water polo","c":1,"a":["man_playing_water_polo"]},{"e":"ð¤½ââï¸","d":"woman playing water polo","c":1,"a":["woman_playing_water_polo"]},{"e":"ð¤¾","d":"person playing handball","c":1,"a":["handball_person"]},{"e":"ð¤¾ââï¸","d":"man playing handball","c":1,"a":["man_playing_handball"]},{"e":"ð¤¾ââï¸","d":"woman playing handball","c":1,"a":["woman_playing_handball"]},{"e":"ð¤¹","d":"person juggling","c":1,"a":["juggling_person"]},{"e":"ð¤¹ââï¸","d":"man juggling","c":1,"a":["man_juggling"]},{"e":"ð¤¹ââï¸","d":"woman juggling","c":1,"a":["woman_juggling"]},{"e":"ð§","d":"person in lotus position","c":1,"a":["lotus_position"],"t":["meditation"]},{"e":"ð§ââï¸","d":"man in lotus position","c":1,"a":["lotus_position_man"],"t":["meditation"]},{"e":"ð§ââï¸","d":"woman in lotus position","c":1,"a":["lotus_position_woman"],"t":["meditation"]},{"e":"ð","d":"person taking bath","c":1,"a":["bath"],"t":["shower"]},{"e":"ð","d":"person in bed","c":1,"a":["sleeping_bed"]},{"e":"ð§âð¤âð§","d":"people holding hands","c":1,"a":["people_holding_hands"],"t":["couple","date"]},{"e":"ð­","d":"women holding hands","c":1,"a":["two_women_holding_hands"],"t":["couple","date"]},{"e":"ð«","d":"woman and man holding hands","c":1,"a":["couple"],"t":["date"]},{"e":"ð¬","d":"men holding hands","c":1,"a":["two_men_holding_hands"],"t":["couple","date"]},{"e":"ð","d":"kiss","c":1,"a":["couplekiss"]},{"e":"ð©ââ¤ï¸âðâð¨","d":"kiss: woman, man","c":1,"a":["couplekiss_man_woman"]},{"e":"ð¨ââ¤ï¸âðâð¨","d":"kiss: man, man","c":1,"a":["couplekiss_man_man"]},{"e":"ð©ââ¤ï¸âðâð©","d":"kiss: woman, woman","c":1,"a":["couplekiss_woman_woman"]},{"e":"ð","d":"couple with heart","c":1,"a":["couple_with_heart"]},{"e":"ð©ââ¤ï¸âð¨","d":"couple with heart: woman, man","c":1,"a":["couple_with_heart_woman_man"]},{"e":"ð¨ââ¤ï¸âð¨","d":"couple with heart: man, man","c":1,"a":["couple_with_heart_man_man"]},{"e":"ð©ââ¤ï¸âð©","d":"couple with heart: woman, woman","c":1,"a":["couple_with_heart_woman_woman"]},{"e":"ðª","d":"family","c":1,"a":["family"],"t":["home","parents","child"]},{"e":"ð¨âð©âð¦","d":"family: man, woman, boy","c":1,"a":["family_man_woman_boy"]},{"e":"ð¨âð©âð§","d":"family: man, woman, girl","c":1,"a":["family_man_woman_girl"]},{"e":"ð¨âð©âð§âð¦","d":"family: man, woman, girl, boy","c":1,"a":["family_man_woman_girl_boy"]},{"e":"ð¨âð©âð¦âð¦","d":"family: man, woman, boy, boy","c":1,"a":["family_man_woman_boy_boy"]},{"e":"ð¨âð©âð§âð§","d":"family: man, woman, girl, girl","c":1,"a":["family_man_woman_girl_girl"]},{"e":"ð¨âð¨âð¦","d":"family: man, man, boy","c":1,"a":["family_man_man_boy"]},{"e":"ð¨âð¨âð§","d":"family: man, man, girl","c":1,"a":["family_man_man_girl"]},{"e":"ð¨âð¨âð§âð¦","d":"family: man, man, girl, boy","c":1,"a":["family_man_man_girl_boy"]},{"e":"ð¨âð¨âð¦âð¦","d":"family: man, man, boy, boy","c":1,"a":["family_man_man_boy_boy"]},{"e":"ð¨âð¨âð§âð§","d":"family: man, man, girl, girl","c":1,"a":["family_man_man_girl_girl"]},{"e":"ð©âð©âð¦","d":"family: woman, woman, boy","c":1,"a":["family_woman_woman_boy"]},{"e":"ð©âð©âð§","d":"family: woman, woman, girl","c":1,"a":["family_woman_woman_girl"]},{"e":"ð©âð©âð§âð¦","d":"family: woman, woman, girl, boy","c":1,"a":["family_woman_woman_girl_boy"]},{"e":"ð©âð©âð¦âð¦","d":"family: woman, woman, boy, boy","c":1,"a":["family_woman_woman_boy_boy"]},{"e":"ð©âð©âð§âð§","d":"family: woman, woman, girl, girl","c":1,"a":["family_woman_woman_girl_girl"]},{"e":"ð¨âð¦","d":"family: man, boy","c":1,"a":["family_man_boy"]},{"e":"ð¨âð¦âð¦","d":"family: man, boy, boy","c":1,"a":["family_man_boy_boy"]},{"e":"ð¨âð§","d":"family: man, girl","c":1,"a":["family_man_girl"]},{"e":"ð¨âð§âð¦","d":"family: man, girl, boy","c":1,"a":["family_man_girl_boy"]},{"e":"ð¨âð§âð§","d":"family: man, girl, girl","c":1,"a":["family_man_girl_girl"]},{"e":"ð©âð¦","d":"family: woman, boy","c":1,"a":["family_woman_boy"]},{"e":"ð©âð¦âð¦","d":"family: woman, boy, boy","c":1,"a":["family_woman_boy_boy"]},{"e":"ð©âð§","d":"family: woman, girl","c":1,"a":["family_woman_girl"]},{"e":"ð©âð§âð¦","d":"family: woman, girl, boy","c":1,"a":["family_woman_girl_boy"]},{"e":"ð©âð§âð§","d":"family: woman, girl, girl","c":1,"a":["family_woman_girl_girl"]},{"e":"ð£ï¸","d":"speaking head","c":1,"a":["speaking_head"]},{"e":"ð¤","d":"bust in silhouette","c":1,"a":["bust_in_silhouette"],"t":["user"]},{"e":"ð¥","d":"busts in silhouette","c":1,"a":["busts_in_silhouette"],"t":["users","group","team"]},{"e":"ð«","d":"people hugging","c":1,"a":["people_hugging"]},{"e":"ð£","d":"footprints","c":1,"a":["footprints"],"t":["feet","tracks"]},{"e":"ðµ","d":"monkey face","c":2,"a":["monkey_face"]},{"e":"ð","d":"monkey","c":2,"a":["monkey"]},{"e":"ð¦","d":"gorilla","c":2,"a":["gorilla"]},{"e":"ð¦§","d":"orangutan","c":2,"a":["orangutan"]},{"e":"ð¶","d":"dog face","c":2,"a":["dog"],"t":["pet"]},{"e":"ð","d":"dog","c":2,"a":["dog2"]},{"e":"ð¦®","d":"guide dog","c":2,"a":["guide_dog"]},{"e":"ðâð¦º","d":"service dog","c":2,"a":["service_dog"]},{"e":"ð©","d":"poodle","c":2,"a":["poodle"],"t":["dog"]},{"e":"ðº","d":"wolf","c":2,"a":["wolf"]},{"e":"ð¦","d":"fox","c":2,"a":["fox_face"]},{"e":"ð¦","d":"raccoon","c":2,"a":["raccoon"]},{"e":"ð±","d":"cat face","c":2,"a":["cat"],"t":["pet"]},{"e":"ð","d":"cat","c":2,"a":["cat2"]},{"e":"ðââ¬","d":"black cat","c":2,"a":["black_cat"]},{"e":"ð¦","d":"lion","c":2,"a":["lion"]},{"e":"ð¯","d":"tiger face","c":2,"a":["tiger"]},{"e":"ð","d":"tiger","c":2,"a":["tiger2"]},{"e":"ð","d":"leopard","c":2,"a":["leopard"]},{"e":"ð´","d":"horse face","c":2,"a":["horse"]},{"e":"ð","d":"horse","c":2,"a":["racehorse"],"t":["speed"]},{"e":"ð¦","d":"unicorn","c":2,"a":["unicorn"]},{"e":"ð¦","d":"zebra","c":2,"a":["zebra"]},{"e":"ð¦","d":"deer","c":2,"a":["deer"]},{"e":"ð¦¬","d":"bison","c":2,"a":["bison"]},{"e":"ð®","d":"cow face","c":2,"a":["cow"]},{"e":"ð","d":"ox","c":2,"a":["ox"]},{"e":"ð","d":"water buffalo","c":2,"a":["water_buffalo"]},{"e":"ð","d":"cow","c":2,"a":["cow2"]},{"e":"ð·","d":"pig face","c":2,"a":["pig"]},{"e":"ð","d":"pig","c":2,"a":["pig2"]},{"e":"ð","d":"boar","c":2,"a":["boar"]},{"e":"ð½","d":"pig nose","c":2,"a":["pig_nose"]},{"e":"ð","d":"ram","c":2,"a":["ram"]},{"e":"ð","d":"ewe","c":2,"a":["sheep"]},{"e":"ð","d":"goat","c":2,"a":["goat"]},{"e":"ðª","d":"camel","c":2,"a":["dromedary_camel"],"t":["desert"]},{"e":"ð«","d":"two-hump camel","c":2,"a":["camel"]},{"e":"ð¦","d":"llama","c":2,"a":["llama"]},{"e":"ð¦","d":"giraffe","c":2,"a":["giraffe"]},{"e":"ð","d":"elephant","c":2,"a":["elephant"]},{"e":"ð¦£","d":"mammoth","c":2,"a":["mammoth"]},{"e":"ð¦","d":"rhinoceros","c":2,"a":["rhinoceros"]},{"e":"ð¦","d":"hippopotamus","c":2,"a":["hippopotamus"]},{"e":"ð­","d":"mouse face","c":2,"a":["mouse"]},{"e":"ð","d":"mouse","c":2,"a":["mouse2"]},{"e":"ð","d":"rat","c":2,"a":["rat"]},{"e":"ð¹","d":"hamster","c":2,"a":["hamster"],"t":["pet"]},{"e":"ð°","d":"rabbit face","c":2,"a":["rabbit"],"t":["bunny"]},{"e":"ð","d":"rabbit","c":2,"a":["rabbit2"]},{"e":"ð¿ï¸","d":"chipmunk","c":2,"a":["chipmunk"]},{"e":"ð¦«","d":"beaver","c":2,"a":["beaver"]},{"e":"ð¦","d":"hedgehog","c":2,"a":["hedgehog"]},{"e":"ð¦","d":"bat","c":2,"a":["bat"]},{"e":"ð»","d":"bear","c":2,"a":["bear"]},{"e":"ð»ââï¸","d":"polar bear","c":2,"a":["polar_bear"]},{"e":"ð¨","d":"koala","c":2,"a":["koala"]},{"e":"ð¼","d":"panda","c":2,"a":["panda_face"]},{"e":"ð¦¥","d":"sloth","c":2,"a":["sloth"]},{"e":"ð¦¦","d":"otter","c":2,"a":["otter"]},{"e":"ð¦¨","d":"skunk","c":2,"a":["skunk"]},{"e":"ð¦","d":"kangaroo","c":2,"a":["kangaroo"]},{"e":"ð¦¡","d":"badger","c":2,"a":["badger"]},{"e":"ð¾","d":"paw prints","c":2,"a":["feet","paw_prints"]},{"e":"ð¦","d":"turkey","c":2,"a":["turkey"],"t":["thanksgiving"]},{"e":"ð","d":"chicken","c":2,"a":["chicken"]},{"e":"ð","d":"rooster","c":2,"a":["rooster"]},{"e":"ð£","d":"hatching chick","c":2,"a":["hatching_chick"]},{"e":"ð¤","d":"baby chick","c":2,"a":["baby_chick"]},{"e":"ð¥","d":"front-facing baby chick","c":2,"a":["hatched_chick"]},{"e":"ð¦","d":"bird","c":2,"a":["bird"]},{"e":"ð§","d":"penguin","c":2,"a":["penguin"]},{"e":"ðï¸","d":"dove","c":2,"a":["dove"],"t":["peace"]},{"e":"ð¦","d":"eagle","c":2,"a":["eagle"]},{"e":"ð¦","d":"duck","c":2,"a":["duck"]},{"e":"ð¦¢","d":"swan","c":2,"a":["swan"]},{"e":"ð¦","d":"owl","c":2,"a":["owl"]},{"e":"ð¦¤","d":"dodo","c":2,"a":["dodo"]},{"e":"ðª¶","d":"feather","c":2,"a":["feather"]},{"e":"ð¦©","d":"flamingo","c":2,"a":["flamingo"]},{"e":"ð¦","d":"peacock","c":2,"a":["peacock"]},{"e":"ð¦","d":"parrot","c":2,"a":["parrot"]},{"e":"ð¸","d":"frog","c":2,"a":["frog"]},{"e":"ð","d":"crocodile","c":2,"a":["crocodile"]},{"e":"ð¢","d":"turtle","c":2,"a":["turtle"],"t":["slow"]},{"e":"ð¦","d":"lizard","c":2,"a":["lizard"]},{"e":"ð","d":"snake","c":2,"a":["snake"]},{"e":"ð²","d":"dragon face","c":2,"a":["dragon_face"]},{"e":"ð","d":"dragon","c":2,"a":["dragon"]},{"e":"ð¦","d":"sauropod","c":2,"a":["sauropod"],"t":["dinosaur"]},{"e":"ð¦","d":"T-Rex","c":2,"a":["t-rex"],"t":["dinosaur"]},{"e":"ð³","d":"spouting whale","c":2,"a":["whale"],"t":["sea"]},{"e":"ð","d":"whale","c":2,"a":["whale2"]},{"e":"ð¬","d":"dolphin","c":2,"a":["dolphin","flipper"]},{"e":"ð¦­","d":"seal","c":2,"a":["seal"]},{"e":"ð","d":"fish","c":2,"a":["fish"]},{"e":"ð ","d":"tropical fish","c":2,"a":["tropical_fish"]},{"e":"ð¡","d":"blowfish","c":2,"a":["blowfish"]},{"e":"ð¦","d":"shark","c":2,"a":["shark"]},{"e":"ð","d":"octopus","c":2,"a":["octopus"]},{"e":"ð","d":"spiral shell","c":2,"a":["shell"],"t":["sea","beach"]},{"e":"ð","d":"snail","c":2,"a":["snail"],"t":["slow"]},{"e":"ð¦","d":"butterfly","c":2,"a":["butterfly"]},{"e":"ð","d":"bug","c":2,"a":["bug"]},{"e":"ð","d":"ant","c":2,"a":["ant"]},{"e":"ð","d":"honeybee","c":2,"a":["bee","honeybee"]},{"e":"ðª²","d":"beetle","c":2,"a":["beetle"]},{"e":"ð","d":"lady beetle","c":2,"a":["lady_beetle"],"t":["bug"]},{"e":"ð¦","d":"cricket","c":2,"a":["cricket"]},{"e":"ðª³","d":"cockroach","c":2,"a":["cockroach"]},{"e":"ð·ï¸","d":"spider","c":2,"a":["spider"]},{"e":"ð¸ï¸","d":"spider web","c":2,"a":["spider_web"]},{"e":"ð¦","d":"scorpion","c":2,"a":["scorpion"]},{"e":"ð¦","d":"mosquito","c":2,"a":["mosquito"]},{"e":"ðª°","d":"fly","c":2,"a":["fly"]},{"e":"ðª±","d":"worm","c":2,"a":["worm"]},{"e":"ð¦ ","d":"microbe","c":2,"a":["microbe"],"t":["germ"]},{"e":"ð","d":"bouquet","c":2,"a":["bouquet"],"t":["flowers"]},{"e":"ð¸","d":"cherry blossom","c":2,"a":["cherry_blossom"],"t":["flower","spring"]},{"e":"ð®","d":"white flower","c":2,"a":["white_flower"]},{"e":"ðµï¸","d":"rosette","c":2,"a":["rosette"]},{"e":"ð¹","d":"rose","c":2,"a":["rose"],"t":["flower"]},{"e":"ð¥","d":"wilted flower","c":2,"a":["wilted_flower"]},{"e":"ðº","d":"hibiscus","c":2,"a":["hibiscus"]},{"e":"ð»","d":"sunflower","c":2,"a":["sunflower"]},{"e":"ð¼","d":"blossom","c":2,"a":["blossom"]},{"e":"ð·","d":"tulip","c":2,"a":["tulip"],"t":["flower"]},{"e":"ð±","d":"seedling","c":2,"a":["seedling"],"t":["plant"]},{"e":"ðª´","d":"potted plant","c":2,"a":["potted_plant"]},{"e":"ð²","d":"evergreen tree","c":2,"a":["evergreen_tree"],"t":["wood"]},{"e":"ð³","d":"deciduous tree","c":2,"a":["deciduous_tree"],"t":["wood"]},{"e":"ð´","d":"palm tree","c":2,"a":["palm_tree"]},{"e":"ðµ","d":"cactus","c":2,"a":["cactus"]},{"e":"ð¾","d":"sheaf of rice","c":2,"a":["ear_of_rice"]},{"e":"ð¿","d":"herb","c":2,"a":["herb"]},{"e":"âï¸","d":"shamrock","c":2,"a":["shamrock"]},{"e":"ð","d":"four leaf clover","c":2,"a":["four_leaf_clover"],"t":["luck"]},{"e":"ð","d":"maple leaf","c":2,"a":["maple_leaf"],"t":["canada"]},{"e":"ð","d":"fallen leaf","c":2,"a":["fallen_leaf"],"t":["autumn"]},{"e":"ð","d":"leaf fluttering in wind","c":2,"a":["leaves"],"t":["leaf"]},{"e":"ð","d":"grapes","c":3,"a":["grapes"]},{"e":"ð","d":"melon","c":3,"a":["melon"]},{"e":"ð","d":"watermelon","c":3,"a":["watermelon"]},{"e":"ð","d":"tangerine","c":3,"a":["tangerine","orange","mandarin"]},{"e":"ð","d":"lemon","c":3,"a":["lemon"]},{"e":"ð","d":"banana","c":3,"a":["banana"],"t":["fruit"]},{"e":"ð","d":"pineapple","c":3,"a":["pineapple"]},{"e":"ð¥­","d":"mango","c":3,"a":["mango"]},{"e":"ð","d":"red apple","c":3,"a":["apple"]},{"e":"ð","d":"green apple","c":3,"a":["green_apple"],"t":["fruit"]},{"e":"ð","d":"pear","c":3,"a":["pear"]},{"e":"ð","d":"peach","c":3,"a":["peach"]},{"e":"ð","d":"cherries","c":3,"a":["cherries"],"t":["fruit"]},{"e":"ð","d":"strawberry","c":3,"a":["strawberry"],"t":["fruit"]},{"e":"ð«","d":"blueberries","c":3,"a":["blueberries"]},{"e":"ð¥","d":"kiwi fruit","c":3,"a":["kiwi_fruit"]},{"e":"ð","d":"tomato","c":3,"a":["tomato"]},{"e":"ð«","d":"olive","c":3,"a":["olive"]},{"e":"ð¥¥","d":"coconut","c":3,"a":["coconut"]},{"e":"ð¥","d":"avocado","c":3,"a":["avocado"]},{"e":"ð","d":"eggplant","c":3,"a":["eggplant"],"t":["aubergine"]},{"e":"ð¥","d":"potato","c":3,"a":["potato"]},{"e":"ð¥","d":"carrot","c":3,"a":["carrot"]},{"e":"ð½","d":"ear of corn","c":3,"a":["corn"]},{"e":"ð¶ï¸","d":"hot pepper","c":3,"a":["hot_pepper"],"t":["spicy"]},{"e":"ð«","d":"bell pepper","c":3,"a":["bell_pepper"]},{"e":"ð¥","d":"cucumber","c":3,"a":["cucumber"]},{"e":"ð¥¬","d":"leafy green","c":3,"a":["leafy_green"]},{"e":"ð¥¦","d":"broccoli","c":3,"a":["broccoli"]},{"e":"ð§","d":"garlic","c":3,"a":["garlic"]},{"e":"ð§","d":"onion","c":3,"a":["onion"]},{"e":"ð","d":"mushroom","c":3,"a":["mushroom"]},{"e":"ð¥","d":"peanuts","c":3,"a":["peanuts"]},{"e":"ð°","d":"chestnut","c":3,"a":["chestnut"]},{"e":"ð","d":"bread","c":3,"a":["bread"],"t":["toast"]},{"e":"ð¥","d":"croissant","c":3,"a":["croissant"]},{"e":"ð¥","d":"baguette bread","c":3,"a":["baguette_bread"]},{"e":"ð«","d":"flatbread","c":3,"a":["flatbread"]},{"e":"ð¥¨","d":"pretzel","c":3,"a":["pretzel"]},{"e":"ð¥¯","d":"bagel","c":3,"a":["bagel"]},{"e":"ð¥","d":"pancakes","c":3,"a":["pancakes"]},{"e":"ð§","d":"waffle","c":3,"a":["waffle"]},{"e":"ð§","d":"cheese wedge","c":3,"a":["cheese"]},{"e":"ð","d":"meat on bone","c":3,"a":["meat_on_bone"]},{"e":"ð","d":"poultry leg","c":3,"a":["poultry_leg"],"t":["meat","chicken"]},{"e":"ð¥©","d":"cut of meat","c":3,"a":["cut_of_meat"]},{"e":"ð¥","d":"bacon","c":3,"a":["bacon"]},{"e":"ð","d":"hamburger","c":3,"a":["hamburger"],"t":["burger"]},{"e":"ð","d":"french fries","c":3,"a":["fries"]},{"e":"ð","d":"pizza","c":3,"a":["pizza"]},{"e":"ð­","d":"hot dog","c":3,"a":["hotdog"]},{"e":"ð¥ª","d":"sandwich","c":3,"a":["sandwich"]},{"e":"ð®","d":"taco","c":3,"a":["taco"]},{"e":"ð¯","d":"burrito","c":3,"a":["burrito"]},{"e":"ð«","d":"tamale","c":3,"a":["tamale"]},{"e":"ð¥","d":"stuffed flatbread","c":3,"a":["stuffed_flatbread"]},{"e":"ð§","d":"falafel","c":3,"a":["falafel"]},{"e":"ð¥","d":"egg","c":3,"a":["egg"]},{"e":"ð³","d":"cooking","c":3,"a":["fried_egg"],"t":["breakfast"]},{"e":"ð¥","d":"shallow pan of food","c":3,"a":["shallow_pan_of_food"],"t":["paella","curry"]},{"e":"ð²","d":"pot of food","c":3,"a":["stew"]},{"e":"ð«","d":"fondue","c":3,"a":["fondue"]},{"e":"ð¥£","d":"bowl with spoon","c":3,"a":["bowl_with_spoon"]},{"e":"ð¥","d":"green salad","c":3,"a":["green_salad"]},{"e":"ð¿","d":"popcorn","c":3,"a":["popcorn"]},{"e":"ð§","d":"butter","c":3,"a":["butter"]},{"e":"ð§","d":"salt","c":3,"a":["salt"]},{"e":"ð¥«","d":"canned food","c":3,"a":["canned_food"]},{"e":"ð±","d":"bento box","c":3,"a":["bento"]},{"e":"ð","d":"rice cracker","c":3,"a":["rice_cracker"]},{"e":"ð","d":"rice ball","c":3,"a":["rice_ball"]},{"e":"ð","d":"cooked rice","c":3,"a":["rice"]},{"e":"ð","d":"curry rice","c":3,"a":["curry"]},{"e":"ð","d":"steaming bowl","c":3,"a":["ramen"],"t":["noodle"]},{"e":"ð","d":"spaghetti","c":3,"a":["spaghetti"],"t":["pasta"]},{"e":"ð ","d":"roasted sweet potato","c":3,"a":["sweet_potato"]},{"e":"ð¢","d":"oden","c":3,"a":["oden"]},{"e":"ð£","d":"sushi","c":3,"a":["sushi"]},{"e":"ð¤","d":"fried shrimp","c":3,"a":["fried_shrimp"],"t":["tempura"]},{"e":"ð¥","d":"fish cake with swirl","c":3,"a":["fish_cake"]},{"e":"ð¥®","d":"moon cake","c":3,"a":["moon_cake"]},{"e":"ð¡","d":"dango","c":3,"a":["dango"]},{"e":"ð¥","d":"dumpling","c":3,"a":["dumpling"]},{"e":"ð¥ ","d":"fortune cookie","c":3,"a":["fortune_cookie"]},{"e":"ð¥¡","d":"takeout box","c":3,"a":["takeout_box"]},{"e":"ð¦","d":"crab","c":3,"a":["crab"]},{"e":"ð¦","d":"lobster","c":3,"a":["lobster"]},{"e":"ð¦","d":"shrimp","c":3,"a":["shrimp"]},{"e":"ð¦","d":"squid","c":3,"a":["squid"]},{"e":"ð¦ª","d":"oyster","c":3,"a":["oyster"]},{"e":"ð¦","d":"soft ice cream","c":3,"a":["icecream"]},{"e":"ð§","d":"shaved ice","c":3,"a":["shaved_ice"]},{"e":"ð¨","d":"ice cream","c":3,"a":["ice_cream"]},{"e":"ð©","d":"doughnut","c":3,"a":["doughnut"]},{"e":"ðª","d":"cookie","c":3,"a":["cookie"]},{"e":"ð","d":"birthday cake","c":3,"a":["birthday"],"t":["party"]},{"e":"ð°","d":"shortcake","c":3,"a":["cake"],"t":["dessert"]},{"e":"ð§","d":"cupcake","c":3,"a":["cupcake"]},{"e":"ð¥§","d":"pie","c":3,"a":["pie"]},{"e":"ð«","d":"chocolate bar","c":3,"a":["chocolate_bar"]},{"e":"ð¬","d":"candy","c":3,"a":["candy"],"t":["sweet"]},{"e":"ð­","d":"lollipop","c":3,"a":["lollipop"]},{"e":"ð®","d":"custard","c":3,"a":["custard"]},{"e":"ð¯","d":"honey pot","c":3,"a":["honey_pot"]},{"e":"ð¼","d":"baby bottle","c":3,"a":["baby_bottle"],"t":["milk"]},{"e":"ð¥","d":"glass of milk","c":3,"a":["milk_glass"]},{"e":"â","d":"hot beverage","c":3,"a":["coffee"],"t":["cafe","espresso"]},{"e":"ð«","d":"teapot","c":3,"a":["teapot"]},{"e":"ðµ","d":"teacup without handle","c":3,"a":["tea"],"t":["green","breakfast"]},{"e":"ð¶","d":"sake","c":3,"a":["sake"]},{"e":"ð¾","d":"bottle with popping cork","c":3,"a":["champagne"],"t":["bottle","bubbly","celebration"]},{"e":"ð·","d":"wine glass","c":3,"a":["wine_glass"]},{"e":"ð¸","d":"cocktail glass","c":3,"a":["cocktail"],"t":["drink"]},{"e":"ð¹","d":"tropical drink","c":3,"a":["tropical_drink"],"t":["summer","vacation"]},{"e":"ðº","d":"beer mug","c":3,"a":["beer"],"t":["drink"]},{"e":"ð»","d":"clinking beer mugs","c":3,"a":["beers"],"t":["drinks"]},{"e":"ð¥","d":"clinking glasses","c":3,"a":["clinking_glasses"],"t":["cheers","toast"]},{"e":"ð¥","d":"tumbler glass","c":3,"a":["tumbler_glass"],"t":["whisky"]},{"e":"ð¥¤","d":"cup with straw","c":3,"a":["cup_with_straw"]},{"e":"ð§","d":"bubble tea","c":3,"a":["bubble_tea"]},{"e":"ð§","d":"beverage box","c":3,"a":["beverage_box"]},{"e":"ð§","d":"mate","c":3,"a":["mate"]},{"e":"ð§","d":"ice","c":3,"a":["ice_cube"]},{"e":"ð¥¢","d":"chopsticks","c":3,"a":["chopsticks"]},{"e":"ð½ï¸","d":"fork and knife with plate","c":3,"a":["plate_with_cutlery"],"t":["dining","dinner"]},{"e":"ð´","d":"fork and knife","c":3,"a":["fork_and_knife"],"t":["cutlery"]},{"e":"ð¥","d":"spoon","c":3,"a":["spoon"]},{"e":"ðª","d":"kitchen knife","c":3,"a":["hocho","knife"],"t":["cut","chop"]},{"e":"ðº","d":"amphora","c":3,"a":["amphora"]},{"e":"ð","d":"globe showing Europe-Africa","c":4,"a":["earth_africa"],"t":["globe","world","international"]},{"e":"ð","d":"globe showing Americas","c":4,"a":["earth_americas"],"t":["globe","world","international"]},{"e":"ð","d":"globe showing Asia-Australia","c":4,"a":["earth_asia"],"t":["globe","world","international"]},{"e":"ð","d":"globe with meridians","c":4,"a":["globe_with_meridians"],"t":["world","global","international"]},{"e":"ðºï¸","d":"world map","c":4,"a":["world_map"],"t":["travel"]},{"e":"ð¾","d":"map of Japan","c":4,"a":["japan"]},{"e":"ð§­","d":"compass","c":4,"a":["compass"]},{"e":"ðï¸","d":"snow-capped mountain","c":4,"a":["mountain_snow"]},{"e":"â°ï¸","d":"mountain","c":4,"a":["mountain"]},{"e":"ð","d":"volcano","c":4,"a":["volcano"]},{"e":"ð»","d":"mount fuji","c":4,"a":["mount_fuji"]},{"e":"ðï¸","d":"camping","c":4,"a":["camping"]},{"e":"ðï¸","d":"beach with umbrella","c":4,"a":["beach_umbrella"]},{"e":"ðï¸","d":"desert","c":4,"a":["desert"]},{"e":"ðï¸","d":"desert island","c":4,"a":["desert_island"]},{"e":"ðï¸","d":"national park","c":4,"a":["national_park"]},{"e":"ðï¸","d":"stadium","c":4,"a":["stadium"]},{"e":"ðï¸","d":"classical building","c":4,"a":["classical_building"]},{"e":"ðï¸","d":"building construction","c":4,"a":["building_construction"]},{"e":"ð§±","d":"brick","c":4,"a":["bricks"]},{"e":"ðª¨","d":"rock","c":4,"a":["rock"]},{"e":"ðªµ","d":"wood","c":4,"a":["wood"]},{"e":"ð","d":"hut","c":4,"a":["hut"]},{"e":"ðï¸","d":"houses","c":4,"a":["houses"]},{"e":"ðï¸","d":"derelict house","c":4,"a":["derelict_house"]},{"e":"ð ","d":"house","c":4,"a":["house"]},{"e":"ð¡","d":"house with garden","c":4,"a":["house_with_garden"]},{"e":"ð¢","d":"office building","c":4,"a":["office"]},{"e":"ð£","d":"Japanese post office","c":4,"a":["post_office"]},{"e":"ð¤","d":"post office","c":4,"a":["european_post_office"]},{"e":"ð¥","d":"hospital","c":4,"a":["hospital"]},{"e":"ð¦","d":"bank","c":4,"a":["bank"]},{"e":"ð¨","d":"hotel","c":4,"a":["hotel"]},{"e":"ð©","d":"love hotel","c":4,"a":["love_hotel"]},{"e":"ðª","d":"convenience store","c":4,"a":["convenience_store"]},{"e":"ð«","d":"school","c":4,"a":["school"]},{"e":"ð¬","d":"department store","c":4,"a":["department_store"]},{"e":"ð­","d":"factory","c":4,"a":["factory"]},{"e":"ð¯","d":"Japanese castle","c":4,"a":["japanese_castle"]},{"e":"ð°","d":"castle","c":4,"a":["european_castle"]},{"e":"ð","d":"wedding","c":4,"a":["wedding"],"t":["marriage"]},{"e":"ð¼","d":"Tokyo tower","c":4,"a":["tokyo_tower"]},{"e":"ð½","d":"Statue of Liberty","c":4,"a":["statue_of_liberty"]},{"e":"âª","d":"church","c":4,"a":["church"]},{"e":"ð","d":"mosque","c":4,"a":["mosque"]},{"e":"ð","d":"hindu temple","c":4,"a":["hindu_temple"]},{"e":"ð","d":"synagogue","c":4,"a":["synagogue"]},{"e":"â©ï¸","d":"shinto shrine","c":4,"a":["shinto_shrine"]},{"e":"ð","d":"kaaba","c":4,"a":["kaaba"]},{"e":"â²","d":"fountain","c":4,"a":["fountain"]},{"e":"âº","d":"tent","c":4,"a":["tent"],"t":["camping"]},{"e":"ð","d":"foggy","c":4,"a":["foggy"],"t":["karl"]},{"e":"ð","d":"night with stars","c":4,"a":["night_with_stars"]},{"e":"ðï¸","d":"cityscape","c":4,"a":["cityscape"],"t":["skyline"]},{"e":"ð","d":"sunrise over mountains","c":4,"a":["sunrise_over_mountains"]},{"e":"ð","d":"sunrise","c":4,"a":["sunrise"]},{"e":"ð","d":"cityscape at dusk","c":4,"a":["city_sunset"]},{"e":"ð","d":"sunset","c":4,"a":["city_sunrise"]},{"e":"ð","d":"bridge at night","c":4,"a":["bridge_at_night"]},{"e":"â¨ï¸","d":"hot springs","c":4,"a":["hotsprings"]},{"e":"ð ","d":"carousel horse","c":4,"a":["carousel_horse"]},{"e":"ð¡","d":"ferris wheel","c":4,"a":["ferris_wheel"]},{"e":"ð¢","d":"roller coaster","c":4,"a":["roller_coaster"]},{"e":"ð","d":"barber pole","c":4,"a":["barber"]},{"e":"ðª","d":"circus tent","c":4,"a":["circus_tent"]},{"e":"ð","d":"locomotive","c":4,"a":["steam_locomotive"],"t":["train"]},{"e":"ð","d":"railway car","c":4,"a":["railway_car"]},{"e":"ð","d":"high-speed train","c":4,"a":["bullettrain_side"],"t":["train"]},{"e":"ð","d":"bullet train","c":4,"a":["bullettrain_front"],"t":["train"]},{"e":"ð","d":"train","c":4,"a":["train2"]},{"e":"ð","d":"metro","c":4,"a":["metro"]},{"e":"ð","d":"light rail","c":4,"a":["light_rail"]},{"e":"ð","d":"station","c":4,"a":["station"]},{"e":"ð","d":"tram","c":4,"a":["tram"]},{"e":"ð","d":"monorail","c":4,"a":["monorail"]},{"e":"ð","d":"mountain railway","c":4,"a":["mountain_railway"]},{"e":"ð","d":"tram car","c":4,"a":["train"]},{"e":"ð","d":"bus","c":4,"a":["bus"]},{"e":"ð","d":"oncoming bus","c":4,"a":["oncoming_bus"]},{"e":"ð","d":"trolleybus","c":4,"a":["trolleybus"]},{"e":"ð","d":"minibus","c":4,"a":["minibus"]},{"e":"ð","d":"ambulance","c":4,"a":["ambulance"]},{"e":"ð","d":"fire engine","c":4,"a":["fire_engine"]},{"e":"ð","d":"police car","c":4,"a":["police_car"]},{"e":"ð","d":"oncoming police car","c":4,"a":["oncoming_police_car"]},{"e":"ð","d":"taxi","c":4,"a":["taxi"]},{"e":"ð","d":"oncoming taxi","c":4,"a":["oncoming_taxi"]},{"e":"ð","d":"automobile","c":4,"a":["car","red_car"]},{"e":"ð","d":"oncoming automobile","c":4,"a":["oncoming_automobile"]},{"e":"ð","d":"sport utility vehicle","c":4,"a":["blue_car"]},{"e":"ð»","d":"pickup truck","c":4,"a":["pickup_truck"]},{"e":"ð","d":"delivery truck","c":4,"a":["truck"]},{"e":"ð","d":"articulated lorry","c":4,"a":["articulated_lorry"]},{"e":"ð","d":"tractor","c":4,"a":["tractor"]},{"e":"ðï¸","d":"racing car","c":4,"a":["racing_car"]},{"e":"ðï¸","d":"motorcycle","c":4,"a":["motorcycle"]},{"e":"ðµ","d":"motor scooter","c":4,"a":["motor_scooter"]},{"e":"ð¦½","d":"manual wheelchair","c":4,"a":["manual_wheelchair"]},{"e":"ð¦¼","d":"motorized wheelchair","c":4,"a":["motorized_wheelchair"]},{"e":"ðº","d":"auto rickshaw","c":4,"a":["auto_rickshaw"]},{"e":"ð²","d":"bicycle","c":4,"a":["bike"],"t":["bicycle"]},{"e":"ð´","d":"kick scooter","c":4,"a":["kick_scooter"]},{"e":"ð¹","d":"skateboard","c":4,"a":["skateboard"]},{"e":"ð¼","d":"roller skate","c":4,"a":["roller_skate"]},{"e":"ð","d":"bus stop","c":4,"a":["busstop"]},{"e":"ð£ï¸","d":"motorway","c":4,"a":["motorway"]},{"e":"ð¤ï¸","d":"railway track","c":4,"a":["railway_track"]},{"e":"ð¢ï¸","d":"oil drum","c":4,"a":["oil_drum"]},{"e":"â½","d":"fuel pump","c":4,"a":["fuelpump"]},{"e":"ð¨","d":"police car light","c":4,"a":["rotating_light"],"t":["911","emergency"]},{"e":"ð¥","d":"horizontal traffic light","c":4,"a":["traffic_light"]},{"e":"ð¦","d":"vertical traffic light","c":4,"a":["vertical_traffic_light"],"t":["semaphore"]},{"e":"ð","d":"stop sign","c":4,"a":["stop_sign"]},{"e":"ð§","d":"construction","c":4,"a":["construction"],"t":["wip"]},{"e":"â","d":"anchor","c":4,"a":["anchor"],"t":["ship"]},{"e":"âµ","d":"sailboat","c":4,"a":["boat","sailboat"]},{"e":"ð¶","d":"canoe","c":4,"a":["canoe"]},{"e":"ð¤","d":"speedboat","c":4,"a":["speedboat"],"t":["ship"]},{"e":"ð³ï¸","d":"passenger ship","c":4,"a":["passenger_ship"],"t":["cruise"]},{"e":"â´ï¸","d":"ferry","c":4,"a":["ferry"]},{"e":"ð¥ï¸","d":"motor boat","c":4,"a":["motor_boat"]},{"e":"ð¢","d":"ship","c":4,"a":["ship"]},{"e":"âï¸","d":"airplane","c":4,"a":["airplane"],"t":["flight"]},{"e":"ð©ï¸","d":"small airplane","c":4,"a":["small_airplane"],"t":["flight"]},{"e":"ð«","d":"airplane departure","c":4,"a":["flight_departure"]},{"e":"ð¬","d":"airplane arrival","c":4,"a":["flight_arrival"]},{"e":"ðª","d":"parachute","c":4,"a":["parachute"]},{"e":"ðº","d":"seat","c":4,"a":["seat"]},{"e":"ð","d":"helicopter","c":4,"a":["helicopter"]},{"e":"ð","d":"suspension railway","c":4,"a":["suspension_railway"]},{"e":"ð ","d":"mountain cableway","c":4,"a":["mountain_cableway"]},{"e":"ð¡","d":"aerial tramway","c":4,"a":["aerial_tramway"]},{"e":"ð°ï¸","d":"satellite","c":4,"a":["artificial_satellite"],"t":["orbit","space"]},{"e":"ð","d":"rocket","c":4,"a":["rocket"],"t":["ship","launch"]},{"e":"ð¸","d":"flying saucer","c":4,"a":["flying_saucer"],"t":["ufo"]},{"e":"ðï¸","d":"bellhop bell","c":4,"a":["bellhop_bell"]},{"e":"ð§³","d":"luggage","c":4,"a":["luggage"]},{"e":"â","d":"hourglass done","c":4,"a":["hourglass"],"t":["time"]},{"e":"â³","d":"hourglass not done","c":4,"a":["hourglass_flowing_sand"],"t":["time"]},{"e":"â","d":"watch","c":4,"a":["watch"],"t":["time"]},{"e":"â°","d":"alarm clock","c":4,"a":["alarm_clock"],"t":["morning"]},{"e":"â±ï¸","d":"stopwatch","c":4,"a":["stopwatch"]},{"e":"â²ï¸","d":"timer clock","c":4,"a":["timer_clock"]},{"e":"ð°ï¸","d":"mantelpiece clock","c":4,"a":["mantelpiece_clock"]},{"e":"ð","d":"twelve oâclock","c":4,"a":["clock12"]},{"e":"ð§","d":"twelve-thirty","c":4,"a":["clock1230"]},{"e":"ð","d":"one oâclock","c":4,"a":["clock1"]},{"e":"ð","d":"one-thirty","c":4,"a":["clock130"]},{"e":"ð","d":"two oâclock","c":4,"a":["clock2"]},{"e":"ð","d":"two-thirty","c":4,"a":["clock230"]},{"e":"ð","d":"three oâclock","c":4,"a":["clock3"]},{"e":"ð","d":"three-thirty","c":4,"a":["clock330"]},{"e":"ð","d":"four oâclock","c":4,"a":["clock4"]},{"e":"ð","d":"four-thirty","c":4,"a":["clock430"]},{"e":"ð","d":"five oâclock","c":4,"a":["clock5"]},{"e":"ð ","d":"five-thirty","c":4,"a":["clock530"]},{"e":"ð","d":"six oâclock","c":4,"a":["clock6"]},{"e":"ð¡","d":"six-thirty","c":4,"a":["clock630"]},{"e":"ð","d":"seven oâclock","c":4,"a":["clock7"]},{"e":"ð¢","d":"seven-thirty","c":4,"a":["clock730"]},{"e":"ð","d":"eight oâclock","c":4,"a":["clock8"]},{"e":"ð£","d":"eight-thirty","c":4,"a":["clock830"]},{"e":"ð","d":"nine oâclock","c":4,"a":["clock9"]},{"e":"ð¤","d":"nine-thirty","c":4,"a":["clock930"]},{"e":"ð","d":"ten oâclock","c":4,"a":["clock10"]},{"e":"ð¥","d":"ten-thirty","c":4,"a":["clock1030"]},{"e":"ð","d":"eleven oâclock","c":4,"a":["clock11"]},{"e":"ð¦","d":"eleven-thirty","c":4,"a":["clock1130"]},{"e":"ð","d":"new moon","c":4,"a":["new_moon"]},{"e":"ð","d":"waxing crescent moon","c":4,"a":["waxing_crescent_moon"]},{"e":"ð","d":"first quarter moon","c":4,"a":["first_quarter_moon"]},{"e":"ð","d":"waxing gibbous moon","c":4,"a":["moon","waxing_gibbous_moon"]},{"e":"ð","d":"full moon","c":4,"a":["full_moon"]},{"e":"ð","d":"waning gibbous moon","c":4,"a":["waning_gibbous_moon"]},{"e":"ð","d":"last quarter moon","c":4,"a":["last_quarter_moon"]},{"e":"ð","d":"waning crescent moon","c":4,"a":["waning_crescent_moon"]},{"e":"ð","d":"crescent moon","c":4,"a":["crescent_moon"],"t":["night"]},{"e":"ð","d":"new moon face","c":4,"a":["new_moon_with_face"]},{"e":"ð","d":"first quarter moon face","c":4,"a":["first_quarter_moon_with_face"]},{"e":"ð","d":"last quarter moon face","c":4,"a":["last_quarter_moon_with_face"]},{"e":"ð¡ï¸","d":"thermometer","c":4,"a":["thermometer"]},{"e":"âï¸","d":"sun","c":4,"a":["sunny"],"t":["weather"]},{"e":"ð","d":"full moon face","c":4,"a":["full_moon_with_face"]},{"e":"ð","d":"sun with face","c":4,"a":["sun_with_face"],"t":["summer"]},{"e":"ðª","d":"ringed planet","c":4,"a":["ringed_planet"]},{"e":"â­","d":"star","c":4,"a":["star"]},{"e":"ð","d":"glowing star","c":4,"a":["star2"]},{"e":"ð ","d":"shooting star","c":4,"a":["stars"]},{"e":"ð","d":"milky way","c":4,"a":["milky_way"]},{"e":"âï¸","d":"cloud","c":4,"a":["cloud"]},{"e":"â","d":"sun behind cloud","c":4,"a":["partly_sunny"],"t":["weather","cloud"]},{"e":"âï¸","d":"cloud with lightning and rain","c":4,"a":["cloud_with_lightning_and_rain"]},{"e":"ð¤ï¸","d":"sun behind small cloud","c":4,"a":["sun_behind_small_cloud"]},{"e":"ð¥ï¸","d":"sun behind large cloud","c":4,"a":["sun_behind_large_cloud"]},{"e":"ð¦ï¸","d":"sun behind rain cloud","c":4,"a":["sun_behind_rain_cloud"]},{"e":"ð§ï¸","d":"cloud with rain","c":4,"a":["cloud_with_rain"]},{"e":"ð¨ï¸","d":"cloud with snow","c":4,"a":["cloud_with_snow"]},{"e":"ð©ï¸","d":"cloud with lightning","c":4,"a":["cloud_with_lightning"]},{"e":"ðªï¸","d":"tornado","c":4,"a":["tornado"]},{"e":"ð«ï¸","d":"fog","c":4,"a":["fog"]},{"e":"ð¬ï¸","d":"wind face","c":4,"a":["wind_face"]},{"e":"ð","d":"cyclone","c":4,"a":["cyclone"],"t":["swirl"]},{"e":"ð","d":"rainbow","c":4,"a":["rainbow"]},{"e":"ð","d":"closed umbrella","c":4,"a":["closed_umbrella"],"t":["weather","rain"]},{"e":"âï¸","d":"umbrella","c":4,"a":["open_umbrella"]},{"e":"â","d":"umbrella with rain drops","c":4,"a":["umbrella"],"t":["rain","weather"]},{"e":"â±ï¸","d":"umbrella on ground","c":4,"a":["parasol_on_ground"],"t":["beach_umbrella"]},{"e":"â¡","d":"high voltage","c":4,"a":["zap"],"t":["lightning","thunder"]},{"e":"âï¸","d":"snowflake","c":4,"a":["snowflake"],"t":["winter","cold","weather"]},{"e":"âï¸","d":"snowman","c":4,"a":["snowman_with_snow"],"t":["winter","christmas"]},{"e":"â","d":"snowman without snow","c":4,"a":["snowman"],"t":["winter"]},{"e":"âï¸","d":"comet","c":4,"a":["comet"]},{"e":"ð¥","d":"fire","c":4,"a":["fire"],"t":["burn"]},{"e":"ð§","d":"droplet","c":4,"a":["droplet"],"t":["water"]},{"e":"ð","d":"water wave","c":4,"a":["ocean"],"t":["sea"]},{"e":"ð","d":"jack-o-lantern","c":5,"a":["jack_o_lantern"],"t":["halloween"]},{"e":"ð","d":"Christmas tree","c":5,"a":["christmas_tree"]},{"e":"ð","d":"fireworks","c":5,"a":["fireworks"],"t":["festival","celebration"]},{"e":"ð","d":"sparkler","c":5,"a":["sparkler"]},{"e":"ð§¨","d":"firecracker","c":5,"a":["firecracker"]},{"e":"â¨","d":"sparkles","c":5,"a":["sparkles"],"t":["shiny"]},{"e":"ð","d":"balloon","c":5,"a":["balloon"],"t":["party","birthday"]},{"e":"ð","d":"party popper","c":5,"a":["tada"],"t":["hooray","party"]},{"e":"ð","d":"confetti ball","c":5,"a":["confetti_ball"]},{"e":"ð","d":"tanabata tree","c":5,"a":["tanabata_tree"]},{"e":"ð","d":"pine decoration","c":5,"a":["bamboo"]},{"e":"ð","d":"Japanese dolls","c":5,"a":["dolls"]},{"e":"ð","d":"carp streamer","c":5,"a":["flags"]},{"e":"ð","d":"wind chime","c":5,"a":["wind_chime"]},{"e":"ð","d":"moon viewing ceremony","c":5,"a":["rice_scene"]},{"e":"ð§§","d":"red envelope","c":5,"a":["red_envelope"]},{"e":"ð","d":"ribbon","c":5,"a":["ribbon"]},{"e":"ð","d":"wrapped gift","c":5,"a":["gift"],"t":["present","birthday","christmas"]},{"e":"ðï¸","d":"reminder ribbon","c":5,"a":["reminder_ribbon"]},{"e":"ðï¸","d":"admission tickets","c":5,"a":["tickets"]},{"e":"ð«","d":"ticket","c":5,"a":["ticket"]},{"e":"ðï¸","d":"military medal","c":5,"a":["medal_military"]},{"e":"ð","d":"trophy","c":5,"a":["trophy"],"t":["award","contest","winner"]},{"e":"ð","d":"sports medal","c":5,"a":["medal_sports"],"t":["gold","winner"]},{"e":"ð¥","d":"1st place medal","c":5,"a":["1st_place_medal"],"t":["gold"]},{"e":"ð¥","d":"2nd place medal","c":5,"a":["2nd_place_medal"],"t":["silver"]},{"e":"ð¥","d":"3rd place medal","c":5,"a":["3rd_place_medal"],"t":["bronze"]},{"e":"â½","d":"soccer ball","c":5,"a":["soccer"],"t":["sports"]},{"e":"â¾","d":"baseball","c":5,"a":["baseball"],"t":["sports"]},{"e":"ð¥","d":"softball","c":5,"a":["softball"]},{"e":"ð","d":"basketball","c":5,"a":["basketball"],"t":["sports"]},{"e":"ð","d":"volleyball","c":5,"a":["volleyball"]},{"e":"ð","d":"american football","c":5,"a":["football"],"t":["sports"]},{"e":"ð","d":"rugby football","c":5,"a":["rugby_football"]},{"e":"ð¾","d":"tennis","c":5,"a":["tennis"],"t":["sports"]},{"e":"ð¥","d":"flying disc","c":5,"a":["flying_disc"]},{"e":"ð³","d":"bowling","c":5,"a":["bowling"]},{"e":"ð","d":"cricket game","c":5,"a":["cricket_game"]},{"e":"ð","d":"field hockey","c":5,"a":["field_hockey"]},{"e":"ð","d":"ice hockey","c":5,"a":["ice_hockey"]},{"e":"ð¥","d":"lacrosse","c":5,"a":["lacrosse"]},{"e":"ð","d":"ping pong","c":5,"a":["ping_pong"]},{"e":"ð¸","d":"badminton","c":5,"a":["badminton"]},{"e":"ð¥","d":"boxing glove","c":5,"a":["boxing_glove"]},{"e":"ð¥","d":"martial arts uniform","c":5,"a":["martial_arts_uniform"]},{"e":"ð¥","d":"goal net","c":5,"a":["goal_net"]},{"e":"â³","d":"flag in hole","c":5,"a":["golf"]},{"e":"â¸ï¸","d":"ice skate","c":5,"a":["ice_skate"],"t":["skating"]},{"e":"ð£","d":"fishing pole","c":5,"a":["fishing_pole_and_fish"]},{"e":"ð¤¿","d":"diving mask","c":5,"a":["diving_mask"]},{"e":"ð½","d":"running shirt","c":5,"a":["running_shirt_with_sash"],"t":["marathon"]},{"e":"ð¿","d":"skis","c":5,"a":["ski"]},{"e":"ð·","d":"sled","c":5,"a":["sled"]},{"e":"ð¥","d":"curling stone","c":5,"a":["curling_stone"]},{"e":"ð¯","d":"direct hit","c":5,"a":["dart"],"t":["target"]},{"e":"ðª","d":"yo-yo","c":5,"a":["yo_yo"]},{"e":"ðª","d":"kite","c":5,"a":["kite"]},{"e":"ð±","d":"pool 8 ball","c":5,"a":["8ball"],"t":["pool","billiards"]},{"e":"ð®","d":"crystal ball","c":5,"a":["crystal_ball"],"t":["fortune"]},{"e":"ðª","d":"magic wand","c":5,"a":["magic_wand"]},{"e":"ð§¿","d":"nazar amulet","c":5,"a":["nazar_amulet"]},{"e":"ð®","d":"video game","c":5,"a":["video_game"],"t":["play","controller","console"]},{"e":"ð¹ï¸","d":"joystick","c":5,"a":["joystick"]},{"e":"ð°","d":"slot machine","c":5,"a":["slot_machine"]},{"e":"ð²","d":"game die","c":5,"a":["game_die"],"t":["dice","gambling"]},{"e":"ð§©","d":"puzzle piece","c":5,"a":["jigsaw"]},{"e":"ð§¸","d":"teddy bear","c":5,"a":["teddy_bear"]},{"e":"ðª","d":"piÃ±ata","c":5,"a":["pinata"]},{"e":"ðª","d":"nesting dolls","c":5,"a":["nesting_dolls"]},{"e":"â ï¸","d":"spade suit","c":5,"a":["spades"]},{"e":"â¥ï¸","d":"heart suit","c":5,"a":["hearts"]},{"e":"â¦ï¸","d":"diamond suit","c":5,"a":["diamonds"]},{"e":"â£ï¸","d":"club suit","c":5,"a":["clubs"]},{"e":"âï¸","d":"chess pawn","c":5,"a":["chess_pawn"]},{"e":"ð","d":"joker","c":5,"a":["black_joker"]},{"e":"ð","d":"mahjong red dragon","c":5,"a":["mahjong"]},{"e":"ð´","d":"flower playing cards","c":5,"a":["flower_playing_cards"]},{"e":"ð­","d":"performing arts","c":5,"a":["performing_arts"],"t":["theater","drama"]},{"e":"ð¼ï¸","d":"framed picture","c":5,"a":["framed_picture"]},{"e":"ð¨","d":"artist palette","c":5,"a":["art"],"t":["design","paint"]},{"e":"ð§µ","d":"thread","c":5,"a":["thread"]},{"e":"ðª¡","d":"sewing needle","c":5,"a":["sewing_needle"]},{"e":"ð§¶","d":"yarn","c":5,"a":["yarn"]},{"e":"ðª¢","d":"knot","c":5,"a":["knot"]},{"e":"ð","d":"glasses","c":6,"a":["eyeglasses"],"t":["glasses"]},{"e":"ð¶ï¸","d":"sunglasses","c":6,"a":["dark_sunglasses"]},{"e":"ð¥½","d":"goggles","c":6,"a":["goggles"]},{"e":"ð¥¼","d":"lab coat","c":6,"a":["lab_coat"]},{"e":"ð¦º","d":"safety vest","c":6,"a":["safety_vest"]},{"e":"ð","d":"necktie","c":6,"a":["necktie"],"t":["shirt","formal"]},{"e":"ð","d":"t-shirt","c":6,"a":["shirt","tshirt"]},{"e":"ð","d":"jeans","c":6,"a":["jeans"],"t":["pants"]},{"e":"ð§£","d":"scarf","c":6,"a":["scarf"]},{"e":"ð§¤","d":"gloves","c":6,"a":["gloves"]},{"e":"ð§¥","d":"coat","c":6,"a":["coat"]},{"e":"ð§¦","d":"socks","c":6,"a":["socks"]},{"e":"ï¿½ï¿½","d":"dress","c":6,"a":["dress"]},{"e":"ð","d":"kimono","c":6,"a":["kimono"]},{"e":"ð¥»","d":"sari","c":6,"a":["sari"]},{"e":"ð©±","d":"one-piece swimsuit","c":6,"a":["one_piece_swimsuit"]},{"e":"ð©²","d":"briefs","c":6,"a":["swim_brief"]},{"e":"ð©³","d":"shorts","c":6,"a":["shorts"]},{"e":"ð","d":"bikini","c":6,"a":["bikini"],"t":["beach"]},{"e":"ð","d":"womanâs clothes","c":6,"a":["womans_clothes"]},{"e":"ð","d":"purse","c":6,"a":["purse"]},{"e":"ð","d":"handbag","c":6,"a":["handbag"],"t":["bag"]},{"e":"ð","d":"clutch bag","c":6,"a":["pouch"],"t":["bag"]},{"e":"ðï¸","d":"shopping bags","c":6,"a":["shopping"],"t":["bags"]},{"e":"ð","d":"backpack","c":6,"a":["school_satchel"]},{"e":"ð©´","d":"thong sandal","c":6,"a":["thong_sandal"]},{"e":"ð","d":"manâs shoe","c":6,"a":["mans_shoe","shoe"]},{"e":"ð","d":"running shoe","c":6,"a":["athletic_shoe"],"t":["sneaker","sport","running"]},{"e":"ð¥¾","d":"hiking boot","c":6,"a":["hiking_boot"]},{"e":"ð¥¿","d":"flat shoe","c":6,"a":["flat_shoe"]},{"e":"ð ","d":"high-heeled shoe","c":6,"a":["high_heel"],"t":["shoe"]},{"e":"ð¡","d":"womanâs sandal","c":6,"a":["sandal"],"t":["shoe"]},{"e":"ð©°","d":"ballet shoes","c":6,"a":["ballet_shoes"]},{"e":"ð¢","d":"womanâs boot","c":6,"a":["boot"]},{"e":"ð","d":"crown","c":6,"a":["crown"],"t":["king","queen","royal"]},{"e":"ð","d":"womanâs hat","c":6,"a":["womans_hat"]},{"e":"ð©","d":"top hat","c":6,"a":["tophat"],"t":["hat","classy"]},{"e":"ð","d":"graduation cap","c":6,"a":["mortar_board"],"t":["education","college","university","graduation"]},{"e":"ð§¢","d":"billed cap","c":6,"a":["billed_cap"]},{"e":"ðª","d":"military helmet","c":6,"a":["military_helmet"]},{"e":"âï¸","d":"rescue workerâs helmet","c":6,"a":["rescue_worker_helmet"]},{"e":"ð¿","d":"prayer beads","c":6,"a":["prayer_beads"]},{"e":"ð","d":"lipstick","c":6,"a":["lipstick"],"t":["makeup"]},{"e":"ð","d":"ring","c":6,"a":["ring"],"t":["wedding","marriage","engaged"]},{"e":"ð","d":"gem stone","c":6,"a":["gem"],"t":["diamond"]},{"e":"ð","d":"muted speaker","c":6,"a":["mute"],"t":["sound","volume"]},{"e":"ð","d":"speaker low volume","c":6,"a":["speaker"]},{"e":"ð","d":"speaker medium volume","c":6,"a":["sound"],"t":["volume"]},{"e":"ð","d":"speaker high volume","c":6,"a":["loud_sound"],"t":["volume"]},{"e":"ð¢","d":"loudspeaker","c":6,"a":["loudspeaker"],"t":["announcement"]},{"e":"ð£","d":"megaphone","c":6,"a":["mega"]},{"e":"ð¯","d":"postal horn","c":6,"a":["postal_horn"]},{"e":"ð","d":"bell","c":6,"a":["bell"],"t":["sound","notification"]},{"e":"ð","d":"bell with slash","c":6,"a":["no_bell"],"t":["volume","off"]},{"e":"ð¼","d":"musical score","c":6,"a":["musical_score"]},{"e":"ðµ","d":"musical note","c":6,"a":["musical_note"]},{"e":"ð¶","d":"musical notes","c":6,"a":["notes"],"t":["music"]},{"e":"ðï¸","d":"studio microphone","c":6,"a":["studio_microphone"],"t":["podcast"]},{"e":"ðï¸","d":"level slider","c":6,"a":["level_slider"]},{"e":"ðï¸","d":"control knobs","c":6,"a":["control_knobs"]},{"e":"ð¤","d":"microphone","c":6,"a":["microphone"],"t":["sing"]},{"e":"ð§","d":"headphone","c":6,"a":["headphones"],"t":["music","earphones"]},{"e":"ð»","d":"radio","c":6,"a":["radio"],"t":["podcast"]},{"e":"ð·","d":"saxophone","c":6,"a":["saxophone"]},{"e":"ðª","d":"accordion","c":6,"a":["accordion"]},{"e":"ð¸","d":"guitar","c":6,"a":["guitar"],"t":["rock"]},{"e":"ð¹","d":"musical keyboard","c":6,"a":["musical_keyboard"],"t":["piano"]},{"e":"ðº","d":"trumpet","c":6,"a":["trumpet"]},{"e":"ð»","d":"violin","c":6,"a":["violin"]},{"e":"ðª","d":"banjo","c":6,"a":["banjo"]},{"e":"ð¥","d":"drum","c":6,"a":["drum"]},{"e":"ðª","d":"long drum","c":6,"a":["long_drum"]},{"e":"ð±","d":"mobile phone","c":6,"a":["iphone"],"t":["smartphone","mobile"]},{"e":"ð²","d":"mobile phone with arrow","c":6,"a":["calling"],"t":["call","incoming"]},{"e":"âï¸","d":"telephone","c":6,"a":["phone","telephone"]},{"e":"ð","d":"telephone receiver","c":6,"a":["telephone_receiver"],"t":["phone","call"]},{"e":"ð","d":"pager","c":6,"a":["pager"]},{"e":"ð ","d":"fax machine","c":6,"a":["fax"]},{"e":"ð","d":"battery","c":6,"a":["battery"],"t":["power"]},{"e":"ð","d":"electric plug","c":6,"a":["electric_plug"]},{"e":"ð»","d":"laptop","c":6,"a":["computer"],"t":["desktop","screen"]},{"e":"ð¥ï¸","d":"desktop computer","c":6,"a":["desktop_computer"]},{"e":"ð¨ï¸","d":"printer","c":6,"a":["printer"]},{"e":"â¨ï¸","d":"keyboard","c":6,"a":["keyboard"]},{"e":"ð±ï¸","d":"computer mouse","c":6,"a":["computer_mouse"]},{"e":"ð²ï¸","d":"trackball","c":6,"a":["trackball"]},{"e":"ð½","d":"computer disk","c":6,"a":["minidisc"]},{"e":"ð¾","d":"floppy disk","c":6,"a":["floppy_disk"],"t":["save"]},{"e":"ð¿","d":"optical disk","c":6,"a":["cd"]},{"e":"ð","d":"dvd","c":6,"a":["dvd"]},{"e":"ð§®","d":"abacus","c":6,"a":["abacus"]},{"e":"ð¥","d":"movie camera","c":6,"a":["movie_camera"],"t":["film","video"]},{"e":"ðï¸","d":"film frames","c":6,"a":["film_strip"]},{"e":"ð½ï¸","d":"film projector","c":6,"a":["film_projector"]},{"e":"ð¬","d":"clapper board","c":6,"a":["clapper"],"t":["film"]},{"e":"ðº","d":"television","c":6,"a":["tv"]},{"e":"ð·","d":"camera","c":6,"a":["camera"],"t":["photo"]},{"e":"ð¸","d":"camera with flash","c":6,"a":["camera_flash"],"t":["photo"]},{"e":"ð¹","d":"video camera","c":6,"a":["video_camera"]},{"e":"ð¼","d":"videocassette","c":6,"a":["vhs"]},{"e":"ð","d":"magnifying glass tilted left","c":6,"a":["mag"],"t":["search","zoom"]},{"e":"ð","d":"magnifying glass tilted right","c":6,"a":["mag_right"]},{"e":"ð¯ï¸","d":"candle","c":6,"a":["candle"]},{"e":"ð¡","d":"light bulb","c":6,"a":["bulb"],"t":["idea","light"]},{"e":"ð¦","d":"flashlight","c":6,"a":["flashlight"]},{"e":"ð®","d":"red paper lantern","c":6,"a":["izakaya_lantern","lantern"]},{"e":"ðª","d":"diya lamp","c":6,"a":["diya_lamp"]},{"e":"ð","d":"notebook with decorative cover","c":6,"a":["notebook_with_decorative_cover"]},{"e":"ð","d":"closed book","c":6,"a":["closed_book"]},{"e":"ð","d":"open book","c":6,"a":["book","open_book"]},{"e":"ð","d":"green book","c":6,"a":["green_book"]},{"e":"ð","d":"blue book","c":6,"a":["blue_book"]},{"e":"ð","d":"orange book","c":6,"a":["orange_book"]},{"e":"ð","d":"books","c":6,"a":["books"],"t":["library"]},{"e":"ð","d":"notebook","c":6,"a":["notebook"]},{"e":"ð","d":"ledger","c":6,"a":["ledger"]},{"e":"ð","d":"page with curl","c":6,"a":["page_with_curl"]},{"e":"ð","d":"scroll","c":6,"a":["scroll"],"t":["document"]},{"e":"ð","d":"page facing up","c":6,"a":["page_facing_up"],"t":["document"]},{"e":"ð°","d":"newspaper","c":6,"a":["newspaper"],"t":["press"]},{"e":"ðï¸","d":"rolled-up newspaper","c":6,"a":["newspaper_roll"],"t":["press"]},{"e":"ð","d":"bookmark tabs","c":6,"a":["bookmark_tabs"]},{"e":"ð","d":"bookmark","c":6,"a":["bookmark"]},{"e":"ð·ï¸","d":"label","c":6,"a":["label"],"t":["tag"]},{"e":"ð°","d":"money bag","c":6,"a":["moneybag"],"t":["dollar","cream"]},{"e":"ðª","d":"coin","c":6,"a":["coin"]},{"e":"ð´","d":"yen banknote","c":6,"a":["yen"]},{"e":"ðµ","d":"dollar banknote","c":6,"a":["dollar"],"t":["money"]},{"e":"ð¶","d":"euro banknote","c":6,"a":["euro"]},{"e":"ð·","d":"pound banknote","c":6,"a":["pound"]},{"e":"ð¸","d":"money with wings","c":6,"a":["money_with_wings"],"t":["dollar"]},{"e":"ð³","d":"credit card","c":6,"a":["credit_card"],"t":["subscription"]},{"e":"ð§¾","d":"receipt","c":6,"a":["receipt"]},{"e":"ð¹","d":"chart increasing with yen","c":6,"a":["chart"]},{"e":"âï¸","d":"envelope","c":6,"a":["envelope"],"t":["letter","email"]},{"e":"ï¿½ï¿½ï¿½","d":"e-mail","c":6,"a":["email","e-mail"]},{"e":"ð¨","d":"incoming envelope","c":6,"a":["incoming_envelope"]},{"e":"ð©","d":"envelope with arrow","c":6,"a":["envelope_with_arrow"]},{"e":"ð¤","d":"outbox tray","c":6,"a":["outbox_tray"]},{"e":"ð¥","d":"inbox tray","c":6,"a":["inbox_tray"]},{"e":"ð¦","d":"package","c":6,"a":["package"],"t":["shipping"]},{"e":"ð«","d":"closed mailbox with raised flag","c":6,"a":["mailbox"]},{"e":"ðª","d":"closed mailbox with lowered flag","c":6,"a":["mailbox_closed"]},{"e":"ð¬","d":"open mailbox with raised flag","c":6,"a":["mailbox_with_mail"]},{"e":"ð­","d":"open mailbox with lowered flag","c":6,"a":["mailbox_with_no_mail"]},{"e":"ð®","d":"postbox","c":6,"a":["postbox"]},{"e":"ð³ï¸","d":"ballot box with ballot","c":6,"a":["ballot_box"]},{"e":"âï¸","d":"pencil","c":6,"a":["pencil2"]},{"e":"âï¸","d":"black nib","c":6,"a":["black_nib"]},{"e":"ðï¸","d":"fountain pen","c":6,"a":["fountain_pen"]},{"e":"ðï¸","d":"pen","c":6,"a":["pen"]},{"e":"ðï¸","d":"paintbrush","c":6,"a":["paintbrush"]},{"e":"ðï¸","d":"crayon","c":6,"a":["crayon"]},{"e":"ð","d":"memo","c":6,"a":["memo","pencil"],"t":["document","note"]},{"e":"ð¼","d":"briefcase","c":6,"a":["briefcase"],"t":["business"]},{"e":"ð","d":"file folder","c":6,"a":["file_folder"],"t":["directory"]},{"e":"ð","d":"open file folder","c":6,"a":["open_file_folder"]},{"e":"ðï¸","d":"card index dividers","c":6,"a":["card_index_dividers"]},{"e":"ð","d":"calendar","c":6,"a":["date"],"t":["calendar","schedule"]},{"e":"ð","d":"tear-off calendar","c":6,"a":["calendar"],"t":["schedule"]},{"e":"ðï¸","d":"spiral notepad","c":6,"a":["spiral_notepad"]},{"e":"ðï¸","d":"spiral calendar","c":6,"a":["spiral_calendar"]},{"e":"ð","d":"card index","c":6,"a":["card_index"]},{"e":"ð","d":"chart increasing","c":6,"a":["chart_with_upwards_trend"],"t":["graph","metrics"]},{"e":"ð","d":"chart decreasing","c":6,"a":["chart_with_downwards_trend"],"t":["graph","metrics"]},{"e":"ð","d":"bar chart","c":6,"a":["bar_chart"],"t":["stats","metrics"]},{"e":"ð","d":"clipboard","c":6,"a":["clipboard"]},{"e":"ð","d":"pushpin","c":6,"a":["pushpin"],"t":["location"]},{"e":"ð","d":"round pushpin","c":6,"a":["round_pushpin"],"t":["location"]},{"e":"ð","d":"paperclip","c":6,"a":["paperclip"]},{"e":"ðï¸","d":"linked paperclips","c":6,"a":["paperclips"]},{"e":"ð","d":"straight ruler","c":6,"a":["straight_ruler"]},{"e":"ð","d":"triangular ruler","c":6,"a":["triangular_ruler"]},{"e":"âï¸","d":"scissors","c":6,"a":["scissors"],"t":["cut"]},{"e":"ðï¸","d":"card file box","c":6,"a":["card_file_box"]},{"e":"ðï¸","d":"file cabinet","c":6,"a":["file_cabinet"]},{"e":"ðï¸","d":"wastebasket","c":6,"a":["wastebasket"],"t":["trash"]},{"e":"ð","d":"locked","c":6,"a":["lock"],"t":["security","private"]},{"e":"ð","d":"unlocked","c":6,"a":["unlock"],"t":["security"]},{"e":"ð","d":"locked with pen","c":6,"a":["lock_with_ink_pen"]},{"e":"ð","d":"locked with key","c":6,"a":["closed_lock_with_key"],"t":["security"]},{"e":"ð","d":"key","c":6,"a":["key"],"t":["lock","password"]},{"e":"ðï¸","d":"old key","c":6,"a":["old_key"]},{"e":"ð¨","d":"hammer","c":6,"a":["hammer"],"t":["tool"]},{"e":"ðª","d":"axe","c":6,"a":["axe"]},{"e":"âï¸","d":"pick","c":6,"a":["pick"]},{"e":"âï¸","d":"hammer and pick","c":6,"a":["hammer_and_pick"]},{"e":"ð ï¸","d":"hammer and wrench","c":6,"a":["hammer_and_wrench"]},{"e":"ð¡ï¸","d":"dagger","c":6,"a":["dagger"]},{"e":"âï¸","d":"crossed swords","c":6,"a":["crossed_swords"]},{"e":"ð«","d":"pistol","c":6,"a":["gun"],"t":["shoot","weapon"]},{"e":"ðª","d":"boomerang","c":6,"a":["boomerang"]},{"e":"ð¹","d":"bow and arrow","c":6,"a":["bow_and_arrow"],"t":["archery"]},{"e":"ð¡ï¸","d":"shield","c":6,"a":["shield"]},{"e":"ðª","d":"carpentry saw","c":6,"a":["carpentry_saw"]},{"e":"ð§","d":"wrench","c":6,"a":["wrench"],"t":["tool"]},{"e":"ðª","d":"screwdriver","c":6,"a":["screwdriver"]},{"e":"ð©","d":"nut and bolt","c":6,"a":["nut_and_bolt"]},{"e":"âï¸","d":"gear","c":6,"a":["gear"]},{"e":"ðï¸","d":"clamp","c":6,"a":["clamp"]},{"e":"âï¸","d":"balance scale","c":6,"a":["balance_scale"]},{"e":"ð¦¯","d":"white cane","c":6,"a":["probing_cane"]},{"e":"ð","d":"link","c":6,"a":["link"]},{"e":"âï¸","d":"chains","c":6,"a":["chains"]},{"e":"ðª","d":"hook","c":6,"a":["hook"]},{"e":"ð§°","d":"toolbox","c":6,"a":["toolbox"]},{"e":"ð§²","d":"magnet","c":6,"a":["magnet"]},{"e":"ðª","d":"ladder","c":6,"a":["ladder"]},{"e":"âï¸","d":"alembic","c":6,"a":["alembic"]},{"e":"ð§ª","d":"test tube","c":6,"a":["test_tube"]},{"e":"ð§«","d":"petri dish","c":6,"a":["petri_dish"]},{"e":"ð§¬","d":"dna","c":6,"a":["dna"]},{"e":"ð¬","d":"microscope","c":6,"a":["microscope"],"t":["science","laboratory","investigate"]},{"e":"ð­","d":"telescope","c":6,"a":["telescope"]},{"e":"ð¡","d":"satellite antenna","c":6,"a":["satellite"],"t":["signal"]},{"e":"ð","d":"syringe","c":6,"a":["syringe"],"t":["health","hospital","needle"]},{"e":"ð©¸","d":"drop of blood","c":6,"a":["drop_of_blood"]},{"e":"ð","d":"pill","c":6,"a":["pill"],"t":["health","medicine"]},{"e":"ð©¹","d":"adhesive bandage","c":6,"a":["adhesive_bandage"]},{"e":"ð©º","d":"stethoscope","c":6,"a":["stethoscope"]},{"e":"ðª","d":"door","c":6,"a":["door"]},{"e":"ð","d":"elevator","c":6,"a":["elevator"]},{"e":"ðª","d":"mirror","c":6,"a":["mirror"]},{"e":"ðª","d":"window","c":6,"a":["window"]},{"e":"ðï¸","d":"bed","c":6,"a":["bed"]},{"e":"ðï¸","d":"couch and lamp","c":6,"a":["couch_and_lamp"]},{"e":"ðª","d":"chair","c":6,"a":["chair"]},{"e":"ð½","d":"toilet","c":6,"a":["toilet"],"t":["wc"]},{"e":"ðª ","d":"plunger","c":6,"a":["plunger"]},{"e":"ð¿","d":"shower","c":6,"a":["shower"],"t":["bath"]},{"e":"ð","d":"bathtub","c":6,"a":["bathtub"]},{"e":"ðª¤","d":"mouse trap","c":6,"a":["mouse_trap"]},{"e":"ðª","d":"razor","c":6,"a":["razor"]},{"e":"ï¿½ï¿½","d":"lotion bottle","c":6,"a":["lotion_bottle"]},{"e":"ð§·","d":"safety pin","c":6,"a":["safety_pin"]},{"e":"ð§¹","d":"broom","c":6,"a":["broom"]},{"e":"ð§º","d":"basket","c":6,"a":["basket"]},{"e":"ð§»","d":"roll of paper","c":6,"a":["roll_of_paper"],"t":["toilet"]},{"e":"ðª£","d":"bucket","c":6,"a":["bucket"]},{"e":"ð§¼","d":"soap","c":6,"a":["soap"]},{"e":"ðª¥","d":"toothbrush","c":6,"a":["toothbrush"]},{"e":"ð§½","d":"sponge","c":6,"a":["sponge"]},{"e":"ð§¯","d":"fire extinguisher","c":6,"a":["fire_extinguisher"]},{"e":"ð","d":"shopping cart","c":6,"a":["shopping_cart"]},{"e":"ð¬","d":"cigarette","c":6,"a":["smoking"],"t":["cigarette"]},{"e":"â°ï¸","d":"coffin","c":6,"a":["coffin"],"t":["funeral"]},{"e":"ðª¦","d":"headstone","c":6,"a":["headstone"]},{"e":"â±ï¸","d":"funeral urn","c":6,"a":["funeral_urn"]},{"e":"ð¿","d":"moai","c":6,"a":["moyai"],"t":["stone"]},{"e":"ðª§","d":"placard","c":6,"a":["placard"]},{"e":"ð§","d":"ATM sign","c":7,"a":["atm"]},{"e":"ð®","d":"litter in bin sign","c":7,"a":["put_litter_in_its_place"]},{"e":"ð°","d":"potable water","c":7,"a":["potable_water"]},{"e":"â¿","d":"wheelchair symbol","c":7,"a":["wheelchair"],"t":["accessibility"]},{"e":"ð¹","d":"menâs room","c":7,"a":["mens"]},{"e":"ðº","d":"womenâs room","c":7,"a":["womens"]},{"e":"ð»","d":"restroom","c":7,"a":["restroom"],"t":["toilet"]},{"e":"ð¼","d":"baby symbol","c":7,"a":["baby_symbol"]},{"e":"ð¾","d":"water closet","c":7,"a":["wc"],"t":["toilet","restroom"]},{"e":"ð","d":"passport control","c":7,"a":["passport_control"]},{"e":"ð","d":"customs","c":7,"a":["customs"]},{"e":"ð","d":"baggage claim","c":7,"a":["baggage_claim"],"t":["airport"]},{"e":"ð","d":"left luggage","c":7,"a":["left_luggage"]},{"e":"â ï¸","d":"warning","c":7,"a":["warning"],"t":["wip"]},{"e":"ð¸","d":"children crossing","c":7,"a":["children_crossing"]},{"e":"â","d":"no entry","c":7,"a":["no_entry"],"t":["limit"]},{"e":"ð«","d":"prohibited","c":7,"a":["no_entry_sign"],"t":["block","forbidden"]},{"e":"ð³","d":"no bicycles","c":7,"a":["no_bicycles"]},{"e":"ð­","d":"no smoking","c":7,"a":["no_smoking"]},{"e":"ð¯","d":"no littering","c":7,"a":["do_not_litter"]},{"e":"ð±","d":"non-potable water","c":7,"a":["non-potable_water"]},{"e":"ð·","d":"no pedestrians","c":7,"a":["no_pedestrians"]},{"e":"ðµ","d":"no mobile phones","c":7,"a":["no_mobile_phones"]},{"e":"ð","d":"no one under eighteen","c":7,"a":["underage"]},{"e":"â¢ï¸","d":"radioactive","c":7,"a":["radioactive"]},{"e":"â£ï¸","d":"biohazard","c":7,"a":["biohazard"]},{"e":"â¬ï¸","d":"up arrow","c":7,"a":["arrow_up"]},{"e":"âï¸","d":"up-right arrow","c":7,"a":["arrow_upper_right"]},{"e":"â¡ï¸","d":"right arrow","c":7,"a":["arrow_right"]},{"e":"âï¸","d":"down-right arrow","c":7,"a":["arrow_lower_right"]},{"e":"â¬ï¸","d":"down arrow","c":7,"a":["arrow_down"]},{"e":"âï¸","d":"down-left arrow","c":7,"a":["arrow_lower_left"]},{"e":"â¬ï¸","d":"left arrow","c":7,"a":["arrow_left"]},{"e":"âï¸","d":"up-left arrow","c":7,"a":["arrow_upper_left"]},{"e":"âï¸","d":"up-down arrow","c":7,"a":["arrow_up_down"]},{"e":"âï¸","d":"left-right arrow","c":7,"a":["left_right_arrow"]},{"e":"â©ï¸","d":"right arrow curving left","c":7,"a":["leftwards_arrow_with_hook"],"t":["return"]},{"e":"âªï¸","d":"left arrow curving right","c":7,"a":["arrow_right_hook"]},{"e":"â¤´ï¸","d":"right arrow curving up","c":7,"a":["arrow_heading_up"]},{"e":"â¤µï¸","d":"right arrow curving down","c":7,"a":["arrow_heading_down"]},{"e":"ð","d":"clockwise vertical arrows","c":7,"a":["arrows_clockwise"]},{"e":"ð","d":"counterclockwise arrows button","c":7,"a":["arrows_counterclockwise"],"t":["sync"]},{"e":"ð","d":"BACK arrow","c":7,"a":["back"]},{"e":"ð","d":"END arrow","c":7,"a":["end"]},{"e":"ð","d":"ON! arrow","c":7,"a":["on"]},{"e":"ð","d":"SOON arrow","c":7,"a":["soon"]},{"e":"ð","d":"TOP arrow","c":7,"a":["top"]},{"e":"ð","d":"place of worship","c":7,"a":["place_of_worship"]},{"e":"âï¸","d":"atom symbol","c":7,"a":["atom_symbol"]},{"e":"ðï¸","d":"om","c":7,"a":["om"]},{"e":"â¡ï¸","d":"star of David","c":7,"a":["star_of_david"]},{"e":"â¸ï¸","d":"wheel of dharma","c":7,"a":["wheel_of_dharma"]},{"e":"â¯ï¸","d":"yin yang","c":7,"a":["yin_yang"]},{"e":"âï¸","d":"latin cross","c":7,"a":["latin_cross"]},{"e":"â¦ï¸","d":"orthodox cross","c":7,"a":["orthodox_cross"]},{"e":"âªï¸","d":"star and crescent","c":7,"a":["star_and_crescent"]},{"e":"â®ï¸","d":"peace symbol","c":7,"a":["peace_symbol"]},{"e":"ð","d":"menorah","c":7,"a":["menorah"]},{"e":"ð¯","d":"dotted six-pointed star","c":7,"a":["six_pointed_star"]},{"e":"â","d":"Aries","c":7,"a":["aries"]},{"e":"â","d":"Taurus","c":7,"a":["taurus"]},{"e":"â","d":"Gemini","c":7,"a":["gemini"]},{"e":"â","d":"Cancer","c":7,"a":["cancer"]},{"e":"â","d":"Leo","c":7,"a":["leo"]},{"e":"â","d":"Virgo","c":7,"a":["virgo"]},{"e":"â","d":"Libra","c":7,"a":["libra"]},{"e":"â","d":"Scorpio","c":7,"a":["scorpius"]},{"e":"â","d":"Sagittarius","c":7,"a":["sagittarius"]},{"e":"â","d":"Capricorn","c":7,"a":["capricorn"]},{"e":"â","d":"Aquarius","c":7,"a":["aquarius"]},{"e":"â","d":"Pisces","c":7,"a":["pisces"]},{"e":"â","d":"Ophiuchus","c":7,"a":["ophiuchus"]},{"e":"ð","d":"shuffle tracks button","c":7,"a":["twisted_rightwards_arrows"],"t":["shuffle"]},{"e":"ð","d":"repeat button","c":7,"a":["repeat"],"t":["loop"]},{"e":"ð","d":"repeat single button","c":7,"a":["repeat_one"]},{"e":"â¶ï¸","d":"play button","c":7,"a":["arrow_forward"]},{"e":"â©","d":"fast-forward button","c":7,"a":["fast_forward"]},{"e":"â­ï¸","d":"next track button","c":7,"a":["next_track_button"]},{"e":"â¯ï¸","d":"play or pause button","c":7,"a":["play_or_pause_button"]},{"e":"âï¸","d":"reverse button","c":7,"a":["arrow_backward"]},{"e":"âª","d":"fast reverse button","c":7,"a":["rewind"]},{"e":"â®ï¸","d":"last track button","c":7,"a":["previous_track_button"]},{"e":"ð¼","d":"upwards button","c":7,"a":["arrow_up_small"]},{"e":"â«","d":"fast up button","c":7,"a":["arrow_double_up"]},{"e":"ð½","d":"downwards button","c":7,"a":["arrow_down_small"]},{"e":"â¬","d":"fast down button","c":7,"a":["arrow_double_down"]},{"e":"â¸ï¸","d":"pause button","c":7,"a":["pause_button"]},{"e":"â¹ï¸","d":"stop button","c":7,"a":["stop_button"]},{"e":"âºï¸","d":"record button","c":7,"a":["record_button"]},{"e":"âï¸","d":"eject button","c":7,"a":["eject_button"]},{"e":"ð¦","d":"cinema","c":7,"a":["cinema"],"t":["film","movie"]},{"e":"ð","d":"dim button","c":7,"a":["low_brightness"]},{"e":"ð","d":"bright button","c":7,"a":["high_brightness"]},{"e":"ð¶","d":"antenna bars","c":7,"a":["signal_strength"],"t":["wifi"]},{"e":"ð³","d":"vibration mode","c":7,"a":["vibration_mode"]},{"e":"ð´","d":"mobile phone off","c":7,"a":["mobile_phone_off"],"t":["mute","off"]},{"e":"âï¸","d":"female sign","c":7,"a":["female_sign"]},{"e":"âï¸","d":"male sign","c":7,"a":["male_sign"]},{"e":"â§ï¸","d":"transgender symbol","c":7,"a":["transgender_symbol"]},{"e":"âï¸","d":"multiply","c":7,"a":["heavy_multiplication_x"]},{"e":"â","d":"plus","c":7,"a":["heavy_plus_sign"]},{"e":"â","d":"minus","c":7,"a":["heavy_minus_sign"]},{"e":"â","d":"divide","c":7,"a":["heavy_division_sign"]},{"e":"â¾ï¸","d":"infinity","c":7,"a":["infinity"]},{"e":"â¼ï¸","d":"double exclamation mark","c":7,"a":["bangbang"]},{"e":"âï¸","d":"exclamation question mark","c":7,"a":["interrobang"]},{"e":"â","d":"question mark","c":7,"a":["question"],"t":["confused"]},{"e":"â","d":"white question mark","c":7,"a":["grey_question"]},{"e":"â","d":"white exclamation mark","c":7,"a":["grey_exclamation"]},{"e":"â","d":"exclamation mark","c":7,"a":["exclamation","heavy_exclamation_mark"],"t":["bang"]},{"e":"ã°ï¸","d":"wavy dash","c":7,"a":["wavy_dash"]},{"e":"ð±","d":"currency exchange","c":7,"a":["currency_exchange"]},{"e":"ð²","d":"heavy dollar sign","c":7,"a":["heavy_dollar_sign"]},{"e":"âï¸","d":"medical symbol","c":7,"a":["medical_symbol"]},{"e":"â»ï¸","d":"recycling symbol","c":7,"a":["recycle"],"t":["environment","green"]},{"e":"âï¸","d":"fleur-de-lis","c":7,"a":["fleur_de_lis"]},{"e":"ð±","d":"trident emblem","c":7,"a":["trident"]},{"e":"ð","d":"name badge","c":7,"a":["name_badge"]},{"e":"ð°","d":"Japanese symbol for beginner","c":7,"a":["beginner"]},{"e":"â­","d":"hollow red circle","c":7,"a":["o"]},{"e":"â","d":"check mark button","c":7,"a":["white_check_mark"]},{"e":"âï¸","d":"check box with check","c":7,"a":["ballot_box_with_check"]},{"e":"âï¸","d":"check mark","c":7,"a":["heavy_check_mark"]},{"e":"â","d":"cross mark","c":7,"a":["x"]},{"e":"â","d":"cross mark button","c":7,"a":["negative_squared_cross_mark"]},{"e":"â°","d":"curly loop","c":7,"a":["curly_loop"]},{"e":"â¿","d":"double curly loop","c":7,"a":["loop"]},{"e":"ã½ï¸","d":"part alternation mark","c":7,"a":["part_alternation_mark"]},{"e":"â³ï¸","d":"eight-spoked asterisk","c":7,"a":["eight_spoked_asterisk"]},{"e":"â´ï¸","d":"eight-pointed star","c":7,"a":["eight_pointed_black_star"]},{"e":"âï¸","d":"sparkle","c":7,"a":["sparkle"]},{"e":"Â©ï¸","d":"copyright","c":7,"a":["copyright"]},{"e":"Â®ï¸","d":"registered","c":7,"a":["registered"]},{"e":"â¢ï¸","d":"trade mark","c":7,"a":["tm"],"t":["trademark"]},{"e":"#ï¸â£","d":"keycap: #","c":7,"a":["hash"],"t":["number"]},{"e":"*ï¸â£","d":"keycap: *","c":7,"a":["asterisk"]},{"e":"0ï¸â£","d":"keycap: 0","c":7,"a":["zero"]},{"e":"1ï¸â£","d":"keycap: 1","c":7,"a":["one"]},{"e":"2ï¸â£","d":"keycap: 2","c":7,"a":["two"]},{"e":"3ï¸â£","d":"keycap: 3","c":7,"a":["three"]},{"e":"4ï¸â£","d":"keycap: 4","c":7,"a":["four"]},{"e":"5ï¸â£","d":"keycap: 5","c":7,"a":["five"]},{"e":"6ï¸â£","d":"keycap: 6","c":7,"a":["six"]},{"e":"7ï¸â£","d":"keycap: 7","c":7,"a":["seven"]},{"e":"8ï¸â£","d":"keycap: 8","c":7,"a":["eight"]},{"e":"9ï¸â£","d":"keycap: 9","c":7,"a":["nine"]},{"e":"ð","d":"keycap: 10","c":7,"a":["keycap_ten"]},{"e":"ð ","d":"input latin uppercase","c":7,"a":["capital_abcd"],"t":["letters"]},{"e":"ð¡","d":"input latin lowercase","c":7,"a":["abcd"]},{"e":"ð¢","d":"input numbers","c":7,"a":["1234"],"t":["numbers"]},{"e":"ð£","d":"input symbols","c":7,"a":["symbols"]},{"e":"ð¤","d":"input latin letters","c":7,"a":["abc"],"t":["alphabet"]},{"e":"ð°ï¸","d":"A button (blood type)","c":7,"a":["a"]},{"e":"ð","d":"AB button (blood type)","c":7,"a":["ab"]},{"e":"ð±ï¸","d":"B button (blood type)","c":7,"a":["b"]},{"e":"ð","d":"CL button","c":7,"a":["cl"]},{"e":"ð","d":"COOL button","c":7,"a":["cool"]},{"e":"ð","d":"FREE button","c":7,"a":["free"]},{"e":"â¹ï¸","d":"information","c":7,"a":["information_source"]},{"e":"ð","d":"ID button","c":7,"a":["id"]},{"e":"âï¸","d":"circled M","c":7,"a":["m"]},{"e":"ð","d":"NEW button","c":7,"a":["new"],"t":["fresh"]},{"e":"ð","d":"NG button","c":7,"a":["ng"]},{"e":"ð¾ï¸","d":"O button (blood type)","c":7,"a":["o2"]},{"e":"ð","d":"OK button","c":7,"a":["ok"],"t":["yes"]},{"e":"ð¿ï¸","d":"P button","c":7,"a":["parking"]},{"e":"ð","d":"SOS button","c":7,"a":["sos"],"t":["help","emergency"]},{"e":"ð","d":"UP! button","c":7,"a":["up"]},{"e":"ð","d":"VS button","c":7,"a":["vs"]},{"e":"ð","d":"Japanese âhereâ button","c":7,"a":["koko"]},{"e":"ðï¸","d":"Japanese âservice chargeâ button","c":7,"a":["sa"]},{"e":"ð·ï¸","d":"Japanese âmonthly amountâ button","c":7,"a":["u6708"]},{"e":"ð¶","d":"Japanese ânot free of chargeâ button","c":7,"a":["u6709"]},{"e":"ð¯","d":"Japanese âreservedâ button","c":7,"a":["u6307"]},{"e":"ð","d":"Japanese âbargainâ button","c":7,"a":["ideograph_advantage"]},{"e":"ð¹","d":"Japanese âdiscountâ button","c":7,"a":["u5272"]},{"e":"ð","d":"Japanese âfree of chargeâ button","c":7,"a":["u7121"]},{"e":"ð²","d":"Japanese âprohibitedâ button","c":7,"a":["u7981"]},{"e":"ð","d":"Japanese âacceptableâ button","c":7,"a":["accept"]},{"e":"ð¸","d":"Japanese âapplicationâ button","c":7,"a":["u7533"]},{"e":"ð´","d":"Japanese âpassing gradeâ button","c":7,"a":["u5408"]},{"e":"ð³","d":"Japanese âvacancyâ button","c":7,"a":["u7a7a"]},{"e":"ãï¸","d":"Japanese âcongratulationsâ button","c":7,"a":["congratulations"]},{"e":"ãï¸","d":"Japanese âsecretâ button","c":7,"a":["secret"]},{"e":"ðº","d":"Japanese âopen for businessâ button","c":7,"a":["u55b6"]},{"e":"ðµ","d":"Japanese âno vacancyâ button","c":7,"a":["u6e80"]},{"e":"ð´","d":"red circle","c":7,"a":["red_circle"]},{"e":"ð ","d":"orange circle","c":7,"a":["orange_circle"]},{"e":"ð¡","d":"yellow circle","c":7,"a":["yellow_circle"]},{"e":"ð¢","d":"green circle","c":7,"a":["green_circle"]},{"e":"ðµ","d":"blue circle","c":7,"a":["large_blue_circle"]},{"e":"ð£","d":"purple circle","c":7,"a":["purple_circle"]},{"e":"ð¤","d":"brown circle","c":7,"a":["brown_circle"]},{"e":"â«","d":"black circle","c":7,"a":["black_circle"]},{"e":"âª","d":"white circle","c":7,"a":["white_circle"]},{"e":"ð¥","d":"red square","c":7,"a":["red_square"]},{"e":"ð§","d":"orange square","c":7,"a":["orange_square"]},{"e":"ð¨","d":"yellow square","c":7,"a":["yellow_square"]},{"e":"ð©","d":"green square","c":7,"a":["green_square"]},{"e":"ð¦","d":"blue square","c":7,"a":["blue_square"]},{"e":"ðª","d":"purple square","c":7,"a":["purple_square"]},{"e":"ð«","d":"brown square","c":7,"a":["brown_square"]},{"e":"â¬","d":"black large square","c":7,"a":["black_large_square"]},{"e":"â¬","d":"white large square","c":7,"a":["white_large_square"]},{"e":"â¼ï¸","d":"black medium square","c":7,"a":["black_medium_square"]},{"e":"â»ï¸","d":"white medium square","c":7,"a":["white_medium_square"]},{"e":"â¾","d":"black medium-small square","c":7,"a":["black_medium_small_square"]},{"e":"â½","d":"white medium-small square","c":7,"a":["white_medium_small_square"]},{"e":"âªï¸","d":"black small square","c":7,"a":["black_small_square"]},{"e":"â«ï¸","d":"white small square","c":7,"a":["white_small_square"]},{"e":"ð¶","d":"large orange diamond","c":7,"a":["large_orange_diamond"]},{"e":"ð·","d":"large blue diamond","c":7,"a":["large_blue_diamond"]},{"e":"ð¸","d":"small orange diamond","c":7,"a":["small_orange_diamond"]},{"e":"ð¹","d":"small blue diamond","c":7,"a":["small_blue_diamond"]},{"e":"ðº","d":"red triangle pointed up","c":7,"a":["small_red_triangle"]},{"e":"ð»","d":"red triangle pointed down","c":7,"a":["small_red_triangle_down"]},{"e":"ð ","d":"diamond with a dot","c":7,"a":["diamond_shape_with_a_dot_inside"]},{"e":"ð","d":"radio button","c":7,"a":["radio_button"]},{"e":"ð³","d":"white square button","c":7,"a":["white_square_button"]},{"e":"ð²","d":"black square button","c":7,"a":["black_square_button"]},{"e":"ð","d":"chequered flag","c":8,"a":["checkered_flag"],"t":["milestone","finish"]},{"e":"ð©","d":"triangular flag","c":8,"a":["triangular_flag_on_post"]},{"e":"ð","d":"crossed flags","c":8,"a":["crossed_flags"]},{"e":"ð´","d":"black flag","c":8,"a":["black_flag"]},{"e":"ð³ï¸","d":"white flag","c":8,"a":["white_flag"]},{"e":"ð³ï¸âð","d":"rainbow flag","c":8,"a":["rainbow_flag"],"t":["pride"]},{"e":"ð³ï¸ââ§ï¸","d":"transgender flag","c":8,"a":["transgender_flag"]},{"e":"ð´ââ ï¸","d":"pirate flag","c":8,"a":["pirate_flag"]},{"e":"ð¦ð¨","d":"flag: Ascension Island","c":8,"a":["ascension_island"]},{"e":"ð¦ð©","d":"flag: Andorra","c":8,"a":["andorra"]},{"e":"ð¦ðª","d":"flag: United Arab Emirates","c":8,"a":["united_arab_emirates"]},{"e":"ð¦ð«","d":"flag: Afghanistan","c":8,"a":["afghanistan"]},{"e":"ð¦ð¬","d":"flag: Antigua & Barbuda","c":8,"a":["antigua_barbuda"]},{"e":"ð¦ð®","d":"flag: Anguilla","c":8,"a":["anguilla"]},{"e":"ð¦ð±","d":"flag: Albania","c":8,"a":["albania"]},{"e":"ð¦ð²","d":"flag: Armenia","c":8,"a":["armenia"]},{"e":"ð¦ð´","d":"flag: Angola","c":8,"a":["angola"]},{"e":"ð¦ð¶","d":"flag: Antarctica","c":8,"a":["antarctica"]},{"e":"ð¦ð·","d":"flag: Argentina","c":8,"a":["argentina"]},{"e":"ð¦ð¸","d":"flag: American Samoa","c":8,"a":["american_samoa"]},{"e":"ð¦ð¹","d":"flag: Austria","c":8,"a":["austria"]},{"e":"ð¦ðº","d":"flag: Australia","c":8,"a":["australia"]},{"e":"ð¦ð¼","d":"flag: Aruba","c":8,"a":["aruba"]},{"e":"ð¦ð½","d":"flag: Ãland Islands","c":8,"a":["aland_islands"]},{"e":"ð¦ð¿","d":"flag: Azerbaijan","c":8,"a":["azerbaijan"]},{"e":"ð§ð¦","d":"flag: Bosnia & Herzegovina","c":8,"a":["bosnia_herzegovina"]},{"e":"ð§ð§","d":"flag: Barbados","c":8,"a":["barbados"]},{"e":"ð§ð©","d":"flag: Bangladesh","c":8,"a":["bangladesh"]},{"e":"ð§ðª","d":"flag: Belgium","c":8,"a":["belgium"]},{"e":"ð§ð«","d":"flag: Burkina Faso","c":8,"a":["burkina_faso"]},{"e":"ð§ð¬","d":"flag: Bulgaria","c":8,"a":["bulgaria"]},{"e":"ð§ð­","d":"flag: Bahrain","c":8,"a":["bahrain"]},{"e":"ð§ð®","d":"flag: Burundi","c":8,"a":["burundi"]},{"e":"ð§ð¯","d":"flag: Benin","c":8,"a":["benin"]},{"e":"ð§ð±","d":"flag: St. BarthÃ©lemy","c":8,"a":["st_barthelemy"]},{"e":"ð§ð²","d":"flag: Bermuda","c":8,"a":["bermuda"]},{"e":"ð§ð³","d":"flag: Brunei","c":8,"a":["brunei"]},{"e":"ð§ð´","d":"flag: Bolivia","c":8,"a":["bolivia"]},{"e":"ð§ð¶","d":"flag: Caribbean Netherlands","c":8,"a":["caribbean_netherlands"]},{"e":"ð§ð·","d":"flag: Brazil","c":8,"a":["brazil"]},{"e":"ð§ð¸","d":"flag: Bahamas","c":8,"a":["bahamas"]},{"e":"ð§ð¹","d":"flag: Bhutan","c":8,"a":["bhutan"]},{"e":"ð§ð»","d":"flag: Bouvet Island","c":8,"a":["bouvet_island"]},{"e":"ð§ð¼","d":"flag: Botswana","c":8,"a":["botswana"]},{"e":"ð§ð¾","d":"flag: Belarus","c":8,"a":["belarus"]},{"e":"ð§ð¿","d":"flag: Belize","c":8,"a":["belize"]},{"e":"ð¨ð¦","d":"flag: Canada","c":8,"a":["canada"]},{"e":"ð¨ð¨","d":"flag: Cocos (Keeling) Islands","c":8,"a":["cocos_islands"],"t":["keeling"]},{"e":"ð¨ð©","d":"flag: Congo - Kinshasa","c":8,"a":["congo_kinshasa"]},{"e":"ð¨ð«","d":"flag: Central African Republic","c":8,"a":["central_african_republic"]},{"e":"ð¨ð¬","d":"flag: Congo - Brazzaville","c":8,"a":["congo_brazzaville"]},{"e":"ð¨ð­","d":"flag: Switzerland","c":8,"a":["switzerland"]},{"e":"ð¨ð®","d":"flag: CÃ´te dâIvoire","c":8,"a":["cote_divoire"],"t":["ivory"]},{"e":"ð¨ð°","d":"flag: Cook Islands","c":8,"a":["cook_islands"]},{"e":"ð¨ð±","d":"flag: Chile","c":8,"a":["chile"]},{"e":"ð¨ð²","d":"flag: Cameroon","c":8,"a":["cameroon"]},{"e":"ð¨ð³","d":"flag: China","c":8,"a":["cn"],"t":["china"]},{"e":"ð¨ð´","d":"flag: Colombia","c":8,"a":["colombia"]},{"e":"ð¨ðµ","d":"flag: Clipperton Island","c":8,"a":["clipperton_island"]},{"e":"ð¨ð·","d":"flag: Costa Rica","c":8,"a":["costa_rica"]},{"e":"ð¨ðº","d":"flag: Cuba","c":8,"a":["cuba"]},{"e":"ð¨ð»","d":"flag: Cape Verde","c":8,"a":["cape_verde"]},{"e":"ð¨ð¼","d":"flag: CuraÃ§ao","c":8,"a":["curacao"]},{"e":"ð¨ð½","d":"flag: Christmas Island","c":8,"a":["christmas_island"]},{"e":"ð¨ð¾","d":"flag: Cyprus","c":8,"a":["cyprus"]},{"e":"ð¨ð¿","d":"flag: Czechia","c":8,"a":["czech_republic"]},{"e":"ð©ðª","d":"flag: Germany","c":8,"a":["de"],"t":["flag","germany"]},{"e":"ð©ð¬","d":"flag: Diego Garcia","c":8,"a":["diego_garcia"]},{"e":"ð©ð¯","d":"flag: Djibouti","c":8,"a":["djibouti"]},{"e":"ð©ð°","d":"flag: Denmark","c":8,"a":["denmark"]},{"e":"ð©ð²","d":"flag: Dominica","c":8,"a":["dominica"]},{"e":"ð©ð´","d":"flag: Dominican Republic","c":8,"a":["dominican_republic"]},{"e":"ð©ð¿","d":"flag: Algeria","c":8,"a":["algeria"]},{"e":"ðªð¦","d":"flag: Ceuta & Melilla","c":8,"a":["ceuta_melilla"]},{"e":"ðªð¨","d":"flag: Ecuador","c":8,"a":["ecuador"]},{"e":"ðªðª","d":"flag: Estonia","c":8,"a":["estonia"]},{"e":"ðªð¬","d":"flag: Egypt","c":8,"a":["egypt"]},{"e":"ðªð­","d":"flag: Western Sahara","c":8,"a":["western_sahara"]},{"e":"ðªð·","d":"flag: Eritrea","c":8,"a":["eritrea"]},{"e":"ðªð¸","d":"flag: Spain","c":8,"a":["es"],"t":["spain"]},{"e":"ðªð¹","d":"flag: Ethiopia","c":8,"a":["ethiopia"]},{"e":"ðªðº","d":"flag: European Union","c":8,"a":["eu","european_union"]},{"e":"ð«ð®","d":"flag: Finland","c":8,"a":["finland"]},{"e":"ð«ð¯","d":"flag: Fiji","c":8,"a":["fiji"]},{"e":"ð«ð°","d":"flag: Falkland Islands","c":8,"a":["falkland_islands"]},{"e":"ð«ð²","d":"flag: Micronesia","c":8,"a":["micronesia"]},{"e":"ð«ð´","d":"flag: Faroe Islands","c":8,"a":["faroe_islands"]},{"e":"ð«ð·","d":"flag: France","c":8,"a":["fr"],"t":["france","french"]},{"e":"ð¬ð¦","d":"flag: Gabon","c":8,"a":["gabon"]},{"e":"ð¬ð§","d":"flag: United Kingdom","c":8,"a":["gb","uk"],"t":["flag","british"]},{"e":"ð¬ð©","d":"flag: Grenada","c":8,"a":["grenada"]},{"e":"ð¬ðª","d":"flag: Georgia","c":8,"a":["georgia"]},{"e":"ð¬ð«","d":"flag: French Guiana","c":8,"a":["french_guiana"]},{"e":"ð¬ð¬","d":"flag: Guernsey","c":8,"a":["guernsey"]},{"e":"ð¬ð­","d":"flag: Ghana","c":8,"a":["ghana"]},{"e":"ð¬ð®","d":"flag: Gibraltar","c":8,"a":["gibraltar"]},{"e":"ð¬ð±","d":"flag: Greenland","c":8,"a":["greenland"]},{"e":"ð¬ð²","d":"flag: Gambia","c":8,"a":["gambia"]},{"e":"ð¬ð³","d":"flag: Guinea","c":8,"a":["guinea"]},{"e":"ð¬ðµ","d":"flag: Guadeloupe","c":8,"a":["guadeloupe"]},{"e":"ð¬ð¶","d":"flag: Equatorial Guinea","c":8,"a":["equatorial_guinea"]},{"e":"ð¬ð·","d":"flag: Greece","c":8,"a":["greece"]},{"e":"ð¬ð¸","d":"flag: South Georgia & South Sandwich Islands","c":8,"a":["south_georgia_south_sandwich_islands"]},{"e":"ð¬ð¹","d":"flag: Guatemala","c":8,"a":["guatemala"]},{"e":"ð¬ðº","d":"flag: Guam","c":8,"a":["guam"]},{"e":"ð¬ð¼","d":"flag: Guinea-Bissau","c":8,"a":["guinea_bissau"]},{"e":"ð¬ð¾","d":"flag: Guyana","c":8,"a":["guyana"]},{"e":"ð­ð°","d":"flag: Hong Kong SAR China","c":8,"a":["hong_kong"]},{"e":"ð­ð²","d":"flag: Heard & McDonald Islands","c":8,"a":["heard_mcdonald_islands"]},{"e":"ð­ð³","d":"flag: Honduras","c":8,"a":["honduras"]},{"e":"ð­ð·","d":"flag: Croatia","c":8,"a":["croatia"]},{"e":"ð­ð¹","d":"flag: Haiti","c":8,"a":["haiti"]},{"e":"ð­ðº","d":"flag: Hungary","c":8,"a":["hungary"]},{"e":"ð®ð¨","d":"flag: Canary Islands","c":8,"a":["canary_islands"]},{"e":"ð®ð©","d":"flag: Indonesia","c":8,"a":["indonesia"]},{"e":"ð®ðª","d":"flag: Ireland","c":8,"a":["ireland"]},{"e":"ð®ð±","d":"flag: Israel","c":8,"a":["israel"]},{"e":"ð®ð²","d":"flag: Isle of Man","c":8,"a":["isle_of_man"]},{"e":"ð®ð³","d":"flag: India","c":8,"a":["india"]},{"e":"ð®ð´","d":"flag: British Indian Ocean Territory","c":8,"a":["british_indian_ocean_territory"]},{"e":"ð®ð¶","d":"flag: Iraq","c":8,"a":["iraq"]},{"e":"ð®ð·","d":"flag: Iran","c":8,"a":["iran"]},{"e":"ð®ð¸","d":"flag: Iceland","c":8,"a":["iceland"]},{"e":"ð®ð¹","d":"flag: Italy","c":8,"a":["it"],"t":["italy"]},{"e":"ð¯ðª","d":"flag: Jersey","c":8,"a":["jersey"]},{"e":"ð¯ð²","d":"flag: Jamaica","c":8,"a":["jamaica"]},{"e":"ð¯ð´","d":"flag: Jordan","c":8,"a":["jordan"]},{"e":"ð¯ðµ","d":"flag: Japan","c":8,"a":["jp"],"t":["japan"]},{"e":"ð°ðª","d":"flag: Kenya","c":8,"a":["kenya"]},{"e":"ð°ð¬","d":"flag: Kyrgyzstan","c":8,"a":["kyrgyzstan"]},{"e":"ð°ð­","d":"flag: Cambodia","c":8,"a":["cambodia"]},{"e":"ð°ð®","d":"flag: Kiribati","c":8,"a":["kiribati"]},{"e":"ð°ð²","d":"flag: Comoros","c":8,"a":["comoros"]},{"e":"ð°ð³","d":"flag: St. Kitts & Nevis","c":8,"a":["st_kitts_nevis"]},{"e":"ð°ðµ","d":"flag: North Korea","c":8,"a":["north_korea"]},{"e":"ð°ð·","d":"flag: South Korea","c":8,"a":["kr"],"t":["korea"]},{"e":"ð°ð¼","d":"flag: Kuwait","c":8,"a":["kuwait"]},{"e":"ð°ð¾","d":"flag: Cayman Islands","c":8,"a":["cayman_islands"]},{"e":"ð°ð¿","d":"flag: Kazakhstan","c":8,"a":["kazakhstan"]},{"e":"ð±ð¦","d":"flag: Laos","c":8,"a":["laos"]},{"e":"ð±ð§","d":"flag: Lebanon","c":8,"a":["lebanon"]},{"e":"ð±ð¨","d":"flag: St. Lucia","c":8,"a":["st_lucia"]},{"e":"ð±ð®","d":"flag: Liechtenstein","c":8,"a":["liechtenstein"]},{"e":"ð±ð°","d":"flag: Sri Lanka","c":8,"a":["sri_lanka"]},{"e":"ð±ð·","d":"flag: Liberia","c":8,"a":["liberia"]},{"e":"ð±ð¸","d":"flag: Lesotho","c":8,"a":["lesotho"]},{"e":"ð±ð¹","d":"flag: Lithuania","c":8,"a":["lithuania"]},{"e":"ð±ðº","d":"flag: Luxembourg","c":8,"a":["luxembourg"]},{"e":"ð±ð»","d":"flag: Latvia","c":8,"a":["latvia"]},{"e":"ð±ð¾","d":"flag: Libya","c":8,"a":["libya"]},{"e":"ð²ð¦","d":"flag: Morocco","c":8,"a":["morocco"]},{"e":"ð²ð¨","d":"flag: Monaco","c":8,"a":["monaco"]},{"e":"ð²ð©","d":"flag: Moldova","c":8,"a":["moldova"]},{"e":"ð²ðª","d":"flag: Montenegro","c":8,"a":["montenegro"]},{"e":"ð²ð«","d":"flag: St. Martin","c":8,"a":["st_martin"]},{"e":"ð²ð¬","d":"flag: Madagascar","c":8,"a":["madagascar"]},{"e":"ð²ð­","d":"flag: Marshall Islands","c":8,"a":["marshall_islands"]},{"e":"ð²ð°","d":"flag: North Macedonia","c":8,"a":["macedonia"]},{"e":"ð²ð±","d":"flag: Mali","c":8,"a":["mali"]},{"e":"ð²ð²","d":"flag: Myanmar (Burma)","c":8,"a":["myanmar"],"t":["burma"]},{"e":"ð²ð³","d":"flag: Mongolia","c":8,"a":["mongolia"]},{"e":"ï¿½ï¿½ð´","d":"flag: Macao SAR China","c":8,"a":["macau"]},{"e":"ð²ðµ","d":"flag: Northern Mariana Islands","c":8,"a":["northern_mariana_islands"]},{"e":"ð²ð¶","d":"flag: Martinique","c":8,"a":["martinique"]},{"e":"ð²ð·","d":"flag: Mauritania","c":8,"a":["mauritania"]},{"e":"ð²ð¸","d":"flag: Montserrat","c":8,"a":["montserrat"]},{"e":"ð²ð¹","d":"flag: Malta","c":8,"a":["malta"]},{"e":"ð²ðº","d":"flag: Mauritius","c":8,"a":["mauritius"]},{"e":"ð²ð»","d":"flag: Maldives","c":8,"a":["maldives"]},{"e":"ð²ð¼","d":"flag: Malawi","c":8,"a":["malawi"]},{"e":"ð²ð½","d":"flag: Mexico","c":8,"a":["mexico"]},{"e":"ð²ð¾","d":"flag: Malaysia","c":8,"a":["malaysia"]},{"e":"ð²ð¿","d":"flag: Mozambique","c":8,"a":["mozambique"]},{"e":"ð³ð¦","d":"flag: Namibia","c":8,"a":["namibia"]},{"e":"ð³ð¨","d":"flag: New Caledonia","c":8,"a":["new_caledonia"]},{"e":"ð³ðª","d":"flag: Niger","c":8,"a":["niger"]},{"e":"ð³ð«","d":"flag: Norfolk Island","c":8,"a":["norfolk_island"]},{"e":"ð³ð¬","d":"flag: Nigeria","c":8,"a":["nigeria"]},{"e":"ð³ð®","d":"flag: Nicaragua","c":8,"a":["nicaragua"]},{"e":"ð³ð±","d":"flag: Netherlands","c":8,"a":["netherlands"]},{"e":"ð³ð´","d":"flag: Norway","c":8,"a":["norway"]},{"e":"ð³ðµ","d":"flag: Nepal","c":8,"a":["nepal"]},{"e":"ð³ð·","d":"flag: Nauru","c":8,"a":["nauru"]},{"e":"ð³ðº","d":"flag: Niue","c":8,"a":["niue"]},{"e":"ð³ð¿","d":"flag: New Zealand","c":8,"a":["new_zealand"]},{"e":"ð´ð²","d":"flag: Oman","c":8,"a":["oman"]},{"e":"ðµð¦","d":"flag: Panama","c":8,"a":["panama"]},{"e":"ðµðª","d":"flag: Peru","c":8,"a":["peru"]},{"e":"ðµð«","d":"flag: French Polynesia","c":8,"a":["french_polynesia"]},{"e":"ðµð¬","d":"flag: Papua New Guinea","c":8,"a":["papua_new_guinea"]},{"e":"ðµð­","d":"flag: Philippines","c":8,"a":["philippines"]},{"e":"ðµð°","d":"flag: Pakistan","c":8,"a":["pakistan"]},{"e":"ðµð±","d":"flag: Poland","c":8,"a":["poland"]},{"e":"ðµð²","d":"flag: St. Pierre & Miquelon","c":8,"a":["st_pierre_miquelon"]},{"e":"ðµð³","d":"flag: Pitcairn Islands","c":8,"a":["pitcairn_islands"]},{"e":"ðµð·","d":"flag: Puerto Rico","c":8,"a":["puerto_rico"]},{"e":"ðµð¸","d":"flag: Palestinian Territories","c":8,"a":["palestinian_territories"]},{"e":"ðµð¹","d":"flag: Portugal","c":8,"a":["portugal"]},{"e":"ðµð¼","d":"flag: Palau","c":8,"a":["palau"]},{"e":"ðµð¾","d":"flag: Paraguay","c":8,"a":["paraguay"]},{"e":"ð¶ð¦","d":"flag: Qatar","c":8,"a":["qatar"]},{"e":"ð·ðª","d":"flag: RÃ©union","c":8,"a":["reunion"]},{"e":"ð·ð´","d":"flag: Romania","c":8,"a":["romania"]},{"e":"ð·ð¸","d":"flag: Serbia","c":8,"a":["serbia"]},{"e":"ð·ðº","d":"flag: Russia","c":8,"a":["ru"],"t":["russia"]},{"e":"ð·ð¼","d":"flag: Rwanda","c":8,"a":["rwanda"]},{"e":"ð¸ð¦","d":"flag: Saudi Arabia","c":8,"a":["saudi_arabia"]},{"e":"ï¿½ï¿½ï¿½ï¿½ð§","d":"flag: Solomon Islands","c":8,"a":["solomon_islands"]},{"e":"ð¸ð¨","d":"flag: Seychelles","c":8,"a":["seychelles"]},{"e":"ð¸ð©","d":"flag: Sudan","c":8,"a":["sudan"]},{"e":"ð¸ðª","d":"flag: Sweden","c":8,"a":["sweden"]},{"e":"ð¸ð¬","d":"flag: Singapore","c":8,"a":["singapore"]},{"e":"ð¸ð­","d":"flag: St. Helena","c":8,"a":["st_helena"]},{"e":"ð¸ð®","d":"flag: Slovenia","c":8,"a":["slovenia"]},{"e":"ð¸ð¯","d":"flag: Svalbard & Jan Mayen","c":8,"a":["svalbard_jan_mayen"]},{"e":"ð¸ð°","d":"flag: Slovakia","c":8,"a":["slovakia"]},{"e":"ð¸ð±","d":"flag: Sierra Leone","c":8,"a":["sierra_leone"]},{"e":"ð¸ð²","d":"flag: San Marino","c":8,"a":["san_marino"]},{"e":"ð¸ð³","d":"flag: Senegal","c":8,"a":["senegal"]},{"e":"ð¸ð´","d":"flag: Somalia","c":8,"a":["somalia"]},{"e":"ð¸ð·","d":"flag: Suriname","c":8,"a":["suriname"]},{"e":"ð¸ð¸","d":"flag: South Sudan","c":8,"a":["south_sudan"]},{"e":"ð¸ð¹","d":"flag: SÃ£o TomÃ© & PrÃ­ncipe","c":8,"a":["sao_tome_principe"]},{"e":"ð¸ð»","d":"flag: El Salvador","c":8,"a":["el_salvador"]},{"e":"ð¸ð½","d":"flag: Sint Maarten","c":8,"a":["sint_maarten"]},{"e":"ð¸ð¾","d":"flag: Syria","c":8,"a":["syria"]},{"e":"ð¸ð¿","d":"flag: Eswatini","c":8,"a":["swaziland"]},{"e":"ð¹ð¦","d":"flag: Tristan da Cunha","c":8,"a":["tristan_da_cunha"]},{"e":"ð¹ð¨","d":"flag: Turks & Caicos Islands","c":8,"a":["turks_caicos_islands"]},{"e":"ð¹ð©","d":"flag: Chad","c":8,"a":["chad"]},{"e":"ð¹ð«","d":"flag: French Southern Territories","c":8,"a":["french_southern_territories"]},{"e":"ð¹ð¬","d":"flag: Togo","c":8,"a":["togo"]},{"e":"ð¹ð­","d":"flag: Thailand","c":8,"a":["thailand"]},{"e":"ð¹ð¯","d":"flag: Tajikistan","c":8,"a":["tajikistan"]},{"e":"ð¹ð°","d":"flag: Tokelau","c":8,"a":["tokelau"]},{"e":"ð¹ð±","d":"flag: Timor-Leste","c":8,"a":["timor_leste"]},{"e":"ð¹ð²","d":"flag: Turkmenistan","c":8,"a":["turkmenistan"]},{"e":"ð¹ð³","d":"flag: Tunisia","c":8,"a":["tunisia"]},{"e":"ð¹ð´","d":"flag: Tonga","c":8,"a":["tonga"]},{"e":"ð¹ð·","d":"flag: Turkey","c":8,"a":["tr"],"t":["turkey"]},{"e":"ð¹ð¹","d":"flag: Trinidad & Tobago","c":8,"a":["trinidad_tobago"]},{"e":"ð¹ð»","d":"flag: Tuvalu","c":8,"a":["tuvalu"]},{"e":"ð¹ð¼","d":"flag: Taiwan","c":8,"a":["taiwan"]},{"e":"ð¹ð¿","d":"flag: Tanzania","c":8,"a":["tanzania"]},{"e":"ðºð¦","d":"flag: Ukraine","c":8,"a":["ukraine"]},{"e":"ðºð¬","d":"flag: Uganda","c":8,"a":["uganda"]},{"e":"ðºð²","d":"flag: U.S. Outlying Islands","c":8,"a":["us_outlying_islands"]},{"e":"ðºð³","d":"flag: United Nations","c":8,"a":["united_nations"]},{"e":"ðºð¸","d":"flag: United States","c":8,"a":["us"],"t":["flag","united","america"]},{"e":"ðºð¾","d":"flag: Uruguay","c":8,"a":["uruguay"]},{"e":"ðºð¿","d":"flag: Uzbekistan","c":8,"a":["uzbekistan"]},{"e":"ð»ð¦","d":"flag: Vatican City","c":8,"a":["vatican_city"]},{"e":"ð»ð¨","d":"flag: St. Vincent & Grenadines","c":8,"a":["st_vincent_grenadines"]},{"e":"ð»ðª","d":"flag: Venezuela","c":8,"a":["venezuela"]},{"e":"ð»ð¬","d":"flag: British Virgin Islands","c":8,"a":["british_virgin_islands"]},{"e":"ð»ð®","d":"flag: U.S. Virgin Islands","c":8,"a":["us_virgin_islands"]},{"e":"ð»ð³","d":"flag: Vietnam","c":8,"a":["vietnam"]},{"e":"ð»ðº","d":"flag: Vanuatu","c":8,"a":["vanuatu"]},{"e":"ð¼ð«","d":"flag: Wallis & Futuna","c":8,"a":["wallis_futuna"]},{"e":"ð¼ð¸","d":"flag: Samoa","c":8,"a":["samoa"]},{"e":"ð½ð°","d":"flag: Kosovo","c":8,"a":["kosovo"]},{"e":"ð¾ðª","d":"flag: Yemen","c":8,"a":["yemen"]},{"e":"ð¾ð¹","d":"flag: Mayotte","c":8,"a":["mayotte"]},{"e":"ð¿ð¦","d":"flag: South Africa","c":8,"a":["south_africa"]},{"e":"ð¿ð²","d":"flag: Zambia","c":8,"a":["zambia"]},{"e":"ð¿ð¼","d":"flag: Zimbabwe","c":8,"a":["zimbabwe"]},{"e":"ð´ó §ó ¢ó ¥ó ®ó §ó ¿","d":"flag: England","c":8,"a":["england"]},{"e":"ð´ó §ó ¢ó ³ó £ó ´ó ¿","d":"flag: Scotland","c":8,"a":["scotland"]},{"e":"ð´ó §ó ¢ó ·ó ¬ó ³ó ¿","d":"flag: Wales","c":8,"a":["wales"]}]}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	!function() {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = function(result, chunkIds, fn, priority) {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var chunkIds = deferred[i][0];
/******/ 				var fn = deferred[i][1];
/******/ 				var priority = deferred[i][2];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	!function() {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			670: 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = function(parentChunkLoadingFunction, data) {
/******/ 			var chunkIds = data[0];
/******/ 			var moreModules = data[1];
/******/ 			var runtime = data[2];
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkjodit"] = self["webpackChunkjodit"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__(33594);
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});